[
  {
    "id": 69442,
    "summary": "Case sensitivity of http content-type",
    "description": "Get unexpected response when post with uppercase content-type field.\nSee:\n-----------------------------------------------------------------------\ncurl -X POST http://localhost/echo.jsp?ver=2024.11.14 -H \"Content-Type: application/x-www-form-urlencoded\" -d username=tomcat1\n\nParameter name & value pair: ver=2024.11.14\nParameter name & value pair: username=tomcat1\n-----------------------------------------------------------------------\n\ncurl -X POST http://localhost/echo.jsp?ver=2024.11.14 -H \"Content-Type: APPLICATION/x-www-form-urlencoded\" -d username=tomcat1\n\nParameter name & value pair: ver=2024.11.14\n-----------------------------------------------------------------------",
    "comments": [
      "Created attachment 39930\nTestcase\n\ntestcase added.",
      "For the record. RFC 2045, section 2:\n\nAll media type values, subtype values, and parameter names as defined are case-insensitive.  However, parameter values are case-sensitive unless otherwise specified for the specific parameter.\n\nNote: charset is one of the explicitly case insensitive values\n\nWe need to fix this and should check if there are any other places where we are treating the type, subtype or parameter name as case sensitive.",
      "Also RFC 9110 HTTP Semantics\nsection 8.3.1. Media Type\nhttps://datatracker.ietf.org/doc/html/rfc9110#section-8.3.1\n\n\"The type and subtype tokens are case-insensitive.\"\n(followed by examples)",
      "At the same time HTML specification specifies the actual value being sent by a browser as lowercase:\nhttps://html.spec.whatwg.org/#submit-body\n\n\"Let mimeType be `application/x-www-form-urlencoded`.\"\n\n(enctype is an enumerated attibubute, parsed case-insensitively,\nhttps://html.spec.whatwg.org/#enumerated-attribute\n\nbut once it is parsed, the processing uses a specific value for mimeType.)",
      "Clearly a bug that does not exist in the real world.",
      "Yes. Developers have to choose lowercase media-type after he find out that uppercase media-type not work on tomcat server in real world, even http rfc explicitly declare which is case-insensitive.",
      "org.springframework.util.MimeType -- parse type and subtype in lowercase internally.\n```java\n\tpublic MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {\n\t\tAssert.hasLength(type, \"'type' must not be empty\");\n\t\tAssert.hasLength(subtype, \"'subtype' must not be empty\");\n\t\tcheckToken(type);\n\t\tcheckToken(subtype);\n\t\tthis.type = type.toLowerCase(Locale.ROOT);\n\t\tthis.subtype = subtype.toLowerCase(Locale.ROOT);\n\t\tif (!CollectionUtils.isEmpty(parameters)) {\n\t\t\tMap<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ROOT);\n\t\t\tparameters.forEach((parameter, value) -> {\n\t\t\t\tcheckParameters(parameter, value);\n\t\t\t\tmap.put(parameter, value);\n\t\t\t});\n\t\t\tthis.parameters = Collections.unmodifiableMap(map);\n\t\t}\n\t\telse {\n\t\t\tthis.parameters = Collections.emptyMap();\n\t\t}\n\t}\n```",
      "Request parameters parsing is the only location that did not have a toLowerCase.\nThis will be fixed in 9.0.98, 10.1.34 and 11.0.2."
    ],
    "creation_ts": "2024-11-14T09:11:20Z",
    "fixes": [
      69442
    ]
  },
  {
    "id": 64712,
    "summary": "javax.servlet.http.authType not evaluated after JASPIC authentication success",
    "description": "According to the JASPIC 1.1 specification (section 3.8.4) a ServerAuthModule should be able to specify the authType by returning it under the key \"javax.servlet.http.authType\" in the map of the messageInfo object. Tomcat ignores the map and simply sets the authType to \"JASPIC\".\n\nHere is the code form AuthenticatorBase:\nMap map = state.messageInfo.getMap();\nif (map != null && map.containsKey(\"javax.servlet.http.registerSession\")) {\n    register(request, response, principal, \"JASPIC\", null, null, true, true);\n} else {\n    register(request, response, principal, \"JASPIC\", null, null);\n}\n\nIn my opinion the hard-coded authType \"JASPIC\" should be replaced by:\nmap.getOrDefault(\"javax.servlet.http.authType\", \"JASPIC\")",
    "comments": [
      "[Off-topic: Where can I find the text of the JASPIC spec? I don't seem to be able to find it with obvious internet searches.]",
      "(In reply to Robert Rodewald from comment #0)\n> In my opinion the hard-coded authType \"JASPIC\" should be replaced by:\n> map.getOrDefault(\"javax.servlet.http.authType\", \"JASPIC\")\n\nIt's tough to tell what Tomcat expects to do with that value (currently \"JASPIC\"). It's used internally as the request-auth-type and session-auth-type but I don't see any published list of allowed values, there.\n\nWhat would happen if the JASPIC provider returned \"SSL\" as the auth-type. Is that legal and/or expected?",
      "(In reply to Christopher Schultz from comment #1)\n> [Off-topic: Where can I find the text of the JASPIC spec? I don't seem to be\n> able to find it with obvious internet searches.]\n\nNew sources: https://github.com/eclipse-ee4j/authentication\nOld sources: https://github.com/javaee/jaspic-spec",
      "I would say that there can't be a list of allowed values for authType as the idea behind the JASPIC ServerAuthModule is to plug in new authTypes, e.g. Bearer-Auth or other SSO modules.\n\nLet's suppose you want to plug in two SAMs, fist does Bearer-Auth (e.g. JSON Web Tokens) and the second does BASIC auth. Each module should be able to set the authType accordingly.\n\nI suppose that's why the spec does not impose any restrictions on the authType.",
      "(In reply to Robert Rodewald from comment #4)\n> I suppose that's why the spec does not impose any restrictions on the\n> authType.\n\nOkay. I'm largely ignorant of the details of JASPIC and I'm trying to familiarize myself with it as much as possible. I believe markt has been the primary Tomcat committer working on JASPIC so far. Hopefully I'll finally be able to change that :)\n\nIf the JASPIC provider can be \"trusted\" to pass-back a valid/meaningful autoType to the container, then I think it's perfectly reasonable to use that authType for later stages.\n\nMy only concern is that Tomcat might be looking for authType=JASPIC for certain things. If that's the case we'll need something more complicated in Tomcat to track *both* the indicator that JASPIC is in-use and also what the \"effective\" authType is via the JASPIC provider (which may be some kind of meta-provider, as you suggest).",
      "As far as Tomcat is concerned, this is an opaque value that is exposed via HttpServletRequest.getAuthType(). It should be fine to use the value provided by the ServerAuthModule.",
      "Created attachment 37427\nPatch for Bug 64712\n\n- Adds evaluation of \"javax.servlet.http.authType\" in messageInfo.getMap()\n- Removes unnecessary null-Check for map (can not be null as of spec and Tomcat implementation)",
      "Thanks for the patch. Additional comments on bug 64713.\n\nFixed in:\n- master for 10.0.0-M8 onwards\n- 9.0.x for 9.0.38 onwards\n- 8.5.x for 8.5.58 onwards"
    ],
    "creation_ts": "2020-09-04T12:19:34Z",
    "fixes": [
      64712
    ]
  },
  {
    "id": 64872,
    "summary": "Inefficient enum resolution in JSPs",
    "description": "Our large public-facing application uses many custom JSP tags with enum properties, for example:\n\n<my:tag enumProperty=\"${'hotFudge'}\"/>\n\nThe tag implements MyTag contains a corresponding property:\n\n public void setEnumProperty(MyEnum enumProperty)\n\nand the enum looks like:\n\npublic enum MyEnum {\n  hotFudge, whippedCream, cherries;\n}\n\nThe compiled JSP performs the full resolution of 'hotFudge' -> MyEnum.hotFudge on *every* request, even though the JSP compiler has enough information to directly reference the enum.  This results in a significant amount of needless work; profiling suggests it is around 10% of our JSP processing time.\n\nNote that the same optimization applies when the datatype is a hard-coded String (like above) or the datatype is boolean/Boolean.\n\nReplacing these evaluations with direct references results in:\n1. Lower cpu from not re-processing\n2. Lower heap usage because the expression caches are smaller\n3. Lower object creation rates because fewer helper objects are created\n4. Possible error catching during JSP compilation: if someone refers to a non-existent enum, that can be caught immediately.",
    "comments": [
      "Moving this to an enhancement.\n\nSection JSP.2.9 of the JSP specification sets out how references such as \"hotFudge\" are to be resolved. Enums are resolved at step 4 (static fields). For the optimisation to be valid, the compiler needs to be sure that \"hotFudge\" will not be resolved in steps 1, 2 or 3.\n\nStep 1 is simple to eliminate. It is the ImplicitObjectELResolver as long as the name does not match one of the implicit objects then the compiler knows in advance that this step won't resolve the reference.\n\nStep 2 is potentially problematic. For on-request compilation the compiler can check whether any resolvers have been added and - possibly - whether one of those resolvers would resolve the reference or not. Pre-compilation is more difficult as the compiler cannot know in advance if a resolver is going to be added via JspApplicationContext.addELResolver(ELResolver) as resolvers may be added by components of which the JSP compiler is not aware.\n\nStep 3 is simple to eliminate as, for a single attribute, the Stream EL resolver will not be used.\n\nWhat is the proposed solution for step 2?",
      "I think you're right that the letter of step #2 proscribes this change.  My subsequent text in no way attempts to undermine or change that statement.\n\nIn the vast majority of cases, when a JSP author uses the value \"${true}\" and the property type is Boolean, the author intends Boolean.TRUE.  A case that violates that would be closer to a bug than desired behavior.\n\nIn the vast majority of cases, when a JSP author refers to an enum by implicit name using the value \"${'hotFudge'}\" and such an enum exists, the author intends to use that.  I can conceive of a situation when centralized code wants to override all values of 'hotFudge' but that is rare at best, and alternative solutions exist.\n\nIn the vast majority of cases, when a JSP author uses a constant string \"${'constant'}\" and the targeted property is a String, they intend the property to contain the string \"constant\".  Here again I can conceive of a desire to override all strings with the value \"constant\" but this would also be rare, and alternative solutions exist.\n\nMost applications would choose significant efficiency improvements over the loss of these specific capabilities.\n\nWhich leaves us in the situation of a very clear specification versus a very clear performance win.  How can we resolve this?  My rough ideas:\n\n1. Provide a configuration flag, in which one value enables these optimizations and one value maintains strict compliance with the spec.  (default value is a separate question)\n2. Fudge the spec, with the argument that the efficiency gains outweigh a few edge cases.\n\nThoughts?  Thank you!",
      "Fudging the spec is not an option. Providing an option that provides non-spec compliant behaviour and is disabled by default is an option.\n\nThat said, I do wonder why expression language is being used in these instances rather than a scriptlet.\n\n<my:tag enumProperty=\"<%= hotFudge %>\"/>\n\nrather than\n\n<my:tag enumProperty=\"${'hotFudge'}\"/>\n\nshould give you exactly the behaviour you desire shouldn't it?\n\nI'd also expect it be possible to implement with some form of global search and replace. That approach strikes me as a rather less risky solution (both from an implementation point of view and a testing one) than an optimisation in the JSP compiler. It also means you would not be reliant on a Tomcat specific performance tweak should you decide to switch containers at some point.",
      "\"Fudging the spec is not an option.\" Understood.\n\n\"That said, I do wonder why expression language is being used in these instances rather than a scriptlet.\"  EL was originally used for this because a) it hid the details of the enums, b) it worked, c) no one understood the performance impacts vs. scriptlets, d) scriptlets are discouraged internally because of maintainability issues.\n\nYour search-and-replace suggestion could work, but given the size of our codebase and the sheer number of variations, it isn't feasible.\n\nMy view of this suggestion is a mechanism for making the existing behavior much faster - with the unfortunate exception that you pointed out.  Making adoption free or trivial (config flag) will maximize that benefit for Tomcat users and would give Tomcat an efficiency advantage over similar containers; in our case performance matters most and we wouldn't consider switching off Tomcat unless similar features were available on a competitor.\n\nIt sounds like you could support an \"accelerated JSP\" mode that defaults to off, and documentation clearly describes how it violates spec?",
      "Yes, I could support a feature like that.\n\nThe tricky part is going to be implementing it. The JSP engine doesn't have access to the internals of the EL parser. Just musing on that, are all the uses of the form property=\"${'literal-string'}\" so the process we are trying to short-cut is the literal to appropriate type coercion?",
      "We have a Tomcat8 implementation deployed that addresses the following cases:\n\nBoolean/boolean properties:\nvalue=\"true\"\nvalue=\"${true}\"\nvalue=\"${'true'}\"\n\nString properties:\nvalue=\"${'myString'}\"\n\nEnum properties:\nvalue=\"hotFudge\"\nvalue=\"${'hotFudge'}\"\n\nWe considered the literal conversions to be quite safe, but the others were debated. \n- For booleans we decided that anyone who wrote true but wanted false could fix their own problem.\n- For enums, our codebase contained many places where engineers forgot to use the literal syntax, so there was substantial value in taking a risk.  We settled on applying the optimization when the string matched the name of an enum value, else allow the current EL evaluation to occur as normal.  The optimized JSPs would clearly reflect the author's intent when valid but fallback to previous behavior when intent wasn't clear.\n\nWe are satisfied with the balance we struck, but I'm interested in your take.",
      "That all seems reasonable to me.\n\nHow big is the patch? Generally, the smaller the patch the fewer the concerns around size of patch vs how widely used the feature is likely to be.",
      "Our internal patch contained more than one change (the release process was challenging) but separating out this change comes to around 60 lines of code across two files.\n\nHowever, that patch is not up to Tomcat's standards for inclusion (unit tests, a few design considerations, etc.) so for this purpose I consider it \"inspiration\" rather than something we can directly integrate.  And to be clear, I am personally responsible for those deficiencies.  :)",
      "Understood. Any chance you could provide that patch anyway? Saves re-inventing the wheel.",
      "I'll have to run it past the lawyers, etc.  I'll submit the request immediately.  Previous submissions have taken between one day and two weeks but this should be an easy one.",
      "Tx.",
      "Created attachment 37561\nExtract from Tomcat8 optimizations\n\nApproval was rapid, and the extract is attached.  It is not a patch file because of the issues described previously, however I added comments that I hope will help.  During this process I noticed what appears to be double-coverage of the Boolean/boolean case; that could be an error during development or perhaps I can't remember the good reason for it.",
      "Thanks for that.\n\nI think it should be possible to use the extension point added for bug 54239 to implement this. I'll take a look.",
      "Here is a first pass at a possible approach using ELInterpreter.\n\nThis doesn't address the attr=\"enumValue\" case but my reading of the attached patch is that it doesn't handle that case either. Since that isn't EL a different approach is required. Enum isn't explicitly listed in JSP.1-11 but it works because there is a default PropertyEditor for Enums. I suspect bypassing that would be safe in most cases but there is always the possibility of custom PropertyEditors so I think a similar hook to ELInterpreter (StringInterpreter?) would be required.\n\nhttps://github.com/markt-asf/tomcat/commit/8e7cfc707124b3bb86967d86f9220ed5ab0e5f49\n\nLet me know what you think.",
      "Reading over your commit, it is vastly superior to my implementation, and I am grateful for your efforts.  :)\n\n\nThe attached patch addresses the attr=\"enumValue\" case using a code branch towards the bottom of the file, with this comment:\n\n// jengebr - added a branch for enums that are not exact literals, for example \"hotFudge\" \n\n\n\nTwo other points:\n1. Good call on the inverted quotes, attr='${\"hotFudge\"}'.  That never even crossed my mind.\n2. How is this activated?  System property, host context, etc.",
      "Glad you think it is heading in the right direction. It might not look it but the important parts are heavily based on the patch you provided.\n\nI am only going from source code rather than testing but I don't think that enum branch will have an effect. If I am reading the nested if statements correctly it is in a \"if (attr.isELInterpreterInput())\" which means \"hotFudge\" won't enter that branch because it isn't EL. The \"hotFudge\" case is handled later by the PropertyEditor branch.\n\nActivation is via:\n- ServletContext attribute (set programmatically)\n- ServletContext attribute init parameter (set in web.xml)\n\nFull details at:\nhttps://github.com/markt-asf/tomcat/blob/master/java/org/apache/jasper/compiler/ELInterpreterFactory.java#L50",
      "Thanks for the activation info, that's perfect.\n\nI've verified the enum case works as I intended on our production servers; the compiled java code correctly points directly to the enum rather than any runtime evaluation.  That suggests my code extract missed something relevant.\n\nThis particular case is *not* a must-have, but certainly is a nice-to-have.  Is there a practical way to cover it without overly complicating what you've already written?",
      "ACK re the Enum handling. I'll take another look at options for that. I'm still leaning towards something like a \"StringInterpreter\".",
      "A StringInterpreter is a good idea.  I've had the nagging feeling that there are other places where this pattern is useful and I just haven't found them yet.... centralizing the logic will make that easier.\n\nNow that I mention other places, etc. - constant numbers?",
      "Most of the String conversion (outside of EL) should be reasonably optimal already. Enums look to be by far the most likely potential optimisation there unless folks are using custom PropertyEditors.\n\nThe custom ELInterpreter could easily be extended for numerics. char / Character is the only remaining standard EL conversion. Could easily add that too. Actually, aligning with the standard type conversion rules in the EL spec is likely the way to go.",
      "Sounds like a good plan!",
      "Updated branch:\nhttps://github.com/markt-asf/tomcat/tree/bz-64872\n\nThe tests for the optimised ELInterpreter show about 10% improvement. The tests for the custom StringInterpreter (that handles attr=\"EnumConstant\") show an order of magnitude improvement.\n\nIf this looks good to you, the next step will be a discussion on the dev@ list to figure out which bits ship as part of standard Tomcat.",
      "My constant reaction is \"I'm glad you're doing this and not me.\"  Your expertise is creating a far better implementation than I did!  Thank you for your hard work.\n\nThe code looks solid; the only thing that caught my eye was the non-static logger.  That's typically bad practice for production code.  Are you sure it's necessary?",
      "There can be issues around loggers and class loading with Jasper. Tomcat has a custom LogManager that ID's logger by a combination of name and ThreadContextClassLoader (rather than just name).\n\nDepending on when the class is loaded you can see issues. These classes were affected but there are ways around that. I'll take a look.",
      "I noticed that some of the boxed/primitive handling (e.g. boolean, char) are handled in separate branches and others (e.g. long, int, short) are handled together in a single branch (with sub-branches using type.isPrimitive).\n\nIs there any reason to use the two separate styles or did you just change your mind halfway through the implementation?",
      "The duplication of the try/catch and Type.valueOf() struck me as too much to duplicate for the numerical types.\n\nchar and boolean were much more borderline whether it there was enough code duplication to merit merging them. In the end I opted not to but you could probably make a case for either approach.",
      "For planning purposes, approximately when can we expect to see this in Tomcat 9 and 10?",
      "There needs to be agreement from the Tomcat committers to add all of this. I'm confident the new interface will be accepted. I'm not sure about the optimised implementations.\n\nI can't be any moire precise that 2021Q1 at the moment.",
      "Thank you!  :)",
      "Fixed in:\n- 10.0.x for 10.0.1 onwards\n- 9.0.x for 9.0.42 onwards\n- 8.5.x for 8.5.62 onwards\n\nRegarding the non-static logger, nearly all the logs in Jasper are non-static to avoid issues with memory leaks on web application reload (the explanation for that is a longish story - ask on dev@ if interested). The impact is a small increase in memory footprint if more than one web application is deployed on a Tomcat instance.",
      "Wondeful, thank you very much!  And the non-static Logger does make sense as a safety measure."
    ],
    "creation_ts": "2020-11-04T19:48:08Z",
    "fixes": [
      64872
    ]
  },
  {
    "id": 65265,
    "summary": "getVMInfo() in Diagnostics.java throws exceptions on jdk > 8",
    "description": "I believe I have discovered a bug in the vminfo command of the Manager\napplication.\n\nEnvironment:\n\n- Ubuntu 20.04.02 LTS\n- Openjdk-11\n- Tomcat 10.0.4 downloaded directly from https://tomcat.apache.org/download-10.cgi (i.e. not installed from via the operating system package manager)\n\nSteps to reproduce:\n\n- Load http://localhost:8080/manager/text/vminfo in your browser\n\nExpected result: big page of info about the jvm.\n\nActual result: HTTP Status code 500, with one line of text \u201cOK - VM info\u201d.\n\nLog output:\n\n25-Mar-2021 14:49:41.042 SEVERE [http-nio-8080-exec-4]\norg.apache.catalina.core.StandardWrapperValve.invoke Servlet.service() for\nservlet [Manager] in context with path [/manager] threw exception\n\tjava.lang.UnsupportedOperationException: Boot class path mechanism is not\nsupported\n at\njava.management/sun.management.RuntimeImpl.getBootClassPath(RuntimeImpl.java:99)\n at org.apache.tomcat.util.Diagnostics.getVMInfo(Diagnostics.java:562)\n at org.apache.tomcat.util.Diagnostics.getVMInfo(Diagnostics.java:480)\n at org.apache.catalina.manager.ManagerServlet.vmInfo(ManagerServlet.java:616)\n at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:387)\n at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:663)\n at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:770)\n at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\n at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\n at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\n at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\n at\norg.apache.catalina.filters.HttpHeaderSecurityFilter.doFilter(HttpHeaderSecurityFilter.java:126)\n at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\n at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\n at\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\n at\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\n at\norg.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:668)\n at\norg.apache.catalina.valves.RequestFilterValve.process(RequestFilterValve.java:378)\n at org.apache.catalina.valves.RemoteAddrValve.invoke(RemoteAddrValve.java:56)\n at\norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n at\norg.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:690)\n at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\n at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:353)\n at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\n at\norg.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n at\norg.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:870)\n at\norg.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1696)\n at\norg.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n at\njava.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\n at\njava.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\n at\norg.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n at java.base/java.lang.Thread.run(Thread.java:832)\n\nAfter some research, I believe I understand the root cause of this problem. Many\njdk > 8 do not implement getBootClassPath(). If I follow the same steps to\nreproduce but use openjdk 8, the vminfo command works as expected.\n\nAs the log indicates, the exception is raised by the getVMInfo() method in\nDiagnostics.java\n(https://github.com/apache/tomcat/blob/master/java/org/apache/tomcat/util/Diagnostics.java).\n\nI think the solution is to guard the runtimeMXBean.getBootClassPath() method\ncall with a check that runtimeMXBean.isBootClassPathSupported() is true.",
    "comments": [
      "I agree, isBootClassPathSupported should have been used since the exception is \"normal\". I'll fix that.",
      "This will be in 10.0.6, 9.0.46 and 8.5.66."
    ],
    "creation_ts": "2021-04-26T02:21:37Z",
    "fixes": [
      65265
    ]
  },
  {
    "id": 65358,
    "summary": "Possible EL Bug \u2014 Method Matching with Varargs",
    "description": "For the following EL expression below, which method should be matched?  \n\n   #{testBean.getMessage(testBean.value1)}.  //  (value1 is a String) \n\n1) \n    public String getMessage(final EnumInterface enumInstance) {\n        return \u201cgetMessage(final EnumInterface enumInstance)\u201d;\n    }\n\n2) \n    public String getMessage(final String messageKey, final Serializable\u2026 arguments) {\n        return \u201cgetMessage(final String messageKey, final Serializable\u2026 arguments)\u201d;\n    }\n\nNote that TestBean is of type EnumInterface. I\u2019ve provided a reproducible app with the source on Github. (1)\n\nPrior to the EL varargs patch (2), only the first method was matched. After the patch, the second method is then matched instead. It seems that first method is more appropriate rather than the second?\n\nPrior to 9.0.3:\nThe first method is an assignableMatch. \nThe second method (during the wrapper loop) is skipped since the parameter number check (line 240) evaluated to true.\nThe first method is therefore the only option available. \n\nCurrent Behavior: \nThe new varargs checks do not skip the second method this time around. \nBoth methods are an assignableMatch, but the second is also a coercibleMatch. \nTherefore, the code selects the second as a better match, from what I gathered? \n\nI\u2019m a bit stumped. This seems to be a valid scenario, but, then again, maybe it\u2019s not a bug? I would appreciate any feedback. \n\nThank you. \n\n\n1) https://github.com/volosied/VarargsELBug\n\n2) https://github.com/apache/tomcat/commit/b7ce5679b9e6a073dadbc31e6ecde12ad1e0ede8#diff-f5b7c13f66b3d070a6b1c1713ad4b60fd70b26f579a746edc8fe9f19109243b2L240-L244   -- Added in 9.0.3.",
    "comments": [
      "The EL spec is silent on how methods should be selected when there isn't an exact match between arguments and method parameters.\n\nGenerally, the rule Tomcat tries to follow is to pick the same method as the Java compiler would.\n\nIn this instance if you call:\ntestBean.getMessage(testBean.getValue1())\n\nthen the Java compiler will call:\ngetMessage(final EnumInterface enumInstance)\n\nwhich is what I would expect. I would also expect EL to behave the same way. It doesn't.\n\nI need to dig into what is going on with EL. On the surface it looks like a bug but it needs some further investigation to determine what is going on and why.",
      "Yes, this is definitely an EL bug. The root cause is the weight given in the method mapping to a potential method match where the potential matching method uses varArgs but the EL expression doesn't specify any varArgs. Currently this is treated as an assignable match for the varargs parameter which is too strong a match.\n\nI need to write some test cases to explore how the Java compiler behaves around this particular edge case. With that information in hand, I'll know how big a change is required to javax.el.Util.findWrapper(). I have a one line fix that addresses the specific issue described here (and doesn't cause any of the existing tests to fail) but I want to make sure there aren't any other related edge cases that also need to be addressed.",
      "Thanks for looking into it, Mark!\n\nJust realized I made two mistakes in the original post.  I should have said\n- value1 is of type TestEnum.\n- TestEnum of type EnumInterface \n\nGlad I linked the correct example, at least.",
      "The one-line fix wasn't sufficient. A broader fix was required that in essence looked at the number of varargs used and preferred the method that matched using fewest varargs.\n\nFixed in:\n- 10.1.x for 10.1.0-M1 onwards\n- 10.0.x for 10.0.7 onwards\n- 9.0.x for 9.0.47 onwards\n- 8.5.x for 8.5.67 onwards",
      "I was looking at this again (on 9.0.50).\n\nI think there's still a bug here? Using the code below: \n\nBean bean  = new Bean();\n\n// JVM \nbean.bark(bean.getDog()); // -> bark(Animal animal)\n\n// EL\n${ bean.bark(bean.dog) } // - > bark(Dog dog, String... text)\n\n_______\n\npublic interface Animal {\n\n}\n\npublic class Dog implements Animal {\n    \n}\n\npublic class Bean {\n\n    public String bark(Animal animal){\n        return \"bark(Animal animal)\";\n    }\n\n    public String bark(Dog dog, String... text){\n        return \"bark(Dog dog, String... text)\";\n    }\n\n    public Animal getDog(){\n        System.out.println(\"Returning Dog of type Animal\");\n        return new Dog();\n    }\n\n}",
      "Yes, that looks like a bug to me. The JLS states (in rather more precise language) that a method match that doesn't use varargs beats one that does.\n\nI'll work on a fix.",
      "Fixed in:\n- 10.1.x for 10.1.0-M3 onwards\n- 10.0.x for 10.0.9 onwards\n- 9.0.x for 9.0.51 onwards\n- 8.5.x for 8.5.70 onwards",
      "Hey Mark,\n\nI hate to keep following up on this, but I think it's still not quite right.\n\nPlease look at these two test cases I added: \n\n https://github.com/volosied/tomcat/commit/d6623d814ea30674fa27bda7dcbff3b1c268ba0b\n\n\nHowever, this patch I created seems to resolve both scenarios without another other failures.\n\nhttps://github.com/volosied/tomcat/commit/d876f1e57a265970e0653c2a906b66f18d91784a",
      "Thanks for the test cases. They demonstrate very well the ambiguity that exists in the current EL 4.0 spec.\n\nThe question is, essentially, one of priority of matches. If we look at the Java language to start with, if a set of parameters could match multiple methods then the \"best\" match is chosen based on these checks in this order (the comparison ends as soon as a rule determines a method is better):\n- a non-varargs method is better than a var-args method\n- methods that match more exact parameter methods are better\n- methods that match more assignable parameters are better\n- methods that match fewer parameters using varargs are better\n\nWhat complicates things for EL is that it adds type coercion.\n\nThe tests in the attached patch assume that type coercion is lower priority than \"a non-varargs method beats a var-args method\". This is not how the code was designed. The code was designed to implement:\n- a non-varargs method is better than a var-args method\n- methods that match more exact parameter methods are better\n- methods that match more assignable parameters are better\n- methods that match more coercible parameters are better\n- methods that match fewer parameters using varargs are better\n\nThe next release of the EL spec will contain a clarification to this effect. Given this bug report, I'll probably add to that text to make clear that non-varargs still beats varargs even when coercion is used.\n\nTherefore, the matches observed in the tests are as expected because coercing an Integer to String is preferred to matching an Integer varargs.",
      "Thank for the detailed explanation, Mark!\n\nI'll leave this issue alone then."
    ],
    "creation_ts": "2021-06-05T01:57:54Z",
    "fixes": [
      65358
    ]
  },
  {
    "id": 42361,
    "summary": "POST content type incorrect for multipart forms after login",
    "description": "When using a form with a custom encoding (e.g. \"multipart/form-data\"), the\ncontent type is not restored after a redirect to a login page (auth-method = FORM).\n\nTo reproduce:\n- A page that POSTs using multipart/form-data encoding (or anything other than\napplication/x-www-form-urlencoded) to a result page that is protected by a login\npage (auth-method=FORM) is invoked.\n- Even though the multipart POST data exists (verified by reading input stream\nof request from result page) the content type of the request is always\n\"application/x-www-form-urlencoded\".  \n- This only happens when redirected to the login page first.  It does not happen\nif already logged in.",
    "comments": [
      "Created attachment 20152\nMultipart POST test case WAR\n\nTo reproduce the bug:\n- Browse to the data entry page, e.g. http://localhost:8080/multipartposttest/\n- Fill in some values (fields may be left blank, don't make file too big)\n- Press 'send this' button to submit form\n- A redirect to the login page will occur.  Expects a user that has 'manager'\nrole.\n- Results page shows some header values and request contents.  Note the content\ntype is \"application/x-www-form-urlencoded\" which is incorrect - should be\nmultipart/form-data encoding.  Everything else seems correct.\n- Go back to first data entry page using back button on browser and resubmit\nform.  Because already logged in you will go directly to results page.\n- Note content type is now correct, e.g. \"multipart/form-data;\nboundary=---------------------------187161971819895\".",
      "Created attachment 20153\nPatch for org/apache/catalina/authenticator/FormAuthenticator.java",
      "Created attachment 20154\nPatch for org/apache/catalina/authenticator/SavedRequest.java",
      "Looks like the cause could be due to\norg.apache.catalina.authenticator.FormAuthenticator class hardcoding the content\ntype when restoring POST requests:\n\nL431: contentType.setString(\"application/x-www-form-urlencoded\");\n\nCreated patch that saves the content type to the SavedRequest object and\nrestores it when needed.  This seems to fix the issue.",
      "The fix has been applied to svn and will be included in 5.5.24 and 6.0.14.\n\nMany thanks for your patch."
    ],
    "creation_ts": "2007-05-08T16:06:35Z",
    "fixes": [
      42361
    ]
  },
  {
    "id": 51278,
    "summary": "Unable to override default servlet other than in main web.xml",
    "description": "The default web.xml gets merged into the application's web.xml before processing of fragments, annotations and ServletContextInitializers. This means it can only be overridden in the application's web.xml. It should be possible to override in fragments, annotations and ServletContextInitializers.",
    "comments": [
      "Thanks for filing this issue, Mark.  I encountered this behavior when designing a ServletContainerInitializer for the Spring Framework.  The SCI declares @HandlesTypes for a spring-specific SPI (WebApplicationInitializer).  The intent of this interface is to allow users a convenient and automatically detected way to replace web.xml with code.\n\nMany users map Spring's DispatcherServlet to '/', and this works fine when done from web.xml.  However, for the reasons you've described, a direct translation of this mapping into code does not work, because Tomcat's DefaultServlet has already been mapped.\n\nYour suggested resolution sounds like just what we need in the immediate term.  As for the future (i.e. Servlet 3.1), perhaps the EG could consider making the overriding rules a bit more flexible.  For example, FilterRegistration#addMappingForUrlPattern[1] currently accepts a boolean \"isMatchAfter\" argument that suggests this kind of flexibility.\n\nIn any case, short term or long, the question is whether mapping to '/' will be portable.  I'm about to try this same scenario against Jetty and Glassfish; it will be interesting to see if they too have ordering issues with default mappings to '/', or perhaps have already addressed this very scenario.\n\n[1] http://download.oracle.com/javaee/6/api/javax/servlet/FilterRegistration.html#addMappingForUrlPatterns(java.util.EnumSet, boolean, java.lang.String...)",
      "update: I've just tried this same ServletContainerInitializer scenario under Glassfish 3.1 and the override works as desired.  This is especially interesting given that the catalina DefaultServlet is mapped to '/' in this environment as well.  It suggests that they have specifically addressed this issue, perhaps in a fashion similar to the one Mark describes above.",
      "That would seem to conflict with the exposure of servlet registration events in the 3.0 API... a registration event that occurs later isn't supposed to conflict with ones occurring earlier (for Servlets, that is... I realize we're discussing Filters, here).",
      "(In reply to comment #3)\n> That would seem to conflict with the exposure of servlet registration events in\n> the 3.0 API... a registration event that occurs later isn't supposed to\n> conflict with ones occurring earlier (for Servlets, that is... I realize we're\n> discussing Filters, here).\n\nHi Christopher,\n\nActually, we are talking primarily about Servlets here.  I was only mentioning the FilterRegistration API momentarily above.\n\nThe critical issue is this: Tomcat users can override the DefaultServlet's mapping to '/' within web.xml, but cannot do so within a ServletContainerInitializer (or presumably any other programmatic context).  This inconsistency means that web.xml cannot be completely replaced by code in a Tomcat environment, which is what we're aiming to facilitate.\n\nI've been unable to pinpoint a passage in the spec that spells out that the status quo is the way things *should* work, but then again - and if I understand things correctly - the spec is silent on the way Tomcat registers its DefaultServlet, so we're probably already in unspecified territory, yes?\n\nEven if the spec did mandate or strongly suggest the status quo, I would go so far as to argue that the spec should be changed.  The ServletContext API now allows for full programmatic registration, let's let users take advantage of it!",
      "(In reply to comment #4)\n> Actually, we are talking primarily about Servlets here.  I was only mentioning\n> the FilterRegistration API momentarily above.\n\nRight. I was just pointing-out that the rules for Servlets and Filters are apparently different.\n\n> The critical issue is this: Tomcat users can override the DefaultServlet's\n> mapping to '/' within web.xml, but cannot do so within a\n> ServletContainerInitializer (or presumably any other programmatic context). \n> This inconsistency means that web.xml cannot be completely replaced by code in\n> a Tomcat environment, which is what we're aiming to facilitate.\n\nYup, I get it, and you certainly /should/ be able to set these things from within the code. Tomcat's DefaultServlet should be a last-resort that handles requests only when no other servlet can be found.\n\n> I've been unable to pinpoint a passage in the spec that spells out that the\n> status quo is the way things *should* work, but then again - and if I\n> understand things correctly - the spec is silent on the way Tomcat registers\n> its DefaultServlet, so we're probably already in unspecified territory, yes?\n\nThe closest I could come was looking at the javadoc for the addServlet and addFilter methods in ServletContext, which have some things to say about the behavior of those methods when a URL mapping already exists.\n\nI guess the question is really whether the DefaultServlet being mapped to \"/\" really \"counts\" as a traditional mapping, or if the DefaultServlet should be considered something that just handles all otherwise-unhandled requests. If you think about it that way, then registration of a Servlet on \"/\" should be able to happen at any time during the lifecycle of the webapp (even long after the context has been started) as long as no previous registration has occurred.\n\nI guess what I'm suggesting is that we might want to register DefaultServlet in a way that is orthogonal to the registration of all other servlets so we don't have to have special-case handling for processing web.xml, then annotations, then fragments, then running all ServletContextListeners, then processing  conf/web.xml to get around this apparent oddity.",
      "This has now been fixed (it wasn't hard to fix as I feared) in 7.0.x and will be included in 7.0.15 onwards.",
      "That's great news, Mark!  We'll be sure to test it out when 7.0.15 drops - and this is perfect timing for the forthcoming Spring 3.1 M2.",
      "Just had the same issue in 7.0.30, as reported at https://issues.apache.org/bugzilla/show_bug.cgi?id=53863"
    ],
    "creation_ts": "2011-05-28T07:12:37Z",
    "fixes": [
      51278
    ]
  },
  {
    "id": 43675,
    "summary": "Classloader leak in org.apache.tomcat.util.http.ServerCookie",
    "description": "I'm investigating problems related to PermGen saturation on hot redeploy of my \nweb applications. Using jhat I found that the class \norg.apache.catalina.util.http.ServerCookie has a static reference to my webapp \nclassloader through the log field. This is what jhat shows:\n\nStatic reference from org.apache.tomcat.util.http.ServerCookie.log (from class \norg.apache.tomcat.util.http.ServerCookie) :\n--> org.apache.commons.logging.impl.Log4JLogger@0x66826ed8 (16 bytes) (??:)\n--> class org.apache.commons.logging.impl.Log4JLogger (84 bytes) (??:)\n--> org.apache.catalina.loader.WebappClassLoader@0x6632eb38 (152 bytes) \n\nIt is similar to bug#42172.\n\nThe problem shows in Tomcat 5.5.25",
    "comments": [
      "Same problem with org.apache.jasper.xmlparser.ParserUtils.errorHandler and \norg.apache.jasper.xmlparser.ParserUtils.entityResolver.\n\nStatic reference from org.apache.jasper.xmlparser.ParserUtils.errorHandler \n(from class org.apache.jasper.xmlparser.ParserUtils) :\n--> org.apache.jasper.xmlparser.MyErrorHandler@0x6657ffb8 (12 bytes) (field \nlog:)\n--> org.apache.commons.logging.impl.Log4JLogger@0x66580558 (16 bytes) (??:)\n--> class org.apache.commons.logging.impl.Log4JLogger (84 bytes) (??:)\n--> org.apache.catalina.loader.WebappClassLoader@0x6632eb38 (152 bytes)\nStatic reference from org.apache.jasper.xmlparser.ParserUtils.entityResolver \n(from class org.apache.jasper.xmlparser.ParserUtils) :\n--> org.apache.jasper.xmlparser.MyEntityResolver@0x6657ffc8 (12 bytes) (field \nlog:)\n--> org.apache.commons.logging.impl.Log4JLogger@0x66580568 (16 bytes) (??:)\n--> class org.apache.commons.logging.impl.Log4JLogger (84 bytes) (??:)\n--> org.apache.catalina.loader.WebappClassLoader@0x6632eb38 (152 bytes)",
      "Patch proposed for tc6. If accepted, I'll propose a backport to 5.5.x",
      "Fixed in 6.0.x.",
      "Fixed in 5.5.x and will be included in 5.5.26 onwards."
    ],
    "creation_ts": "2007-10-23T01:32:34Z",
    "fixes": [
      43675
    ]
  },
  {
    "id": 58414,
    "summary": "Can not transfer empty string through Web Socket",
    "description": "Created attachment 33111\nExample of ServerEndpoint implementation.\n\nEvery time, when I try to transfer empty string through web socket I get an IllegalArgumentException from java.nio.Buffer#limit(int newLimit) because of negative new limit value. The reason of this issue is org.apache.tomcat.websocket.PerMessageDeflate#sendMessagePart(List<MessagePart> uncompressedParts)\nline:\n\n    // End of compressed message. Drop EOM bytes and output.\n    compressedPayload.limit(compressedPayload.limit() - EOM_BYTES.length);\n\ncompressedPayload.limit() has zero value and EOM_BYES.length has value, which greater than 0.",
    "comments": [
      "I've been able to reproduce this with some edits to the chat example that ships with Tomcat. Working on a fix now.",
      "Fixed in trunk, 8.0.x (for 8.0.27 onwards) and 7.0.x for 7.0.65 onwards."
    ],
    "creation_ts": "2015-09-15T21:49:38Z",
    "fixes": [
      58414
    ]
  },
  {
    "id": 66875,
    "summary": "Handling async error after spring already handled error",
    "description": "First reported as bug on Spring Boot(https://github.com/spring-projects/spring-boot/issues/36803). After some investigation I've been redirected by the spring team to post the bug here.\n\nReproduction steps with spring boot(tested on version 3.0.0 and 3.1.2):\n\n- Create spring initializr project with Kotlin and spring-boot-starter-web\n- Add org.jetbrains.kotlinx:kotlinx-coroutines-reactor dependency\n- Run following (Kotlin) code\n\n---\n@SpringBootApplication\nclass DemoApplication\nfun main(args: Array<String>) {\n    runApplication<DemoApplication>(*args)\n}\n@RestController\nclass Controller {\n    @GetMapping(\"suspend\")\n    suspend fun errorScenario() {\n        throw IllegalStateException(\"Double exception handling\")\n    }\n}\n\n@ControllerAdvice\nclass ExceptionHandler : ResponseEntityExceptionHandler() {\n    @ExceptionHandler(Exception::class)\n    fun handleUnexpectedException(\n        ex: Exception,\n        request: WebRequest\n    ): ResponseEntity<Any>? {\n        return handleException(\n            ErrorResponseException(\n                HttpStatus.INTERNAL_SERVER_ERROR,\n                ProblemDetail.forStatus(500),\n                ex\n            ), request\n        )\n    }\n}\n---\n\nWhen calling the /suspend endpoint (with postman) spring will catch the exception and create a response. If that response is has status 500 it will also set \"jakarta.servlet.error.exception\" with the caught exception.\nBecause of this, this code in org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(...) will trigger a second exception handling.\n\n---\nif (request.isAsyncDispatching()) {\n    connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);\n    Throwable t = (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);\n    if (t != null) {\n        asyncConImpl.setErrorState(t, true);\n    }\n}\n---\n\nThe result of this is that two response bodies, including body size, will be generated and returned. Postman will show that the request had a problem. This is because there is more data than the first body size reports, which is an invalid http response. Sniffing the response you can actually see the full response:\n\n---\nHTTP/1.1 500\nContent-Type: application/problem+json\nTransfer-Encoding: chunked\nDate: Tue, 08 Aug 2023 09:26:30 GMT\nConnection: close\n\n59\n{\"type\":\"about:blank\",\"title\":\"Internal Server Error\",\"status\":500,\"instance\":\"/suspend\"}\n6c\n{\"timestamp\":\"2023-08-08T09:26:30.705+00:00\",\"status\":500,\"error\":\"Internal Server Error\",\"path\":\"/suspend\"}\n---\n\nWhen calling the endpoint with chrome it will generate following error message, but only return a single response:\ns.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/suspend] as the response has already been committed. As a result, the response may have the wrong status code.\n\nThis bug goes for me far too deep into the inner workings and I don't know if this is a tomcat bug or spring should just not set the the request attribute \"jakarta.servlet.error.exception\". It is however notable that when using another server(jetty, undertow) underneath spring this issue does not occur. And that is probably why the spring team send me here.",
    "comments": [
      "I am unable to reproduce this with Spring Boot 3.1.3 (Tomcat 10.1.12). This looks to have been fixed by the fix for BZ 66841.\n\nThere are also additional fixes in 10.1.x for duplicate error handling.\n\n*** This bug has been marked as a duplicate of bug 66841 ***",
      "With the exact same code I do still run into the same issue as before. You might have not included org.jetbrains.kotlinx:kotlinx-coroutines-reactor as dependency. If that dependency is not added then tomcat calls are not executed in async mode.\n\nHere is the log output for Spring Boot v3.1.3 and Tomcat 10.1.12 for the aforementioned code.\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.1.3)\n\n2023-09-25T14:28:52.231+02:00  INFO 41884 --- [           main] com.example.demo.DemoApplicationKt       : Starting DemoApplicationKt using Java 18.0.2.1 with PID 41884 (...)\n2023-09-25T14:28:52.233+02:00  INFO 41884 --- [           main] com.example.demo.DemoApplicationKt       : No active profile set, falling back to 1 default profile: \"default\"\n2023-09-25T14:28:52.848+02:00  INFO 41884 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)\n2023-09-25T14:28:52.854+02:00  INFO 41884 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n2023-09-25T14:28:52.855+02:00  INFO 41884 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.12]\n2023-09-25T14:28:52.917+02:00  INFO 41884 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2023-09-25T14:28:52.918+02:00  INFO 41884 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 649 ms\n2023-09-25T14:28:53.190+02:00  INFO 41884 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''\n2023-09-25T14:28:53.194+02:00  INFO 41884 --- [           main] com.example.demo.DemoApplicationKt       : Started DemoApplicationKt in 1.251 seconds (process running for 1.71)\n2023-09-25T14:28:54.564+02:00  INFO 41884 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'\n2023-09-25T14:28:54.564+02:00  INFO 41884 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'\n2023-09-25T14:28:54.564+02:00  INFO 41884 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms\n2023-09-25T14:28:54.821+02:00 ERROR 41884 --- [nio-8080-exec-1] s.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/suspend] as the response has already been committed. As a result, the response may have the wrong status code.",
      "I have created a test case using the information provided including the org.jetbrains.kotlinx:kotlinx-coroutines-reactor dependency and am unable to recreate this issue.\n\nIf you still see an issue then I suspect there are additional steps required to create the reproducible test case that have not been provided. I suggest you provide a minimal Spring Boot project that demonstrates the issue.",
      "Here is a minimal project to reproduce it: https://github.com/nilskohrs/tomcat-bug-66875",
      "I've updated the example to spring boot 3.1.4 and still get this error on calling the endpoint:\n\n023-10-06T15:41:55.615+02:00 ERROR 53360 --- [nio-8080-exec-3] s.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/suspend] as the response has already been committed. As a result, the response may have the wrong status code.",
      "It is indeed possible to reproduce it, here is the debug log:\n\n2023-10-07T18:55:08.622+08:00 DEBUG 10702 --- [o-8080-Acceptor] o.apache.tomcat.util.threads.LimitLatch  : Counting up[http-nio-8080-Acceptor] latch=1\n2023-10-07T18:55:08.622+08:00 DEBUG 10702 --- [o-8080-Acceptor] o.apache.tomcat.util.threads.LimitLatch  : Counting up[http-nio-8080-Acceptor] latch=2\n2023-10-07T18:55:08.646+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.coyote.http11.Http11InputBuffer      : Before fill(): parsingHeader: [true], parsingRequestLine: [true], parsingRequestLinePhase: [0], parsingRequestLineStart: [0], byteBuffer.position(): [0], byteBuffer.limit(): [0], end: [0]\n2023-10-07T18:55:08.646+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.tomcat.util.net.SocketWrapperBase    : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@375c60d5:org.apache.tomcat.util.net.NioChannel@d287989:java.nio.channels.SocketChannel[connected local=/[0:0:0:0:0:0:0:1]:8080 remote=/[0:0:0:0:0:0:0:1]:63136]], Read from buffer: [0]\n2023-10-07T18:55:08.646+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.tomcat.util.net.NioEndpoint   : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@375c60d5:org.apache.tomcat.util.net.NioChannel@d287989:java.nio.channels.SocketChannel[connected local=/[0:0:0:0:0:0:0:1]:8080 remote=/[0:0:0:0:0:0:0:1]:63136]], Read direct from socket: [706]\n2023-10-07T18:55:08.646+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.coyote.http11.Http11InputBuffer      : Received [GET /suspend HTTP/1.1\nHost: localhost:8080\nConnection: keep-alive\nCache-Control: max-age=0\nsec-ch-ua: \"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\"\nsec-ch-ua-mobile: ?0\nsec-ch-ua-platform: \"macOS\"\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nSec-Fetch-Site: none\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8\n\n]\n2023-10-07T18:55:08.660+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.tomcat.util.http.Parameters   : Set query string encoding to UTF-8\n2023-10-07T18:55:08.661+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.authenticator.AuthenticatorBase    : Security checking request GET /suspend\n2023-10-07T18:55:08.662+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.catalina.realm.RealmBase      :   No applicable constraints defined\n2023-10-07T18:55:08.664+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.a.jaspic.AuthConfigFactoryImpl     : Loading persistent provider registrations from [/private/var/folders/mf/5hx78jfj1s12c3tnbk5vr0_c0000gn/T/tomcat.8080.3148371716981476226/conf/jaspic-providers.xml]\n2023-10-07T18:55:08.664+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.authenticator.AuthenticatorBase    : Not subject to any constraint\n2023-10-07T18:55:08.666+08:00  INFO 10702 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'\n2023-10-07T18:55:08.666+08:00  INFO 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'\n2023-10-07T18:55:08.666+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected StandardServletMultipartResolver\n2023-10-07T18:55:08.666+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected AcceptHeaderLocaleResolver\n2023-10-07T18:55:08.666+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected FixedThemeResolver\n2023-10-07T18:55:08.666+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@e39dfa6\n2023-10-07T18:55:08.666+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.support.SessionFlashMapManager@56b2037f\n2023-10-07T18:55:08.667+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data\n2023-10-07T18:55:08.667+08:00  INFO 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms\n2023-10-07T18:55:08.673+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.tomcat.util.http.Parameters   : Set encoding to UTF-8\n2023-10-07T18:55:08.673+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET \"/suspend\", parameters={}\n2023-10-07T18:55:08.683+08:00 DEBUG 10702 --- [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to bug.example.Controller#other(Continuation)\n2023-10-07T18:55:08.746+08:00 DEBUG 10702 --- [nio-8080-exec-1] reactor.util.Loggers                     : Using Slf4j logging framework\n2023-10-07T18:55:08.787+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.catalina.core.AsyncContextImpl  : Req:     null  CReq:     null  RP:     null  Stage: -  Thread: http-nio-8080-exec-1  State:                  N/A  Method: Constructor  URI: N/A\n2023-10-07T18:55:08.787+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.coyote.AsyncStateMachine      : Changing async state from [DISPATCHED] to [STARTING]\n2023-10-07T18:55:08.787+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.catalina.core.AsyncContextImpl  : Firing onStartAsync() event for any AsyncListeners\n2023-10-07T18:55:08.787+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.w.c.request.async.WebAsyncManager    : Started async request\n2023-10-07T18:55:08.788+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.w.c.request.async.WebAsyncManager    : Async error, dispatch to /suspend\n2023-10-07T18:55:08.788+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.catalina.core.AsyncContextImpl  : Req: 5844338c  CReq: 4f70376c  RP: 5acae348  Stage: 3  Thread: http-nio-8080-exec-1  State:                  N/A  Method: dispatch     URI: /suspend\n2023-10-07T18:55:08.789+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.coyote.AsyncStateMachine      : Changing async state from [STARTING] to [MUST_DISPATCH]\n2023-10-07T18:55:08.790+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Exiting but response remains open for further handling\n2023-10-07T18:55:08.790+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.coyote.http11.Http11Processor   : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@375c60d5:org.apache.tomcat.util.net.NioChannel@d287989:java.nio.channels.SocketChannel[connected local=/[0:0:0:0:0:0:0:1]:8080 remote=/[0:0:0:0:0:0:0:1]:63136]], Status in: [OPEN_READ], State out: [LONG]\n2023-10-07T18:55:08.790+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.coyote.AsyncStateMachine      : Changing async state from [MUST_DISPATCH] to [DISPATCHING]\n2023-10-07T18:55:08.790+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.coyote.http11.Http11Processor   : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@375c60d5:org.apache.tomcat.util.net.NioChannel@d287989:java.nio.channels.SocketChannel[connected local=/[0:0:0:0:0:0:0:1]:8080 remote=/[0:0:0:0:0:0:0:1]:63136]], State after async post processing: [ASYNC_END]\n2023-10-07T18:55:08.791+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.authenticator.AuthenticatorBase    : Security checking request GET /suspend\n2023-10-07T18:55:08.791+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.catalina.realm.RealmBase      :   No applicable constraints defined\n2023-10-07T18:55:08.791+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.authenticator.AuthenticatorBase    : Not subject to any constraint\n2023-10-07T18:55:08.791+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.catalina.core.AsyncContextImpl  : Req: 5844338c  CReq: 4f70376c  RP: 5acae348  Stage: 3  Thread: http-nio-8080-exec-1  State:                  N/A  Method: intDispatch  URI: /suspend\n2023-10-07T18:55:08.791+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.coyote.AsyncStateMachine      : Changing async state from [DISPATCHING] to [DISPATCHED]\n2023-10-07T18:55:08.793+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : \"ASYNC\" dispatch for GET \"/suspend\", parameters={}\n2023-10-07T18:55:08.794+08:00 DEBUG 10702 --- [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerAdapter : Resume with async result [java.lang.IllegalStateException: This returns double error response]\n2023-10-07T18:55:08.796+08:00 DEBUG 10702 --- [nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Using @ExceptionHandler bug.example.ExceptionHandler#handleUnexpectedTechnicalException(Exception, WebRequest)\n2023-10-07T18:55:08.988+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/problem+json;q=0.8', given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7] and supported [application/problem+json]\n2023-10-07T18:55:08.992+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ProblemDetail[type='about:blank', title='Internal Server Error', status=500, detail='null', instance (truncated)...]\n2023-10-07T18:55:09.003+08:00 DEBUG 10702 --- [nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.IllegalStateException: This returns double error response]\n2023-10-07T18:55:09.005+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Exiting from \"ASYNC\" dispatch, status 500\n2023-10-07T18:55:09.005+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.catalina.core.AsyncContextImpl  : Firing onComplete() event for any AsyncListeners\n2023-10-07T18:55:09.005+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.coyote.AsyncStateMachine      : Starting to process call to asyncError()\n2023-10-07T18:55:09.005+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.coyote.AsyncStateMachine      : Changing async state from [DISPATCHED] to [ERROR]\n2023-10-07T18:55:09.006+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.catalina.core.AsyncContextImpl  : Firing onError() event for any AsyncListeners\n2023-10-07T18:55:09.006+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost]           : Processing ErrorPage[errorCode=0, location=/error]\n2023-10-07T18:55:09.007+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : \"INCLUDE\" dispatch for GET \"/error\", parameters={}\n2023-10-07T18:55:09.009+08:00 DEBUG 10702 --- [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#errorHtml(HttpServletRequest, HttpServletResponse)\n2023-10-07T18:55:09.010+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(freemarker.template.Configuration)\n2023-10-07T18:55:09.011+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.011+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(freemarker.template$Configuration)\n2023-10-07T18:55:09.011+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.012+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(com.samskivert.mustache.Template)\n2023-10-07T18:55:09.012+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.012+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(com.samskivert.mustache$Template)\n2023-10-07T18:55:09.013+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.013+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(groovy.text.TemplateEngine)\n2023-10-07T18:55:09.013+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.014+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(groovy.text$TemplateEngine)\n2023-10-07T18:55:09.014+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.014+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(org.thymeleaf.spring6.SpringTemplateEngine)\n2023-10-07T18:55:09.015+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.015+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(org.thymeleaf.spring6$SpringTemplateEngine)\n2023-10-07T18:55:09.015+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.015+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(org.apache.jasper.compiler.JspConfig)\n2023-10-07T18:55:09.016+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.016+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(org.apache.jasper.compiler$JspConfig)\n2023-10-07T18:55:09.016+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.016+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       : getResource(META-INF/resources/error/500.html)\n2023-10-07T18:55:09.017+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   Delegating to parent classloader jdk.internal.loader.ClassLoaders$AppClassLoader@4e0e2f2a\n2023-10-07T18:55:09.017+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   --> Resource not found, returning null\n2023-10-07T18:55:09.017+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       : getResource(resources/error/500.html)\n2023-10-07T18:55:09.017+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   Delegating to parent classloader jdk.internal.loader.ClassLoaders$AppClassLoader@4e0e2f2a\n2023-10-07T18:55:09.017+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   --> Resource not found, returning null\n2023-10-07T18:55:09.017+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       : getResource(static/error/500.html)\n2023-10-07T18:55:09.017+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   Delegating to parent classloader jdk.internal.loader.ClassLoaders$AppClassLoader@4e0e2f2a\n2023-10-07T18:55:09.017+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   --> Resource not found, returning null\n2023-10-07T18:55:09.017+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       : getResource(public/error/500.html)\n2023-10-07T18:55:09.018+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   Delegating to parent classloader jdk.internal.loader.ClassLoaders$AppClassLoader@4e0e2f2a\n2023-10-07T18:55:09.018+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   --> Resource not found, returning null\n2023-10-07T18:55:09.018+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(freemarker.template.Configuration)\n2023-10-07T18:55:09.019+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.019+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(freemarker.template$Configuration)\n2023-10-07T18:55:09.019+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.020+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(com.samskivert.mustache.Template)\n2023-10-07T18:55:09.020+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.021+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(com.samskivert.mustache$Template)\n2023-10-07T18:55:09.021+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.021+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(groovy.text.TemplateEngine)\n2023-10-07T18:55:09.022+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.022+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(groovy.text$TemplateEngine)\n2023-10-07T18:55:09.022+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.022+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(org.thymeleaf.spring6.SpringTemplateEngine)\n2023-10-07T18:55:09.023+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.023+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(org.thymeleaf.spring6$SpringTemplateEngine)\n2023-10-07T18:55:09.023+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.023+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(org.apache.jasper.compiler.JspConfig)\n2023-10-07T18:55:09.023+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.024+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     findClass(org.apache.jasper.compiler$JspConfig)\n2023-10-07T18:55:09.024+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :     --> Returning ClassNotFoundException\n2023-10-07T18:55:09.024+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       : getResource(META-INF/resources/error/5xx.html)\n2023-10-07T18:55:09.024+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   Delegating to parent classloader jdk.internal.loader.ClassLoaders$AppClassLoader@4e0e2f2a\n2023-10-07T18:55:09.024+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   --> Resource not found, returning null\n2023-10-07T18:55:09.024+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       : getResource(resources/error/5xx.html)\n2023-10-07T18:55:09.025+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   Delegating to parent classloader jdk.internal.loader.ClassLoaders$AppClassLoader@4e0e2f2a\n2023-10-07T18:55:09.025+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   --> Resource not found, returning null\n2023-10-07T18:55:09.025+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       : getResource(static/error/5xx.html)\n2023-10-07T18:55:09.025+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   Delegating to parent classloader jdk.internal.loader.ClassLoaders$AppClassLoader@4e0e2f2a\n2023-10-07T18:55:09.025+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   --> Resource not found, returning null\n2023-10-07T18:55:09.025+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       : getResource(public/error/5xx.html)\n2023-10-07T18:55:09.025+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   Delegating to parent classloader jdk.internal.loader.ClassLoaders$AppClassLoader@4e0e2f2a\n2023-10-07T18:55:09.025+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.a.c.loader.WebappClassLoaderBase       :   --> Resource not found, returning null\n2023-10-07T18:55:09.029+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.w.s.v.ContentNegotiatingViewResolver : Selected 'text/html' given [text/html, text/html;q=0.8]\n2023-10-07T18:55:09.029+08:00 ERROR 10702 --- [nio-8080-exec-1] s.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/suspend] as the response has already been committed. As a result, the response may have the wrong status code.\n2023-10-07T18:55:09.029+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Exiting from \"INCLUDE\" dispatch, status 500\n2023-10-07T18:55:09.029+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.coyote.http11.Http11Processor   : Error state [CLOSE_NOW] reported while processing request\n\norg.springframework.web.ErrorResponseException: 500 INTERNAL_SERVER_ERROR, ProblemDetail[type='about:blank', title='Internal Server Error', status=500, detail='null', instance='/suspend', properties='null']\n\tat bug.example.ExceptionHandler.handleUnexpectedTechnicalException(SupendErrorHandlingError.kt:38) ~[classes/:na]\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:413) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:141) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1341) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1152) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1098) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[tomcat-embed-core.jar:6.0]\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core.jar:6.0]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:642) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:570) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:541) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.AsyncContextImpl$AsyncRunnable.run(AsyncContextImpl.java:570) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.AsyncContextImpl.doInternalDispatch(AsyncContextImpl.java:340) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:165) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:235) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:243) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:57) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]\nCaused by: java.lang.IllegalStateException: This returns double error response\n\tat bug.example.Controller.other$suspendImpl(SupendErrorHandlingError.kt:26) ~[classes/:na]\n\tat bug.example.Controller.other(SupendErrorHandlingError.kt) ~[classes/:na]\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]\n\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97) ~[kotlin-reflect-1.8.22.jar:1.8.22-release-407(1.8.22)]\n\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113) ~[kotlin-reflect-1.8.22.jar:1.8.22-release-407(1.8.22)]\n\tat kotlin.reflect.jvm.internal.KCallableImpl.call(KCallableImpl.kt:107) ~[kotlin-reflect-1.8.22.jar:1.8.22-release-407(1.8.22)]\n\tat kotlin.reflect.full.KCallables.callSuspend(KCallables.kt:56) ~[kotlin-reflect-1.8.22.jar:1.8.22-release-407(1.8.22)]\n\tat org.springframework.core.CoroutinesUtils.lambda$invokeSuspendingFunction$2(CoroutinesUtils.java:108) ~[spring-core-6.0.12.jar:6.0.12]\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4.invokeSuspend(IntrinsicsJvm.kt:205) ~[kotlin-stdlib-1.8.22.jar:1.8.22-release-407(1.8.22)]\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) ~[kotlin-stdlib-1.8.22.jar:1.8.22-release-407(1.8.22)]\n\tat kotlinx.coroutines.internal.DispatchedContinuationKt.resumeCancellableWith(DispatchedContinuation.kt:367) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:25) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]\n\tat kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:110) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]\n\tat kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:126) ~[kotlinx-coroutines-core-jvm-1.6.4.jar:na]\n\tat kotlinx.coroutines.reactor.MonoKt.monoInternal$lambda-2(Mono.kt:90) ~[kotlinx-coroutines-reactor-1.6.4.jar:na]\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58) ~[reactor-core-3.5.10.jar:3.5.10]\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4495) ~[reactor-core-3.5.10.jar:3.5.10]\n\tat org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler$DeferredResultSubscriber.connect(ReactiveTypeHandler.java:462) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler.handleValue(ReactiveTypeHandler.java:178) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler.handleReturnValue(ResponseBodyEmitterReturnValueHandler.java:154) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[tomcat-embed-core.jar:6.0]\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.0.12.jar:6.0.12]\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core.jar:6.0]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.13.jar:10.1.13]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.0.12.jar:6.0.12]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-embed-core.jar:10.1.14-dev]\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core.jar:10.1.14-dev]\n\t... 7 common frames omitted\n\n2023-10-07T18:55:09.030+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.coyote.AsyncStateMachine      : Starting to process call to asyncError()\n2023-10-07T18:55:09.030+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.coyote.AsyncStateMachine      : Ignoring call to asyncError() as it has already been called since async processing started\n2023-10-07T18:55:09.031+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.catalina.core.AsyncContextImpl  : Req: 5844338c  CReq: 4f70376c  RP: 5acae348  Stage: 3  Thread: http-nio-8080-exec-1  State:                  N/A  Method: complete     URI: /suspend\n2023-10-07T18:55:09.031+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.coyote.AsyncStateMachine      : Changing async state from [ERROR] to [COMPLETING]\n2023-10-07T18:55:09.031+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.catalina.core.AsyncContextImpl  : Firing onComplete() event for any AsyncListeners\n2023-10-07T18:55:09.031+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.coyote.AsyncStateMachine      : Changing async state from [COMPLETING] to [DISPATCHED]\n2023-10-07T18:55:09.031+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.catalina.core.AsyncContextImpl  : Req: 5844338c  CReq: 4f70376c  RP: 5acae348  Stage: 3  Thread: http-nio-8080-exec-1  State:                  N/A  Method: recycle      URI: /suspend\n2023-10-07T18:55:09.031+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.coyote.http11.Http11Processor   : Error state [CLOSE_NOW] reported while processing request\n2023-10-07T18:55:09.031+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.coyote.http11.Http11Processor   : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@375c60d5:org.apache.tomcat.util.net.NioChannel@d287989:java.nio.channels.SocketChannel[connected local=/[0:0:0:0:0:0:0:1]:8080 remote=/[0:0:0:0:0:0:0:1]:63136]], Status in: [OPEN_READ], State out: [CLOSED]\n2023-10-07T18:55:09.031+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.coyote.http11.Http11Processor   : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@375c60d5:org.apache.tomcat.util.net.NioChannel@d287989:java.nio.channels.SocketChannel[connected local=/[0:0:0:0:0:0:0:1]:8080 remote=/[0:0:0:0:0:0:0:1]:63136]], Status in: [OPEN_READ], State out: [CLOSED]\n2023-10-07T18:55:09.031+08:00 DEBUG 10702 --- [nio-8080-exec-1] o.apache.tomcat.util.threads.LimitLatch  : Counting down[http-nio-8080-exec-1] latch=2\n2023-10-07T18:55:09.031+08:00 DEBUG 10702 --- [nio-8080-exec-1] org.apache.tomcat.util.net.NioEndpoint   : Calling [org.apache.tomcat.util.net.NioEndpoint@43f55f91].closeSocket([org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@375c60d5:org.apache.tomcat.util.net.NioChannel@d287989:java.nio.channels.SocketChannel[connected local=/[0:0:0:0:0:0:0:1]:8080 remote=/[0:0:0:0:0:0:0:1]:63136]])",
      "The original bug report was for two JSON responses in a single HTTP response. Is that still an issue?\n\nIs the error message regarding the response already being committed in addition to the multiple JSON bodies or instead of the mutliple JSON bodies?",
      "(In reply to Mark Thomas from comment #7)\n> The original bug report was for two JSON responses in a single HTTP\n> response. Is that still an issue?\n> \n> Is the error message regarding the response already being committed in\n> addition to the multiple JSON bodies or instead of the mutliple JSON bodies?\nHmm, I don't think it's a matter of how many JSON responses in a signle HTTP response, but of exception handling.\n\nI dug a little deeper and have written a simple unit test[1] to simulate this scenario. \n\nTo put it simply, Spring encapsulates the exception into JSON and responds normally, and at the same time sets the RequestDispatcher.ERROR_EXCEPTION attribute. I am not sure whether this behavior is reasonable, but I don't think it's a tomcat problem, the way I see it the handling is very reasonable. On the other hand, spring's behavior is very odd.\n\nThere is a simple way to fix this issue, we can see whether the response is committed, if true, do not deal with RequestDispatcher.ERROR_EXCEPTION.\n---\nif (request.isAsyncDispatching()) {\n    connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);\n    Throwable t = (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);\n    if (t != null && !response.isCommitted()) { <-------- here\n        asyncConImpl.setErrorState(t, true);\n    }\n}\n---\n\nSince I am not familiar with this specification, still need Mark to judge...\n\nHope this helps! ; )\n\n[1].https://gist.github.com/aooohan/b4fd3e1bce5ddda09b51e45173b5ed33",
      "The simpler test case behaves as desired if the response buffer is flushed after the application provided error response is written.\n\nI'm not convinced that the test case completely reproduces the reported issue.\n\nI'm going to go back to the original reproducer and do some more debugging.",
      "(In reply to Nils Kohrs from comment #4)\n> Here is a minimal project to reproduce it:\n> https://github.com/nilskohrs/tomcat-bug-66875\n\nThanks. This reproduces the issue as originally described with Tomcat 10.1.13. I need to set up some debugging to figure out what is going on.",
      "I think there are two separate issues here.\n\n1. When Spring sets jakarta.servlet.error.exception that triggers Tomcat's internal error handling. Whether Spring should do that and whether that should have the effect it has are the first issue.\n\n2. Tomcat's error handling triggers the onError event. As per SRV.2.3.3.3 (search for \"error dispatch\") if no listeners call complete() or dispatch() this triggers another error dispatch. It is this second error dispatch that is generating the second error message. Spring and/or the application should be calling complete() or dispatch() as a result of the onError() event. This is the second issue.\n\nNext steps are to do some more research on the first issue.",
      "Fixed in:\n- 11.0.x for 11.0.0-M14 onwards\n- 10.1.x for 10.1.16 onwards\n-  9.0.x for  9.0.83 onwards\n-  8.5.x for  8.5.96 onwards\n\nComment #8 identifies the right place for the fix but I think a slightly different fix is called for."
    ],
    "creation_ts": "2023-08-10T15:13:12Z",
    "fixes": [
      66875
    ]
  },
  {
    "id": 69728,
    "summary": "TLS with H2 - Weird log - Confusion between optional client certificate and optional verification?",
    "description": "Hey Tomcat team!\n\nSomething looks unclear in the TLS client certificate handling in Tomcat.\nOur Spring Boot application is configured with HTTP/2 and optional client certificate, through Spring Boot property \"ssl.clientAuth = WANT\".\nThis property is mapped to Tomcat's \"CertificateVerification.OPTIONAL\".\n\nOur need is quite simple: \n* if a new connection presents a TLS client certificate, we need to validate it. If certificate is valid, connection is established and client is authenticated.\n* if a new connection does not have a TLS client certificate, connection is established and client is anonymous.\nNote that everything is working fine.\n\nBut the problem is that when the application starts, we have this warning log:\n\"The TLS virtual host [...] is configured for optional certificate verification and the enclosing connector is configured to support upgrade to h2. HTTP/2 over TLS does not permit optional certificate verification.\"\n\nAnd this log looks wrong, because we don't ask for optional verification, we ask for optional client certificate presence. If the certificate is present, we do want to validate it.\n\nMy understanding is that there's 2 level of optional -optional certificate and optional verification- sometimes merged into only one.\nAm I missing something here?\n\nGuillaume",
    "comments": [
      "Optional verification and optional presence are the same thing.\n\nThat said, I do think the log message isn't quite right.\n\nThe issue is the HTTP/2 doesn't permit re-handshaking (TLS 1.2) or post-handshake authentication (PHA - TLS 1.3). That causes problems if CLIENT-CERT authentication is used since it triggers a rehandshake/PHA to obtain a client certificate if one is not present when the user requests a protected URI.\n\nIf certificateVerification is set to required - everything will be fine. If certificateVerification is set to anything else then there might be problems depending on if the client provides a certificate with the initial connection and if the client requests a protected resource.\n\nI'll look at re-working when that warning is displayed and the text of the warning.",
      "Ok I see now.\nThanks for your answer, and having a look at the log.\n\nGuillaume",
      "Fixed in:\n- 11.0.x for 11.0.9 onwards\n- 10.1.x for 10.1.43 onwards\n-  9.0.x for  9.0.107 onwards"
    ],
    "creation_ts": "2025-06-25T21:43:20Z",
    "fixes": [
      69728
    ]
  },
  {
    "id": 55633,
    "summary": "[websocket] Tomcat can't read data from the client after the client temporarily pauses",
    "description": "As reported on Re: 8.0.x / 7.0.x progress thread [1]:\n\nFor NIO and APR connector:\nIt seems that when a client establishes a Websocket connection and then stops to read data from it (but doesn't close the connection, so that at Tomcat's side writing data to the underlying TCP connection will be blocked), and then after some time the client continues to read data from the Websocket connection, then Tomcat seems not to be able to read data from that client any more (and doesn't notice when the connection has been closed), but it can still write data to the client.\n\nTo reproduce:\n\nUpdate trunk to r1529443.\n\nThen apply the following patch locally to make the issue easier to reproduce (by blowing the amount of data that Tomcat sends to the client):\n\n\nIndex: webapps/examples/WEB-INF/classes/websocket/snake/SnakeTimer.java\n===================================================================\n--- webapps/examples/WEB-INF/classes/websocket/snake/SnakeTimer.java\t(revision 1529443)\n+++ webapps/examples/WEB-INF/classes/websocket/snake/SnakeTimer.java\t(working copy)\n@@ -73,8 +73,10 @@\n                 sb.append(',');\n             }\n         }\n-        broadcast(String.format(\"{\\\"type\\\": \\\"update\\\", \\\"data\\\" : [%s]}\",\n-                sb.toString()));\n+        char[] random = new char[8192];\n+        java.util.Arrays.fill(random, 'x');\n+        broadcast(String.format(\"{\\\"type\\\": \\\"update\\\", \\\"data\\\" : [%s], \\\"randomData\\\": \\\"[%s]\\\"}\",\n+                sb.toString(), new String(random)));\n     }\n \n     protected static void broadcast(String message) {\n\n\n\n1) Start Tomcat (current trunk) on Windows 64-bit with Java7 64-bit and either NIO or APR connector.\n2) Start IE (10+) and Firefox and with both browsers open the snake example. On both browsers, press up or down key so that both snakes begin moving.\n3) Suspend the Firefox processes. This can be done with \"Process Explorer\" [2] tool by right-clicking on the firefox.exe entry and select \"Suspend\". You can see that Firefox does not respond any more, but on IE the snakes continue to move.\n4) After some seconds, you can see that on IE the snakes suddenly stop moving. This is correct because the current code uses RemoteEndpoint.Basic that may block on write() methods.\n5) Now resume Firefox with Process Explorer. You can see that on both browsers the snakes will continue to move. This means that both browsers are able to receive data from the Websocket connection.\n6) When you try to change the direction of the snake in IE, everything works. However on Firefox, the snake will not change its direction. This means that while Tomcat continues to send data to this Websocket connection, it cannot receive from it any more.\n7) If you close Firefox, then the corresponding snake will not disappear (so it seems Tomcat doesn't notice that the connection closed).\n\n\nNote: This only applies to the NIO and APR connectors - with BIO, the problem doesn't occur.\n\n\nWith Wireshark you can see that FF still sends the direction data correctly and Tomcat ACKs the packets, but does not seem to be able to process them.\n\n\n[1] http://markmail.org/message/z6qklqiceyftapfx\n[2] http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx",
    "comments": [
      "This has been fixed in 8.0.x for APR/native and for NIO.\n\nStill TODO:\n- backport to 7.0.x\n- Investigate client side WebSocket closes that don't appear to make it to the server. This is most easily observed with APR.",
      "The back-port to 7.0.x has been completed.\n\nThe closing issue was caused by ignoring write errors on the server. That has also been fixed."
    ],
    "creation_ts": "2013-10-06T01:41:23Z",
    "fixes": [
      55633
    ]
  },
  {
    "id": 69717,
    "summary": "DirResourceSet breaks with trailing slash on webAppMount",
    "description": "After upgrading to Tomcat 9.0.106, DirResourceSet's defined with a trailing slash on the webAppMount-parameter do not get properly set anymore. Downgrading to 9.0.105 fixes the issue.\n\nThis works:\n```\n<PreResources base=\"/foo/bar/\" className=\"org.apache.catalina.webresources.DirResourceSet\" webAppMount=\"/WEB-INF/classes\" />\n```\n\nThis does not:\n```\n<PreResources base=\"/foo/bar/\" className=\"org.apache.catalina.webresources.DirResourceSet\" webAppMount=\"/WEB-INF/classes/\" />\n```\n\nThe docs do not explicitly state whether webAppMount allows a trailing slash or not, but the base-parameter does not care.\n\nI assume this is a regression introduced by https://github.com/apache/tomcat/commit/d83557f943e872fee6b4a5531ff67553118ed526, titled \"Fix: Expand the path checks for Pre-Resources and Post-Resources mounted at a path within the web application. (markt)\" on the changelog page.",
    "comments": [
      "Please read: \"Moderate: Security constraint bypass for PreResources and PostResources CVE-2025-49125\" https://tomcat.apache.org/security-9.html\n\nStripping the trailing / in AbstractResourceSet.setWebAppMount seems possible.",
      "Or config validation should fail when the param has a trailing slash?\n\nIt just silently not working and that not being documented anywhere is still a regression caused by the fix for the CVE. :)",
      "Fixed in:\n- 11.0.x for 11.0.9 onwards\n- 10.1.x for 10.1.43 onwards\n-  9.0.x for  9.0.107 onwards"
    ],
    "creation_ts": "2025-06-17T23:14:44Z",
    "fixes": [
      69717
    ]
  },
  {
    "id": 58701,
    "summary": "JSP Reloading Initialization Problem",
    "description": "Created attachment 33332\nThe logs for the tomcat reloading bug.\n\nMy company uses a custom inhouse tomcat library for hotloading generated source into tomcat at runtime. This custom classloader requires tomcat's JSP engine to perform a reload, so that it can recognize the newly generated classes. We are performing the following code to facilitate this:\n\n\n    Context context = this.getContext();\n    Wrapper jspWrapper = (Wrapper)context.findChild(\"jsp\");\n    \n    // There might not be any jsps if we're just getting started.\n    if (jspWrapper==null) return;\n\n    jspWrapper.unload();\n    jspWrapper.load();\n\n\nThis code works just fine on Tomcat 6. However, when migrating this custom classloader to Tomcat 8, a subsequent JSP page load fails with the attached stacktrace.\n\nI have investigated this stack trace and come to the conclusion that, in StandardWrapper.java on line 1473, although the instance itself is set to null, the field \"instanceInitialized\" is still set to true. This means that my next call to load will recreate the JspServlet, but it will not be initialized correctly, thus causing the error in the attached stacktrace. I have seen in the debugger that it is indeed the case that the JspServlet is not being initialized properly.\n\nA fix for this bug is to simply add this line:\n\ninstanceInitialized = false;\n\nto line 1474 in StandardWrapper.java.\n\nI have successfully been able to work around this bug in my own code with the following hack:\n\n    Context context = this.getContext();\n    Wrapper jspWrapper = (Wrapper)context.findChild(\"jsp\");\n    \n    // There might not be any jsps if we're just getting started.\n    if (jspWrapper==null) return;\n\n    jspWrapper.unload();\n    \n    // tomcat-catalina 8.0.29\n    // This custom hack is required to fix a bug in the StandardWrapper catalina sourcecode. This custom field in their source was not reset back to false\n    // after calling unload, so the underlying JspServlet (the instance) did not get initialized properly upon calling load.\n    // This bug happens in tomcat 7 and 8.\n    AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n      public Boolean run() {\n        try\n        {\n          Field field = ((StandardWrapper)jspWrapper).getClass().getDeclaredField(\"instanceInitialized\");\n          field.setAccessible(true);\n          field.setBoolean(jspWrapper, false);\n        }\n        catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e)\n        {\n          throw new RuntimeException(e);\n        }\n\n        return Boolean.TRUE;\n      }\n    });\n    \n    \n    jspWrapper.load();\n\nAlthough as you can see it is far from ideal.",
    "comments": [
      "Thanks for the report and the analysis.\n\nI have fixed the issue along with some other issues in StandardWrapper in 9.0.x for 9.0.0.M2 onwards, 8.0.x for 8.0.31 onwards and 7.0.x for 7.0.68 onwards."
    ],
    "creation_ts": "2015-12-07T23:27:58Z",
    "fixes": [
      58701
    ]
  },
  {
    "id": 44562,
    "summary": "HEAD requests cannot go through request dispatch include.",
    "description": "See https://issues.apache.org/jira/browse/GERONIMO-3896\n\nbriefly...\n\ntomcat complains:\nServlet.service() for servlet SimpleDispatchServlet threw exception\njavax.servlet.ServletException: Original SevletResponse or wrapped original ServletResponse not passed to\nRequestDispatcher in violation of SRV.8.2 and SRV.14.2.5.1\n        at org.apache.catalina.core.ApplicationDispatcher.checkSameObjects(ApplicationDispatcher.java:985)\n...\n\nThe relevant code seems to be in javax.servlet.http.HttpServlet\n\n    protected void doHead(HttpServletRequest req, HttpServletResponse resp)\n\tthrows ServletException, IOException\n    {\n\tNoBodyResponse response = new NoBodyResponse(resp);\n\t\n\tdoGet(req, response);\n\tresponse.setContentLength();\n    }\n\n\nwhich is fine but\n\nclass NoBodyResponse implements HttpServletResponse {\n\n\nrather than\nclass NoBodyResponse extends HttpServletResponseWrapper {\n\nThe patch attached to the jira issue makes this change and adapts NoBodyResponse to be a subclass of HttpServletResponseWrapper and the user reports that it fixes the problem.   I don't know if there would be formatting issues applying the patch to tomcat's copy of the spec classes.",
    "comments": [
      "Thanks for the patch. It has been applied to trunk and proposed for 6.0.x (and 5.5.x and 4.1.x)",
      "This is fixed in 6.0.x and will be in 6.0.17 onwards.",
      "*** Bug 44829 has been marked as a duplicate of this bug. ***",
      "Still open for 5.5.x",
      "This has been fixed in 5.5.x and will be included in 5.5.27 onwards"
    ],
    "creation_ts": "2008-03-07T13:19:40Z",
    "fixes": [
      44562
    ]
  },
  {
    "id": 64265,
    "summary": "ETag comparison does not properly implement RFC 7232, section 2.3.2",
    "description": "The mentioned section provides two types of comparisons, strong and weak.\n\nHere are the issues:\n* It is not properly documented which comparison functions is applied by the DefaultServlet\n* I believe that Tomcat implements either wrong.\n\nHere is the code in question:\n> while (!conditionSatisfied && commaTokenizer.hasMoreTokens()) {\n> \tString currentToken = commaTokenizer.nextToken();\n> \tif (currentToken.trim().equals(eTag))\n> \t\tconditionSatisfied = true;\n> }\n\nThis means that Tomcat performs char-by-char comparison. This already contradicts both functions (likely). A simple example:\n\n$ curl \"https://.../test/test.txt\" -I\n> HTTP/1.1 200\n> Accept-Ranges: bytes\n> ETag: W/\"6-1585143822000\"\n> Last-Modified: Wed, 25 Mar 2020 13:43:42 GMT\n> Content-Type: text/plain\n> Content-Length: 6\n> Date: Wed, 25 Mar 2020 13:55:50 GMT\n\nTomcat returns a weak etag, so try the weak function:\n> $ curl \"https://.../test/test.txt\" -H 'If-None-Match: W/\"6-1585143822000\"' -I\n> HTTP/1.1 304\n> ETag: W/\"6-1585143822000\"\n> Date: Wed, 25 Mar 2020 13:58:01 GMT\n\nThis one should match with weak:\n> $ curl \"https://.../test/test.txt\" -H 'If-None-Match: \"6-1585143822000\"' -I\n> HTTP/1.1 200\n> Accept-Ranges: bytes\n> ETag: W/\"6-1585143822000\"\n> Last-Modified: Wed, 25 Mar 2020 13:43:42 GMT\n> Content-Type: text/plain\n> Content-Length: 6\n> Date: Wed, 25 Mar 2020 13:58:28 GMT\n\nbut it doesn't. It still returns 200.\n\nIf I try strong logically, the following should give me a 200:\n> $ curl \"https://.../test/test.txt\" -H 'If-None-Match: W/\"6-1585143822000\"' -I\n> HTTP/1.1 304\n> ETag: W/\"6-1585143822000\"\n> Date: Wed, 25 Mar 2020 13:59:24 GMT\n\nbut it doesn't. It still returns 304.\n\nAm I wrong here?",
    "comments": [
      "Hi Michael,\n\nI see no difference between your \n\n> Tomcat returns a weak etag, so try the weak function:\n>> $ curl \"https://.../test/test.txt\" -H 'If-None-Match: W/\"6-1585143822000\"' -I\n\nand\n\n> If I try strong logically, the following should give me a 200:\n>> $ curl \"https://.../test/test.txt\" -H 'If-None-Match: W/\"6-1585143822000\"' -I\n\nThe commands are the same.",
      "(In reply to mgrigorov from comment #1)\n> Hi Michael,\n> \n> I see no difference between your \n> \n> > Tomcat returns a weak etag, so try the weak function:\n> >> $ curl \"https://.../test/test.txt\" -H 'If-None-Match: W/\"6-1585143822000\"' -I\n> \n> and\n> \n> > If I try strong logically, the following should give me a 200:\n> >> $ curl \"https://.../test/test.txt\" -H 'If-None-Match: W/\"6-1585143822000\"' -I\n> \n> The commands are the same.\n\nPlease read my comments also the defined comparison functions: strong and weak in the RFC.",
      "> Please read my comments also the defined comparison functions: strong and weak in the RFC.\n\nI just wanted to point out that the arguments of the two 'curl` commands are exactly the same. So receiving the same result is what I'd expect from the server, unless the resource is modified or deleted in the meantime.\nMaybe you have a typo in the second curl command ?!\n\nIf this RFC says that two exactly the same requests should behave differently then I am not sure I want to read it.",
      "(In reply to mgrigorov from comment #3)\n> > Please read my comments also the defined comparison functions: strong and weak in the RFC.\n> \n> I just wanted to point out that the arguments of the two 'curl` commands are\n> exactly the same. So receiving the same result is what I'd expect from the\n> server, unless the resource is modified or deleted in the meantime.\n> Maybe you have a typo in the second curl command ?!\n> \n> If this RFC says that two exactly the same requests should behave\n> differently then I am not sure I want to read it.\n\nThere is no typo and yes, both commands are the same. I have logically applied to comparsion functions. From a blackbox perspective, in either case Tomcat's implementation is wrong. Since we don't document which comparison we apply I have to guess, try.\n\nRead the section and you'll understand.",
      "The DefaultServlet defers to the WebResources implementation to generate ETags.\n\nThe WebResource implementation provided by Tomcat is hard-coded to only provide weak ETags. It would be a fair amount of work for a custom implementation to override that (and none has ever asked us to make that easier).\n\nGiven the above, I think it makes sense for now for the DefaultServlet to perform the weak comparison. If the resource implementation changes, there could be an argument for the DefaultServlet to do something else.\n\nI'll work on a patch (and test cases) for DefaultServlet.",
      "Fixed in:\n- master for 10.0.0-M4 onwards\n- 9.0.x for 9.0.34 onwards\n- 8.5.x for 8.5.54 onwards\n- 7.0.x for 7.0.104 onwards",
      "We also should implement weak match for If-None-Match\nI created PR with the fix\nhttps://github.com/apache/tomcat/pull/325"
    ],
    "creation_ts": "2020-03-25T14:01:23Z",
    "fixes": [
      64265
    ]
  },
  {
    "id": 64311,
    "summary": "org.apache.tomcat.jni.TestSocketServerAnyLocalAddress locks entire testbed run under certain conditions",
    "description": "This took me a bit to find. Following happens with:\n\n* Tomcat master/4d5048f9826627ad9f80627bf28ff7b15bd489ac\n* Tomcat native from master\n* APR from 1.7.x w/o threading support, testing a patch for Bug 63671\n* OpenSSL 1.1.1e-freebsd\n* OpenJDK 64-Bit Server VM (build 25.242-b07, mixed mode)\n* FreeBSD 12.1-STABLE #0 r359195, amd64\n* Network settings:\n> bge0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500\n>         options=c019b<RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM,TSO4,VLAN_HWTSO,LINKSTATE>\n>         ether 20:67:7c:d4:58:40\n>         inet 147.54.64.17 netmask 0xfffffc00 broadcast 147.54.67.255\n>         inet 147.54.64.149 netmask 0xffffffff broadcast 147.54.64.149\n>         media: Ethernet autoselect (1000baseT <full-duplex>)\n>         status: active\n>         nd6 options=29<PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL>\n> lo0: flags=8049<UP,LOOPBACK,RUNNING,MULTICAST> metric 0 mtu 16384\n>         options=680003<RXCSUM,TXCSUM,LINKSTATE,RXCSUM_IPV6,TXCSUM_IPV6>\n>         inet6 ::1 prefixlen 128\n>         inet6 fe80::1%lo0 prefixlen 64 scopeid 0x5\n>         inet 127.0.0.1 netmask 0xff000000\n>         groups: lo\n>         nd6 options=21<PERFORMNUD,AUTO_LINKLOCAL>\n* build.properties contains:\n> execute.test.apr=true\n> java.net.preferIPv4Stack=true\n\nWhen the test is started, it completely locks up. No progress. What happens:\n* APR binds on any socket, in this case it is:\n> $ procstat -f 33340\n> 33340 java                21 s - rw------   2       0 TCP 0 0 ::.22303 ::.0\n* I have applied the following patch to tackle it down:\n> diff --git a/test/org/apache/tomcat/jni/TestSocketServerAnyLocalAddress.java b/test/org/apache/tomcat/jni/TestSocketServerAnyLocalAddress.java\n> index 866ba772c5..3e56ebeff3 100644\n> --- a/test/org/apache/tomcat/jni/TestSocketServerAnyLocalAddress.java\n> +++ b/test/org/apache/tomcat/jni/TestSocketServerAnyLocalAddress.java\n> @@ -127,0 +128 @@ public class TestSocketServerAnyLocalAddress extends AbstractJniTest {\n> +                System.out.println(\"Connecting to: \" + connectAddress);\n> @@ -164,0 +166 @@ public class TestSocketServerAnyLocalAddress extends AbstractJniTest {\n> +            System.out.println(\"Listenting at: \" + localAddress);\n> @@ -188,0 +191 @@ public class TestSocketServerAnyLocalAddress extends AbstractJniTest {\n> +                            System.out.println(\"from enumeration\");\n> @@ -197,0 +201 @@ public class TestSocketServerAnyLocalAddress extends AbstractJniTest {\n> +                            System.out.println(\"from loopback\");\n> @@ -200,0 +205 @@ public class TestSocketServerAnyLocalAddress extends AbstractJniTest {\n> +                            System.out.println(\"from linklocal\");\n> @@ -203,0 +209 @@ public class TestSocketServerAnyLocalAddress extends AbstractJniTest {\n> +                            System.out.println(\"from localhost\");\n\nI see then:\n> test-nio2:\n>     [junit] Running org.apache.tomcat.jni.TestSocketServerAnyLocalAddress in thread 1\n>     [junit] Listenting at: /0:0:0:0:0:0:0:0:22303\n>     [junit] java.net.ConnectException: Connection refused (Connection refused)\n>     [junit] from localhost\n>     [junit]     at java.net.PlainSocketImpl.socketConnect(Native Method)\n>     [junit] Connecting to: localhost/127.0.0.1:22303\n>     [junit]     at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n>     [junit]     at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n>     [junit]     at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n>     [junit]     at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\n>     [junit]     at java.net.Socket.connect(Socket.java:607)\n>     [junit]     at org.apache.tomcat.jni.TestSocketServerAnyLocalAddress$Client.run(TestSocketServerAnyLocalAddress.java:129)\n\nAs soon as I disable the IPv4 preference the connection works on IPv6. Or this one works with the 10-second timeout:\n> $ nc -6 :: 64054\n\nSuprisingly, as soon as I recompile the same APR version with threading support the behavior of APR changes:\n> test-nio2:\n>     [junit] Running org.apache.tomcat.jni.TestSocketServerAnyLocalAddress in thread 1\n>     [junit] Listenting at: /0.0.0.0:20726\n>     [junit] from enumeration\n>     [junit] Connecting to: /147.54.64.149:20726\n>     [junit] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0,03 sec, Thread: 1, Class: org.apache.tomcat.jni.TestSocketServerAnyLocalAddress\n\nSo I see two bugs here:\n* Tomcat test code does not properly handle APR on IPv6, but Java preference on IPv4\n* APR should not change its behavior when threading is disabled or a bug in libtcnative?\n\nAnother compilation of APR: --disable-ipv6 --disable-threads make this run again.\n\nPositive findings: \n* Almost all tests work w/ OpenSSL 1.1.1 and APR 1.7.x with threads disabled and IPv6 disabled, java.net.preferIPv4Stack=false, except those:\n> org.apache.catalina.session.TestStandardSessionIntegration:\n> org.apache.catalina.tribes.group.TestGroupChannelMemberArrival:\n> org.apache.catalina.tribes.group.TestGroupChannelStartStop:\n> org.apache.catalina.tribes.group.interceptors.TestOrderInterceptor:\n> org.apache.catalina.tribes.group.interceptors.TestTcpFailureDetector:\n>     org.apache.catalina.tribes.ChannelException: java.net.SocketException: Invalid argument; No faulty members identified.\n>         Caused by: java.net.SocketException: Invalid argument\n>         at java.net.PlainDatagramSocketImpl.join(Native Method)\n>         at java.net.AbstractPlainDatagramSocketImpl.join(AbstractPlainDatagramSocketImpl.java:178)\nBut this is due to: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=193246\n* With java.net.preferIPv4Stack=true all tests pass!",
    "comments": [
      "I'm struggling to recreate this.\n\nI have APR 1.7.x compiled with --disable-threads\nI have Tomcat-Native at 57da160 (just before the fix for BZ 63671)\nI have tomcat master (current HEAD)\n\nThe tests fail because of this test:\nhttps://github.com/apache/tomcat/blob/master/java/org/apache/tomcat/jni/Library.java#L251\n\nwhich has been present for 14+ years.\n\nHow did you manage to run the test with APR threading disabled?",
      "(In reply to Mark Thomas from comment #1)\n> I'm struggling to recreate this.\n> \n> I have APR 1.7.x compiled with --disable-threads\n> I have Tomcat-Native at 57da160 (just before the fix for BZ 63671)\n> I have tomcat master (current HEAD)\n> \n> The tests fail because of this test:\n> https://github.com/apache/tomcat/blob/master/java/org/apache/tomcat/jni/\n> Library.java#L251\n> \n> which has been present for 14+ years.\n> \n> How did you manage to run the test with APR threading disabled?\n\nMy bad, I forgot to mention this. I have removed the if clause to see whether Tomcat really requires this. It obviously don't. Only OpenSSL < 1.1.0 requires the threading support.\n\nPlease remove that check and try again.",
      "Ah. That explains it. I can reproduce this now. I've fixed the hang on failure. I'll look at the failure next.",
      "Fixed in:\n- master for 10.0.0-M5 onwards\n- 9.0.x for 9.0.35 onwards",
      "Since all tests pass, this check for threading support can be dropped sooner or later? The threading support is required for OpenSSL < 1.1.0 only.",
      "Yes, I think that check is safe to remove.",
      "What do you think about the erratic behavior of APR in regards of the address family when this feature is enabled or disabled? Our fault or APR's?"
    ],
    "creation_ts": "2020-04-06T09:48:45Z",
    "fixes": [
      64311
    ]
  },
  {
    "id": 66841,
    "summary": "Memory leak from cancelled async http/2 streams",
    "description": "Regression caused by fixed for https://bz.apache.org/bugzilla/show_bug.cgi?id=63816\n\nHave application using Spring server sent events for notifying logged in users of application events. SSE emitters have timeout of 1 day and so are active for the whole user session. Application tests registered SSE emitters at regular intervals to confirm the emitter is still alive and perform application cleanup if the emitter connection has been closed for any reason. Test is done by sending heartbeat message through each SSE emitter. \n\nIf the SSE connection is cancelled from the remote client, the stream for the SSE emitter is set to a state of CLOSED_RST_RX which causes the heartbeat test message to receive a CloseNowException, this is expected based on our understanding of http/2 and tomcat. However the stream does not actually get closed because the asyncStateMachine is not updated and remains in a state of STARTED. This keeps the stream, stream processor, and associated resources from being closed and garbage collected. Streams in this state are only cleaned up when their asyncTimeout expires and the AbstractProtocol's timeoutFuture calls the processor's timeoutAsync method.\n\nThe memory used by the closed streams is leaked until they timeout.\n\nThe streams appear to be stuck in this state because when the application attempts to send the heartbeat message the Http2UpgradeHandler calls doStreamCancel when reserving the window size because the stream state does not allow writing. doStreamCancel sets the error flag on the stream's coyoteResponse (Stream.java line 275) and returns the CloseNowException. After the CloseNowException is returned the AbstractProcessor attempts to set the error state to CLOSE_NOW (AbstractProcessor line 241) but this fails to update the asyncStateMachine to an ERROR state because the if condition depends on the setError flag being true. But the setError flag can never be true in this scenario because the response error flag had already been set in doStreamCancel. This means the asyncStateMachine is never set to an error state or told to process an ERROR SocketEvent.\n\nboolean setError = response.setError();\n        boolean blockIo = this.errorState.isIoAllowed() && !errorState.isIoAllowed();\n        this.errorState = this.errorState.getMostSevere(errorState);\n        // Don't change the status code for IOException since that is almost\n        // certainly a client disconnect in which case it is preferable to keep\n        // the original status code http://markmail.org/message/4cxpwmxhtgnrwh7n\n        if (response.getStatus() < 400 && !(t instanceof IOException)) {\n            response.setStatus(500);\n        }\n        if (t != null) {\n            request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);\n        }\n        if (blockIo && isAsync() && setError) { <- setError is always false\n            if (asyncStateMachine.asyncError()) {\n                processSocketEvent(SocketEvent.ERROR, true);\n            }\n        }\n\nWe deployed a patched version of AbstractProcessor with the if condition like this:\n\nif (blockIo && isAsync() && !asyncStateMachine.isAsyncError()) {\n\nOur assumption is that whether the asyncStateMachine should process an ERROR event should depend on if the asyncStateMachine is already in an error state not on if the coyote Response is already in an error state.\n\nConnector settings used:\n<Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11Nio2Protocol\"\n               connectionTimeout=\"20000\" maxThreads=\"150\"\n               SSLEnabled=\"true\" scheme=\"https\" secure=\"true\" useAsyncIO=\"false\" >\n        <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n        <SSLHostConfig>\n\t\t\t<Certificate certificateKeystoreFile=\"conf/certs/devkeystore\"\n\t\t\t\t\t\t type=\"RSA\"/>\n        </SSLHostConfig>\n    </Connector>\n\nNote: issue occurred with NIO and APR protocol as well. useAsyncIO had to be set to false because we encountered a different bug when it was set to true.",
    "comments": [
      "Did some additional testing to confirm that the registered Spring SSE emitter onError callbacks are not being called due to this bug.",
      "Thanks of the report and the research. That all makes sense.\n\nWhile previous refactoring of error handling has improved things, there are still aspects that I don't like and one of them is CoyoteResponse.setError() returning a boolean value. It looks like that is going to have to be addressed as part of the fix for this issue.\n\nMy plan is to proceed as follows:\n- create a test case for this bug based on the description\n- fix this bug by refactoring AsyncStateMachine.asyncError to be a NO-OP for the second and subsequent calls within an async cycle (cycle == generation in the code)\n\nIf time allows, I may complete so other refactoring I have in mind for error handling.",
      "Fixed in:\n- 11.0.x for 11.0.0-M10 onwards\n- 10.1.x for 10.1.12 onwards\n-  9.0.x for  9.0.79 onwards\n-  8.5.x for  8.5.92 onwards",
      "*** Bug 66875 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2023-08-03T17:06:04Z",
    "fixes": [
      66841
    ]
  },
  {
    "id": 39724,
    "summary": "Bug on StandardPipeline.removeValve(Valve valve) for T5.5.16+",
    "description": "I run into this problem with T5 when tring to add/remove/add a valve to the\nstandard engine. -For what I understand an empty pipeline has:\nbasic = StandardEngineValve (For example);\nfirst = null;\n\n-If you add a valve you will get\nbasic = StandardEngineValve\nfirst = myValve (with myValve.next = StandardEngineValve)\n\n-If you remove the valve you will get\nbasic =StandardEngineValve\nfirst = StandardEngineValve\nNote that StandardEngineValve is in first too here.\n\n-If I try to add a new valve given the actual code in  addValve the valve will\nnot be added because (see the **) current = basic and current.getNext() = null;\n\naddValve(Valve valve) {\n \n       // Add this Valve to the set associated with this Pipeline\n       if (first == null) {\n           first = valve;\n           valve.setNext(basic);\n       } else {\n           Valve current = first;\n           while (current != null) {\n**                if (current.getNext() == basic) {\n                   current.setNext(valve);\n                   valve.setNext(basic);\n                   break;\n               }\n               current = current.getNext();\n           }\n       }\n\n   }",
    "comments": [
      "Created attachment 18402\nThe patch on the removeValve Method",
      "Seems like a good suggestion: can you please submit your patch in diff -u\nformat?  Thank you.",
      "Hi,\n  Here is the diff.  My patch had a little type by the way i.e.: == instead of =\n\nAnyway the following works\n\nRegards\n/David\n\n\ndiff -u StandardPipeline.java StandardPipelinePatched.java\n--- StandardPipeline.java       2006-06-15 15:31:12.637965896 -0400\n+++ StandardPipelinePatched.java        2006-06-15 15:30:45.894031592 -0400\n@@ -530,6 +530,9 @@\n             current = current.getNext();\n         }\n\n+        // PATCH: Empty the pipeline if only the basic valve is there\n+        if (first == basic) first = null;\n+\n         if (valve instanceof Contained)\n             ((Contained) valve).setContainer(null);",
      "*** Bug 35914 has been marked as a duplicate of this bug. ***",
      "Patch applied to SVN and will be in 5.5.21 onwards.\n\nThanks for tracking this down and providing the patch."
    ],
    "creation_ts": "2006-06-05T14:01:56Z",
    "fixes": [
      39724
    ]
  },
  {
    "id": 69066,
    "summary": "SPNEGOAuthenticator not working afte switching to java.util.Base64",
    "description": "Created attachment 39748\nThe attached shows, with examples, in which packages the error occurs despite a correctly returned token.\n\nAfter upgrading from Apache Tomcat 9.0.86 to 9.0.89, authentication with SPNEGOAuthentication and Negotiate WWW-Authenticate throws HTTP Status 500 - Internal Server Error:\n\nType Exception Report\nMessage Illegal base64 character 20\nDescription The server encountered an unexpected condition that prevented it from fulfilling the request.\nException\n\njava.lang.IllegalArgumentException: Illegal base64 character 20\n\tjava.base/java.util.Base64$Decoder.decode0(Base64.java:746)\n\tjava.base/java.util.Base64$Decoder.decode(Base64.java:538)\n\torg.apache.catalina.authenticator.SpnegoAuthenticator.doAuthenticate(SpnegoAuthenticator.java:170)\n\torg.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:562)\n\torg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\n\torg.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:660)\n\torg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)\n\torg.apache.coyote.http11.Http11Processor.service(Http11Processor.java:388)\n\torg.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\n\torg.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)\n\torg.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)\n\torg.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\n\torg.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\n\torg.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n\torg.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\n\tjava.base/java.lang.Thread.run(Thread.java:829)\n\n\nAfter switching back to 9.0.86 the problem problem does not occur.\nNo configuration changes were made between versions.",
    "comments": [
      "I have found that the function:\n\nSystem.arraycopy(authorizationBC.getBuffer(), 0, encoded, 0, authorizationBC.getLength());\n\ndoes not skip the first 10 bytes form recaived token (for example: \"Negotiate YIIJqgYGKwYBBQUCoIIJnjCCCZqgMDAuBgkqh....\") and tries to decode whole authorizationBC content with leads to mentioned Illegal base64 character 20 in \"Negotiate YIIJ....\"",
      "I agree, it should have been\nSystem.arraycopy(authorizationBC.getBuffer(), authorizationBC.getStart(), encoded, 0, authorizationBC.getLength());",
      "The fix will be in 11M21, 10.1.25 and 9.0.90. I credited you for the fix since you did all the work for this one, thinks.",
      "*** Bug 69140 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2024-05-28T12:56:49Z",
    "fixes": [
      69066
    ]
  },
  {
    "id": 67938,
    "summary": "Tomcat mishandles large client hello messages",
    "description": "A java client application running previously with java 11 began seeing handshake failures with Tomcat 10.1 when the client app moved to java 17.  OpenJDK engineers reviewed and based on the evidence gathered so far and after a static code analysis, we think that there is a problem in how Apache Tomcat handles TLS handshakes containing large Client Hello packets. We know that versions 10.1.9 to 10.1.15 are affected, but have not looked into other major releases.\n\nWhat follows is a high-level overview of the events that are happening, in our understanding, when the failure manifests:\n\n1) The TLS client sends a Client Hello packet to resume a TLS 1.3 session. The packet is so large (26,660 bytes) that it has to be split into 2 TLS record messages. This splitting occurs at the TLS level, above any possible TCP fragmentation. The first TLS record has a length of 16,372 bytes and the second a length of 10,298 bytes (5 bytes of each TLS record are for the header, and the rest accounts for the Client Hello payload).\n\n2) The method org.apache.tomcat.util.SecureNioChannel::handshake handles the incoming connection, on the TLS server side [1]. In particular, org.apache.tomcat.util.SecureNioChannel::processSNI is called first to peek at the incoming data and check, for example, if the SNI TLS extension is present [2].\n\n3) The most relevant outcomes of the org.apache.tomcat.util.SecureNioChannel::processSNI call are:\n 3.1) The SNI TLS extension is not present. This was probably decided here [3] because the Client Hello didn't fit into a single TLS record. SNI was not present anyways.\n 3.2) A new SSLEngine instance is created for the incoming connection.\n 3.3) The netInBuffer ByteBuffer is filled with bytes from the first TLS record sent by the client, and might include some but not all the bytes from the second TLS record. This is because netInBuffer is initialized to a default size of 16,921 bytes, and both TLS records total 26,670 bytes. netInBuffer is expanded to sslEngine.getSession().getPacketBufferSize() after a read from the network [4] but in practice, because there was no data passed to the SSLEngine yet, this is probably 16,709 bytes (max record size, taken from SSLRecord.maxRecordSize). Expanding to a smaller length has no effect. As a result, netInBuffer has a likely size of 16,921 bytes and is completely full of data.\n 3.4) netInBuffer is assumed to be in a write-ready state at this point, which means that position is set to the end of the filled data, limit is set to capacity, and more bytes can be appended. However, if it's completely full as assumed in #3.3, position would then be equal to limit (which is, in turn, equal to capacity) and more bytes cannot be appended.\n\n4) When returning from org.apache.tomcat.util.SecureNioChannel::processSNI to org.apache.tomcat.util.SecureNioChannel::handshake, the field sniComplete is set to true reflecting that no further calls to ::processSNI are needed for this connection. Execution moves to org.apache.tomcat.util.SecureNioChannel::handshakeUnwrap because the initial state for a SSLEngine is NEED_UNWRAP [5].\n\n5) Once in org.apache.tomcat.util.SecureNioChannel::handshakeUnwrap, the \"netInBuffer.position() == netInBuffer.limit()\" condition evaluates to true [6] and the ByteBuffer::clear method is called on netInBuffer. Position is set to 0 and limit to capacity. As a result, any write to netInBuffer will overwrite unprocessed data. This unprocessed data is the first TLS record and part of the second TLS record, depending on how much is written.\n\n6) More bytes are read into netInBuffer here [7]. Bytes read are probably the remainder of the second TLS record \u2014we know that it's after the TLS record header and that it's at least 5 bytes long\u2014, and the overwrite occurs as anticipated in #5. Data in netInBuffer is now corrupt.\n\n7) The netInBuffer buffer is flipped to a read-ready state [8]. Thus, limit is set to the last position after the overwrite and position is set to 0.\n\n8) netInBuffer is passed to the SSLEngine for unwrapping. The SSLEngine finds data at the beginning of the buffer that does not correspond to the beginning of a TLS record, and fails throwing the exception shown in the server log.\n\nWe think that this error may not show up consistently due to network/OS timing conditions. Different JDK releases, server configurations and TLS protocol versions may also affect the length of the Client Hello message and have an impact on reproducibility. The reason why Client Hello messages for resumption are large in the analyzed client application case with OpenJDK 17 is because a large resumption ticket is passed, but large messages (spanning multiple TLS records) are compliant with the standard and should be handled appropriately.  The following backport for OpenJDK 17 is also being pursued to reduce the message size in this case.  Work arounds in this particular case have included keeping the java client app on java 11, limiting the client app to TLSv1.2, or setting \"jdk.tls.client.enableSessionTicketExtension=false\" on the client.  Nonetheless, it looks like a flaw to address here in Tomcat for large client hello messages whether from some circumstance like above or something else.",
    "comments": [
      "A backport (https://bugs.openjdk.org/browse/JDK-8318950) is being pursued to reduce the message size from a client in such a case on OpenJDK 17.  But a Tomcat level fix may still be required in the end for a large message in some other scenario.",
      "Source code references pertaining to the above:\n\n[1] - https://github.com/apache/tomcat/blob/10.1.9/java/org/apache/tomcat/util/net/SecureNioChannel.java#L147\n[2] - https://github.com/apache/tomcat/blob/10.1.9/java/org/apache/tomcat/util/net/SecureNioChannel.java#L248\n[3] - https://github.com/apache/tomcat/blob/10.1.9/java/org/apache/tomcat/util/net/TLSClientHelloExtractor.java#L112\n[4] - https://github.com/apache/tomcat/blob/10.1.9/java/org/apache/tomcat/util/net/SecureNioChannel.java#L322\n[5] - https://github.com/apache/tomcat/blob/10.1.9/java/org/apache/tomcat/util/net/SecureNioChannel.java#L460\n[6] - https://github.com/apache/tomcat/blob/10.1.9/java/org/apache/tomcat/util/net/SecureNioChannel.java#L462\n[7] - https://github.com/apache/tomcat/blob/10.1.9/java/org/apache/tomcat/util/net/SecureNioChannel.java#L468\n[8] - https://github.com/apache/tomcat/blob/10.1.9/java/org/apache/tomcat/util/net/SecureNioChannel.java#L478",
      "Credit and thanks to Francisco Ferrari and Martin Balao from the OpenJDK engineering team for their analysis leading to this report.",
      "Reproducer Steps\n================\n\nThis reproducer creates an artificially large ClientHello that causes Tomcat to respond with an SSL alert on TLS 1.3 session resumption.  In this test case, a certificate extension with a very long string value is added to the server's certificate.  Wireshark analysis shows the ClientHello preshared key identity can become very large with a large certificate.  Mutual authentication also increases the size of the identity.\n\nIn the following test, the first openssl call will succeed while the second one will fail.\n\n\nSTEP 1 - generate a large certificate\n-------------------------------------\n\n$ cat openssl.cnf \n[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = req_ext\nprompt = no\n\n[req_distinguished_name]\nC   = NA\nST  = NA\nL   = NA\nO   = NA\nOU  = NA\nCN  = localhost\n\n[req_ext]\nsubjectAltName = @alternate_names\n\n[alternate_names]\nDNS.1 = localhost\nDNS.2 = *.localhost\n\n[ v3_ca ]\nsubjectKeyIdentifier=hash\nauthorityKeyIdentifier=keyid:always,issuer\nbasicConstraints = critical,CA:true\nsubjectAltName = @alternate_names\nkeyUsage = digitalSignature, keyEncipherment\n2.999 = ASN1:UTF8String:LONGSTRING\n\n\n$ sed \"s/LONGSTRING/$(printf '%.0sx' {0..16000})/g\" ./openssl.cnf > openssl-long.cnf\n\n$ cat create-cert.sh \n#!/bin/bash\n\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 7 -nodes -config ./openssl-long.cnf -extensions v3_ca\nopenssl pkcs12 -inkey key.pem -in cert.pem -export -out keystore.p12 -password pass:changeit -name my\nkeytool -importkeystore -srckeystore keystore.p12 -destkeystore keystore.jks -srcstoretype PKCS12 -deststoretype jks -deststorepass changeit -srcstorepass changeit\n\n$ ./create-cert.sh\n\n\nStep 2 - install cert and start Tomcat\n--------------------------------------\n\n\n$ grep --after-context 8 \"<Connector.*8443\" conf/server.xml \n    <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\"\n               maxParameterCount=\"1000\"\n               >\n        <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n\t<SSLHostConfig protocols=\"all\" >\n\t\t<Certificate certificateKeystoreFile=\"conf/keystore.jks\" type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\n\n$ cp $CERT_DIR/keystore.jks conf/keystore.jks\n\n$ bin/catalina.sh run\n\nStep 3 - test\n-------------\n\n$ cat test.sh \n#!/bin/bash\n\necho -en \"GET / HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n\" | openssl s_client -connect localhost:8443 -sess_out session -tls1_3 -quiet -CAfile=cert.pem\necho -en \"GET / HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n\" | openssl s_client -connect localhost:8443 -sess_in session -tls1_3 -quiet -CAfile=cert.pem\n\n$ ./test.sh \n...\n003E54FCFD7E0000:error:0A000438:SSL routines:ssl3_read_bytes:tlsv1 alert internal error:ssl/record/rec_layer_s3.c:1586:SSL alert number 80",
      "Many thanks for the clear, reproducible test case. I am able to reproduce this.\n\nI haven't confirmed the analysis but it looks right.\n\nI'm looking at potential fixes now.",
      "Fixed in:\n- 11.0.x for 11.0.0-M14 onwards\n- 10.1.x for 10.1.16 onwards\n-  9.0.x for  9.0.83 onwards\n-  8.5.x for  8.5.96 onwards"
    ],
    "creation_ts": "2023-10-27T19:24:20Z",
    "fixes": [
      67938
    ]
  },
  {
    "id": 49869,
    "summary": "Javadoc for WebAppClassLoader constructor has copy/paste error",
    "description": "The constructor that takes a parent class loader has a copy of the doc string from the constructor that does not take a parent class loader.",
    "comments": [
      "Thanks.\nFixed in r992234 (trunk), r992238 (tc6) and r992240 (tc5.5)."
    ],
    "creation_ts": "2010-09-02T18:26:13Z",
    "fixes": [
      49869
    ]
  },
  {
    "id": 65272,
    "summary": "Problems proccessing HTTP request without CR in last versions",
    "description": "With last versions of Apache Tomcat 9, we have problems to process http request created by legacy systems that haven't <CR> separating the sections of a HTTP Request, having only a LF as delimeter.\n\nThe error returned by Tomcat is:\njava.lang.IllegalArgumentException: Invalid character found in the HTTP protocol [HTTP/1.00x0aUser-Agent:]\nat org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:559)\nat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:261)\n\n\n\nThis request fails in Apache Tomcat 9.0.45, 9.0.41 but works in Apache Tomcat 9.0.26 or in Apache Tomcat 7.\n\n\nPOST /sms/feedback HTTP/1.0[LF]\nUser-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows 98; DigExt)[LF]\nHost: 10.252.12.1[LF]\nProxy-Connection: Keep-Alive[LF]\nContent-Type: text/xml; charset=utf-8[LF]\nContent-Length: 308[LF]\n[LF]\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>[LF]\n<RESPUESTA>[LF]\n<TIPO>2</TIPO>[LF]\n<ADC>R</ADC>[LF]\n<OADC>666111222</OADC>[LF]\n<SCTS>270421133100</SCTS>[LF]\n<DSCTS>270421133100</DSCTS>[LF]\n<IDMSG>17913195f93000088ee6b37de829cba3</IDMSG>[LF]\n<AMSG>El mensaje enviado al numero 666111222 ha sido entregado el 27.04.21 13:31:00</AMSG>[LF]\n</RESPUESTA>[LF]\n\n\n\nThis request works:\n\nPOST /sms/feedback HTTP/1.0[CRLF]\nUser-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows 98; DigExt)[CRLF]\nHost: 10.252.12.1[CRLF]\nProxy-Connection: Keep-Alive[CRLF]\nContent-Type: text/xml; charset=utf-8[CRLF]\nContent-Length: 308[CRLF]\n[CRLF]\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>[CRLF]\n<RESPUESTA>[CRLF]\n<TIPO>2</TIPO>[CRLF]\n<ADC>R</ADC>[CRLF]\n<OADC>666111222</OADC>[CRLF]\n<SCTS>270421133100</SCTS>[CRLF]\n<DSCTS>270421133100</DSCTS>[CRLF]\n<IDMSG>17913195f93000088ee6b37de829cba3</IDMSG>[CRLF]\n<AMSG>El mensaje enviado al numero 666111222 ha sido entregado el 27.04.21 13:31:00</AMSG>[CRLF]\n</RESPUESTA>[CRLF]\n\n\n\n\nYou can test this using this java code (supossing tha Tomcat is running on 8080 port at localhost):\nThe mensaje2 variable works fine (CRLF is represented by 13,10 codes).\nThe mensaje2 fails (LF is represented by 10 code)\n\n\n\n\t\tint[] mensaje2 = {80,79,83,84,32,47,115,109,115,47,102,101,101,100,98,97,99,107,32,72,84,84,80,47,49,46,48,13,10,85,115,101,114,45,65,103,101,110,116,58,32,77,111,122,105,108,108,97,47,52,46,48,32,40,99,111,109,112,97,116,105,98,108,101,59,32,77,83,73,69,32,\n\t\t53,46,48,59,32,87,105,110,100,111,119,115,32,57,56,59,32,68,105,103,69,120,116,41,13,10,72,111,115,116,58,32,49,48,46,50,53,50,46,49,50,46,49,13,10,80,114,111,120,121,45,67,111,110,110,101,99,116,105,111,110,58,32,75,101,101,112,45,65,108,105,\n\t\t118,101,13,10,67,111,110,116,101,110,116,45,84,121,112,101,58,32,116,101,120,116,47,120,109,108,59,32,99,104,97,114,115,101,116,61,117,116,102,45,56,13,10,67,111,110,116,101,110,116,45,76,101,110,103,116,104,58,32,51,48,56,13,10,13,10,60,63,120,109,\n\t\t108,32,118,101,114,115,105,111,110,61,34,49,46,48,34,32,101,110,99,111,100,105,110,103,61,34,85,84,70,45,56,34,63,62,13,10,60,82,69,83,80,85,69,83,84,65,62,10,60,84,73,80,79,62,50,60,47,84,73,80,79,62,10,60,65,68,67,62,82,60,47,65,68,67,62,\n\t\t10,60,79,65,68,67,62,54,55,55,50,50,50,53,54,50,60,47,79,65,68,67,62,10,60,83,67,84,83,62,50,55,48,52,50,49,49,51,51,49,48,48,60,47,83,67,84,83,62,10,60,68,83,67,84,83,62,50,55,48,52,50,49,49,51,51,49,48,48,60,47,68,83,67,84,83,62,10,60,\n\t\t73,68,77,83,71,62,49,55,57,49,51,49,57,53,102,57,51,48,48,48,48,56,56,101,101,54,98,51,55,100,101,56,50,57,99,98,97,51,60,47,73,68,77,83,71,62,10,60,65,77,83,71,62,69,108,32,109,101,110,115,97,106,101,32,101,110,118,105,97,100,111,32,97,\n\t\t108,32,110,117,109,101,114,111,32,54,55,55,50,50,50,53,54,50,32,104,97,32,115,105,100,111,32,101,110,116,114,101,103,97,100,111,32,101,108,32,50,55,46,48,52,46,50,49,32,49,51,58,51,49,58,48,48,60,47,65,77,83,71,62,10,60,47,82,69,83,80,85\n\t\t,69,83,84,65,62};\n\t\t\n\t\tint[] mensaje = {80,79,83,84,32,47,115,109,115,47,102,101,101,100,98,97,99,107,32,72,84,84,80,47,49,46,48,10,85,115,101,114,45,65,103,101,110,116,58,32,77,111,122,105,108,108,97,47,52,46,48,32,40,99,111,109,112,97,116,105,98,108,101,59,32,77,83,73,69,32,\n\t\t\t\t53,46,48,59,32,87,105,110,100,111,119,115,32,57,56,59,32,68,105,103,69,120,116,41,10,72,111,115,116,58,32,49,48,46,50,53,50,46,49,50,46,49,10,80,114,111,120,121,45,67,111,110,110,101,99,116,105,111,110,58,32,75,101,101,112,45,65,108,105,\n\t\t\t\t118,101,10,67,111,110,116,101,110,116,45,84,121,112,101,58,32,116,101,120,116,47,120,109,108,59,32,99,104,97,114,115,101,116,61,117,116,102,45,56,10,67,111,110,116,101,110,116,45,76,101,110,103,116,104,58,32,51,48,56,10,10,60,63,120,109,\n\t\t\t\t108,32,118,101,114,115,105,111,110,61,34,49,46,48,34,32,101,110,99,111,100,105,110,103,61,34,85,84,70,45,56,34,63,62,10,60,82,69,83,80,85,69,83,84,65,62,10,60,84,73,80,79,62,50,60,47,84,73,80,79,62,10,60,65,68,67,62,82,60,47,65,68,67,62,\n\t\t\t\t10,60,79,65,68,67,62,54,55,55,50,50,50,53,54,50,60,47,79,65,68,67,62,10,60,83,67,84,83,62,50,55,48,52,50,49,49,51,51,49,48,48,60,47,83,67,84,83,62,10,60,68,83,67,84,83,62,50,55,48,52,50,49,49,51,51,49,48,48,60,47,68,83,67,84,83,62,10,60,\n\t\t\t\t73,68,77,83,71,62,49,55,57,49,51,49,57,53,102,57,51,48,48,48,48,56,56,101,101,54,98,51,55,100,101,56,50,57,99,98,97,51,60,47,73,68,77,83,71,62,10,60,65,77,83,71,62,69,108,32,109,101,110,115,97,106,101,32,101,110,118,105,97,100,111,32,97,\n\t\t\t\t108,32,110,117,109,101,114,111,32,54,55,55,50,50,50,53,54,50,32,104,97,32,115,105,100,111,32,101,110,116,114,101,103,97,100,111,32,101,108,32,50,55,46,48,52,46,50,49,32,49,51,58,51,49,58,48,48,60,47,65,77,83,71,62,10,60,47,82,69,83,80,85\n\t\t\t\t,69,83,84,65,62};\n\t\t\n\t\ttry {\n\n\t\t\tSocket sock = new Socket(\"127.0.0.1\", 8080);\n\t\t\t\n\t\t\tfor (int i=0; i<mensaje.length; i++) {\n\t\t\t\tsock.getOutputStream().write(mensaje[i]);\n\t\t\t}\n\t\t\t\n\t\t\tBufferedReader buffer = new BufferedReader(new InputStreamReader(sock.getInputStream()));\n\t\t\t\n\t\t\tint b;\n\t\t\twhile ((b = buffer.read()) >= 0) {\n\t\t\t\tSystem.out.print((char) b);\n\t\t\t}\n\t\t\t\t\t\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\nThank you",
    "comments": [
      "How old are those systems?",
      "(In reply to Michael Osipov from comment #1)\n> How old are those systems?\n\nI haven't the data. But I see that HTTP request are 1.0 version... then is very old...\nWe have some legacy systems. One of these is a SMS Center that we can't change.\n\nWe are afraid because this problem can set our max Tomcat Version to 9.0.26 (I didn't try with all versions between 9.0.26 and 9.0.41).\n\nWe know that http standard specify <cr><lf> to separate the components of a HTTP request, but this new behaviour detected in last versions generate problems for us in some use cases.",
      "This stricter parsing was introduced as part of the fix for CVE-2020-1935.\n\nBecause the fix was in response to a security issue, that makes it a lot less likely the current behaviour will be changed. \n\nI'll note that both RFC 7230 and RFC 2616 state that recipients MAY treat single LR as a line terminator. That makes the behaviour entirely optional and Tomcat is still fully HTTP spec compliant by opting to reject requests that use LF as the line terminator.\n\nI need to look into the details of that vulnerability to see if there are any options to relax the current behaviour without re-introducing a security concern.",
      "(In reply to Mark Thomas from comment #3)\n> This stricter parsing was introduced as part of the fix for CVE-2020-1935.\n> \n> Because the fix was in response to a security issue, that makes it a lot\n> less likely the current behaviour will be changed. \n> \n> I'll note that both RFC 7230 and RFC 2616 state that recipients MAY treat\n> single LR as a line terminator. That makes the behaviour entirely optional\n> and Tomcat is still fully HTTP spec compliant by opting to reject requests\n> that use LF as the line terminator.\n> \n> I need to look into the details of that vulnerability to see if there are\n> any options to relax the current behaviour without re-introducing a security\n> concern.\n\n\n\nThank you for your work.\n\nAdditional information: Now we see that the first version with problems are 9.0.31 (doesn't response) and with 9.0.33 the response is the reported originally.\n\nWe wait for news.\nRegards",
      "I've started to look at this. So far I have spotted a couple of minor issues with the current parsing that I need to fix. Commits for those will follow shortly.\n\nI haven't yet found any reason not to allow LF as a line terminator but I am still reviewing the parsing code.",
      "It currently looks like this is fixable. PR at https://github.com/apache/tomcat/pull/417\n\nNeed to allow time for the Tomcat community to review the PR.",
      "Fixed in:\n- 10.0.x for 10.0.6 onwards\n- 9.0.x for 9.0.46 onwards\n- 8.5.x for 8.5.66 onwards"
    ],
    "creation_ts": "2021-04-28T12:31:09Z",
    "fixes": [
      65272
    ]
  },
  {
    "id": 60940,
    "summary": "\"unpackWARs=false\" causes different behavior of classloader",
    "description": "Hi all,\n\nwhen I try to run my JSF 2.2 application which uses Richfaces on a Tomcat 8 with \"unpackWARs=false\" some parts of Richfaces/JSF will not be loaded during startup. This is caused by a different behavior of the classloader when the app cannot be unpacked by the server. \n\nDuring JSF startup is searches for all Jar files which include a \"META-INF/\" folder. This is done by calling getResources(\"META-INF/\") on the classloader. In all found resources it searches for taglibs and faces config extensions. The problem now is, that the calssloader returns a different number of resources when the app is unpacked and when the app is deployed a zip file. \n\nThis is caused by a the way the classloader deals with JarWarRessources. When the app is unpacked the server uses direct jar file access und searches in the zip file for the folder. In this case every jar with a \"META-INF/\" folder is found. When the app is a war file which cannot be unpacked by the server the \"JarWarRessourceSet\" uses a \"JarInputStream\" to read and cache the jar files content. But this input stream skips the \"META-INF/\" folder by default:\n\nJarFileInputStream.java\n\n...\n\n    public JarInputStream(InputStream in, boolean verify) throws IOException {\n        super(in);\n        this.doVerify = verify;\n\n        // This implementation assumes the META-INF/MANIFEST.MF entry\n        // should be either the first or the second entry (when preceded\n        // by the dir META-INF/). It skips the META-INF/ and then\n        // \"consumes\" the MANIFEST.MF to initialize the Manifest object.\n        JarEntry e = (JarEntry)super.getNextEntry();\n        if (e != null && e.getName().equalsIgnoreCase(\"META-INF/\"))\n            e = (JarEntry)super.getNextEntry();\n        first = checkManifest(e);\n    }\n\n... \n\nThis will cause the issues with the app because some parts(taglibs and faces config extensions) cannot be loaded. \n\nYou can reproduce the issue with the richfaces sample project which can be generated via maven:\n\nmvn archetype:generate -DarchetypeGroupId=org.richfaces.archetypes -DarchetypeArtifactId=richfaces-archetype-simpleapp -DarchetypeVersion=4.5.17.Final -DgroupId=org.docs.richfaces -DartifactId=new_project\n\nReplace the sample projects pom by this one (sorry I'm not able to upload files from this workstation):\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.docs.richfaces</groupId>\n    <artifactId>new_project</artifactId>\n    <name>RichFaces 4 Application</name>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <url>http://jboss.org/richfaces</url>\n\n    <repositories>\n        <!-- You should seriously consider using a repository manager or declare repositories in your settings.xml.\n        See http://www.sonatype.com/people/2009/02/why-putting-repositories-in-your-poms-is-a-bad-idea/   -->\n        <repository>\n            <id>jboss-public-repository-group</id>\n            <name>JBoss Public Maven Repository Group</name>\n            <url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url>\n            <layout>default</layout>\n            <releases>\n                <enabled>true</enabled>\n                <updatePolicy>never</updatePolicy>\n            </releases>\n            <snapshots>\n                <enabled>true</enabled>\n                <updatePolicy>never</updatePolicy>\n            </snapshots>\n        </repository>\n    </repositories>\n    <pluginRepositories>\n        <pluginRepository>\n            <id>jboss-public-repository-group</id>\n            <name>JBoss Public Maven Repository Group</name>\n            <url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url>\n            <layout>default</layout>\n            <releases>\n                <enabled>true</enabled>\n                <updatePolicy>never</updatePolicy>\n            </releases>\n            <snapshots>\n                <enabled>true</enabled>\n                <updatePolicy>never</updatePolicy>\n            </snapshots>\n        </pluginRepository>\n    </pluginRepositories>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.source>1.6</maven.compiler.source>\n        <maven.compiler.target>1.6</maven.compiler.target>\n        <!-- Setting this property using archetype-metadata.xml requiredPorperty\n            so that generated project uses correct version of richfaces.\n        -->\n        <org.richfaces.version>4.5.17.Final</org.richfaces.version>\n        <version.jsp-api>2.1</version.jsp-api>\n        <version.jstl-api>1.2</version.jstl-api>\n        <version.servlet-api>3.0.1</version.servlet-api>\n        <version.el-api>2.2</version.el-api>\n    </properties>\n\n    <build>\n        <finalName>new_project</finalName>\n        <plugins>\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>2.3.2</version>\n            </plugin>\n            <plugin>\n                <artifactId>maven-war-plugin</artifactId>\n                <version>2.3</version>\n                <configuration>\n                    <warName>${project.artifactId}</warName>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.richfaces</groupId>\n                <artifactId>richfaces-cache-bom</artifactId>\n                <type>pom</type>\n                <version>${org.richfaces.version}</version>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.richfaces</groupId>\n                <artifactId>richfaces-build</artifactId>\n                <type>pom</type>\n                <version>${org.richfaces.version}</version>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.richfaces</groupId>\n            <artifactId>richfaces</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>javax.faces</groupId>\n            <artifactId>javax.faces-api</artifactId>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish</groupId>\n            <artifactId>javax.faces</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>javax.servlet-api</artifactId>\n            <version>${version.servlet-api}</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet.jsp</groupId>\n            <artifactId>jsp-api</artifactId>\n            <version>2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.el</groupId>\n            <artifactId>el-api</artifactId>\n            <version>${version.el-api}</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet.jsp.jstl</groupId>\n            <artifactId>jstl-api</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>net.sf.ehcache</groupId>\n            <artifactId>ehcache</artifactId>\n        </dependency>\n    </dependencies>\n\n    <profiles>\n        <profile>\n            <id>jee6</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <artifactId>maven-war-plugin</artifactId>\n                        <configuration>\n                            <webappDirectory>${project.build.directory}/${project.build.finalName}-jee6</webappDirectory>\n                            <classifier>jee6</classifier>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n\n            <dependencies>\n                <dependency>\n                    <groupId>javax.faces</groupId>\n                    <artifactId>javax.faces-api</artifactId>\n                    <scope>provided</scope>\n                </dependency>\n                <dependency>\n                    <groupId>org.glassfish</groupId>\n                    <artifactId>javax.faces</artifactId>\n                    <scope>provided</scope>\n                </dependency>\n                <dependency>\n                    <groupId>javax.transaction</groupId>\n                    <artifactId>jta</artifactId>\n                    <version>1.1</version>\n                    <scope>provided</scope>\n                </dependency>\n            </dependencies>\n        </profile>\n        <profile>\n            <id>release</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <artifactId>maven-war-plugin</artifactId>\n                        <executions>\n                            <execution>\n                                <id>jee6</id>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>war</goal>\n                                </goals>\n\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n</project>\n\n\nSet \" <Host appBase=\"webapps\" autoDeploy=\"false\" name=\"localhost\" unpackWARs=\"false\">\" in the server.xml of the tomcat. \n\n1) copy the applications war file to the webapps folder and start the tomcat. When accessing the index.xhtml you can see that richfaces is not loaded correctly. \n\n2) copy a the unzipped war file to the webapps folder an start the server.When accessing the index.xhtml you can see that richfaces is loaded correctly. \n\nTo make the difference more clear you can add a \"<a4j:log/>\" to the index.xhtml. \n\nRegards,\nVincent",
    "comments": [
      "Thanks for the report and the test case.\n\nThis has been fixed in:\n- trunk for 9.0.0.M20 onwards\n- 8.5.x for 8.5.14 onwards\n- 8.0.x for 8.0.44 onwards\n\n7.0.x is not affected"
    ],
    "creation_ts": "2017-03-30T05:34:08Z",
    "fixes": [
      60940
    ]
  },
  {
    "id": 66194,
    "summary": "When using http2 and maxHeaderSize is exceeded, nothing is logged",
    "description": "We are using http2 and we have some requests with many cookies and this results in us exceeding the maxHeaderSize limit. This has taken a very long time to track down as tomcat does not log anything under these conditions - prior to http2 I'm pretty sure this situation was logged (at least once).\n\nThe code in question is:\n\nif (hpackDecoder.isHeaderSizeExceeded(headerReadBuffer.position())) {\n                StreamException headerException = new StreamException(sm.getString(\n                        \"http2Parser.headerLimitSize\", connectionId, Integer.valueOf(streamId)),\n                        Http2Error.ENHANCE_YOUR_CALM, streamId);\n                hpackDecoder.getHeaderEmitter().setHeaderException(headerException);\n            }\n\nNote: it is logged if I turn on debug logging but we can't do that in production.\n\no.a.coyote.http2.Http2UpgradeHandler     : Connection [1], Stream [1], Error [ENHANCE_YOUR_CALM], Message [Connection [1], Stream [1], Total header size too big],  RST (closing stream)\n\nCould this be logged as a warning, so we can at least detect this situation in production?",
    "comments": [
      "Logging every instance of this opens up the potential for a DoS.\n\nWe can look at the possibility of mirroring the logging used for HTTP/1.1 which logs via a UserDataHelper instance.",
      "Logging at least the first instance would be much more helpful than the current situation.",
      "Fixed in:\n- 10.1.x for 10.1.0-M18 onwards\n- 10.0.x for 10.0.24 onwards\n-  9.0.x for  9.0.66 onwards\n-  8.5.x for  8.5.83 onwards"
    ],
    "creation_ts": "2022-08-01T20:46:22Z",
    "fixes": [
      66194
    ]
  },
  {
    "id": 64210,
    "summary": "parsing request headers fail",
    "description": "Since we switched to tomcat 9.0.31, a lot of responses fail with HTTP status 400 Bad Request.\n\norg.apache.coyote.http11.Http11Processor tells us, that the requests fail due to \"The HTTP/1.1 request did not provide a host header\". But the affected requests all have a host header.\n\nWe found out that this problem occurs when a request is send in multiple TCP-packets and one packet ends with (CR) an the next starts with (LF).\n\ne.g.\nTCP packet 1: \"Accept: image/webp,*/*(CR)\",\nTCP packet 2: \"(LF)Host: www.myhost.com(CR)(LF)(CR)(LF)\"\n\nAs far as I can see, there was a change in header parsing between 9.0.30 and 9.0.31:\nhttps://github.com/apache/tomcat/commit/ae8c82eff96990878e79691819ae941538ee62fd#diff-6d40d03c206f9d0696e5fa2c3b015c2e\n\nMy suspicion is that - if the bytebuffer used in org.apache.coyote.http11.Http11InputBuffer.parseHeader() starts with an (LF), parsing fails.\nIn previous version a LF lead to parse status DONE:\n\n            } else if (chr == Constants.LF) {\n                return HeaderParseStatus.DONE;\n\nBut now the previous char has to be a (CR), which may be not the case, if the ByteBuffer just got filled with the part that starts with the (LF) \n\n            } else if (prevChr == Constants.CR && chr == Constants.LF) {\n                return HeaderParseStatus.DONE;\n\n(with the assumption to the new behaviour I'm not 100% sure though)\n\nAfter having a first look at the parseHeader()-method, it may be useful to initialize prevChr with the char at ByteBuffer's previous position.",
    "comments": [
      "I'll take a look.\n\nWhat is triggering the headers to split across multiple TCP packets? That seems a little unusual.",
      "It's just some large requests (a lot of cookies).\n\nI have done some wireshark traffic recordings. For example one request was split  into a 2948 bytes TCP packet (ending with CR) and a 539 bytes packet (starting with LF)",
      "Thanks. I'm able to reproduce this. I'm working on some additional test cases and a fix.",
      "Fixed in:\n- master for 10.0.0-M3 onwards\n- 9.0.x for 9.0.33 onwards\n- 8.5.x for 8.5.53 onwards\n- 7.0.x for 7.0.102 onwards",
      "Thanks for the fast reaction and fix (y).",
      "I assume this was intentional, but in the event it wasn't, the combination of the patch for this issue and the previous \"strict header value parsing\" commit have resulted in Tomcat rejecting all requests that use a single LF as a delimiter between HTTP request lines as opposed to the correct delimiter of CRLF.\n\nPer RFC 2616 Section 19.3 (https://tools.ietf.org/html/rfc2616#section-19.3) it is recommended that applications be tolerant of malformed requests, with HTTP header delimiters called out as a particular area of note:\n> The line terminator for message-header fields is the sequence CRLF.\n> However, we recommend that applications, when parsing such headers,\n> recognize a single LF as a line terminator and ignore the leading CR.\n\nAfter deploying Tomcat 8.5.53 in our environment, we noticed that our hardware load balancers were sending malformed requests of the following format to perform host liveness checks against our app servers:\nGET /foo HTTP/1.0\\nHost: host.example.com \\nConnection: Close\\r\\n\\r\\n\n\nWe are able to correct these requests (thankfully) but this behavior wasn't called out in the Tomcat release notes. It also represents a stricter interpretation of RFC 2616 than other major web server software, so I figured I'd at least flag it here.",
      "(In reply to Em Domingues from comment #6)\n> I assume this was intentional, but in the event it wasn't, the combination\n> of the patch for this issue and the previous \"strict header value parsing\"\n> commit have resulted in Tomcat rejecting all requests that use a single LF\n> as a delimiter between HTTP request lines as opposed to the correct\n> delimiter of CRLF.\n> \n> Per RFC 2616 Section 19.3 (https://tools.ietf.org/html/rfc2616#section-19.3)\n> it is recommended that applications be tolerant of malformed requests, with\n> HTTP header delimiters called out as a particular area of note:\n> > The line terminator for message-header fields is the sequence CRLF.\n> > However, we recommend that applications, when parsing such headers,\n> > recognize a single LF as a line terminator and ignore the leading CR.\n> \n> After deploying Tomcat 8.5.53 in our environment, we noticed that our\n> hardware load balancers were sending malformed requests of the following\n> format to perform host liveness checks against our app servers:\n> GET /foo HTTP/1.0\\nHost: host.example.com \\nConnection: Close\\r\\n\\r\\n\n> \n> We are able to correct these requests (thankfully) but this behavior wasn't\n> called out in the Tomcat release notes. It also represents a stricter\n> interpretation of RFC 2616 than other major web server software, so I\n> figured I'd at least flag it here.\n\nI can't find similar in https://tools.ietf.org/html/rfc7230#section-3.1.1\n\nRFC 2616 is obsolete.",
      "(In reply to Michael Osipov from comment #7)\n> (In reply to Em Domingues from comment #6)\n> > I assume this was intentional, but in the event it wasn't, the combination\n> > of the patch for this issue and the previous \"strict header value parsing\"\n> > commit have resulted in Tomcat rejecting all requests that use a single LF\n> > as a delimiter between HTTP request lines as opposed to the correct\n> > delimiter of CRLF.\n> > \n> > Per RFC 2616 Section 19.3 (https://tools.ietf.org/html/rfc2616#section-19.3)\n> > it is recommended that applications be tolerant of malformed requests, with\n> > HTTP header delimiters called out as a particular area of note:\n> > > The line terminator for message-header fields is the sequence CRLF.\n> > > However, we recommend that applications, when parsing such headers,\n> > > recognize a single LF as a line terminator and ignore the leading CR.\n> > \n> > After deploying Tomcat 8.5.53 in our environment, we noticed that our\n> > hardware load balancers were sending malformed requests of the following\n> > format to perform host liveness checks against our app servers:\n> > GET /foo HTTP/1.0\\nHost: host.example.com \\nConnection: Close\\r\\n\\r\\n\n> > \n> > We are able to correct these requests (thankfully) but this behavior wasn't\n> > called out in the Tomcat release notes. It also represents a stricter\n> > interpretation of RFC 2616 than other major web server software, so I\n> > figured I'd at least flag it here.\n> \n> I can't find similar in https://tools.ietf.org/html/rfc7230#section-3.1.1\n> \n> RFC 2616 is obsolete.\n\nI'm aware. This still runs counter to the robustness principle, no?\n\nFor example, the implementation is inconsistent in where it errs on the side of being strict (here) and where it errs on the side of being tolerant (allowing multiple SP or HT between tokens) even when that's similarly against spec: https://github.com/apache/tomcat/blob/ae8c82eff96990878e79691819ae941538ee62fd/java/org/apache/coyote/http11/Http11InputBuffer.java#L404",
      "I don't think the current solution resolved all the header issues.\nFor example, our project use Socket TCP to monitor Tomcat status like this:\n\"get /platform HTTP/1.0\\n\\n\" (double \\n, no \\r) \n\nBefore version 8.5.50 (same for 9.0.30), it response 302 like:\n2020-03-09 21:17:12.000 CST DEBUG [18950:140054285395776] childHeartbeat: child reply=HTTP/1.1 302 ^M\nLocation: http://localhost:8080/platform/^M\nDate: Mon, 09 Mar 2020 13:17:12 GMT^M\nConnection: close^M\nServer: This information has been blocked for security reasons^M\n^M\n\nWith 8.5.51 (9.0.31), it no response and make my monitor always wrongly restart Tomcat.\n\nWith 8.5.53 (9.0.33), it response 400 like:\n2020-03-23 18:58:45.000 CST DEBUG [8584:140509820770112] childHeartbeat: child reply=HTTP/1.1 400 ^M\nContent-Type: text/html;charset=utf-8^M\nContent-Language: en^M\nContent-Length: 1823^M\nDate: Mon, 23 Mar 2020 10:58:45 GMT^M\nConnection: close^M\nServer: This information has been blocked for security reasons^M\n^M\n<!doctype html><html lang=\"en\"><head><title>HTTP Status 400 \u2013 Bad Request</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {c\n\nCan I configure any parameters to ignore such situation?\nI tried rejectIllegalHeader=\"false\", and relaxedQueryChars=\"|{}\\r\\n\", relaxedPathChars=\"|{}\\r\\n\" but no effect.\n\nThanks\nXing",
      "(In reply to Xing from comment #9)\n> I don't think the current solution resolved all the header issues.\n> For example, our project use Socket TCP to monitor Tomcat status like this:\n> \"get /platform HTTP/1.0\\n\\n\" (double \\n, no \\r) \n\nThat request is invalid and is, therefore, rejected with a 400 response.\n\nYou can fix the issue by correcting the broken client.",
      "(In reply to Mark Thomas from comment #10)\n> (In reply to Xing from comment #9)\n> > I don't think the current solution resolved all the header issues.\n> > For example, our project use Socket TCP to monitor Tomcat status like this:\n> > \"get /platform HTTP/1.0\\n\\n\" (double \\n, no \\r) \n> \n> That request is invalid and is, therefore, rejected with a 400 response.\n> \n> You can fix the issue by correcting the broken client.\n\nNo configuration to resolve this?\nThen should I remove the \"\\n\" in my request?\n\nThanks\nXing",
      "The correct line terminator for an HTTP/1.0 request is CRLF (\"/r/n\"). You should use that.",
      "(In reply to Mark Thomas from comment #12)\n> The correct line terminator for an HTTP/1.0 request is CRLF (\"/r/n\"). You\n> should use that.\n\nThanks a lot, I'm compiling :)\n\nXing",
      "I'm using tomcat 9.0.38 on windows 10, i'm getting request from a device, and tomcat showing the follow message on console: \n\n\"08-Dec-2020 00:11:11.539 INFO [http-nio-8080-exec-5] org.apache.coyote.http11.Http11Processor.service Error parsing HTTP request header\n Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level.\n        java.lang.IllegalArgumentException: Invalid character found in the HTTP protocol [HTTP/1.10x0aHost:]\"\n\nThis is my server.xml conector section:\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n\t\t\t\tconnectionTimeout=\"20000\"\n\t\t\t\tredirectPort=\"8443\" \n\t\t\t\tURIEncoding=\"UTF-8\"\n\t\t\t\trejectIllegalHeader=\"false\"\n\t\t\t\trelaxedPathChars ='[]|'\n\t\t\t   />\ni believe that the value 0x0a represent the chracter (LF), but i can't access to modify the device request.\n\nNote: If i test from JavaWebClientSockect or from \"Smart Websockect Client\" chrome-extension plugin; the tomcat work fine.\n\nThank in advanced for your support.",
      "I'm using tomcat 9.0.38 on windows 10, when the tomcat server get request from a device, with protocol ws (Websockect), show the following message:\n\" INFO [http-nio-8080-exec-5] org.apache.coyote.http11.Http11Processor.service Error parsing HTTP request header\n Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level.\n        java.lang.IllegalArgumentException: Invalid character found in the HTTP protocol [HTTP/1.10x0aHost:]\", and the request is rejected with 400 error number in logs.\n\nMy server.xml conector section is :\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n\t\t\t\tconnectionTimeout=\"20000\"\n\t\t\t\tredirectPort=\"8443\" \n\t\t\t\tURIEncoding=\"UTF-8\"\n\t\t\t\trejectIllegalHeader=\"false\"\n\t\t\t\trelaxedPathChars ='[]|'\n\t\t\t   />\n\nI can't access to change the device request.\n\nNote: if i try to access the websockect through Smart Websockect client chrome plugin or javaWebClient spring 5, work fine.\n\nThank in advanced for your comments.",
      "Bugzilla is not a support forum. Please use the users mailing list."
    ],
    "creation_ts": "2020-03-10T07:11:56Z",
    "fixes": [
      64210
    ]
  },
  {
    "id": 63835,
    "summary": "Add support for Keep-Alive header",
    "description": "There were numerous question on SO and Google in the past years why Tomcat does not send \"Keep-Alive: timeout=X, max=Y\" just like HTTPd does. Though https://tools.ietf.org/html/draft-thomson-hybi-http-timeout-03 never made it in to an RFC, a lot of clients read that timeout (like our Apache HttpClient) and configure its connection pool or are simply unable to detect terminated connection as described in RFC 7230 and need appropriate hints like this.\n\nI have hit this with a client from a colleague written in C#, actually using a WebServiceClient from .NET. No option to configure details like this.\n\nAdding this header is quite easy since we can take the HTTPd code as a sample: https://github.com/apache/httpd/blob/2.4.x/modules/http/http_protocol.c#L217-L299\n\nI have a prototype implementation ready. If this is accepted I am willing to polish and add appropriate tests for it. I don't see any downsides adding this.",
    "comments": [
      "Draft is here: https://github.com/apache/tomcat/commit/6ff2233cbbd27c9c2c649208a21931e5f3e132a6",
      "The implementation contains a bug where the max value must be decreasing. This value can be is available on the endpoint, but there is no getter for. The decrementKeepAliveRequests output is not stored. This would be similar too:\n\n> int left = r->server->keep_alive_max - r->connection->keepalives;",
      "This feature idea doesn't look good to me:\n- What if there's a proxy ? [usually, there is a proxy]\n- This feature looks very late 90s ish and it wasn't added then",
      "(In reply to Remy Maucherat from comment #3)\n> This feature idea doesn't look good to me:\n> - What if there's a proxy ? [usually, there is a proxy]\n> - This feature looks very late 90s ish and it wasn't added then\n\nThis header is a hop-by-hop. If there is a proxy the proxy will read it and adjust. The clieant won't see, but atmost the real values.\nI will test this with HTTPd too and see how it behaves.\n\nHTTPd does strip that: https://github.com/apache/httpd/blob/2.4.x/modules/proxy/proxy_util.c#L3780-L3796\n\nPlease also consider that this gets activated if and only if \"Connection: keep-alive\" is sent by the client.",
      "The proposal never went past draft 03 in 2012. I'm wondering why.\n\nThe max parameter is already deprecated in draft 03. I don't think Tomcat should be implementing a deprecated feature of a draft proposal without a very good reason and I can't see one at this point.\n\nI can see the timeout could be useful in avoiding sending a request just as the server was closing the connection, triggering a TCP reset and a need to resend the request. However, for that to work the client needs a reasonable estimate of the latency between the client and the server and that isn't always available.\n\nThat it is intended to send this header only when the client sends \"Connection: keep-alive\" doesn't really change things. Browsers usually send that. Having to parse the request header and likely generate the response header adds overhead to every request. It would be useful to have a sense of the scale of that overhead.",
      "(In reply to Mark Thomas from comment #5)\n> The proposal never went past draft 03 in 2012. I'm wondering why.\n\nMe too.\n \n> The max parameter is already deprecated in draft 03. I don't think Tomcat\n> should be implementing a deprecated feature of a draft proposal without a\n> very good reason and I can't see one at this point.\n\nAgreed, I will happily drop max parameter.\n\n> I can see the timeout could be useful in avoiding sending a request just as\n> the server was closing the connection, triggering a TCP reset and a need to\n> resend the request. However, for that to work the client needs a reasonable\n> estimate of the latency between the client and the server and that isn't\n> always available.\n\nNot only latency, you can dynamically adjust your connection pool to that and avoid broken connections. Apache HttpClient does that.\n\n> That it is intended to send this header only when the client sends\n> \"Connection: keep-alive\" doesn't really change things. Browsers usually send\n> that. Having to parse the request header and likely generate the response\n> header adds overhead to every request. It would be useful to have a sense of\n> the scale of that overhead.\n\nThe Connection header is parsed anyway with isConnectionClose() already. Getting an integer from the socket wrapper seems easy. I could at most add nanoTime before and after and have a look at these numbers, but I doubt that it will really consume time. WDYT?",
      "Fixed in:\n- master for 9.0.29 onwards\n- 8.5.x for 8.5.48 onwards\n\nI have opted not to port back to 7.0.x because a cherry-pick requires significant merge effort. If explicitly requested this can be done later.",
      "Reviewing the commit implementing this feature in Tomcat 9,\nhttps://github.com/apache/tomcat/commit/1c5bf7a904cffa438eb9b979f3bd32e1579e9666\n\n1. I think that if you are rolling out an experimental feature, there must be a flag controlling it.\n\n2. You must not send this header to a HTTP/1.0 client. (You can skip a lot of code if the client is HTTP/1.0).\n\n3. The code sets a new \"Keep-Alive\" header unconditionally, regardless of whether one is already present in the response.\n\n(It is unlikely that there is one, but it is one more reason for a flag controlling this feature).\n\n4.\n>  if (http11) {\n>     headers.addValue(Constants.CONNECTION).setString(Constants.KEEPALIVE);\n>  }\n\nLooking at example in [03] page 7, a Connection header in response may already have other connection options, e.g. \"Upgrade\".\n\n[03] https://tools.ietf.org/html/draft-thomson-hybi-http-timeout-03#page-7\n\nSmoke-testing a Tomcat WebSocket examples with a build from master, I see that Tomcat sends two \"Connection\" headers:\n\nConnection: upgrade\nConnection: keep-alive\n\nSmoke-testing HTTP/2.0, it works (at least in Firefox). Thus it is not a showstopper.\n\nAccording to RFC 7230 3.2.2. I think it is allowed to generate multiple \"Connection\" headers.\n\n5.\nIn Constants.java this commit adds the following constant:\n\n> +     public static final String KEEP_ALIVE = \"Keep-Alive\";\n\nThere already exists Constants.KEEPALIVE constant (without an underscore in the name) in the same class. Adding a second constant with a similar name is confusing.\n\n(As an example:\n\n> isConnectionToken(request.getMimeHeaders(), Constants.KEEPALIVE);\n\nIt uses the old lowercase \"keep-alive\" constant, instead of the new mixed-case one. The isConnectionToken() method expects a lowercase value, thus one missed a chance to create a bug here.\n)\n\n6.\n>  if (keepAliveTimeout > 0) {\n>     String value = \"timeout=\" + keepAliveTimeout / 1000L;\n\nCan the value be less than 1 second? I think it may be confusing to send back a \"timeout=0\" value.\n\n7. changelog:\n\n> <bug>63835</bug>: Add support for Keep-Alive header. (michaelo)\n\n*response* header",
      "Thanks for reviewing, let's go in detail\n\n(In reply to Konstantin Kolinko from comment #8)\n> Reviewing the commit implementing this feature in Tomcat 9,\n> https://github.com/apache/tomcat/commit/\n> 1c5bf7a904cffa438eb9b979f3bd32e1579e9666\n> \n> 1. I think that if you are rolling out an experimental feature, there must\n> be a flag controlling it.\n\nWhy do you consider it to be an experimental feature?\n\n> 2. You must not send this header to a HTTP/1.0 client. (You can skip a lot\n> of code if the client is HTTP/1.0).\n\nCan you explain why? I don't see a reason in the 03 draft that this should not be there if the client sends me \"Connection: keep-alive\"\n\n> 3. The code sets a new \"Keep-Alive\" header unconditionally, regardless of\n> whether one is already present in the response.\n> \n> (It is unlikely that there is one, but it is one more reason for a flag\n> controlling this feature).\n\nThat is true, but why should a webapp component do this? It should not have access to the connector actually. The connector is an implementation detail of the container. HTTPd uses apr_table_setn(), I am doing the same here.\n\n> 4.\n> >  if (http11) {\n> >     headers.addValue(Constants.CONNECTION).setString(Constants.KEEPALIVE);\n> >  }\n> \n> Looking at example in [03] page 7, a Connection header in response may\n> already have other connection options, e.g. \"Upgrade\".\n> \n> [03] https://tools.ietf.org/html/draft-thomson-hybi-http-timeout-03#page-7\n> \n> Smoke-testing a Tomcat WebSocket examples with a build from master, I see\n> that Tomcat sends two \"Connection\" headers:\n> \n> Connection: upgrade\n> Connection: keep-alive\n\nGranted, that could be \"Connection: upgrade, keep-alive\", just like apr_table_mergen().\n\nI wonder why our tests don't cover this with WebSockets?! But I have to admit, my WS knowledge is non-existing.\n\n> 5.\n> In Constants.java this commit adds the following constant:\n> \n> > +     public static final String KEEP_ALIVE = \"Keep-Alive\";\n> \n> There already exists Constants.KEEPALIVE constant (without an underscore in\n> the name) in the same class. Adding a second constant with a similar name is\n> confusing.\n\nI did this on purpose to have the header name as a verbatim copy of the 03 draft.\n\n> (As an example:\n> \n> > isConnectionToken(request.getMimeHeaders(), Constants.KEEPALIVE);\n> \n> It uses the old lowercase \"keep-alive\" constant, instead of the new\n> mixed-case one. The isConnectionToken() method expects a lowercase value,\n> thus one missed a chance to create a bug here.\n> )\n\nNo, I don't think so. Mark has completely reworked the parsing and case normalization. I should work case-insensitively. See my ticket for that regard, I have found that edge cases and reported them.\n\nI think you are mixing up up KEEPALIVE and KEEP_ALIVE.\n\nKEEPALIVE: a Connection header value\nKEEP_ALIVE: a header name, the constant for the header: Keep-Alive\n\n> 6.\n> >  if (keepAliveTimeout > 0) {\n> >     String value = \"timeout=\" + keepAliveTimeout / 1000L;\n> \n> Can the value be less than 1 second? I think it may be confusing to send\n> back a \"timeout=0\" value.\n\nThat is a very good point I have no real answer for.\nWhat would be your proposal? Change to \"keepAliveTimeout > 1000\" or ceil to 1?\n\n> 7. changelog:\n> \n> > <bug>63835</bug>: Add support for Keep-Alive header. (michaelo)\n> \n> *response* header\n\nCorrect.",
      "(In reply to Michael Osipov from comment #9)\n> > \n> > 1. I think that if you are rolling out an experimental feature, there must\n> > be a flag controlling it.\n> \n> Why do you consider it to be an experimental feature?\n\nTwo reasons:\n\n1. The specification for this feature is not an officially approved specification.\n\n2. Tomcat 9.0 is declared stable. If you roll-out a new feature like this it is better to have it controllable.\n\n(There may be errors or corner cases in this new implementation. There may be unsuspecting clients. There may already be a configuration for this feature somewhere else - a Filter/Valve inside Tomcat, a Proxy in front of Tomcat, etc., that have to play nicely with it. Finally, it is one of DevOps principles to use feature flags.)\n\nI think that the flag may be removed in some future release, but as the specification for this feature has not been approved yet, I think that such removal will not happen anytime soon.\n\nI do not mind to have this feature \"on\" by default, thanks to Apache HTTPd 2.4 having tested the feature in the wild.\n\nAs this is a protocol feature, I think the flag belongs to a <Connector> configuration.\n\n \n> > 2. You must not send this header to a HTTP/1.0 client. (You can skip a lot\n> > of code if the client is HTTP/1.0).\n> \n> Can you explain why? I don't see a reason in the 03 draft that this should\n> not be there if the client sends me \"Connection: keep-alive\"\n\n1. I see this as a feature that is targeted to HTTP 1.1 clients.\n\n2. OK, 1.0 clients should not send \"Connection: keep-alive\" headers, so the version check is redundant, but version check is cheap and allows to skip a lot of code.\n\n(3. Various versions of HTTP/1.1 specification mention that a 1.0 client may send a \"Keep-Alive\" header for some unclear reason. I was confusing it with \"Connection: keep-alive\" that is processed here. My fault.)\n\n\n> > 3. The code sets a new \"Keep-Alive\" header unconditionally, regardless of\n> > whether one is already present in the response.\n> > \n> > (It is unlikely that there is one, but it is one more reason for a flag\n> > controlling this feature).\n> \n> That is true, but why should a webapp component do this? It should not have\n> access to the connector actually. The connector is an implementation detail\n> of the container. HTTPd uses apr_table_setn(), I am doing the same here.\n\nInstead of implementing this BZ, one may configure a Filter (or Valve) to send such a header.\n\nI am just trying to be compatible.\n\n\n> > 4.\n> > >  if (http11) {\n> > >     headers.addValue(Constants.CONNECTION).setString(Constants.KEEPALIVE);\n> > >  }\n> > \n> > Looking at example in [03] page 7, a Connection header in response may\n> > already have other connection options, e.g. \"Upgrade\".\n> > \n> > [03] https://tools.ietf.org/html/draft-thomson-hybi-http-timeout-03#page-7\n> > \n> > Smoke-testing a Tomcat WebSocket examples with a build from master, I see\n> > that Tomcat sends two \"Connection\" headers:\n> > \n> > Connection: upgrade\n> > Connection: keep-alive\n> \n> Granted, that could be \"Connection: upgrade, keep-alive\", just like\n> apr_table_mergen().\n> \n> I wonder why our tests don't cover this with WebSockets?! But I have to\n> admit, my WS knowledge is non-existing.\n\nThere are tests for both HTTP/2.0 and WebSockets in the testsuite. Officially, multiple \"Connection\" headers are functionally equivalent to one header with multiple values. (Whether the tests verify them correctly is a different question.)\n\nThe examples web application has WebSocket examples. I use them for smoke tests.\n\n> > 5.\n> > In Constants.java this commit adds the following constant:\n> > \n> > > +     public static final String KEEP_ALIVE = \"Keep-Alive\";\n> > \n> > There already exists Constants.KEEPALIVE constant (without an underscore in\n> > the name) in the same class. Adding a second constant with a similar name is\n> > confusing.\n> \n> I did this on purpose to have the header name as a verbatim copy of the 03\n> draft.\n\n-1. If you like to keep both constants, the new one has to be renamed,\nand it would not hurt to have some documentation comment to state the difference.\n\nE.g. KEEP_ALIVE_HEADERNAME, KEEP_ALIVE_HEADER.\n\n\n> > (As an example:\n> > \n> > > isConnectionToken(request.getMimeHeaders(), Constants.KEEPALIVE);\n> > \n> > It uses the old lowercase \"keep-alive\" constant, instead of the new\n> > mixed-case one. The isConnectionToken() method expects a lowercase value,\n> > thus one missed a chance to create a bug here.\n> > )\n> \n> No, I don't think so. Mark has completely reworked the parsing and case\n> normalization. I should work case-insensitively. See my ticket for that\n> regard, I have found that edge cases and reported them.\n\n(The \"isConnectionToken()\" method is not implemented case-sensitively. It calls HashSet.contains() over a set of lowercase values. - This implementation is OK, as all calls to this private method are known.)\n\n>\n> I think you are mixing up up KEEPALIVE and KEEP_ALIVE.\n> \n> KEEPALIVE: a Connection header value\n> KEEP_ALIVE: a header name, the constant for the header: Keep-Alive\n\nYes. That is what I am saying: they are confusing. Mixing them up has already happened to me.\n\n\n> > 6.\n> > >  if (keepAliveTimeout > 0) {\n> > >     String value = \"timeout=\" + keepAliveTimeout / 1000L;\n> > \n> > Can the value be less than 1 second? I think it may be confusing to send\n> > back a \"timeout=0\" value.\n> \n> That is a very good point I have no real answer for.\n> What would be your proposal? Change to \"keepAliveTimeout > 1000\" or ceil to\n> 1?\n\nI think that is one more reason to have a flag controlling this feature (per my point #1. above).\n\nLooking at HTTPd code, I think it will happily report back a \"timeout=0\" value. It is a honest answer and it may be meaningful for some clients. I think that this issue has to be clarified in some future update to the specification.\n\n(Personally, my first thought was to change it to \">= 1000L\".)",
      "Mainly because I want to get 9.0.x and 8.5.x tagged ASAP I am intending to commit fixes to address the concerns raised here shortly.\n\nI agree a rename of the constants would help.\n\nMy reading of the code and RFC 7230 is that it is acceptable to send this header to HTTP/1.0 clients when this code does this. The short form of my reasoning is:\n- keepAlive is set to false for HTTP/1.0 requests\n- only if Connection: keep-alive is present is keepAlive set to true\n  (i.e. the HTTP/1.0 client has explicitly advertised keep-alive support)\n- this header is only sent if keepAlive is true\n\nI agree that this new feature should be configurable on the Connector, enabled by default. I thought I had stated somewhere I thought this should be configurable but I can't find a reference to that at the moment. Making it configurable also addresses any issues with HTTP/1.0 if the reasoning above is wrong.\n\nI agree the behaviour is \"odd\" for timeouts < 1000ms. Given the spec doesn't cover this, consistency with httpd (i.e. unchanged from current) as as good as option as any.",
      "The change in Git looks good to me.",
      "(In reply to Mark Thomas from comment #11)\n> My reading of the code and RFC 7230 is that it is acceptable to send this\n> header to HTTP/1.0 clients when this code does this. [...]\n\nAck. I agree. The recent commit in Git looks good.",
      "Tes(In reply to Konstantin Kolinko from comment #13)\n> (In reply to Mark Thomas from comment #11)\n> > My reading of the code and RFC 7230 is that it is acceptable to send this\n> > header to HTTP/1.0 clients when this code does this. [...]\n> \n> Ack. I agree. The recent commit in Git looks good.\n\nI tested master and 8.5.x, running WebSocket examples. No issues noted. \n\nConfiguration option on <Connector> works correctly. Concatenation of values for Connection header works.\n\n(In reply to Konstantin Kolinko from comment #8)\n> \n> Smoke-testing HTTP/2.0, it works (at least in Firefox).\n>\n\nHTTP/2.0 works. (It was my error that I expected anything here. The \"Upgrade\" header is not used when testing with a browser and HTTPS, because negotiation happens with ALPN at connection time.)\n\nKeep-Alive header is not sent with HTTP/2.0, as expected."
    ],
    "creation_ts": "2019-10-11T08:20:01Z",
    "fixes": [
      63835
    ]
  },
  {
    "id": 42497,
    "summary": "304 response should consistently include ETag header",
    "description": "According to the HTTP spec, if a server includes an ETag header when it sends a\nfile, it must also include the ETag when it sends a 304 (not-modified) response\nfor that file. Tomcat does not do this for static files - if you request a\nstatic file and get a 200 response, the response has an ETag header; but if you\nget a 304 resopnse, the ETag is omitted.\n\nTo reproduce:\n- In a browser, request a static file from Tomcat (e.g. http://localhost/tomcat.gif)\n- Make sure you get a 200 response (force reload or clear browser cache)\n- Examine the response headers (using a browser plugin or whatever) - note that\nthere is an ETag header\n- Request the same file again, getting a 304 (not-modified) response from Tomcat\n- Examine the response headers - note there is no ETag\nThe 304 response should include an ETag header, because the 200 response had one.\n\nSpec reference: RFC 2616 section 10.3.5 says:\n\"304 Not Modified\n[...]\nThe response MUST include the following header fields:\n[...]\n      - ETag and/or Content-Location, if the header would have been sent\n        in a 200 response to the same request\"",
    "comments": [
      "Created attachment 20251\nRequest and response headers showing the problem\n\nI have attached a log file from Firefix LiveHTTPHeaders showing the problem.\nA static file is requested twice. The first response is a 200 with an ETag\nheader,\nthe second response is a 304 without an ETag header.",
      "I see how to fix this, but I'm not set up to compile Tomcat so someone else will\nhave to make the change and test it.\n\nIn org.apache.catalina.servlets.DefaultServlet, the serveResource method sets an\nETag header when it serves a file with a 200 or 206 response. To get it to add\nthe ETag to 304 responses, this needs to be added:\n response.setHeader(\"ETag\", getETag(resourceAttributes));\nin two places where a a status of 304 (SC_NOT_MODIFIED) is set, in the methods\ncheckIfModifiedSince and checkIfNoneMatch.",
      "(I've changed the Component to \"Catalina\" because none of the more specific\nComponents seem appropriate. If that's wrong, please correct it.)",
      "Thanks for the patch. It has been applied to svn and will be in 5.5.24 and\n6.0.14 onwards.",
      "Tested OK in 5.5.24 release candidate."
    ],
    "creation_ts": "2007-05-23T09:00:19Z",
    "fixes": [
      42497
    ]
  },
  {
    "id": 49218,
    "summary": "Fix support for META-INF/resources",
    "description": "I have added the test for it in r939253\n\nThe tests in TestStandardContextResources are currently failing, and thus are wrapped with if(false) until a solution is found.\n\nI debugged the context.getResource(\"/resourceB.jsp\") call in the second test and I see that the following exception is caught and silently swallowed in o.a.c.core.ApplicationContext#getResource():\n\njava.lang.IllegalStateException: zip file closed\n at java.util.jar.JarFile.getMetaInfEntryNames(Native Method)\n at java.util.jar.JarFile.maybeInstantiateVerifier(JarFile.java:277)\n at java.util.jar.JarFile.getInputStream(JarFile.java:381)\n at org.apache.naming.resources.WARDirContext$WARResource.streamContent(WARDirContext.java:951)\n at org.apache.naming.resources.ProxyDirContext.cacheLoad(ProxyDirContext.java:1578)\n at org.apache.naming.resources.ProxyDirContext.cacheLookup(ProxyDirContext.java:1458)\n at org.apache.naming.resources.ProxyDirContext.lookup(ProxyDirContext.java:292)\n at org.apache.catalina.core.ApplicationContext.getResource(ApplicationContext.java:506)\n\n\n\n\nBesides the above, I have the following concerns related to resources support:\n\n1. The JavaDoc for ServletContext#getResourcePaths() in the Servlet 3.0 specification shows, that this method should list the resources from the JAR files as well.\n\nI cannot test it now, but I think that that is not implemented yet. A test for this could be added to TestStandardContextResources.java\n\nWhat is not clear to me there is what happens when the resource is present both in web application and in the resources JAR - should it be listed twice, or once only? I do not see much harm from listing it twice.\n\n\n2. BaseDirContext#addResourcesJar():\n\nThe jarFile.getEntry(\"/\"); call there returns null.\n\nActually it is not needed there at all, because the second argument to the WARDirContext constructor is essentially ignored, because warDirContext.loadEntries() reinitializes the WARDirContext#entries field.\n\n\n3. BaseDirContext\n\nIn all places where (\"META-INF/resources/\" + name) is used there is an \"else\"  branch where \"META-INF/resources/\" prefix is not added.\n\nI think it is an error, though it does not matter much because the main branch is usually executed. E.g., in #listBindings():\n\n  if (altDirContext instanceof BaseDirContext)\n      bindings = ((BaseDirContext) altDirContext).doListBindings(\n            \"META-INF/resources/\" + name);\n  else {\n   try {\n      bindings = altDirContext.listBindings(name);\n   } catch (NamingException ne) {\n      // Ignore\n   }\n }\n\nIf the altDirContext field were declared as List<BaseDirContext>, the code could be simplified.\n\n\n4. As of now, resource JARs are considered only if they are web fragments. That is if they contain META-INF/web-fragment.xml and the main web.xml has metadata-complete=\"false\".\n\nI think that this is the correct implementation, based on the security and backwards compatibility considerations, but I do not see where the Servlet 3.0 spec explicitly says about these requirements. Is it implied from what is said in ch.8.2? I think it could be more explicit in the spec.",
    "comments": [
      "Re: \"zip file closed\"\n\nThanks to Peter Ro\u00dfbach, I found that webapp-3.0-fragments webapp fails only when it is run in a testcase.  If it is deployed on a standalone Tomcat 7 instance, it works.\n\nAfter some thought I found the cause: the test runs successfully if I add JreMemoryLeakPreventionListener to the configuration.\n\nIt sounds a bit weird, but so it is.  My speculation is that we somewhere close the JarFile/ZipFile explicitly. The system-wide caching, that is turned off by JreMemoryLeakPreventionListener, caches a JarFile when it is accessed through URL. Explicitly closing the file closes the file in the cache, making it unusable. \nI debugged it a bit, and the place where the JAR is closed is WebappClassLoader#closeJARs() that is called as soon as web application startup is completed.\n\n\nAs of now, I resolve this by adding JreMemoryLeakPreventionListener to the testcase configuration.  Are there other ways to resolve this, e.g. to somehow change how the resource JARs are handled?",
      "Created attachment 25384\n\"Not found\" Resource Example with to fragments",
      "I have build a standalone war that still have the not found problem! Arrg!\n\nI have build two fragments: servlet30/WEB-INF/lib/hello2.jar\nMETA-INF/\nMETA-INF/MANIFEST.MF\napi/\napi/HelloApiServlet.class\napi/ServletSetupListener.class\nMETA-INF/resources/\nMETA-INF/resources/A/\nMETA-INF/resources/A/resourceB.jsp\nMETA-INF/resources/hello.jsp\nMETA-INF/resources/hello.txt\nMETA-INF/resources/resourceB.jsp\nMETA-INF/web-fragment.xml\n<!-- has an order constraint deployed after \"other\"-fragment -->\n and other.jar\n\nMETA-INF/\nMETA-INF/MANIFEST.MF\nannotation/\nannotation/GetResourceServlet.class\nMETA-INF/resources/\nMETA-INF/resources/folder/\nMETA-INF/resources/folder/resourceC.jsp\nMETA-INF/resources/folder/resourceD.jsp\nMETA-INF/resources/resourceA.jsp\nMETA-INF/resources/resourceB.jsp\nMETA-INF/web-fragment.xml\n\ndir:\ndaVinci:servlet30 peter$ tree *\nMETA-INF\n|-- MANIFEST.MF\n`-- context.xml\nWEB-INF\n|-- classes\n|   |-- annotation\n|   |   |-- GetResourceServlet.class\n|   |   |-- HelloBean.class\n|   |   |-- HelloFilter.class\n|   |   |-- HelloServlet.class\n|   |   |-- LogApplicationLifeCycleListener.class\n|   |   |-- LogRequestListener.class\n|   |   `-- ParamServlet.class\n|   `-- api\n|-- lib\n|   |-- hello2.jar\n|   `-- over.jar\n`-- web.xml\nfolder\n|-- resourceC.jsp\n`-- resourceE.jsp\nindex.jsp \nresourceA.jsp\n\n\nI can't access hello.jsp or hello.txt, but can access resourceB.jsp...\n\nVery strange!",
      "Have checkin second resource2.jar and update testcase TestStandardContextResources to failed again!\n\nSorry...",
      "(In reply to comment #4)\nTestStandardContextResources calling resourceF.jsp in r939650 checks for wrong value. It should look for \"resourceF.jsp in resources.jar\".\n\nBesides that, it really uncovered a bug. The test fails because of the following:\n\n5. In BaseDirContext#lookup():\naltDirContext.lookup(\"META-INF/resources/\" + name) does not return null, but throws a NamingException, which aborts the for( : altDirContexts) cycle.\n\nSo, either lookup for resourceF.jsp or for resourceF.jsp will fail, depending on the order in altDirContexts (the spec says that the order is arbitrary).\n\n\n6. Also in BaseDirContext#lookup():\ndoLookup(name) call is also documented to throw NamingException.\nEither it does not throw it and the doLookup method signature has to be updated (or at least add a JavaDoc there), or the code is broken.",
      "(In reply to comment #5)\n> (In reply to comment #4)\n> TestStandardContextResources calling resourceF.jsp in r939650 checks for wrong\n> value. It should look for \"resourceF.jsp in resources.jar\".\nFix with 940405. Sorry!\n\n> \n> Besides that, it really uncovered a bug. The test fails because of the\n> following:\n> \n> 5. In BaseDirContext#lookup():\n> altDirContext.lookup(\"META-INF/resources/\" + name) does not return null, but\n> throws a NamingException, which aborts the for( : altDirContexts) cycle.\nOk, look at listBindings. We can ignore the sub Exceptions.\nFixed!\n\n> \n> So, either lookup for resourceF.jsp or for resourceF.jsp will fail, depending\n> on the order in altDirContexts (the spec says that the order is arbitrary).\n> \n> \n> 6. Also in BaseDirContext#lookup():\n> doLookup(name) call is also documented to throw NamingException.\n> Either it does not throw it and the doLookup method signature has to be updated\n> (or at least add a JavaDoc there), or the code is broken.\n+1 .. Go ahead to fix doLookup(name)!",
      "The remaining issue has been fixed in trunk and will be included in 7.0.0 onwards."
    ],
    "creation_ts": "2010-04-29T07:21:16Z",
    "fixes": [
      49218
    ]
  },
  {
    "id": 65767,
    "summary": "Add support for password-based encryption scheme 2 params (PBES2)",
    "description": "Created attachment 38142\nThe RSA key and certificate\n\nFailed to resolve private key PEM encrypted with AES-CBC, the exception message as follows:\n\n25-Dec-2021 10:57:48.133 SEVERE [main] org.apache.catalina.util.LifecycleBase.handleSubClassException Failed to initialize component [Connector[org.apache.coyote.http11.Http11NioProtocol-8443]]\n\torg.apache.catalina.LifecycleException: Protocol handler initialization failed\n\t\tat org.apache.catalina.connector.Connector.initInternal(Connector.java:1059)\n\t\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:136)\n\t\tat org.apache.catalina.core.StandardService.initInternal(StandardService.java:556)\n\t\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:136)\n\t\tat org.apache.catalina.core.StandardServer.initInternal(StandardServer.java:1012)\n\t\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:136)\n\t\tat org.apache.catalina.startup.Catalina.load(Catalina.java:747)\n\t\tat org.apache.catalina.startup.Catalina.load(Catalina.java:769)\n\t\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\t\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:305)\n\t\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:475)\n\tCaused by: java.lang.IllegalArgumentException: 1.2.840.113549.1.5.13 SecretKeyFactory not available\n\t\tat org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:98)\n\t\tat org.apache.tomcat.util.net.AbstractJsseEndpoint.initialiseSsl(AbstractJsseEndpoint.java:70)\n\t\tat org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:204)\n\t\tat org.apache.tomcat.util.net.AbstractEndpoint.bindWithCleanup(AbstractEndpoint.java:1174)\n\t\tat org.apache.tomcat.util.net.AbstractEndpoint.init(AbstractEndpoint.java:1187)\n\t\tat org.apache.coyote.AbstractProtocol.init(AbstractProtocol.java:574)\n\t\tat org.apache.coyote.http11.AbstractHttp11Protocol.init(AbstractHttp11Protocol.java:82)\n\t\tat org.apache.catalina.connector.Connector.initInternal(Connector.java:1056)\n\t\t... 13 more\n\tCaused by: java.security.NoSuchAlgorithmException: 1.2.840.113549.1.5.13 SecretKeyFactory not available\n\t\tat java.base/javax.crypto.SecretKeyFactory.<init>(SecretKeyFactory.java:122)\n\t\tat java.base/javax.crypto.SecretKeyFactory.getInstance(SecretKeyFactory.java:168)\n\t\tat org.apache.tomcat.util.net.jsse.PEMFile$Part.toPrivateKey(PEMFile.java:184)\n\t\tat org.apache.tomcat.util.net.jsse.PEMFile.<init>(PEMFile.java:126)\n\t\tat org.apache.tomcat.util.net.jsse.PEMFile.<init>(PEMFile.java:90)\n\t\tat org.apache.tomcat.util.net.SSLUtilBase.getKeyManagers(SSLUtilBase.java:314)\n\t\tat org.apache.tomcat.util.net.SSLUtilBase.createSSLContext(SSLUtilBase.java:245)\n\t\tat org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:96)\n\t\t... 20 more\n\n\nserver.xml\n\n<Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\">\n        <SSLHostConfig>\n           <Certificate certificateFile=\"conf/rsa.crt\"\n                        certificateKeyFile=\"conf/rsa_enc_pkcs8.key\"\n                        certificateKeyPassword=\"12345678\"\n                        certificateKeyAlias=\"test\" >\n           </Certificate>\n       </SSLHostConfig>\n\n</Connector>\n\n\nCommand:\n\nopenssl genrsa -out rsa.key\nopenssl req -new -key rsa.key -out rsa.csr \nopenssl x509 -req -days 3650 -in rsa.csr -signkey rsa.key -out rsa.crt\nopenssl pkcs8 -topk8 -inform PEM -in rsa.key -outform pem -out rsa_enc_pkcs8.key -v2 aes-256-cbc -passin pass:12345678 -passout pass:12345678",
    "comments": [
      "AES-CBC is used to encrypt the key or certificate of pkcs12 keystore. The same error is reported when Tomcat is started",
      "This is actually a bug in the JRE itself and not Tomcat, but it's something that we can probably work around.\n\nThe definition of this thing is here:\nhttps://datatracker.ietf.org/doc/html/rfc2898#appendix-A.2\n\nOnce the KDF OID, salt, iteration count, cipher OID, initialization vector, and encrypted key are unpacked from the ASN.1 structure, you just have to re-assemble them into the objects provided by the JRE.\n\nI see you have PR. I'll have a look at it.",
      "Is this maybe related to https://github.com/kaikramer/keystore-explorer/issues/308?\n\nWhich Java version do you use?",
      "Sorry, I misunderstood the request, slightly.",
      "\"Bug\" may be a strong work, here. I should have said something closer to \"missing feature\".\n\nhttps://bugs.openjdk.java.net/browse/JDK-8231581\n\nFetching all the information from the ASN.1 structure manually is a PITA when the JRE could do it very easily.",
      "(In reply to Christopher Schultz from comment #5)\n> \"Bug\" may be a strong work, here. I should have said something closer to\n> \"missing feature\".\n> \n> https://bugs.openjdk.java.net/browse/JDK-8231581\n> \n> Fetching all the information from the ASN.1 structure manually is a PITA\n> when the JRE could do it very easily.\n\nThis is exactly the same I have with my keys. See the KSE issue.",
      "(In reply to Michael Osipov from comment #3)\n> Is this maybe related to\n> https://github.com/kaikramer/keystore-explorer/issues/308?\n> \n> Which Java version do you use?\n\njdk11.0.12",
      "PR https://github.com/apache/tomcat/pull/462",
      "Fixed in:\n- 10.1.x for 10.1.0-M9 onwards\n- 10.0.x for 10.0.15 onwards\n- 9.0.x for 9.0.57 onwards\n- 8.5.x for 8.5.74 onwards"
    ],
    "creation_ts": "2021-12-25T03:05:47Z",
    "fixes": [
      65767
    ]
  },
  {
    "id": 64089,
    "summary": "Resource paths resolve symlinks",
    "description": "Tomcat 8.5.35 introduced a behavior, which is a bug for us. Still consists in 8.5.50.\n\nIn our development environments we use symlinks for all of our webapp folders. So under tomcat (resp. catalina base) there is the webapps folder, that contains only symlinks, which point to the actual webapps (not wars).\n\nThe applications' web.xml files use XML imports like this:\n\n######################\n<!DOCTYPE web-xml [\n    <!ENTITY myentity SYSTEM \"../../../foo/bar/myentity.xml\">\n]>\n######################\n\nThis relative import worked just fine in 8.5.34 and prior, but will fail in 8.5.35+. The error message in the log unfortunately does not tell you more than \"file not found\", but does not say, where it was looking for it.\n\nThe class org.apache.catalina.startup.ContextConfig, method fixDocBase() introduced a change in 8.5.35 (line 655 in 8.5.50's source), that uses getCanonicalPath() to resolve the absolute path for a resource (in this case web.xml). This path is used as base (systemId) for the WebXmlParser. Since the path has resolved symlinks, but the relative import assumes to originate from a standard catalina_base structure, it won't find the imported file.\n\nInstead of getCanonicalPath() you could use something like toPath().toAbsolutePath().normalize(), which does NOT follow symlinks.\n\nThe behavior differs on Windows, where symlinks (Junktions) are not followed.\n\nThis bug is critical for us. And there's no way to work around it.",
    "comments": [
      "I'm afraid I am going to take a different view.\n\nThe behaviour you were relying on was a bug and, now that bug has been fixed, the behaviour has changed.\n\nFor reference the change was as a result of this thread: https://tomcat.markmail.org/thread/gonkmfw5acognpy3\n\nFurther, the entity reference in the web.xml shown in the example accessing a location outside of the root of the web application. That goes against the general principal that web applications are meant to be self-contained (and access additional resources via JNDI).\n\nI'm wondering if it is possible to map these external xml files into a web application via http://tomcat.apache.org/tomcat-9.0-doc/config/resources.html\n\nThere have been some changes recently that might impact on this so I'll do some testing locally and report back.",
      "Hi Mark,\n\nthanks a lot for taking a look at this.\n\nWhat a pity, that this is considered correct behavior. Couldn't this be configurable like allowLinking? I mean, it may be correct for many, but not for all.",
      "How about the difference between Linux and Windows? Shouldn't this fail on Windows, too, if it does on Linux? Or vice versa, work on both?",
      "Dealing with this first. The behaviour on Linux and Windows is the same. There is no platform specific code in Tomcat's resource handling. Junctions != symbolic links and the JRE treats them differently.\n\nUnfortunately the relevant XML API - EntityResolver2 - passes URLs around as Strings.\n\nTomcat has some special handling in the URL instances returned for resources. This is primarily so resource access via URLs is cache aware but the same behaviour would have helped here. As soon as the URLs are converted to Strings that special handling is lost.\n\nThe Tomcat 7 approach of implementing a Tomcat specific URL scheme would work but the resources refactoring in 8.5.x onwards took a deliberate decision not to do that - for a combination of complexity, performance, maintenance and ease of embedding reasons.\n\nI have a few more ideas to try to see if I can find a work-around. Hopefully one that won't require a new configuration option but I'm not against that if that is what is required.",
      "Would it help if Tomcat added ${...} property replacement support so you could do something like:\n\n######################\n<!DOCTYPE web-xml [\n    <!ENTITY myentity SYSTEM \"${property.containing.correct.path}\">\n]>\n######################\n\nAnd then you could add\n\nproperty.containing.correct.path=/path/relative/to/canonical/location\n\nto catalina.properties (or one of the other ways of setting properties).\n\nThis isn't currently supported but I think I can see a way to add it in a backwards compatible way.",
      "Yes, I was about to suggest that. I was thinking about using ${CATALINA_BASE} as part of the import path.\n\nSo, yes, that would help a lot.\n\nIs it possible by the way to specify a custom entity resolver, which would enable us to solve the problem?",
      "Glad we are thinking in the same direction.\n\nThe EntityResolver isn't currently configurable. I'll consider that option as well but adding support for ${...} looks like the simplest solution at the moment.",
      "${catalina.base}/../../../myentity.txt  works now.\n\nFixed in:\n- master for 10.0.0.0-M1 onwards\n- 9.0.x for 9.0.31 onwards\n- 8.5.x for 8.5.51 onwards\n- 7.0.x for 7.0.100 onwards",
      "Wow, that was quick. Unfortunately I missed the notification. Sorry for that.\n\nThis solution is perfect. Thanks a lot.",
      "I'm trying to get this to work. But none of my attempts was successful.\n\n$CATALINA_BASE points to \"/opt/tomcat/current\"\n\n<!ENTITY myentity SYSTEM \"${catalina.base}/foo/bar/myentity.xml\">\n\nThe above leads to a MalformedURLException:\njava.net.MalformedURLException: no protocol: ${catalina.base}/foo/bar/myentity.xml\n\n<!ENTITY myentity SYSTEM \"file://${catalina.base}/foo/bar/myentity.xml\">\n\nThe above leads to:\njava.net.UnknownHostException: ${catalina.base}\n\n<!ENTITY myentity SYSTEM \"${CATALINA_BASE}/foo/bar/myentity.xml\">\n\nAnd this one leads to:\nParse error in application web.xml file at [file:/path/to/webapp/WEB-INF/web.xml]\n\nI'm on Tomcat 9.0.31. What am I doing wrong?\n\nI should mention, that still my webapp folders under catalina-base/webapps are all symlinks.",
      "I also tried\n\n<!ENTITY myentity SYSTEM \"file:${catalina.base}/foo/bar/myentity.xml\">\n\nwhich led to:\njava.io.FileNotFoundException: ${catalina.base}/foo/bar/myentity.xml (Datei oder Verzeichnis nicht gefunden)",
      "I'll take a look. Meanwhile, can you provide the full stack trace please.",
      "Sure. This one is for the variant with only \"${catalina.base}/foo/bar/myentity.xml\"\n\njava.net.MalformedURLException: no protocol: ${catalina.base}/foo/bar/myentity.xml\n        at java.base/java.net.URL.<init>(URL.java:634)\n        at java.base/java.net.URL.<init>(URL.java:530)\n        at java.base/java.net.URL.<init>(URL.java:477)\n        at java.xml/com.sun.org.apache.xerces.internal.impl.XMLEntityManager.setupCurrentEntity(XMLEntityManager.java:651)\n        at java.xml/com.sun.org.apache.xerces.internal.impl.XMLEntityManager.startEntity(XMLEntityManager.java:1401)\n        at java.xml/com.sun.org.apache.xerces.internal.impl.XMLEntityManager.startEntity(XMLEntityManager.java:1337)\n        at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanEntityReference(XMLDocumentFragmentScannerImpl.java:1844)\n        at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2985)\n        at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:605)\n        at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:534)\n        at java.xml/com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:888)\n        at java.xml/com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:824)\n        at java.xml/com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)\n        at java.xml/com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:246)\n        at java.xml/com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:339)\n        at java.xml/javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:206)\n        at com.infolog.commons.xml.w3c.XMLHelper.loadDocument(XMLHelper.java:464)\n        at com.infolog.commons.xml.w3c.XMLHelper.loadDocument(XMLHelper.java:485)\n        at com.infolog.webdoc.server.TomcatEnvironment.readWebXML(TomcatEnvironment.java:232)\n        at com.infolog.webdoc.server.TomcatEnvironment.getMaxUploadSize(TomcatEnvironment.java:259)\n        at com.infolog.webdoc.database.DatabaseParameters.checkValidity(DatabaseParameters.java:127)\n        at com.infolog.webdoc.server.WebDocServletValidation.sanityCheckDatabaseConnection(WebDocServletValidation.java:94)\n        at com.infolog.webdoc.server.WebDocServletValidation.sanityCheckEnvironment(WebDocServletValidation.java:198)\n        at com.infolog.webdoc.server.WebDocServlet.init(WebDocServlet.java:388)\n        at javax.servlet.GenericServlet.init(GenericServlet.java:158)\n        at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1134)\n        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1089)\n        at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:983)\n        at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4871)\n        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5180)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:717)\n        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:690)\n        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:705)\n        at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1133)\n        at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1867)\n        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n        at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n        at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:118)\n        at org.apache.catalina.startup.HostConfig.deployDirectories(HostConfig.java:1045)\n        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:429)\n        at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1576)\n        at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:309)\n        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\n        at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:423)\n        at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:366)\n        at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:936)\n        at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:841)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n        at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)\n        at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n        at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n        at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\n        at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)\n        at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n        at org.apache.catalina.core.StandardService.startInternal(StandardService.java:421)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n        at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:930)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java:633)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:343)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:474)\n\n\nI am on Java 11 (Coretto).\n\nI have stepped into the entity resolver using the debugger. It actually replaces the the property just fine. But somehow the original value reaches the XMLEntityManager.",
      "Oh, please forget that. This code comes from my own XML parsing. I'm very sorry!",
      "If you can, please delete today's comments here (except for the first one) to avoid confusion for others."
    ],
    "creation_ts": "2020-01-21T12:16:21Z",
    "fixes": [
      64089
    ]
  },
  {
    "id": 50677,
    "summary": "Allow system property variables in catalina.properties",
    "description": "We currently have two hardcoded \"variables\" that we substitute in catalina.properties, ${catalina.base} and ${catalina.home}.  Is there value in expanding this functionality?  Here is my scenario:\n\nI have several apps, app1, app2, etc.  I have a shared lib directory of jars that the apps share.  In addition, the apps may have several instances running in different \"environments\" (prod, QA, dev, etc.), and each environment has a corresponding version of the lib directory.  The Tomcat configs for the apps (catalina.base) are version-controlled.\n\nNow, I want each instance of these apps (catalina.base) to be as portable as possible without having to make a bunch of changes for each environment.  So, I want to be able to copy the app1-prod catalina.base to app1-qa and not have to make a lot of local modifications to catalina.properties and friends to make it work.  My init script knows that app1-qa is a QA instance and needs to point to the lib-qa shared directory.  So, I set a system property in the init script via CATALINA_OPTS: -Dshared.lib.dir=/path/to/lib-qa for QA and -Dshared.lib.dir=/path/to/lib-prod for production.  What I would like to do is use this system property via ${property.name} in my common.loader in catalina.properties.  The result is that the catalina.base files are the exact same from a configuration perspective without a bunch of local modifications.\n\nI have created two proposed patches for this functionality.  Both work well, but each one has the potential for some slightly different behavior, so I would like to hear the thoughts of the developers on each.\n\n--\n\nProposal A (currently in production use for my environment):\n\nThe variable substitution takes place upon retrieval in CatalinaProperties.getProperty(), pulling in the current value of the system property.  This allows other properties defined in catalina.properties to be substituted.  The (potential) downside or risk is that the value of a catalina.property value may change over time if the system properties referenced in its value are changed by the code during the JVM's lifecycle.\n\n--\n\nProposal B:\n\nThe variable substitution takes place in the class initializer, loadProperties().  This means that every call to CatalinaProperties.getProperty() will return the same result, with system property variables replaced with their value at the time the class was loaded.  The downside of this is that properties set in catalina.properties cannot be used in other properties defined in that file, because they may not yet be set based on the order they are returned by the Enumeration.  This could be worked around, but it would probably take another iteration over the properties (not really a big deal).",
    "comments": [
      "Created attachment 26568\nProposal A\n\nSubstitute on retrieval.",
      "Created attachment 26569\nProposal B\n\nSubstitute on initialization.",
      "I'd prefer B and I agree some care is needed with the substitution algorithm.",
      "One more discussion at users@:\nhttp://tomcat.markmail.org/thread/4hjo26xeqcuixyw4\n\"tomcat 7: common.loader property in catalina.properties does not take ANT style variable\"",
      "I implemented the substitution in r1136043 and it will be in 7.0.17.\n\nI used a different approach to the one proposed above:\nI implement substitution for the *.loader properties only. This is the use case that was discussed here and on users@.",
      "Can we have this in 6.0.x too?\n\nI have a similar usecase. I need to add some JARs from the Oracle client installation. I have defined -Doracle.home=.. in my setenv.sh and then common.loader=${oracle.home}/jlib/oraclepki.jar,...",
      "My usecase is the same as Yongqin Xu's from the mailing list.",
      "Re-opening for consideration for back-port to Tomcat 6.",
      "6.0.x reached end of life without this feature being back-ported."
    ],
    "creation_ts": "2011-01-27T20:54:57Z",
    "fixes": [
      50677
    ]
  },
  {
    "id": 56181,
    "summary": "RemoteIpValve & RemoteIpFilter: HttpServletRequest.getRemoteHost() returns IP instead of hostname with enableLookups=true and x-forwarded-for header",
    "description": "When clients connect to Tomcat through a proxy or load balancer that adds a remoteIpHeader (eg. \"x-forwarded-for\") and the attribute \"enableLookups\" is set to \"true\", the expected behavior is that hostname of the clients is resolved by Tomcat.\n\nHowever it is not, if the method getRemoteHost() is called on a HttpServletRequest object, the IP is always returned, not the hostname.\n\nIn the classes org.apache.catalina.valves.RemoteIpValve and org.apache.catalina.filters.RemoteIpFilter we see that the IP is set to the Hostname field without any option to do the reverse DNS lookup:\n\nrequest.setRemoteAddr(remoteIp);\nrequest.setRemoteHost(remoteIp);\n\n\nInstead the pseudo code could be something like:\n\nrequest.setRemoteAddr(remoteIp);\n\nif(enableRemoteIpLookups == true){\n    request.setRemoteHost(InetAddress.getByName(remoteIp).getHostName());\n}\n\n\nPerhaps, instead of using \"enableLookups\" to indicate the reverse DNS lookup wants to be done for requests passing through a proxy it should be better to have a new Tomcat attribute for this (like enableRemoteIpLookups), because perhaps you do not want to lookups of the proxies IP but just the remoteIp (x-forwarded-for).\n\nNote, this issue applies also to Tomcat 8.",
    "comments": [
      "For reference - discussion thread on the users list (Feb 20)\nhttp://tomcat.markmail.org/thread/2c4jo2ryqv74zgpp\n\nChanging severity to 'enhancement'.",
      "I don't see any reason to differentiate between proxied and non-proxied clients.",
      "The only reason to differentiate between proxied and non-proxied clients is if you want to do reverse DNS lookup only for proxied clients and not for the non-proxied clients (if for example we know it is always the Load Balancer or the Proxy IP) for performance reasons.",
      "Fixed in:\n- 10.0.x for 10.0.0-M11 onwards\n- 9.0.x for 9.0.41 onwards\n- 8.5.x for 8.5.61 onwards\n- 7.0.x for 7.0.108 onwards"
    ],
    "creation_ts": "2014-02-23T17:22:49Z",
    "fixes": [
      56181
    ]
  },
  {
    "id": 43611,
    "summary": "autodeployment with unpackWARs=\"true\" does not work, when a context for that war file exists in server.xml",
    "description": "if a context for the war file exists in server.xml, the manager uploads the new\n.war file, but does not expand it, if the necessary directory does not exist,\nand if the directory exists, it is not overwritten, so you see the old application.\n\nsee server.xml\n\n<Host name=\"xxx\" appBase=\"webapps\" unpackWARs=\"true\">\n        <Context path=\"/yyy\">\n...\n\nif I don't have a context for yyy in server.xml, autodeploy works as expected.\n\nEven if you say, remove context from the manager application, it is always there\nin the application view, you can't remove it.\n\nAnd finally, it never cleans up the work directory for the application yyy,\nwhich I guess, is just a subsequent error of the above behaviour.",
    "comments": [
      "output of catalina.out, when you deploy an application, where a context exists\nin server.xml, but $CATALINA_BASE/webapps is empty.\n\nINFO: HTMLManager: start: Starting web application at '/yyy'\n12.10.2007 13:54:56 org.apache.catalina.core.StandardContext resourcesStart\nSCHWERWIEGEND: Error starting static Resources\njava.lang.IllegalArgumentException: Document base\n/home/tomcat/webapps/yyy/webapps/yyy does not exist or is not a readable directory\n        at\norg.apache.naming.resources.FileDirContext.setDocBase(FileDirContext.java:141)\n        at\norg.apache.catalina.core.StandardContext.resourcesStart(StandardContext.java:3855)\n        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4024)\n        at\norg.apache.catalina.manager.ManagerServlet.start(ManagerServlet.java:1175)\n        at\norg.apache.catalina.manager.HTMLManagerServlet.start(HTMLManagerServlet.java:527)\n        at\norg.apache.catalina.manager.HTMLManagerServlet.doGet(HTMLManagerServlet.java:104)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:269)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)\n        at\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n        at\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)\n        at\norg.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525)\n        at\norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n        at\norg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)\n        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:544)\n        at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)\n        at\norg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:151)\n        at\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:874)\n        at\norg.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665)\n        at\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)\n        at\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689)\n        at java.lang.Thread.run(Thread.java:595)\n12.10.2007 13:54:56 org.apache.catalina.core.StandardContext start",
      "This is fixed in trunk - by providing an error message if you try and upload a\nfile when the associated context is defined in server.xml\n\nI have proposed the fix for back-porting to 6.0.x and 5.5.x",
      "Fixed in 5.5.x and will be included in 5.5.26 onwards."
    ],
    "creation_ts": "2007-10-12T05:15:52Z",
    "fixes": [
      43611
    ]
  },
  {
    "id": 54631,
    "summary": "@PathParam is not working with @OnMessage",
    "description": "I have defined server end-point as:\n\n@ServerEndpoint(value = \"/ws/{mid}/{rid}/{uid}\")\n\nWhen using @PathParam with @OnMessage, values are null. Other annotations like @OnOpen and @OnClose print values specified in URL.\n\n@OnMessage\npublic void onTextMessage(@PathParam(\"mid\") Long mid, @PathParam(\"rid\") Integer rid, @PathParam(\"uid\") Long uid, Session session, String message, boolean pair) {\n\tlog.debug(\"[TEXT]\" + \" : \" + mid + \" : \" + rid + \" : \" + uid + message + \" : \" + session.getRequestURI());\n}",
    "comments": [
      "Thanks for the report.\n\nI wrote a test case and did find some parameter related issues that may have caused the problem you are seeing. The test also found some issues with closing connections that have been fixed.\n\nIf you try with the latest code from trunk things should be working correctly now."
    ],
    "creation_ts": "2013-03-04T05:03:35Z",
    "fixes": [
      54631
    ]
  },
  {
    "id": 67793,
    "summary": "FORM authenticator does not remember original max inactive interval in all use-cases",
    "description": "There is a use-case when FROM authenticator does not remember original session inactive timeout value and (after successful authentication) the session inactive timeout remains at default 2 minutes value which is very low for a default web session.\n\nExample use case is as follows:\n1. You access a protected resource for the first time. At this point the FORM authenticator forwards to login page and saves data from original request to session note Constants.FORM_REQUEST_NOTE including sesion original inactive timeout value and resets temporarly the session inactive timeout to 2 minutes (default value)\n2. You refresh page from browser inside 2 minutes timeframe. At this point the FORM authenticator forwards again to login page and saves again data from this request.\n\nAT THIS POINT: you loose the original inactive timeout, because at step 1 the session inactive timeout was set to 2 minutes.\n\nIn order to correct this use case we propose to change the code from class\norg.apache.catalina.authenticator.FormAuthenticator in tomcat-catalina as follows:\n\n\nline 719 (as of release 10.1.13) which now has the following contents:\n\n        if (session instanceof HttpSession && ((HttpSession) session).isNew()) {\n            int originalMaxInactiveInterval = session.getMaxInactiveInterval();\n            if (originalMaxInactiveInterval > getAuthenticationSessionTimeout()) {\n                saved.setOriginalMaxInactiveInterval(originalMaxInactiveInterval);\n                session.setMaxInactiveInterval(getAuthenticationSessionTimeout());\n            }\n        }\n\n\nchange it to the following contents:\n\n        final SavedRequest oldSaved = (SavedRequest) session.getNote(Constants.FORM_REQUEST_NOTE);\n        if (session instanceof HttpSession) {\n            final HttpSession httpSession = (HttpSession) session;\n            if (httpSession.isNew()) {\n                final int originalMaxInactiveInterval = session.getMaxInactiveInterval();\n                if (originalMaxInactiveInterval > authenticationSessionTimeout) {\n                    saved.setOriginalMaxInactiveInterval(originalMaxInactiveInterval);\n                    session.setMaxInactiveInterval(authenticationSessionTimeout);\n                }\n            } else if ((oldSaved != null) && (oldSaved.getOriginalMaxInactiveInterval() > 0)) {\n                saved.setOriginalMaxInactiveInterval(oldSaved.getOriginalMaxInactiveInterval());\n            }\n        }\n\n\nPS: the problem seems to exist also in current release of Tomcat 11.x, Tomcat 8.5.x, Tomcat 9.0.x\n\n\nBest regards.",
    "comments": [
      "Hi All,\n\nWe are also facing same issue, it is same as mail sent to mailing list \"users@tomcat.apache.org\" with subject \"Tomcat 9.0.75 ignoring session timeout configured in tomcat conf web.xml\"\n\n\nDetails Below\n==============\nTomcat Version : 9.0.75\nOperating System: Windows and Linux\nBits: 64   \n\nTomcat 9.0.75 not honoring  session timeout configured in tomcat/conf/web.xml for FORM Authentication and it is effecting customers.\n==========================\n   <session-config>\n        <session-timeout>30</session-timeout> // 30 minutes\n    </session-config>\n=========================\n\nVerified the Tomcat source code\n-\tFormAuthenticator overriding above configured session timeout setting (30 minutes)  with value (120 seconds) \n-\tAs per FormAuthenticator.Java, this change/issue started from Tomcat Version : 9.0.74 for FORM Authentication and it overwrites the original session-timeout value\n-\tThis issue/behavior not observed in 9.0.73\n\nVerified the Tomcat documentation \n-\tVerified the tomcat changelog, there is a fix/change went in Tomcat 9.0.74 below related to FORM Based Authentication Session @ https://tomcat.apache.org/tomcat-9.0-doc/changelog.html, looks which is causing this issue.\n------------------------------------------------------------------------------------------------------------------------------\nHarden the FORM authentication process against DoS attacks by using a reduced session timeout if the FORM authentication process creates a session. The duration of this timeout is configured by the authenticationSessionTimeout attribute of the FORM authenticator. (markt)\n-------------------------------------------------------------------------------------------------------------------------\n\nCould you please fix this bug and help.\n\n\nThanks\nChanna",
      "Hi Channa,\n\nYes it is the same issue and the proposed code correction (or any equivalent form) actually solves your problem too.\n\nThe proposed code correction actually preserves the added functionality documented as \"Harden the FORM authentication process against DoS attacks\" and solves the problem of honoring the session timeout configuration from web.xml.\n\nI am also waiting that proposed code correction (or any equivalent form) to reach all maintained branches of Tomcat (8.5.x, 9.0.x, 10.1.x and main = 11.x) that have this problem.\n\nThanks,\nMircea",
      "Hi Tomcat Team,\n\nAny update on solution or future release which resolves this issue. \n\nThanks\nChanna",
      "Fixed in:\n- 11.0.x for 11.0.0-M14 onwards\n- 10.1.x for 10.1.16 onwards\n-  9.0.x for  9.0.83 onwards\n-  8.5.x for  8.5.96 onwards\n\nThanks for the proposed fix. I just made a few minor adjustments.",
      "Thank you for the fix.\n\nWould like to know, When Tomcat version 9.0.83 is available ?\n\nThanks\nChanna",
      "Hi Team,\n\nWe verified on Tomcat 9.0.83, but issue not resolved, session getting timeout after 2 minutes.  \nAnyone verified and confirmed the fix.\nCould you please confirm.\n\nThanks\nChanna",
      "Dear Channa,\n\nI have just tested with tomcat 10.1.16 that contains the fix and after passing form authentication the session timeout reverts to default 30 minutes as calculated from application web.xml or default value.\n\nOf course that during display of login page the session timeout is changed to 2 minutes because this is the intent and should be.\nAnyway this parameter can be changed by inserting a valve for form authenticator with parameter authenticationSessionTimeout set to your new preferred value.\n\nI am very confident that 9.x branch contains correction equivalent to 10.1.x branch.\n\nMaybe you can elaborate your use case scenario.\n\n\nThanks,\nMircea",
      "This issue is resolved. Please take any follow-up questions to the users mailing lists and provide *detailed* steps to recreate any issues still observed.",
      "Hi Mark and Mircea,\n\nIssue still occurring with Tomcat 9.0.83.\nCould someone cross verify and confirm the fix please.\n\nThanks\nChanna",
      "Please DO NOT re-open this issue. If you think you still see this issue in a version that is meant to be fixed, follow the instructions in comment #8."
    ],
    "creation_ts": "2023-10-18T09:12:49Z",
    "fixes": [
      67793
    ]
  },
  {
    "id": 64660,
    "summary": "NullPointerException in AprEdpoint.java",
    "description": "Hi,\n\nI got the following error in a Tomcat 9.0.37 installation:\n\nWARNING [http-apr-8081-Poller] org.apache.tomcat.util.net.AprEndpoint$Poller.run Unexpected poller error\n\tjava.lang.NullPointerException\n\t\tat org.apache.tomcat.util.net.AprEndpoint.processSocket(AprEndpoint.java:725)\n\t\tat org.apache.tomcat.util.net.AprEndpoint$Poller.run(AprEndpoint.java:1453)\n\t\tat java.base/java.lang.Thread.run(Thread.java:834)\n\nIt is running on Java 11, so there is no additional information provided about which variable was null.\nThe system is usually running okay, so I do not expect misconfiguration.",
    "comments": [
      "The problem is that \"socketWrapper\" is null at https://github.com/apache/tomcat/blob/9.0.x/java/org/apache/tomcat/util/net/AprEndpoint.java#L725\n\n SocketWrapperBase<Long> socketWrapper = connections.get(Long.valueOf(socket));\n if (event == SocketEvent.OPEN_READ && socketWrapper.readOperation != null) {\n\n\nAll other places where connections.get(...) is used there is a check for non-null.\nI am not sure what kind of result should be returned: \n- false - indicating there is a problem\n- throw RuntimeException",
      "With HTTP/1.1 this would be unusual and indicate a possible application bug (retaining references beyond the object's lifecycle).\n\nWith HTTP/2, WebSocket etc. it is possible that the socket is closed in one thread while the socket is still in the Poller. There is a fairly narrow window in which this NPE can occur.\n\nReturning false is sufficient in this instance.\n\nI'll fix this shortly.",
      "Fixed in:\n- master for 10.0.0-M8 onwards\n- 9.0.x for 9.0.38 onwards\n- 8.5.x for 8.5.58 onwards\n\nThe equivalent test was already present in 7.0.x"
    ],
    "creation_ts": "2020-08-11T06:09:25Z",
    "fixes": [
      64660
    ]
  },
  {
    "id": 67670,
    "summary": "20 seconds to download some JS files with 9.0.81",
    "description": "After upgrading to Tomcat 9.0.81 from 9.0.80, I'm seeing some static JavaScript assets take 20 seconds to return.  The page rendering freezes while this is happening.\n\nI bisected the code between 9.0.80 and 9.0.81 and the following commit appears to be responsible.\n\n\ncommit eca8f44c766c380c0d117dc7eca9d933aea71c38 (HEAD)\nAuthor: shin-mallang <huipulci1@naver.com>\nDate:   Sat Sep 9 22:09:03 2023 +0900\n\n    Relocate the useCompression check and apply parts back to back.\n\ndiff --git a/java/org/apache/coyote/http11/Http11Processor.java b/java/org/apache/coyote/http11/Http11Processor.java\nindex aab2290407..ac531ad105 100644\n--- a/java/org/apache/coyote/http11/Http11Processor.java\n+++ b/java/org/apache/coyote/http11/Http11Processor.java\n@@ -914,12 +914,6 @@ public class Http11Processor extends AbstractProcessor {\n             prepareSendfile(outputFilters);\n         }\n \n-        // Check for compression\n-        boolean useCompression = false;\n-        if (entityBody && sendfileData == null) {\n-            useCompression = protocol.useCompression(request, response);\n-        }\n-\n         MimeHeaders headers = response.getMimeHeaders();\n         // A SC_NO_CONTENT response may include entity headers\n         if (entityBody || statusCode == HttpServletResponse.SC_NO_CONTENT) {\n@@ -956,8 +950,11 @@ public class Http11Processor extends AbstractProcessor {\n             }\n         }\n \n-        if (useCompression) {\n-            outputBuffer.addActiveFilter(outputFilters[Constants.GZIP_FILTER]);\n+        // Check for compression\n+        if (entityBody && sendfileData == null) {\n+            if (protocol.useCompression(request, response)) {\n+                outputBuffer.addActiveFilter(outputFilters[Constants.GZIP_FILTER]);\n+            }\n         }\n \n         // Add date header unless application has already set one (e.g. in a",
    "comments": [
      "From a mail by Amit Pande on users' list\n> Subject: Tomcat upgrade from 9.0.80 to 9.0.81\nhttps://lists.apache.org/thread/hh84wdgmvfkgs0zof14ly8vxgrh1no4j\n\norg.apache.http.ConnectionClosedException: Premature end of Content-Length delimited message body (expected: 4,999; received: 3,040)\n\nThus apparently the Content-Length header is set to a wrong value when GZip compression is enabled.",
      "(In reply to M McClain from comment #0)\n\n> diff --git a/java/org/apache/coyote/http11/Http11Processor.java\n> b/java/org/apache/coyote/http11/Http11Processor.java\n> index aab2290407..ac531ad105 100644\n> --- a/java/org/apache/coyote/http11/Http11Processor.java\n> +++ b/java/org/apache/coyote/http11/Http11Processor.java\n> @@ -914,12 +914,6 @@ public class Http11Processor extends AbstractProcessor {\n> ...\n>  \n> -        // Check for compression\n> -        boolean useCompression = false;\n> -        if (entityBody && sendfileData == null) {\n> -            useCompression = protocol.useCompression(request, response);\n> -        }\n> ...\n> @@ -956,8 +950,11 @@ public class Http11Processor extends AbstractProcessor {\n\nThe lines between the two chunks in the diff above in Http11Processor are responsible for setting the \"Content-Length\" header.\n\n>930:        long contentLength = response.getContentLengthLong();\n>...\n>937:        } else if (contentLength != -1) {\n>938:            headers.setValue(\"Content-Length\").setLong(contentLength);\n\n\nThe \"protocol.useCompression(request, response)\" call goes down to\norg.apache.coyote.CompressionConfig#useCompression(...) that does\n\n>        // Compressed content length is unknown so mark it as such.\n>        response.setContentLength(-1);\n>        // Configure the content encoding for compressed content\n>        responseHeaders.setValue(\"Content-Encoding\").setString(\"gzip\");\n\nAs the \"useCompression\" was moved by that commit, line 930 no longer sees the correct contentLength value.\n\n\nNote: The workaround for this issue is to turn off compression on a Connector. (Remove the \"compression\" attribute from a <Connector> element, or set it to \"off\").\n\nhttps://tomcat.apache.org/tomcat-9.0-doc/config/http.html#Standard_Implementation",
      "I have not tested yet, but I guess that Tomcat 8.5.94, 10.1.14 and 11.0.0-M12 are affected as well.\n\nThe code regarding useCompression() call (o.a.c.http11.Http11Processor, o.a.c.CompressionConfig) is essentially the same. Commits:\n\n8.5.x: https://github.com/apache/tomcat/commit/7abdf0b44c79f65c4f0fc862a1ea311f81ce881a\n\n10.1.x: https://github.com/apache/tomcat/commit/97c58599b25107d5b5cc19dd199a4fa847e99358\n\nmain (11.0.x): https://github.com/apache/tomcat/commit/e47d0c46fecb3745593e9b4552e4298adf8184d2",
      "Sorry. I complained about this refactoring, but unfortunately could not find anything obviously wrong with it, so it went in ...",
      "Thanks Konstantin for the review of the issue.\n\nThe fix will be in 11.0.0-M13, 10.1.15, 9.0.82 and 8.5.95.\n\nI assume the release process for the next round of releases will start soon (likely a couple days due to the conference, we'll see).",
      "*** Bug 67678 has been marked as a duplicate of this bug. ***",
      "(In reply to Remy Maucherat from comment #4)\n> Sorry. I complained about this refactoring, but unfortunately could not find\n> anything obviously wrong with it, so it went in ...\n\nSorry, I missed this and pushed for this contribution to be accepted. Thanks for the fix and test case.",
      "(In reply to Mark Thomas from comment #7)\n> (In reply to Remy Maucherat from comment #4)\n> > Sorry. I complained about this refactoring, but unfortunately could not find\n> > anything obviously wrong with it, so it went in ...\n> \n> Sorry, I missed this and pushed for this contribution to be accepted. Thanks\n> for the fix and test case.\n\nI couldn't see any problem either, probably because a lot of the code had to be moved to compression config.\n\nSo I suppose we have to start a round of releases. Is anyone actually available today ?",
      "*** Bug 67685 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2023-10-10T20:41:45Z",
    "fixes": [
      67670
    ]
  },
  {
    "id": 69373,
    "summary": "Make DefaultServlet's HTML listing file last modified rendering better (flexible)",
    "description": "Right now the format is fixed to (unreadable) RFC 5322, section 3.3. No way to change or default to ISO 8601. To make it more accessible and flexible I have a two fold improval proposal:\n1. Introduce a \"protected String renderTimestamp(long timestamp)\" method which will invoke org.apache.tomcat.util.http.FastHttpDateFormat.formatDate(long) identical to what getLastModifiedHttp() returns now. This will allow people to override it, but retain the current behavior (output format).\n2. Introduce two new servlet parameters: \"lastModifiedFormat\" (SimpleDateFormat), \"lastModifiedTimeZone\" (if desired locale as well). If none set, the above kicks in, if at least lastModifiedFormat is set create a ConcurrentDateFormat member.\n\nI'd split this into two commits.",
    "comments": [
      "Created attachment 39892\nFirst patch\n\nHere is the first patch. Trivial.",
      "Fixed in:\n- main for 12.0.0-M1 and onwards\n- 11.0.x for 11.0.1 and onwards\n- 10.1.x for 10.1.32 and onwards\n- 9.0.x for 9.0.97 and onwards\n\nSecond patch will be provided at a later point in time."
    ],
    "creation_ts": "2024-10-03T17:52:28Z",
    "fixes": [
      69373
    ]
  },
  {
    "id": 63681,
    "summary": "Introduce RealmBase#authenticate(GSSName, GSSCredential) and friends",
    "description": "There are several situations where #authentiate(GSSContext, boolean) does not cover all needs:\n\n* You have a developer authenticator which obtains the GSSName of the currently logged in principal, e.g., http://tomcatspnegoad.sourceforge.net/xref/net/sf/michaelo/tomcat/authenticator/CurrentWindowsIdentityAuthenticator.html#CurrentWindowsIdentityAuthenticator\n* You perform protocol transition and have deduced the user's GSS name, e.g., MS-SFU\n* You perform TLS cert auth and extract from SAN msUPN or the emailAdress fields\n* You completely lose the GSS name OID and cannot distinguish what type of name that was, i.e., Kerberos principal, Kerberos enterprise princial, MS user principal name, or an email address\n* The authenticator has established and verified the security context for you and passing required information only\n* You perform authentication by a reserve proxy and pass that information with request headers, e.g., https://github.com/modauthgssapi/mod_auth_gssapi\n\nAlong with this, we require to have #getPrincipal(GSSName) and #getPrincipal(GSSName, GSSCredential). The former would simply call the latter with a second argument null value.\n\n#getPrincipal(String, GSSCredential) would be deprecated because it loses information.\n\n#isStripRealmForGss() would be called as late as possible in #getPrincipal(GSSName, GSSCredential), leaving #authenticate() alone.\n\nI will work this out in a separate branch.",
    "comments": [
      "Fixed in:\n- master for 9.0.30 onwards\n- 8.5.x for 8.5.50 onwards\n- 7.0.x for 7.0.99 onwards"
    ],
    "creation_ts": "2019-08-21T20:17:22Z",
    "fixes": [
      63681
    ]
  },
  {
    "id": 63682,
    "summary": "Async servlet over HTTP/2 non-blocking write hanging on certain flow control window update pattern from client",
    "description": "Steps to reproduce:\n$ git clone https://github.com/dapengzhang0/servlettest.git\n$ cd servlettest\n$ git checkout large-write\n$ ./gradlew clean test\n\nBasically the test client sends outbound HTTP/2 settings with INITIAL_WINDOW_SIZE=1048576 and then immediately sends outbound WINDOW_UPDATE with streamId=0 windowSizeIncrement=983041 before sending the request.\nThe servlet responds with an initial 1048576 bytes, and then repeatedly responds with 4096 bytes.\n\nThe test fails on both linux and mac. The test only fails for Tomcat 9.0.21+, but does not fail for Tomcat 9.0.20. The test does not fail for Undertow/Jetty. \n\nThe log of a failed test is like following:\n\nLargeAsyncWriteTest > reproduceBug STANDARD_ERROR\n    Aug 21, 2019 5:19:16 PM org.apache.coyote.http11.AbstractHttp11Protocol configureUpgradeProtocol\n    INFO: The [\"http-nio-auto-1\"] connector has been configured to support HTTP upgrade to [h2c]\n    Aug 21, 2019 5:19:16 PM org.apache.coyote.AbstractProtocol init\n    INFO: Initializing ProtocolHandler [\"http-nio-auto-1\"]\n    Aug 21, 2019 5:19:16 PM org.apache.catalina.core.StandardService startInternal\n    INFO: Starting service [Tomcat]\n    Aug 21, 2019 5:19:16 PM org.apache.catalina.core.StandardEngine startInternal\n    INFO: Starting Servlet engine: [Apache Tomcat/9.0.21]\n    Aug 21, 2019 5:19:17 PM org.apache.coyote.AbstractProtocol start\n    INFO: Starting ProtocolHandler [\"http-nio-auto-1-44507\"]\n    Sending request(s)...\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logSettings\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] OUTBOUND SETTINGS: ack=false settings={INITIAL_WINDOW_SIZE=1048576}\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logWindowsUpdate\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] OUTBOUND WINDOW_UPDATE: streamId=0 windowSizeIncrement=983041\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logHeaders\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] OUTBOUND HEADERS: streamId=3 headers=DefaultHttp2Headers[:path: /large_async_write, :method: GET, :scheme: http, :authority: 127.0.0.1:44507, accept-encoding: gzip, accept-encoding: deflate] streamDependency=0 weight=16 exclusive=false padding=0 endStream=true\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logSettings\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] INBOUND SETTINGS: ack=false settings={MAX_CONCURRENT_STREAMS=100}\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logSettingsAck\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] OUTBOUND SETTINGS: ack=true\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logSettingsAck\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] INBOUND SETTINGS: ack=true\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logPing\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] INBOUND PING: ack=false bytes=1\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logPingAck\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] OUTBOUND PING: ack=true bytes=1\n    onWritePossible() ENTRY\n    Send out 1048576 bytes\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logHeaders\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] INBOUND HEADERS: streamId=3 headers=DefaultHttp2Headers[:status: 200, content-type: application/binary, date: Thu, 22 Aug 2019 00:19:17 GMT] padding=0 endStream=false\n    Send out 4096 bytes\n    Send out 4096 bytes\n    onWritePossible() EXIT, output stream becomes not ready\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logData\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] INBOUND DATA: streamId=3 padding=0 endStream=false length=8192 bytes=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000...\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logData\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] INBOUND DATA: streamId=3 padding=0 endStream=false length=8192 bytes=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000...\n    \n...\nrepeated INBOUND DATA log\n...\n\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logData\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] INBOUND DATA: streamId=3 padding=0 endStream=false length=8192 bytes=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000...\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logWindowsUpdate\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] OUTBOUND WINDOW_UPDATE: streamId=0 windowSizeIncrement=524288\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logWindowsUpdate\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] OUTBOUND WINDOW_UPDATE: streamId=3 windowSizeIncrement=524288\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logData\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] INBOUND DATA: streamId=3 padding=0 endStream=false length=8192 bytes=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000...\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logData\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] INBOUND DATA: streamId=3 padding=0 endStream=false length=8192 bytes=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000...\n\n...\nrepeated INBOUND DATA log\n...\n\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logData\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] INBOUND DATA: streamId=3 padding=0 endStream=false length=8192 bytes=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000...\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logData\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] INBOUND DATA: streamId=3 padding=0 endStream=false length=8192 bytes=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000...\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logWindowsUpdate\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] OUTBOUND WINDOW_UPDATE: streamId=0 windowSizeIncrement=524288\n    Aug 21, 2019 5:19:17 PM io.netty.handler.codec.http2.Http2FrameLogger logWindowsUpdate\n    INFO: [id: 0x913e4c7e, L:/127.0.0.1:51738 - R:/127.0.0.1:44507] OUTBOUND WINDOW_UPDATE: streamId=3 windowSizeIncrement=524288\n    Aug 21, 2019 5:20:17 PM org.apache.coyote.AbstractProtocol pause\n    INFO: Pausing ProtocolHandler [\"http-nio-auto-1-44507\"]\n    Aug 21, 2019 5:20:17 PM org.apache.catalina.core.StandardService stopInternal\n    INFO: Stopping service [Tomcat]\n    Aug 21, 2019 5:20:19 PM org.apache.coyote.AbstractProtocol stop\n    INFO: Stopping ProtocolHandler [\"http-nio-auto-1-44507\"]\n\nLargeAsyncWriteTest > reproduceBug FAILED\n    java.lang.IllegalStateException at LargeAsyncWriteTest.java:97",
    "comments": [
      "Sorry I haven't responded to this for a while. It has been on the TODO list for before the next release and I have been working on it on and off but I only made progress today.\n\nI believe I have identified the root cause. Hopefully I'll have a patch for this shortly.",
      "Thanks for the test case. There was a timing factor at play here that would have made this rather tricky to track down without the test case.\n\nFixed in:\n- master for 9.0.25 onwards\n- 8.5.x for 8.5.46 onwards",
      "Thank you Mark for the fix!\n\nI can verify the issue is fixed by testing my project where the issue was originally found.\n\nBTW I also had been working on and off on making a reproducible minimum test case."
    ],
    "creation_ts": "2019-08-22T00:36:14Z",
    "fixes": [
      63682
    ]
  },
  {
    "id": 63836,
    "summary": "TestWebdavServletOptions test fails with OutOfMemoryError for NIO on 32-bit Java",
    "description": "I encountered this issue when testing a 7.0.97 release candidate.\n\nThe test \"org.apache.catalina.servlets.TestWebdavServletOptions\" fails for NIO connector when I run the tests with a 32-bit JVM.\n\nEssentially, it is a parameterized test (@RunWith(Parameterized.class)) that has 312 iterations. Each iteration creates a Servlet, starts Tomcat and does two requests (OPTIONS, and one of other HTTP methods). Processing a request may involve reading a resource.\n\nI am testing with different versions of Java on Windows 10. I start Apache Ant from a command line, without an IDE.\n\nThus far I know the following:\n\n1. The test fails reliably when I run the test alone. (Running a single test is done by adding the following line to build.properties:\n\ntest.entry=org.apache.catalina.servlets.TestWebdavServletOptions\n\n2. The test fails for NIO connector only and a 32-bit JDK.\n\n- It completes successfully for BIO and APR.\n\n- It fails for 32-bit Java 6u45, 7u80, 8u202. It completes successfully for 64-bit 8u222, 13u0.\n\n3. The same test exists in Tomcat 8.5.47 and it completes successfully there. I did run it with 32-bit Java 7u80.\n\n4. When the test fails:\n\n- TEST-org.apache.catalina.servlets.TestWebdavServletOptions.NIO.txt\nThis file is essentially empty, with a message \"Forked Java VM exited abnormally.\" and no other details.\n\n- The error can be seen in stdout/stderr output of Apache Ant.\n\na. The test runs successfully up to iteration 235\n(iterations are numbered starting with 0)\n\n> [junit] INFO: Starting test case [testOptions[234]]\n> ... (followed by log messages of starting and stopping Apache Tomcat)\n\nb. Starting with iteration 236 and  I see only two messages:\n\n> [junit] INFO: Starting test case [testOptions[235]]\n> [junit] INFO: Initializing ProtocolHandler [\"http-nio-127.0.0.1-auto-236\"]\n\nThere are no other startup or shutdown messages following.\n\nc. After iteration 309 (out of total 312) the run is aborted with an OOME\n\n> [junit] Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\n\n5. I tried to investigate this as a regression and bisect.\nMy result is that this is not a regression. I was not able to find a non-failing version.\n\na. The test fails with current 7.0.x branch head (as of 2019-10-10), with 7.0.97 and 7.0.96.\n\nb. The test fails on the commit when it was added to the source tree (aed9453c710bafce9d69c5d4ea02363d371b8a32 on 2019-06-29). This was between versions 7.0.94 and 7.0.95.\n\nc. If I backport the test implementation (the test/** changes from aed9453c71, I observe the same OutOfMemoryError for versions 7.0.94, 7.0.93, 7.0.92 and 7.0.80.\n\n6. A trivial attempt of a fix by patching TomcatBaseTest.tearDown() by explicitly releasing a reference to a Tomcat instance - does not help\n\n--- a/test/org/apache/catalina/startup/TomcatBaseTest.java\n+++ b/test/org/apache/catalina/startup/TomcatBaseTest.java\n@@ -176,6 +176,7 @@ public abstract class TomcatBaseTest extends LoggingBaseTest {\n             }\n         } finally {\n             super.tearDown();\n+            tomcat = null;\n         }\n     }\n\nI see the same OutOfMemoryError.\n\nJudging from point 5.c. I think this is not a regression and not a showstopper. If it were, I think there would have been other evidences in the two years since 7.0.80.\n\nIt might be an issue with the test itself, but it is strange that it manifests itself only when running with a NIO connector. The overhead from JUnit, from test set up, from resources being served, from the size of a web application should be the same.\n\nI think that a good next step from here would be to take a memory dump and to analyze it with a profiler.",
    "comments": [
      "Created attachment 36818\nTEST-org.apache.catalina.servlets.TestWebdavServletOptions.NIO.txt\n\nOutput from a failing run (Java 8u202 32-bit, NIO)",
      "Created attachment 36819\nTEST-org.apache.catalina.servlets.TestWebdavServletOptions.APR.txt\n\nOutput from a successful run (Java 8u202 32-bit, APR)",
      "Created attachment 36820\nant_test.log (zipped)\n\nApache Ant stdout/stderr from the run (Java 8u202 32-bit, all connectors: BIO, NIO and APR). A 1.8 MB file compressed with zip.\n\nThe OutOfMemoryError message can be seen in it.",
      "Oh, the irony.\n\nThe problem is that the 1MB reserved by the OOME parachute is not released.\n\nHopefully, I'll have a fix for this shortly.",
      "Fixed in 7.0.x for 7.0.98 onwards"
    ],
    "creation_ts": "2019-10-11T12:09:41Z",
    "fixes": [
      63836
    ]
  },
  {
    "id": 69362,
    "summary": "Recursive nested collection DELETE not reflected in multi-status report from WebdavServlet",
    "description": "Consider the following tree:\n# tree log/foo/\nlog/foo/\n\u251c\u2500\u2500 bar\n\u2514\u2500\u2500 baz\n    \u2514\u2500\u2500 moo\n\nLet's try to delete it:\nosipovmi@deblndw011x:~/var/Projekte/tomcat (apache-main *=)\n$ curl --negotiate -u : -X DELETE 'https://example.com/backend-dev/dav/log/foo' | xmllint --format  -\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\">\n  <D:response>\n    <D:href>/backend-dev/dav/log/foo/bar</D:href>\n    <D:status>HTTP/1.1 500 </D:status>\n  </D:response>\n  <D:response>\n    <D:href>/backend-dev/dav/log/foo/baz/moo</D:href>\n    <D:status>HTTP/1.1 500 </D:status>\n  </D:response>\n  <D:response>\n    <D:href>/backend-dev/dav/log/foo</D:href>\n    <D:status>HTTP/1.1 500 </D:status>\n  </D:response>\n</D:multistatus>\n\nWhere is the status for baz/?\nWell, the problem is the following: While WebdavServlet#deleteResource() does a proper post-order traversal and then marks the actual collection is undeletable:\n            deleteCollection(req, path, errorList);\n            if (!resource.delete()) {\n                errorList.put(path, Integer.valueOf(WebdavStatus.SC_METHOD_NOT_ALLOWED));\n            }\nWebdavServlet#deleteCollection() deviates from it:\n                if (childResource.isDirectory()) {\n                    deleteCollection(req, childName, errorList);\n                }\n\n                if (!childResource.delete()) {\n                    if (!childResource.isDirectory()) {\n                        // If it's not a collection, then it's an unknown\n                        // error\n                        errorList.put(childName, Integer.valueOf(WebdavStatus.SC_METHOD_NOT_ALLOWED));\n                    }\n                }\n\nReason: unclear. By removing the nested if clause it works:\nosipovmi@deblndw011x:~/var/Projekte/tomcat (apache-9.0.x =)\n$ curl --negotiate -u : -X DELETE 'https://example.com/backend-dev/dav/log/foo' | xmllint --format  -\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\">\n  <D:response>\n    <D:href>/backend-dev/dav/log/foo/bar</D:href>\n    <D:status>HTTP/1.1 500 </D:status>\n  </D:response>\n  <D:response>\n    <D:href>/backend-dev/dav/log/foo/baz/moo</D:href>\n    <D:status>HTTP/1.1 500 </D:status>\n  </D:response>\n  <D:response>\n    <D:href>/backend-dev/dav/log/foo/baz</D:href>\n    <D:status>HTTP/1.1 500 </D:status>\n  </D:response>\n  <D:response>\n    <D:href>/backend-dev/dav/log/foo</D:href>\n    <D:status>HTTP/1.1 500 </D:status>\n  </D:response>\n</D:multistatus>\n\nEither I do not understand the reason here or it is clearly a bug.\nIf you (R\u00e9my?) confirm the bug, I will push the fix.",
    "comments": [
      "It's always being like that. The reason might have been to avoid being too redundant (if not deleting the contents, the intermediate parent folder is also obviously not getting deleted) but it seems possible to add that although there's probably no added value.",
      "(In reply to Remy Maucherat from comment #1)\n> It's always being like that. The reason might have been to avoid being too\n> redundant (if not deleting the contents, the intermediate parent folder is\n> also obviously not getting deleted) but it seems possible to add that\n> although there's probably no added value.\n\nBut what if the files can be deleted, but the directory is write-protected?\nFor consistency reasons I'd like to add it.",
      "(In reply to Michael Osipov from comment #2)\n> (In reply to Remy Maucherat from comment #1)\n> > It's always being like that. The reason might have been to avoid being too\n> > redundant (if not deleting the contents, the intermediate parent folder is\n> > also obviously not getting deleted) but it seems possible to add that\n> > although there's probably no added value.\n> \n> But what if the files can be deleted, but the directory is write-protected?\n> For consistency reasons I'd like to add it.\n\nOk.",
      "See RFC 4918 section 9.6.1. I think this should remain as is.",
      "(In reply to Mark Thomas from comment #4)\n> See RFC 4918 section 9.6.1. I think this should remain as is.\n\nAre you referring to:\n   If any resource identified by a member URL cannot be deleted, then\n   all of the member's ancestors MUST NOT be deleted, so as to maintain\n   URL namespace consistency.\n\nNote that this does not change the behavior of DELETE, but the error reporting.\n\nReading this:\n   If an error occurs deleting a member resource (a resource other than\n   the resource identified in the Request-URI), then the response can be\n   a 207 (Multi-Status).  Multi-Status is used here to indicate which\n   internal resources could NOT be deleted, including an error code,\n   which should help the client understand which resources caused the\n   failure.  For example, the Multi-Status body could include a response\n   with status 423 (Locked) if an internal resource was locked.\n\nI understand that the current response is incomplete.\n\nCan you please elaborate?",
      "Final paragraph of 9.6.1.",
      "(In reply to Mark Thomas from comment #6)\n> Final paragraph of 9.6.1.\n\nI see:\n   424 (Failed Dependency) status codes SHOULD NOT be in the 207 (Multi-\n   Status) response for DELETE.  They can be safely left out because the\n   client will know that the ancestors of a resource could not be\n   deleted when the client receives an error for the ancestor's progeny.\n   Additionally, 204 (No Content) errors SHOULD NOT be returned in the\n   207 (Multi-Status).  The reason for this prohibition is that 204 (No\n   Content) is the default success code.\n\nBut it says SHOULD NOT and not MUST NOT. So if we are going to retain the current behavior I would at least update the comment with this reference.\nSo, I am still in favor, but if you still object I would just add the comment and close this ticket.",
      "My counter-proposal for code clarity:\n> diff --git a/java/org/apache/catalina/servlets/WebdavServlet.java b/java/org/apache/catalina/servlets/WebdavServlet.java\n> index e8cb718295..22df7343af 100644\n> --- a/java/org/apache/catalina/servlets/WebdavServlet.java\n> +++ b/java/org/apache/catalina/servlets/WebdavServlet.java\n> @@ -1765,9 +1765,11 @@ public class WebdavServlet extends DefaultServlet implements PeriodicEventListen\n>                  }\n> \n>                  if (!childResource.delete()) {\n> +                    /* According to RFC 4918, section 9.6.1, last paragraph the multi-status response\n> +                     * SHOULD NOT contain the failed ancestor resource collection because the client\n> +                     * will know that already.\n> +                     */\n>                      if (!childResource.isDirectory()) {\n> -                        // If it's not a collection, then it's an unknown\n> -                        // error\n>                          errorList.put(childName, Integer.valueOf(WebdavStatus.SC_METHOD_NOT_ALLOWED));",
      "My reading of RFC 4918 is if we have a status code for baz it should be 424.\n\nQuoting from RFC 2119:\n   SHOULD NOT   This phrase, or the phrase \"NOT RECOMMENDED\" mean that\n   there may exist valid reasons in particular circumstances when the\n   particular behavior is acceptable or even useful, but the full\n   implications should be understood and the case carefully weighed\n   before implementing any behavior described with this label.\n\nIf we have valid reasons to include a status code it should be 424. My preference is for your counter proposal to add a comment and continue to omit the status for parent resources in this case.",
      "(In reply to Mark Thomas from comment #9)\n> My reading of RFC 4918 is if we have a status code for baz it should be 424.\n> \n> Quoting from RFC 2119:\n>    SHOULD NOT   This phrase, or the phrase \"NOT RECOMMENDED\" mean that\n>    there may exist valid reasons in particular circumstances when the\n>    particular behavior is acceptable or even useful, but the full\n>    implications should be understood and the case carefully weighed\n>    before implementing any behavior described with this label.\n> \n> If we have valid reasons to include a status code it should be 424. My\n> preference is for your counter proposal to add a comment and continue to\n> omit the status for parent resources in this case.\n\nThis is what my counter-proposal does, not behavioral change, just add better docs. That's it.",
      "(In reply to Mark Thomas from comment #6)\n> Final paragraph of 9.6.1.\n\nAlso, the complete example in 9.6.2 includes this specific case, and only includes the file and not its parent directory in the response.",
      "(In reply to Christopher Schultz from comment #11)\n> (In reply to Mark Thomas from comment #6)\n> > Final paragraph of 9.6.1.\n> \n> Also, the complete example in 9.6.2 includes this specific case, and only\n> includes the file and not its parent directory in the response.\n\nThis means that our current implementation is not correct for the Request-URI collection:\n> Map<String,Integer> errorList = new LinkedHashMap<>();\n> \n> deleteCollection(req, path, errorList);\n> if (!resource.delete()) {\n> \terrorList.put(path, Integer.valueOf(WebdavStatus.SC_METHOD_NOT_ALLOWED));\n> }\n> \n> if (!errorList.isEmpty()) {\n> \tsendReport(req, resp, errorList);\n> \treturn false;\n> }\n\nBased you your comment we need to do:\n> -            if (!resource.delete()) {\n> -                errorList.put(path, Integer.valueOf(WebdavStatus.SC_METHOD_NOT_ALLOWED));\n> -            }\n> +            resource.delete();",
      "(In reply to Michael Osipov from comment #12)\n> (In reply to Christopher Schultz from comment #11)\n> > (In reply to Mark Thomas from comment #6)\n> > > Final paragraph of 9.6.1.\n> > \n> > Also, the complete example in 9.6.2 includes this specific case, and only\n> > includes the file and not its parent directory in the response.\n> \n> This means that our current implementation is not correct for the\n> Request-URI collection:\n> > Map<String,Integer> errorList = new LinkedHashMap<>();\n> > \n> > deleteCollection(req, path, errorList);\n> > if (!resource.delete()) {\n> > \terrorList.put(path, Integer.valueOf(WebdavStatus.SC_METHOD_NOT_ALLOWED));\n> > }\n> > \n> > if (!errorList.isEmpty()) {\n> > \tsendReport(req, resp, errorList);\n> > \treturn false;\n> > }\n> \n> Based you your comment we need to do:\n> > -            if (!resource.delete()) {\n> > -                errorList.put(path, Integer.valueOf(WebdavStatus.SC_METHOD_NOT_ALLOWED));\n> > -            }\n> > +            resource.delete();\n\nthis patch is incorrect because if we consider that the collection is empty, but deleting the collection fails the client would never see an error. This is a separate issue which should be reported and handled separately. Here, I will stick to the comment update only.",
      "I have a fix for the comment and the empty directory issue ready to commit. I just need to run the WebDAV test suite to make sure I haven't broken anything.",
      "Fixed in:\n- 11.0.x for 11.0.0 onwards\n- 10.1.x for 10.1.31 onwards\n-  9.0.x for  9.0.96 onwards",
      "(In reply to Mark Thomas from comment #15)\n> Fixed in:\n> - 11.0.x for 11.0.0 onwards\n> - 10.1.x for 10.1.31 onwards\n> -  9.0.x for  9.0.96 onwards\n\nThank your for the fix, are you sure this is complete?\nWhat about this spot?\n            deleteCollection(req, path, errorList);\n            if (!resource.delete()) {\n                errorList.put(path, Integer.valueOf(WebdavStatus.SC_METHOD_NOT_ALLOWED));\n            }\n\nCollection could not be deleted and the parent resource as well. In this case the parent shouldn't appear in the list, but it does. Am I wrong?",
      "Example:\nosipovmi@deblndw011x:~\n$ curl --negotiate -u : -X DELETE https://example.com/backend-dev/dav/log/foo  | xmllint --format  -\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   412  100   412    0     0  13181      0 --:--:-- --:--:-- --:--:-- 13290\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\">\n  <D:response>\n    <D:href>/backend-dev/dav/log/foo/bar</D:href>\n    <D:status>HTTP/1.1 405 </D:status>\n  </D:response>\n  <D:response>\n    <D:href>/backend-dev/dav/log/foo/baz/moo</D:href>\n    <D:status>HTTP/1.1 405 </D:status>\n  </D:response>\n  <D:response>\n    <D:href>/backend-dev/dav/log/foo</D:href>\n    <D:status>HTTP/1.1 405 </D:status>\n  </D:response>\n</D:multistatus>\n\nThe last response should be there since it is the parent (root) collection, no?",
      "Additional fix applied.",
      "(In reply to Mark Thomas from comment #18)\n> Additional fix applied.\n\nConfirmed."
    ],
    "creation_ts": "2024-10-02T09:20:46Z",
    "fixes": [
      69362
    ]
  },
  {
    "id": 66622,
    "summary": "Enabling httpHeaderSecurity includes X-XSS-Protection the protection header which goes against Mozilla recommendations",
    "description": "In https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection Mozilla states that no web facing server should send the X-XSS-Protection header, but when enabling the httpHeaderSecurity filter X-XSS-Protection is one of the headers added. It would be better to exclude it.",
    "comments": [
      "Given the status and history of that feature I intend to do the following:\n\n- change the default for xssProtectionEnabled to false\n- deprecate the feature in 8.5.x to 10.1.x\n- remove the feature in 11.0.x",
      "Fixed in:\n- 11.0.x for 11.0.0-M7 onwards\n- 10.1.x for 10.1.10 onwards\n-  9.0.x for  9.0.76 onwards\n-  8.5.x for  8.5.90 onwards"
    ],
    "creation_ts": "2023-05-31T13:34:23Z",
    "fixes": [
      66622
    ]
  },
  {
    "id": 54060,
    "summary": "DigestAuthenticator doesn't parse Authorization header correctly",
    "description": "From DigestAuthenticator at line 546\n\n            // Bugzilla 37132: http://issues.apache.org/bugzilla/show_bug.cgi?id=37132\n            String[] tokens = authorization.split(\",(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")+$)\");\n\nif the last term in the line is not enclosed in quotes, only a single 'term' results. For example:\n\nHeader: username=\"mthornton\", qop=auth\ntoken[0] is username=\"mthornton\", qop=auth\n\nHeader: username=\"mthornton\", qop=auth, cnonce=\"9926cb3c334ede11\"\ntoken[0] is username=\"mthornton\"\ntoken[1] is  qop=auth\ntoken[2] is  cnonce=\"9926cb3c334ede11\"\n\n(Headers abbreviated for clarity).",
    "comments": [
      "Created attachment 29515\nSimple test of the parsing\n\nTest code for the erroneous line in DigestAuthenticator.\n\nIncludes two examples taken from actual logs of submitted headers.\nPlus two pruned examples.",
      "The current parsing would also be broken by including an embedded quote in fields (e.g. in the cnonce field). E.g. cnonce=\"Mgytrr\\\"gfh\"\n\nLooking for a regular expression that correctly handles this syntax may not be sensible.",
      "Created attachment 29518\nProposed patch fixes problem\n\nA more rigorous parsing of header lines might be appropriate",
      "The patch is against 7.0.30 because that is the most recent version packaged for Ubuntu 12.10.",
      "diff -u format for the patch please. I'm tempted to use the HTTP header parser for this. It'll need a fair bit of work for this though.",
      "Created attachment 29519\nPatch in alternative format\n\nI hope this the preferred format\nresult of git diff -p",
      "Thanks. Much more readable.\n\nI'm currently mulling over how to handle this. The HttpParser is very heavy-weight but the simple approach is demonstrably prone to failure. I'm wondering if writing a generic HTTP header value parser is the way to go. I may experiment a little and see what I can come up with.",
      "I have added a first cut of a new HTTP header parser to trunk. The tests attached to this issue pass but there is more work to do before the new parser can be used to solve this issue.",
      "This has been fixed in trunk and 7.0.x and will be included in 7.0.33 onwards.",
      "Hello all, first I would like to say that I think this patch is entirely right. I even checked against RFC 2617. But after this change I'm noticing that DIGEST authentication stops working in Safari, curl, and Java's SDK. Chrome is fine.\n\nThe reason, it seems, is that their Digest response includes either algorithm=\"MD5\" when it should be algorithm=MD5, or qop=\"auth\" when it should be qop=auth.\n\nFor example, from curl:\n\n* Connection #0 to host localhost left intact\n* Issue another request to this URL: 'https://localhost:8453/ready'\n* Re-using existing connection! (#0) with host localhost\n* Connected to localhost (::1) port 8453 (#0)\n* Server auth using Digest with user 'foo'\n> HEAD /ready HTTP/1.1\n> Authorization: Digest username=\"foo\", realm=\"Myrrix\", nonce=\"1355351469307:f5864c38c03153e941d0e0ec6e6b625f\", uri=\"/ready\", cnonce=\"MTM1NTM1\", nc=00000001, qop=\"auth\", response=\"cccab2adb7a9c59f9eeac8b6981e79c0\", opaque=\"B1094CC78FA4B4D9288C50B02C975C0F\"\n> User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5\n> Host: localhost:8453\n> Accept: */*\n\nIn the new implementation this means the parser rejects it since it is not expecting a quoted field.\n\n\nGoing back to the prior version of Tomcat works in the sense that the old parser was (too) lenient on incorrect quoting. Also changing these fields to be treated like type 'FIELD_TYPE_QUOTED_STRING' works.\n\nIt's not a bug in Tomcat though AFAICT. But if it really means a lot of popular implementations don't work with it, I dunno, maybe worth revisiting.",
      "(In reply to comment #10)\n> \n> The reason, it seems, is that their Digest response includes either\n> algorithm=\"MD5\" when it should be algorithm=MD5, or qop=\"auth\" when it\n> should be qop=auth.\n> \n\nQuoting of qop was allowed by r1429124 (following bug 54372 ).\n\nWhat clients quote the algorithm field?\n(I do not mind to fix it in the same way, but I would like to know the reason).",
      "Hello Konstantin, it's the JVM that seems to send a bad algorithm value. I've reproduced it in the following, at least:\n\n- Java 1.6.0_37 for Mac OS X\n- Java 1.7.0_10 for Mac OS X\n- OpenJDK 1.7.0_09 for Linux\n\nThey send something like...\n\nDigest username=\"foo\", realm=\"Myrrix\", nonce=\"1359097999996:13ed87b1b78c157232d609a099bcdb6e\", nc=00000001, uri=\"/ready\", response=\"b6f80b049b4b39000da79c96442e0740\", algorithm=\"MD5\", opaque=\"3E8794E4CE80B19E5DF888D615FFBBA5\", cnonce=\"DGKKOPAFPJKCKKBDLFECINONACKFJIFNDOGKGLIO\", qop=\"auth\"\n\nalgorithm=\"MD5\" is the culprit.\n\n(Indeed looks like this is just wrong in the latest OpenJDK 7 source, at least: http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/sun/net/www/protocol/http/DigestAuthentication.java?av=f#367 I will see about filing a bug.)\n\nIf I modify the code such that the \"algorithm\" field is treated as \"FIELD_TYPE_QUOTED_STRING\" then it works, and other clients seem to still work (Safari, Chrome, curl at least).\n\nIt would indeed be great to apply the same workaround, thanks!",
      "REOPENing the issue to address Comment 12",
      "Fixed in trunk and 7.0.x and will be included in 7.0.36 onwards.\n\nalgorithm is now permitted to be a quoted token. Note no such definition exists in the specs. It is <\"><TOKEN><\"> as some clients insist on adding quotes to tokens.",
      "HttpClient is a culprit in quoting algorithm. Unfortunately Ubuntu 13.04 uses TomCat 7.0.35 and is thus affected. I have filed an issue with HttpClient:\nhttps://issues.apache.org/jira/browse/HTTPCLIENT-1354"
    ],
    "creation_ts": "2012-10-28T21:36:52Z",
    "fixes": [
      54060
    ]
  },
  {
    "id": 56663,
    "summary": "Can not get all data from InputStream in onDataAvailable",
    "description": "By from ReadListener, I implemented the method onDataAvailable same as below.\n        \npublic void onDataAvailable() throws IOException {\n            byte[] buf = new byte[1024];\n            int len = 0;\n            try{\n                while ( _input.isReady() && (len = _input.read(buf)) != -1) {\n                    _bufferStream.write(buf, 0, len);\n                }\n            }catch(Exception ex){\n                logger.debug(ex.getMessage());\n            }\n}\n\nWhen I send more than 1024 bytes from client, I can not get all data from method. It will exit the loop by _input.isReady() is false. \nBut when I change the buf size to 2048, I can get all data by this code.",
    "comments": [
      "public void onDataAvailable() throws IOException {\n            byte[] buf = new byte[1024];\n            int len = 0;\n            try{\n                while ( _input.isReady() && (len = _input.read(buf)) != -1) {\n                    _bufferStream.write(buf, 0, len);\n                }\n            }catch(Exception ex){\n                logger.debug(ex.getMessage());\n            }\n}\n\nThe client send 1406 bytes. But I can not get all.\n\nIf I changed the buf size to 2048, I can get all of 1406 bytes. But if I send more than 2048, I can not get all again.",
      "1. Exact version of Tomcat 8.0.x = ?\n\n2. What connector implementation is being used (NIO, NIO2, APR, BIO) ?\n(See startup logs of your Tomcat, or ask on the Users mailing list)\n\n3. The onDataAvailable() does not guarantee that _all_ data can be read. It just says that _some_ data can be read.\n\nIf \"isReady()\" returns false then you are expected to exit from this method, and wait until \"onDataAvailable()\" is being called the second time. See [1].\n\n\n\n[1] http://docs.oracle.com/javaee/7/api/javax/servlet/ReadListener.html#onDataAvailable%28%29",
      "This works - Tomcat's WebSocket implementation is (currently) built on top of Servlet 3.1 async.\n\nThere are also a number of unit tests that cover this functionality.\n\nThere is insufficient information provided in this report to enable the problem to be reproduced.\n\nPlease seek help on the Tomcat users mailing list and only re-open this issue if a) that discussion concludes that there is a bug here and b) you have a reproducible test case (which should be as simple as possible) to demonstrate the issue.",
      "1. I test tomcat 8.0.5 and 8.0.8.\n2. Connector is using NIO.\n3. I understood the routines. \n\nEnclosing my code as below:\n \n    final class SyncServiceReadListener implements ReadListener {\n        private final AsyncContext _asyncCtx;\n        private final ServletInputStream _input;\n        private final HttpServletResponse _response;\n        private final Locale _locale;\n        private final ByteArrayOutputStream _bufferStream = new ByteArrayOutputStream();\n        SyncServiceReadListener(ServletInputStream input, HttpServletResponse res,  AsyncContext ctx, Locale locale){\n            _input = input;\n            _asyncCtx = ctx;\n            _response = res;\n            _locale = locale;\n            _serviceResponse = serviceResponse;\n        }\n        \n        public void onDataAvailable() throws IOException {\n            byte[] buf = new byte[1024];\n            int len = 0;\n            try{\n                while ( _input.isReady() && (len = _input.read(buf)) != -1) {\n                    _bufferStream.write(buf, 0, len);\n                }\n            }catch(Exception ex){\n                logger.debug(ex.getMessage());\n            }\n        }\n\n        public void onAllDataRead() throws IOException {\n            try{\n                _bufferStream.flush();\n                _bufferStream.close();\n            }catch(Exception ex){\n                logger.debug(ex.getMessage());\n            }\n\n            ///By here, the _bufferStream.toByteArray() just returned 1024 bytes. \n            ...\n        }\n\n        public void onError(Throwable thrwbl) {\n            if( thrwbl != null )\n                logger.error(thrwbl.getMessage(), thrwbl);\n            _asyncCtx.complete();\n        }\n    }",
      "Hi,\n\nI can reproduce this problem with current trunk with the provided non-blocking ByteCounter example.\n\n1) Apply the following patch to your working copy:\n\nIndex: ByteCounter.java\n===================================================================\n--- ByteCounter.java\t(revision 1604977)\n+++ ByteCounter.java\t(working copy)\n@@ -81,7 +81,7 @@\n \n         private volatile boolean readFinished = false;\n         private volatile long totalBytesRead = 0;\n-        private byte[] buffer = new byte[8192];\n+        private byte[] buffer = new byte[1024];\n \n         private CounterListener(AsyncContext ac, ServletInputStream sis,\n                 ServletOutputStream sos) {\n\n\n2. Build Tomcat and start it with default settings (NIO connector).\n\n3. Open a TCP connection and send the following request (it contains a Request Body with 1406 bytes):\n\nPOST /examples/servlets/nonblocking/bytecounter HTTP/1.1\nHost: localhost\nConnection: keep-alive\nContent-Type: text/plain\nContent-Length: 1406\n\n0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcd\n\n(remove the line breaks so that the body actually contains 1406 characters).\n\n\n\nActual Result:\n\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nContent-Type: text/plain;charset=UTF-8\nContent-Length: 28\nDate: Tue, 24 Jun 2014 13:59:37 GMT\n\nTotal bytes written = [1024]\n\n\n\nExpected Result:\n\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nContent-Type: text/plain;charset=UTF-8\nContent-Length: 28\nDate: Tue, 24 Jun 2014 14:03:42 GMT\n\nTotal bytes written = [1406]",
      "Created attachment 31748\nTestAsyncServlet is the full code by this case.\n\nClient will send below code by text/json content-type.\n\n{\n  \"key-0\" : \"AAAAAAAA\",\n  \"key-4\" : \"AAAAAAAA\",\n  \"deviceId\" : \"22C6A9AFE19D4577808FD1589ADF2AA8\",\n  \"key-8\" : \"AAAAAAAA\",\n  \"completed\" : false,\n  \"key-11\" : \"AAAAAAAA\",\n  \"key-20\" : \"AAAAAAAA\",\n  \"key-13\" : \"AAAAAAAA\",\n  \"key-22\" : \"AAAAAAAA\",\n  \"key-15\" : \"AAAAAAAA\",\n  \"key-24\" : \"AAAAAAAA\",\n  \"key-17\" : \"AAAAAAAA\",\n  \"key-1\" : \"AAAAAAAA\",\n  \"key-19\" : \"AAAAAAAA\",\n  \"key-33\" : \"AAAAAAAA\",\n  \"key-31\" : \"AAAAAAAA\",\n  \"key-35\" : \"AAAAAAAA\",\n  \"key-5\" : \"AAAAAAAA\",\n  \"sessionToken\" : \"O968K64KIL1KHCF3A62CSTAF00\",\n  \"key-37\" : \"AAAAAAAA\",\n  \"key-44\" : \"AAAAAAAA\",\n  \"key-28\" : \"AAAAAAAA\",\n  \"key-9\" : \"AAAAAAAA\",\n  \"key-46\" : \"AAAAAAAA\",\n  \"key-42\" : \"AAAAAAAA\",\n  \"key-48\" : \"AAAAAAAA\",\n  \"key-26\" : \"AAAAAAAA\",\n  \"key-39\" : \"AAAAAAAA\",\n  \"key-40\" : \"AAAAAAAA\",\n  \"count\" : 50,\n  \"key-2\" : \"AAAAAAAA\",\n  \"key-6\" : \"AAAAAAAA\",\n  \"key-10\" : \"AAAAAAAA\",\n  \"key-12\" : \"AAAAAAAA\",\n  \"key-21\" : \"AAAAAAAA\",\n  \"key-14\" : \"AAAAAAAA\",\n  \"key-23\" : \"AAAAAAAA\",\n  \"key-16\" : \"AAAAAAAA\",\n  \"key-30\" : \"AAAAAAAA\",\n  \"key-18\" : \"AAAAAAAA\",\n  \"key-32\" : \"AAAAAAAA\",\n  \"key-25\" : \"AAAAAAAA\",\n  \"key-3\" : \"AAAAAAAA\",\n  \"key-34\" : \"AAAAAAAA\",\n  \"key-27\" : \"AAAAAAAA\",\n  \"key-36\" : \"AAAAAAAA\",\n  \"key-29\" : \"AAAAAAAA\",\n  \"key-7\" : \"AAAAAAAA\",\n  \"key-45\" : \"AAAAAAAA\",\n  \"key-43\" : \"AAAAAAAA\",\n  \"key-41\" : \"AAAAAAAA\",\n  \"key-47\" : \"AAAAAAAA\",\n  \"key-38\" : \"AAAAAAAA\",\n  \"key-49\" : \"AAAAAAAA\"\n}\n\nThere are 1381 bytes.",
      "I could reproduce a number of bad behaviors using ByteCounter, not limited exclusively to onDataAvailable. r1606136, will be included in 8.0.10."
    ],
    "creation_ts": "2014-06-24T09:45:02Z",
    "fixes": [
      56663
    ]
  },
  {
    "id": 45451,
    "summary": "Tag file attribute evaluation",
    "description": "Hello,\nI have an web app with 2 tag files.\nHere is my first tag 'testtag':\n\n<%@ tag %>\n<%@ attribute name=\"onLoad\" %>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n\n<c:if test=\"${! empty onLoad}\">\n   <input type=\"hidden\" name=\"OnLoadParameter\" value=\"${onLoad}\" />\n</c:if>\n\nMy second tag ('testtag2') use the first one:\n\n<%@ tag %>\n<%@ attribute name=\"name\" %>\n<%@ taglib prefix=\"widget\" tagdir=\"/WEB-INF/tags/widgets\" %>\n\n<widget:testtag onLoad=\"{Script:'jsFunction(\\\\\\'${name}\\\\\\')'}\" />\n\n\nIn a JSP, I use the second tag:\n\n...\n<%@ taglib prefix=\"widget\" tagdir=\"/WEB-INF/tags/widgets\" %>\n...\n<widget:testtag2 name=\"toto\" />\n...\n\n\nWith tomcat 5.5.25, I have the following result:\n<input type=\"hidden\" name=\"OnLoadParameter\" value=\"{Script:'jsFunction(\\'toto\\')'}\" />\n\nAnd with tomcat 6.0.16:\n<input type=\"hidden\" name=\"OnLoadParameter\" value=\"{Script:'jsFunction('toto')'}\" />\n\nIt seems that the attribute is evaluate once more on tomcat 6 than on tomcat 5.",
    "comments": [
      "(In reply to comment #0)\n> Hello,\n> I have an web app with 2 tag files.\n> Here is my first tag 'testtag':\n> \n> <%@ tag %>\n> <%@ attribute name=\"onLoad\" %>\n> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n> \n> <c:if test=\"${! empty onLoad}\">\n>    <input type=\"hidden\" name=\"OnLoadParameter\" value=\"${onLoad}\" />\n> </c:if>\n> \n> My second tag ('testtag2') use the first one:\n> \n> <%@ tag %>\n> <%@ attribute name=\"name\" %>\n> <%@ taglib prefix=\"widget\" tagdir=\"/WEB-INF/tags/widgets\" %>\n> \n> <widget:testtag onLoad=\"{Script:'jsFunction(\\\\\\'${name}\\\\\\')'}\" />\n> \n> \n> In a JSP, I use the second tag:\n> \n> ...\n> <%@ taglib prefix=\"widget\" tagdir=\"/WEB-INF/tags/widgets\" %>\n> ...\n> <widget:testtag2 name=\"toto\" />\n> ...\n> \n> \n> With tomcat 5.5.25, I have the following result:\n> <input type=\"hidden\" name=\"OnLoadParameter\"\n> value=\"{Script:'jsFunction(\\'toto\\')'}\" />\n> \n> And with tomcat 6.0.16:\n> <input type=\"hidden\" name=\"OnLoadParameter\"\n> value=\"{Script:'jsFunction('toto')'}\" />\n> \n> It seems that the attribute is evaluate once more on tomcat 6 than on tomcat 5.\n> \n\nI would like to test this behaviour. Do you have a simple test case?",
      "I have committed a fix for this to trunk and proposed it for 6.0.x. The patch also includes various fixes around handling \\${...}\n\nAny testing you can do would be appreciated.",
      "The final fix for this got caught up in a spec query (http://markmail.org/message/2rq3vkvx76vmhq75). This has been resolved and the fix has now been applied to 6.0.x. It will be in 6.0.19 onwards."
    ],
    "creation_ts": "2008-07-22T01:37:27Z",
    "fixes": [
      45451
    ]
  },
  {
    "id": 51786,
    "summary": "Discarded connection stay active in pool",
    "description": "Hi,\nI wrote an JdbcInterceptor that flag connection as discarded in case of Exception that makes the connection unusable.\nThe problem is:\nwhen I call close on the connection, it is not returned to the pool and it is still considered as an active connection in the pool.\nThe cause of the problem is those pieces of code in ProxyConnection:\n\nif (compare(CLOSE_VAL,method)) {\n            if (isClosed()) return null; //noop for already closed.\n            PooledConnection poolc = this.connection;\n            this.connection = null;\n            pool.returnConnection(poolc);\n            return null;\n        }\n\n\nand\n\npublic boolean isClosed() {\n        return connection==null || connection.isDiscarded();\n    }",
    "comments": [
      "Thanks for report.\nThis is  fixed in r1170479 and r1170485 and  will be in 7.0.22 onwards."
    ],
    "creation_ts": "2011-09-08T11:50:52Z",
    "fixes": [
      51786
    ]
  },
  {
    "id": 62371,
    "summary": "Improve logging in AbstractProcessor.parseHost()",
    "description": "It now sends 400 code without any traces in logs of what is the source of the problem. In my case it was quite hard to trace the issue. I had:\n\njava.lang.IllegalArgumentException: The character [_] is never valid in a domain name.\n        at org.apache.tomcat.util.http.parser.HttpParser$DomainParseState.next(HttpParser.java:781)\n        at org.apache.tomcat.util.http.parser.HttpParser.readHostDomainName(HttpParser.java:673)\n        at org.apache.tomcat.util.http.parser.Host.parse(Host.java:66)\n        at org.apache.tomcat.util.http.parser.Host.parse(Host.java:40)\n        at org.apache.coyote.AbstractProcessor.parseHost(AbstractProcessor.java:269)\n        at org.apache.coyote.http11.Http11Processor.prepareRequest(Http11Processor.java:760)\n        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:383)\n        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:754)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1376)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135)\n        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.base/java.lang.Thread.run(Thread.java:844)\n\n\nI spend lots of time trying to debug the issue I had.\n\n\nIf you need more info on config - I have:\n\nApache 2.4 -> ProxyPass ajp -> tomcat (java 10)\n           -> ProxyPass websocket (http11) -> tomcat (same)\n\nAll this runs as docker containers so in Apache config I connect to tomcat using name \"default_tomcat_1\" - given by docker (compose). As a result after upgrading from tomcat 7.0.56 to 9.0.7 I have all websocket requests just failing with code 400. After debugging tomcat I understand that websocket requests go via Http11Processor and fail cause it receives this \"default_tomcat_1\" as host name from Apache. At the same time other requests routed via AJP are working fine cause they've got Apache public IP as \"host\".\n\n    On apache config:\n\n    ProxyPass /websocket ws://default_tomcat_1:8080/websocket retry=0\n    ProxyPassReverse /websocket ws://default_tomcat_1:8080/websocket\n\n    ProxyPass / ajp://default_tomcat_1:8009/ retry=0\n    ProxyPassReverse / ajp://default_tomcat_1:8009/",
    "comments": [
      "I have the same issue.\nIn my opinion the issue is in Tomcat host validation.\nMy application DNS alias looks like this : myapp-t.my-dommain\nwhere -t is env (test)\nmy-domain is the domain name (yes, with minus sign (-))\n\nWhen I change the header request to name:myappt.mydomain everything is OK\nWhen header request host name:myapp-t.my-dommain I get the HTTP 400 bad request.",
      "Hyphens (-) are allowed to be allowed in hostnames, but not in TLDs[1]\n\nI wonder if this is too restrictive for Tomcat, and whether or not it would apply (unfairly) to punycode hostnames. My sense is that these hostname restrictions should apply AFTER any punycode transformation takes place, but this parser appears to (a) perform no punycode transformation and therefore (b) would fail to handle any non-US-ASCII domain names.\n\n[1] https://tools.ietf.org/html/draft-liman-tld-names-06#section-1",
      "The data on the wire will be after the punnycode encoding so the validation performed by this parser should be correct (Tomcat allows '-' in every element apart from the gTLD).\n\nTo get to the original report, logging the exception at debug is probably the way to go unless we want to use the UserDataHelper.",
      "Created attachment 35931\nFixes hyphen validation\n\nThis problem occurs in typical docker deployments, especially docker swarm deployments where service names contain hyphens.\nIn Docker Swarm, the service names can be specified with the prefix \"tasks.\". to get concrete container addresses through the embedded DNS instead of the virtual address of the service.\nIn such environments you can no longer use Tomcat in the embedded version with Spring Boot.",
      "This effects version 8.5.31 too, which has much bigger impact to other projects!\n\nsee: http://svn.apache.org/viewvc/tomcat/tc8.5.x/tags/TOMCAT_8_5_31/java/org/apache/tomcat/util/http/parser/HttpParser.java?r1=1830182&r2=1830188\n\nThis validation is a new feature introduced in a minor version change!\n\nPlease check if such changes really correspond to your project policies.",
      "(In reply to Robert Rettig from comment #4)\n> Created attachment 35931 [details]\n> Fixes hyphen validation\n\nThis patch is not consistent with the RFCs for host / domain names. I'm currently -1 on applying it for that reason.",
      "(In reply to Mark Thomas from comment #6)\n> (In reply to Robert Rettig from comment #4)\n> > Created attachment 35931 [details]\n> > Fixes hyphen validation\n> \n> This patch is not consistent with the RFCs for host / domain names. I'm\n> currently -1 on applying it for that reason.\n\nWhile Tomcat doesn't have a formal policy, the general expectation is that clients confirm to the relevant RFCs. Therefore, Tomcat does, from time to time, tighten up the validation of input data (In reply to Robert Rettig from comment #5)\n> This effects version 8.5.31 too, which has much bigger impact to other\n> projects!\n> \n> see:\n> http://svn.apache.org/viewvc/tomcat/tc8.5.x/tags/TOMCAT_8_5_31/java/org/\n> apache/tomcat/util/http/parser/HttpParser.java?r1=1830182&r2=1830188\n> \n> This validation is a new feature introduced in a minor version change!\n> \n> Please check if such changes really correspond to your project policies.\n\nWhile Tomcat doesn't have a formal policy, the general expectation is that clients confirm to the relevant RFCs. Therefore, Tomcat does, from time to time, tighten up the validation of input data when gaps in validation are identified.",
      "My limited understanding after reading the Docket documentation is that tasks.<service-name> is used (via DNS) to get a list of all of the tasks backing the service.\n\nWhy would there be a HTTP request to \"tasks.<service-name>\" rather than\n\"<service-name>\"?",
      "(In reply to Mark Thomas from comment #8)\n> My limited understanding after reading the Docket documentation is that\n> tasks.<service-name> is used (via DNS) to get a list of all of the tasks\n> backing the service.\n> \n> Why would there be a HTTP request to \"tasks.<service-name>\" rather than\n> \"<service-name>\"?\n\n(In reply to Mark Thomas from comment #6)\n> (In reply to Robert Rettig from comment #4)\n> > Created attachment 35931 [details]\n> > Fixes hyphen validation\n> \n> This patch is not consistent with the RFCs for host / domain names. I'm\n> currently -1 on applying it for that reason.\n\nI totally agree not to applying that patch. I tried just to show what would work for the hyphen problem as it will be the one which will fail now in many environments. I just checked docker swarm, or even openshift deployments.\nin openshift there is really a hostname declared as  maybe 'data-service.tenant1-apps.svc' that worked before tomcat 8.5.31 \nThis is just relevant because many microservices are deploped with spring boot and the current relase pulls in tomcat 8.5.31 which stops working wihtout reporting clear errors about the failures:\nhttps://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web/2.0.2.RELEASE",
      "(In reply to Mark Thomas from comment #8)\n> My limited understanding after reading the Docket documentation is that\n> tasks.<service-name> is used (via DNS) to get a list of all of the tasks\n> backing the service.\n> \n> Why would there be a HTTP request to \"tasks.<service-name>\" rather than\n> \"<service-name>\"?\n\nFor example in a docker swarm environment the service-name will resolve to a virtual-ip (loadbalanced). Some applications have the requirements to get the address of a dedicated service task. Therefore the \"hostname\"(which is misleading) would be 'tasks.service-name'. It will resolve to a list of dedicated ip. in most cases the first will be used and maybe cached for further requests.",
      "'data-service.tenant1-apps.svc' is a valid domain name so that should be OK.\n\nI don't know enough about docker to know if using 'tasks.service-name' in that way is a valid usage or not.",
      "(In reply to Mark Thomas from comment #11)\n> 'data-service.tenant1-apps.svc' is a valid domain name so that should be OK.\n> \n> I don't know enough about docker to know if using 'tasks.service-name' in\n> that way is a valid usage or not.\n\nI think you are right. The docker feature for resolving tasks with dns should just be used in special cases like discovery https://github.com/docker/docker.github.io/pull/6420/files \n\nBut even in that case is there are possibility to disable the new host domain validation in tomcat (environment, java runtime system property)?\n\nHere are some additional observations within docker swarm from a debian container with 'getent' from libc-bin package and 'host' binary from bind9-host package.\n\n:::RESOLVE (A)\n::libc-bin::\nroot@a9348509c12f:/# /usr/bin/getent hosts data-service\n10.0.0.21       data-service\nroot@a9348509c12f:/# /usr/bin/getent hosts tasks.data-service\n10.0.0.13       tasks.data-service\n\n::bind9-host::\nroot@a9348509c12f:/# /usr/bin/host data-service\ndata-service has address 10.0.0.21\nHost data-service not found: 3(NXDOMAIN)\nroot@a9348509c12f:/# /usr/bin/host tasks.data-service\ntasks.data-service has address 10.0.0.13\nHost tasks.data-service not found: 3(NXDOMAIN)\n\n:::REVERSE (PTR)\n::libc-bin::\nroot@a9348509c12f:/# /usr/bin/getent hosts 10.0.0.21           \nroot@a9348509c12f:/# /usr/bin/getent hosts 10.0.0.13\n10.0.0.13       data-test_data-service.1.j37493y41n0t9eehio3dze3vl.data-test_backend\n\n::bind9-host::\nroot@a9348509c12f:/# /usr/bin/host -t PTR 10.0.0.21\nHost 21.0.0.10.in-addr.arpa. not found: 3(NXDOMAIN)\nroot@a9348509c12f:/# /usr/bin/host -t PTR 10.0.0.13\n13.0.0.10.in-addr.arpa domain name pointer data-test_data-service.1.j37493y41n0t9eehio3dze3vl.data-test_backend.\n\n\n\n:::RESOLVE (A) the name from reverse\n::libc-bin::\nroot@a9348509c12f:/# /usr/bin/getent hosts data-test_data-service.1.j37493y41n0t9eehio3dze3vl.data-test_backend\n10.0.0.13       data-test_data-service.1.j37493y41n0t9eehio3dze3vl.data-test_backend\n::bind9-host::\nroot@a9348509c12f:/# /usr/bin/host data-test_data-service.1.j37493y41n0t9eehio3dze3vl.data-test_backend\ndata-test_data-service.1.j37493y41n0t9eehio3dze3vl.data-test_backend has address 10.0.0.13\nHost data-test_data-service.1.j37493y41n0t9eehio3dze3vl.data-test_backend not found: 3(NXDOMAIN)",
      "> While Tomcat doesn't have a formal policy, the general expectation is that \n> clients confirm to the relevant RFCs. Therefore, Tomcat does, from time to \n> time, tighten up the validation of input data when gaps in validation are \n> identified.\n\nHi, \n\nto me this \"from time to time\", no review of potentially affected users, no logging and no way to switch off this added strictness looks very questionable from the user perspective. Maybe the flag for strict validation will be also good here, not just improved logging.",
      "Generally, the tightening up of validation like this stems from a security vulnerability report where mal-formed input results in unintended consequences. Usually information disclosure of some form. In this case, the changes can be traced back to CVE-2016-6816. That vulnerability report identified some gaps in our validation of the request line. When we receive such a report, we don't just fix the one issue identified in the report, we look more widely. The reason we look more widely is that if one gap in validation can lead to a security vulnerability then other gaps may do the same. Even if we can't see how a validation gap could be exploited, we still fix it as we assume that an attacker may find something we haven't. When we reviewed the request line validation after CVE-2016-6816, we identified various gaps in the request line validation and have been working on tightening them up over time. Host name validation was one of these issues.\n\nWe recognise that clients do not always conform to the specifications. While our default position is to implement the specs and that bugs in clients should be fixed, we do recognise that this can take time.\n\nThe new host validation has been in 9.0.x since 9.0.2 (2017-11-30) where it logged failures but took no other action. After fixing some edge cases reported by users it was switched to rejecting invalid hosts in 9.0.5 (2018-02-11) and we received no reports of problems as a result of enabling the validation.\n\nThe changes to request line validation have been causing other problems (again due to specification non-compliant clients). See bug 62273 for the latest information on this aspect. It was largely as a result of these issues that we introduced the host validation in logging only mode first and only enabled it once we thought all the issues had been ironed out. \n\nAs a result of bug 62273, we wanted to back-port that enhancement to all versions. The host validation was wrapped up in those changes and it was difficult to untangle it. Since it had been running in 9.0.x without issue and that it should not be possible to register an invalid host/domain name it was felt that back-porting all validation changes - including the host validation - would be safe.\n\nIt appears that some uses of Docker are FQDN being passed to to Tomcat that include a '-' in the final segment.\n\nTomcat does not permit a '-' character to appear in the final segment of a FQDN. This appears to be based on RFC 920 and/or https://tools.ietf.org/html/draft-liman-tld-names-06#section-1\n\nIgnoring the original report which requested better logging of these failures (fixing that is in hand and should happen later today) the key question at this point is whether or not '-' is valid in the final segment of a FQDN.\n\nRFC 952 does allow '-' in the final segment. RFC 1123 does not change this. Therefore it is is both possible and valid that '-' could appear in the final segment of a intranet FQDN.\n\nRFC 920 and https://tools.ietf.org/html/draft-liman-tld-names-06#section-1 are also rather dated. The introduction of IDNA means that '-' can appear in the final segment of an internet FQDN.\n\nIn light of the above, I am going to change Tomcat's host name validation to allow '-' in the final segment. This change will be made at (roughly) the same time as the additional logging.\n\nIdeally, this issue would have been caught in one of the releases since 9.0.2. Unfortunately it wasn't. Given the circumstances, back-porting the bug 62273 enhancement looked to be sufficiently low risk. This issue highlights that Tomcat can always use more real-world testing and I would encourage folks to download the release candidates as the votes are announced and test them in their environments. The more folks that do this, the more issues like this we will catch and the sooner we will catch them.",
      "Ah. Found the reference for the final segment being alphabetic:\n\nFrom RFC 1123\n<quote>\nHowever, a valid host name can never have the dotted-decimal form #.#.#.#, since at least the highest-level component label will be alphabetic.\n</quote>\n\nThere is some interesting discussion of this in the errata.\n\nWhere things get 'interesting' is whether the final segment can be purely numeric or not. Per RFC 952 and RFC 1123 they can. There are currently no such gTLDs registered with ICANN. However, they could still be present on an intranet. Therefore, I am leaning towards accepting them. That means 0.0.0.256 would be treated as a valid FQDN rather than as an invalid IPv4 address. Whether any client would let a user specify such a string is a different question.",
      "> This issue highlights that Tomcat can always use more real-world testing and I would encourage folks to download the release candidates as the votes are announced and test them in their environments. The more folks that do this, the more issues like this we will catch and the sooner we will catch them.\n\nMaybe adding workaround flag in one version, changing the default behaviour and then dropping flag some versions later may be better in terms of real-world testing then logging and testing RC's as an approach for such a serious things?",
      "Improved logging fixed in:\n- trunk for 9.0.9 onwards\n- 8.5.x for 8.5.32 onwards\n- 8.0.x for 8.0.53 onwards\n- 7.0.x for 7.0.89 onwards",
      "(In reply to Alex from comment #16)\n> > This issue highlights that Tomcat can always use more real-world testing and I would encourage folks to download the release candidates as the votes are announced and test them in their environments. The more folks that do this, the more issues like this we will catch and the sooner we will catch them.\n> \n> Maybe adding workaround flag in one version, changing the default behaviour\n> and then dropping flag some versions later may be better in terms of\n> real-world testing then logging and testing RC's as an approach for such a\n> serious things?\n\nYou are presuming that there were no 9.0.x releases (beta!) which included this change with no comments for months. In fact, it was included in 9.0.2 with logging, then completed in 9.0.5 as Mark details in comment #14. I think this qualifies as a reasonably-slow roll-out. There is no reason to wait many years to change things... the alternative is an internet where it takes 20 years to widely-deploy new encryption capabilities (TLS) and effectively NEVER to properly-implement some IETF specifications (e.g. cookies). Sometimes you have to just have to remove the headphone jack.\n\nYou took the big step of a 4-major-release-version jump and seem incensed that things aren't working exactly as they had worked before. This is the purpose of testing. In this case, you found a problem, engaged the community, and got a fix. Instead of complaining bitterly, how about a \"thanks for the 5-day turnaround on a blocking issue I'm having\"? If you wanted zero changes, you should have stayed on the version where you were.\n\nIf you'd like to debate Tomcat's development methodologies, release cycles, or test-coverage, you are welcome to join the dev mailing list.",
      "> If you'd like to debate Tomcat's development methodologies, release cycles, or test-coverage, you are welcome to join the dev mailing list.\n\nI don't know if this reply should go there but:\n\n(In reply to Christopher Schultz from comment #18)\n> (In reply to Alex from comment #16)\n> You are presuming that there were no 9.0.x releases (beta!) which included\n> this change with no comments for months. In fact, it was included in 9.0.2\n> with logging, then completed in 9.0.5 as Mark details in comment #14. I\n> think this qualifies as a reasonably-slow roll-out. There is no reason to\n> wait many years to change things... the alternative is an internet where it\n> takes 20 years to widely-deploy new encryption capabilities (TLS) and\n> effectively NEVER to properly-implement some IETF specifications (e.g.\n> cookies). Sometimes you have to just have to remove the headphone jack.\n\nI don't see the reason for catching the error and removing logging. This is not about timeframe or moving progress.\nThe second point - I would prefer to have workaround. For the workaround the timeframe is important and two months between releases seems to be really quick cause upgrade cycle is not so fast usually, I guess. I think there should be more than a year before removing the workaround if it was provided.\n\n> You took the big step of a 4-major-release-version jump and seem incensed that things aren't working exactly as they had worked before. This is the purpose of testing.\n\nAgree, but I'm talking about logging here.\n\n> Instead of complaining bitterly, how about a\n> \"thanks for the 5-day turnaround on a blocking issue I'm having\"? If you\n> wanted zero changes, you should have stayed on the version where you were.\n\nThanks for the 5-day turnaround! Really fast! For some libraries I know it would take a year... and more than 20 years for the internet! )",
      "*** Bug 62383 has been marked as a duplicate of this bug. ***",
      "*** Bug 62383 has been marked as a duplicate of this bug. ***",
      "*** Bug 62383 has been marked as a duplicate of this bug. ***",
      "*** Bug 62399 has been marked as a duplicate of this bug. ***",
      "How to remove the validation for host name?\nI want to use any string as the host name .\n\nWould you please let us choice ?",
      "The Host validation is not optional. It is a specification requirement.\n\nThe changes discussed in comment #14 and comment #15 (using the same rules for the final segment as the other segments) have been made in the versions listed in comment #17.",
      "Though it was a specification. why not gave us an setting or configuration to disable the check ? \n\nGave us a switch please. or we can not upgrade our projects to latest tomcat. or we should have to switch to other (Jetty, undertow)",
      "Simply wait (until early next month) for next release round and upgrade then.",
      "I'd like to provide some clarification for the docker swarm users that are experiencing this issue. We are using docker stacks in docker swarm that are deploying spring-boot applications with embedded tomcat. The challenge for us was the underscore that is supplied by docker that separates the stack name and the service name in the fully qualified DNS name. The good news is docker swarm registers many DNS names inside the docker networking. Including stack_service, service, and tasks.stack_service. If you have unique enough service names you may be able to get away with just service name DNS resolution and still use the load balancer that is shipped with docker swarm.\n\nFor example using my-stack_my-service. We noticed my-stack_my-service:8080/actuator/health would return a 400, but my-service:8080/actuator/health worked as expected. \n\nAs mentioned above, you shouldn't use tasks.stack_service or stack_service for http, just for auto discovery.\n\nHope this helps.",
      "*** Bug 62437 has been marked as a duplicate of this bug. ***",
      "Docker Swarm is not the only environment that may experience a regression. I have a client that has an \"acme-xy\" TLD for the internal network. We upgraded our Spring Boot applications to 2.0.2, which ships with Tomcat 5.8.31 and we were bitten by the same issue.\n\nWhether this is RFC compliant or not, I rather like to see such changes to be toggled and / or introduced gradually (like a warning first)."
    ],
    "creation_ts": "2018-05-11T08:38:09Z",
    "fixes": [
      62371
    ]
  },
  {
    "id": 69301,
    "summary": "wrong headers in access log http2 with trailers",
    "description": "Created attachment 39858\nUnit test and fix\n\nHi,\n\nwhen logging an http2 request with trailers, headers get cleaned and replaced by the trailers, resulting in wrong access logs.\n\nAttached the patch with test case and potential fix.\n\nLet me know what you think.\n\nThanks",
    "comments": [
      "Thanks for the report and the test case. It makes it so much easier for us to work with and is very much appreciated.\n\nIt is taking a little longer than expected to look at this as there is a timing issue. I think I have tracked it down to the test case (I thought initially it was in Tomcat's header handling). I need to write and test a fix. Hopefully later today.",
      "Fixed in:\n- 11.0.x for 11.0.0-M25 onwards\n- 10.1.x for 10.1.29 onwards\n-  9.0.x for  9.0.94 onwards"
    ],
    "creation_ts": "2024-08-30T14:28:02Z",
    "fixes": [
      69301
    ]
  },
  {
    "id": 49158,
    "summary": "More than one JSESSIONID cookie headers set",
    "description": "The following JSP\n\n<%\n  session.invalidate();\n  session = request.getSession();\n  session.invalidate();\n  session = request.getSession();\n%>\nDone!\n\n\nGenerates this response from Apache Tomcat\nHTTP/1.x 200 OK\n\nServer: Apache-Coyote/1.1\n\nSet-Cookie: JSESSIONID=8C65C3AB20B8BBD157866668B67983B1; Path=\"\"; HttpOnly\n\nSet-Cookie: JSESSIONID=498BD2E8B22C5121143B7305A0ECB249; Path=\"\"; HttpOnly\n\nSet-Cookie: JSESSIONID=49F58AE7833522293F8EAD2AB2D13F19; Path=\"\"; HttpOnly\n\nContent-Type: text/html;charset=ISO-8859-1\n\nContent-Length: 7\n\nDate: Tue, 20 Apr 2010 15:38:47 GMT",
    "comments": [
      "Test case added\nhttp://svn.apache.org/viewvc/tomcat/trunk/test/org/apache/tomcat/util/http/TestBug49158.java?view=log",
      "48913 has a proposed patch. I'll look at committing it today.\n\n*** This bug has been marked as a duplicate of bug 48913 ***",
      "Fixed in trunk in SVN r935998",
      "(In reply to comment #2)\n> 48913 has a proposed patch. I'll look at committing it today.\n> \n> *** This bug has been marked as a duplicate of bug 48913 ***\n\nDidn't see this until I had committed my patch. The patch in 48913 doesn't seem to capture the changeSessionId use case. But both patches do the same thing",
      "*** Bug 48913 has been marked as a duplicate of this bug. ***",
      "This has been fixed in 6.0.x and will be included in 6.0.27 onwards.",
      "Filip,\n\nYour change doesn't actually do exactly what you think it does.\n\nYour code - below - Response.java, line 992:\n\n        for (int i = 0; i < n; i++) {\n            if (headers.getName(i).toString().equals(headername)) {\n                if (headers.getValue(i).toString().startsWith(startsWith)) {\n-->                 headers.setValue(sb.toString());                      \n                    set = true;\n                }\n            }\n        }\n\nYes, setValue(contents) appears to be a logical call... however, that call is actually setValue(name), and the returned contents are meant to be the reference to the header (to which you can then add the value).\n\nThe result of that call is to add a header named, say: \n\n  JSESSIONID=54EDEDA814975EB485C2D9D660346717; Domain=.domain.com; Path=/\n\nThis doesn't actually appear to result in any additional response header (presumably because the format was invalid, or the value was never set), and it doesn't change the value of the existing Set-Cookie header.  The following code appears to work fine instead:\n\n\n        for (int i = 0; i < n; i++) {\n            if (headers.getName(i).toString().equals(headername)) {\n                if (headers.getValue(i).toString().startsWith(startsWith)) {\n-->                 headers.getValue(i).setString(sb.toString());\n                    set = true;\n                }\n            }\n        }\n\nNote that you could probably optimise this (and avoid the set=true / later addHeader() call by calling instead:\n\n  headers.setValue(name).setString(sb.toString())\n\nThis is proving to be critical to us (we manually invalidate sessions first time around when we haven't seen them before - to guard against sessions being presented from search engines), and we currently end up in an invalidation loop as the second JSESSIONID is never actually presented back to the browser.",
      "Thanks for the feedback.\n\nThis has been noticed independently a few days ago (see https://issues.apache.org/bugzilla/show_bug.cgi?id=49598) and has been fixed in in r964733.\n\nWe just now started voting for releasing 6.0.29 which will contain the fix."
    ],
    "creation_ts": "2010-04-20T11:40:39Z",
    "fixes": [
      49158
    ]
  },
  {
    "id": 50282,
    "summary": "Reference from javax.security.auth.login.LoginContext.contextClassLoader initalized in static code block prevents an undeployed Web application from being garbage collected (similar to #49669)",
    "description": "The class javax.security.auth.login.LoginContext has a \"contextClassLoader\" field that I believe is causing a similar problem as identified in bug #49669, which is related to the class not being garbage collected even though the application has been undeployed.\n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=49669\n\nI was able to notice this by deploying a very simple spring-based webapp that utilizes javax.security for authentication in which the LoginContext class is used.\n\nI then used YourKit profiler as specified in this writeup to find any lingering classes without instances:\n\nhttp://www.yourkit.com/docs/kb/class_loaders.jsp\n\nThe following class had the most instances (inside of a WebappClassLoader):\n\"contextClassLoader of javax.security.auth.login.Configuration [Class]\"\n\nThis looks almost identical to bug #49669 with the only difference being that the contextClassLoader field isn't static, however it is initialized in a static code block.  Thus, it looks like the solution for bug #49669 would solve this problem as well.",
    "comments": [
      "I think I confused myself a little while researching this and somehow referenced javax.security.auth.login.LoginContext when in fact I *meant* javax.security.auth.login.Configuration.  The LoginContext may be a problem as well, however the Configuration class is what is being listed in YourKit as the offending class causing the WebappClassloader to stick around.  Once again, here's the output of YourKit:\n\n\"contextClassLoader of javax.security.auth.login.Configuration [Class]\"\n\n\nThen, looking at the code for Configuration (http://kickjava.com/src/javax/security/auth/login/Configuration.java.htm), the following line of code is similar to the problem fixed by bug #49669 (https://issues.apache.org/bugzilla/show_bug.cgi?id=49669)\n\n\"private static ClassLoader  JavaDoc contextClassLoader;\"\n\n\nSorry for any confusion...",
      "Created attachment 26309\npatch for tc 7\n\nHere is a patch for tc 7. It just loads the faulty class in the JreMemoryLeakPreventionListener:\nClass.forName(\"javax.security.auth.login.Configuration\", true, ClassLoader.getSystemClassLoader());",
      "Is there any recipe how to reproduce this issue? (A sample webapp, and/or configuration)?",
      "I don't have a sample webapp, however this article describes exactly how we setup our authentication mechanism using JAAS:\n\nhttp://download.oracle.com/javase/1.4.2/docs/guide/security/jgss/tutorials/AcnOnly.html",
      "patch applied on trunk, will be available for tomcat 7.0.6\nBackport to tomcat 6 proposed.",
      "Applied to 6.0.x and will be included in 6.0.30 onwards."
    ],
    "creation_ts": "2010-11-16T20:14:17Z",
    "fixes": [
      50282
    ]
  },
  {
    "id": 55996,
    "summary": "Async context does not timeout with HTTP NIO connector",
    "description": "Created attachment 31200\nServlet with Async processing and Java Based client\n\nI created a ProblemServlet which receives request via a Java based client. The Servlet starts an Async processing for each request.\nWithin the Async processing run() method there is a while loop which cyclically sends String messages to the client. The implementation of run method is shown.\n\npublic void run()\n        {\n            try\n            {\n                String msg = \"\";\n                ServletOutputStream outputStream = publisherAsyncCtx.getResponse().getOutputStream();\n                boolean continu = true;\n                \n                while (continu)\n                {\n                    msg = \"\";\n\n                    msg = \"|\" + \" \" + new Date();\n                    System.out.println(\"publishing message... \" + msg);\n                    \n                    outputStream.println(msg);\n                    publisherAsyncCtx.getResponse().flushBuffer();\n                    \n                    try\n                    {\n                        Thread.sleep(1000);\n                    }\n                    catch (InterruptedException e)\n                    {\n                        System.out.println(\"sleep InterruptedException: \" + e.getMessage());\n                        e.printStackTrace();\n                    }\n                }\n            }\n\nWhen a Java based console application client hits this servlet and reads its output stream, for around 10 sec the messages arrive. But after 10 seconds the connection is closed by the server.\n\nLogs on the Server side:\nStarting the Async Context.\npublishing message... | Mon Jan 13 11:28:30 IST 2014\npublishing message... | Mon Jan 13 11:28:31 IST 2014\npublishing message... | Mon Jan 13 11:28:32 IST 2014\npublishing message... | Mon Jan 13 11:28:33 IST 2014\npublishing message... | Mon Jan 13 11:28:34 IST 2014\npublishing message... | Mon Jan 13 11:28:35 IST 2014\npublishing message... | Mon Jan 13 11:28:36 IST 2014\npublishing message... | Mon Jan 13 11:28:37 IST 2014\npublishing message... | Mon Jan 13 11:28:38 IST 2014\npublishing message... | Mon Jan 13 11:28:39 IST 2014\npublishing message... | Mon Jan 13 11:28:40 IST 2014\npublishing message... | Mon Jan 13 11:28:41 IST 2014\nException in thread \"http-bio-8080-exec-6\" java.lang.IllegalStateException: The request associated with the AsyncContext has already completed processing.\n\tat org.apache.catalina.core.AsyncContextImpl.check(AsyncContextImpl.java:521)\n\tat org.apache.catalina.core.AsyncContextImpl.getResponse(AsyncContextImpl.java:245)\n\tat com.pg.orion.artcloopcheck.ProblemServlet$AsynRunnable.run(ProblemServlet.java:67)\n\tat org.apache.catalina.core.AsyncContextImpl$RunnableWrapper.run(AsyncContextImpl.java:557)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:722)\n\n\nIssue is seen with \"apache-tomcat-7.0.50\", \"apache-tomcat-7.0.47\". Not tested with other release 7 variants.\nThe same codebase when run on \"apache-tomcat-8.0.0-RC10\" there are no issues.",
    "comments": [
      "Tomcat 7 is behaving correctly. It is 8.0.x that has the bug. The Async context should timeout unless there is a call to dispatch() or complete() within the timeout. 8.0.x appears to be resetting the timeout counter on every write which is not correct.",
      "This has been fixed in 8.0.x for 8.0.0 and in 7.0.x for 7.0.51."
    ],
    "creation_ts": "2014-01-13T06:12:37Z",
    "fixes": [
      55996
    ]
  },
  {
    "id": 40817,
    "summary": "servlet-cgi throws index out of bounds exception on certain cgi",
    "description": "First, servlets-cgi.jar needs to exist and the servlet must be mapped:\nfor example:\n <servlet-mapping>\n   <servlet-name>cgi</servlet-name>\n   <url-pattern>*.pl</url-pattern>\n </servlet-mapping>\n\nTest perl cgi script:\n #!/usr/bin/perl\n print \"Content-type: text/plain\", \"\\n\\n\";\n print \"Hello world, from Perl\\n\";\n\nOne perl script is placed in www-root (\"/test.pl\") and the other in any\nsubfolder (\"/test/test.pl\" or \"/cgi-bin/test.pl\", etc.)\n\nThe cgi script in the subfolder will run fine.\nThe cgi script in the www-root will generate an exception:\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tjava.lang.String.substring(String.java:1768)\n\tjava.lang.String.substring(String.java:1735)\n\torg.apache.catalina.servlets.CGIServlet$CGIEnvironment.findCGI(CGIServlet.java:948)\n\torg.apache.catalina.servlets.CGIServlet$CGIEnvironment.setCGIEnvironment(CGIServlet.java:1015)\n\torg.apache.catalina.servlets.CGIServlet$CGIEnvironment.<init>(CGIServlet.java:766)\n\torg.apache.catalina.servlets.CGIServlet.doGet(CGIServlet.java:584)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:689)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n\n\nThe problem is this line (line 948 in CGIServlet.java):\n\ncginame =              \ncurrentLocation.getParent().substring(webAppRootDir.length())+ File.separator +\nname;\n\nThe problem is that webAppRootDir is 1 char longer than\ncurrentLocation.getParent() because webAppRootDir ends with a File.separator (in\nthis case, a \"/\").  And removing the extra File.separator from webAppRootDir\nwill result in a different String related exception elsewhere.\n\nAnd here's a fix that works:\n\ncginame = (currentLocation.getParent() + \nFile.separator).substring(webAppRootDir.length()) + name;\n\n(If necessary, the fix can be made more adaptive by checking to see if it really\ndoes have a File.separator at the end and if not...add it...otherwise, let it\nbe, etc.)\n\n(on a side note, I have one more bug to fix; the ENV_VAR \"SCRIPT_FILENAME\" isn't\ndefined as it should be [required for PHP4/5] but I'll submit a different\nbug/fix for that.)",
    "comments": [
      "Created attachment 19040\nversion of CGIServlet.java that doesn't have the out-of-bounds bug",
      "This is likely a configuration issue.  Make sure that you aren't defining the\nCGIServlet init-param cgiPathPrefix as '/' in your CGI servlet definition. \nRemove the cgiPathPrefix init-param and it should work as expected.  Setting\ncgiPathPrefix to '/' was the only way that I could repro this issue.  By having\nthat set you are unneccessarily adding an extra '/' to the path:\n\nINFO http-8080-Processor25\norg.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/cgi-test] - cgi:\nfindCGI: path=/test.pl, /home/chris/apache-tomcat-5.5.20/webapps/cgi-test//\n\nThe CGIServlet is already set up to trim any trailing file seperator from the\nwebAppRootDir, but it only trims one:\n\n    if ((webAppRootDir != null)\n        && (webAppRootDir.lastIndexOf(File.separator) ==\n            (webAppRootDir.length() - 1))) {\n            //strip the trailing \"/\" from the webAppRootDir\n            webAppRootDir =\n            webAppRootDir.substring(0, (webAppRootDir.length() - 1));\n    }\n\nA possibly more appropriate patch would trim an arbitrary number of file\nseperators from webAppRootDir, though right now I can't think of another case\nwhere that would be needed.",
      "Well, I double-check the init-param but it doesn't have a '/'\nIt's \"blank\"\n          <param-name>cgiPathPrefix</param-name>\n          <param-value></param-value>\n(also though it's a different issue, I found that \"SCRIPT_NAME\" was wrong\ntoo...it was returning \"/test.pltest.pl\" or \"/test/test.pltest/test.pl\"...fixed\nit in the if statement a few lines down...scriptname = cginame and scriptname =\ncontextpath + cginame, respectively but that's another issue).\n\nwait....I see....line 918 adds an extra '/' if the pathprefix setting is null.\n\nanyways, \"cginame = (currentLocation.getParent() +\nFile.separator).substring(webAppRootDir.length()) + name;\" seems to work.\n\n\nbtw, how do I submit a feature request? (I added it myself as I was having\nproblems with PHP CGI....I made it so under certain circumstances, it will use\n\"php\" instead of \"perl\" as the cgiexecutable and lo-and-behold, it\nworks...though I also had to add the env \"SCRIPT_FILENAME\" [which is just a\nexact copy of \"X_TOMCAT_SCRIPT_PATH\"] ).  I plan to make the php \"enhancement\"\nas a part of the init-param so it can be turned on or off as need be (as well as\nbe able to define what constitutes \"PHP\" mode...as right now, it's hard-coded to\nlook for commands that end with \".php\" \".php3\" \".php4\" \".phps\")\n\nanyways..maybe a regex for removing the trailing '/' might do...\n\n(In reply to comment #2)\n> This is likely a configuration issue.  Make sure that you aren't defining the\n> CGIServlet init-param cgiPathPrefix as '/' in your CGI servlet definition. \n> Remove the cgiPathPrefix init-param and it should work as expected.  Setting\n> cgiPathPrefix to '/' was the only way that I could repro this issue.  By having\n> that set you are unneccessarily adding an extra '/' to the path:\n> \n> INFO http-8080-Processor25\n> org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/cgi-test] - cgi:\n> findCGI: path=/test.pl, /home/chris/apache-tomcat-5.5.20/webapps/cgi-test//\n> \n> The CGIServlet is already set up to trim any trailing file seperator from the\n> webAppRootDir, but it only trims one:\n> \n>     if ((webAppRootDir != null)\n>         && (webAppRootDir.lastIndexOf(File.separator) ==\n>             (webAppRootDir.length() - 1))) {\n>             //strip the trailing \"/\" from the webAppRootDir\n>             webAppRootDir =\n>             webAppRootDir.substring(0, (webAppRootDir.length() - 1));\n>     }\n> \n> A possibly more appropriate patch would trim an arbitrary number of file\n> seperators from webAppRootDir, though right now I can't think of another case\n> where that would be needed.",
      "I have fixed the bug and added the PHP environment variable for good measure.\n\nYou shouldn't need to hack the CGI servlet now. Just declare it twice, with a\ndifferent name, and you can have one set of init-params and mappings for PHP and\nanother for Perl. In fact, you can have as many as you want.",
      "I had to \"hack\" it for php though.\nBy default, the cgiexecutable is \"perl\" but if it tries to run a php file, it\ndoesn't work.\nIf the cgiexecutable used for php files is \"php\" instead of the default perl, it\nworks flawlessly.\n(though wish it had a \"run as user\" [\"su -l user\"] option to run the cgi as\nsomething different than tomcat).\n\n(In reply to comment #4)\n> I have fixed the bug and added the PHP environment variable for good measure.\n> \n> You shouldn't need to hack the CGI servlet now. Just declare it twice, with a\n> different name, and you can have one set of init-params and mappings for PHP and\n> another for Perl. In fact, you can have as many as you want."
    ],
    "creation_ts": "2006-10-25T20:02:52Z",
    "fixes": [
      40817
    ]
  },
  {
    "id": 43743,
    "summary": "Cannot jspc precompile jsps with nested .tag files",
    "description": "myjsp.jsp:  HELLO <tag1/>\ntag1.tag:  <tag2>\ntag2.tag:  WORLD\n\nCrashes (null pointer)  while trying to load tag2.class, called by  \nTagFileProcessor.loadTagFile.\n\nVery Initial analysis:-\nTagFileProcessor.loadTagFile creates wrapper, but ctxt.getTagFileJarUrl\n(tagFilePath) returns null for nested .tag.\nThus in JspCompilationContext.Compile  JspCCtx.isPackagedFile == false, so \noutDated test is wrong\nSo tag2.tag not compiled, thus class cannot be loaded.\n\nBut problem also appears if tags not packaged in a .jar, so there is more \ngoing on.\n\nWork around is to create dummy.jsp that calls the .tags in leaf first order \nso .class files are created.",
    "comments": [
      "Correction: Problem ONLY appears if nested tag is in a jar file.",
      "The bug appears to be in Parser.parseTaglibDirective.\n\nA JspCompilerContext instance is created for each JSP and each Tag file \nprocessed.\nThe tag file url map is stored here, not globally.  This is what \nJspCompilerContext.compile uses.\n\nBut Parser.parseTaglibDirective only calls TagLibraryInfoImpl() once per JSP, \nnot and not for the sub tag files.\nSo the map is never populated.\n\nA hack workaround it to set caching=\"false\" in the <jspc ...> command. \nI'm not sure what the full implications of doing this are.\n\nFrom here I think a proper fix should be fairly straight forward.",
      "This is fixed in svn and will be included in 6.0.16 onwards."
    ],
    "creation_ts": "2007-10-30T21:25:38Z",
    "fixes": [
      43743
    ]
  },
  {
    "id": 68721,
    "summary": "WebappClassLoaderBase fails with duplicate class definition",
    "description": "Created attachment 39612\nreproducer web application\n\nI PROVIDED A SAMLE REPRODUCER WEB APPLICATION:\n\nSimply unzip and run it. Additionally, I have provided more detailed descriptions and explanations in the \"HELP.md\" file.\n\n**************************************************************************************\nDESCRIPTION OF THE BUG:\n\nSome implementations of ClassFileTransformer may lead to WebappClassLoaderBase performing duplicate class definitions.\n\nIf a ClassFileTransformer triggers the loading of a class that is currently in the process of being loaded by WebappClassLoaderBase, it leads to the following error:\n\n\"\njava.lang.LinkageError: loader org.apache.catalina.loader.ParallelWebappClassLoader @1d562d1a attempted duplicate class definition for reproducer.webappclassloaderbug.SomeClass.\"\n\n\nThe chain of execution looks like this:\n\nloadClass (SomeClass) ->\nfindClassInternal (SomeClass) ->\ntransform (SomeClass) ->\nloadClass (SomeClass) ->\nfindClassInternal (SomeClass) ->\ndefineClass (SomeClass)\n\nThe issue arises when SomeClass is defined during the innermost (second) invocation of the findClassInternal method. Upon returning to the outermost (first) call of findClassInternal within this method, another invocation of defineClass occurs, resulting in an error. Ideally, this attempt to duplicate class definition should be avoided, as the class is already defined.\n\n**************************************************************************************\nREAL-WORLD EXAMPLE:\n\nThis error happened in a real-world application. In this case the ClassFileTransformer (or rather code excecuted inside the transformer) is the eclipse link load time weaver (org.eclipse.persistence.internal.jpa.weaving.PersistenceWeaver). The conditions for triggering this bug are intricate. If needed, I can furnish additional details about it.",
    "comments": [
      "Thanks for the test case. It made it very easy to confirm both the bug and the fix.\n\nThis has been fixed in:\n- 11.0.x for 11.0.0-M18 onwards\n- 10.1.x for 10.1.20 onwards\n- 9.0.x for 9.0.87 onwards\n- 8.5.x for 8.5.100 onwards"
    ],
    "creation_ts": "2024-03-07T15:52:17Z",
    "fixes": [
      68721
    ]
  },
  {
    "id": 64247,
    "summary": "no-op JarScanner breaks back compatibility",
    "description": "please see https://bz.apache.org/bugzilla/show_bug.cgi?id=63691#c10",
    "comments": [
      "If it's a designed feature, It should be targeted at tomcat 10, add a warning in upgrade guide.",
      "I tried:\njarsToSkip=*\njarsToScan=somelistofjars\n\nI fail to see an issue, especially \"As of 9.0.31, this now causes cascading startup failures.\". Please accurately and fully describe the configuration and problems.\n\nWe sometimes change undocumented behaviors that we consider to be broken. It is rare but it happens. Sometimes a flag is added to optionally restore them. First I need to understand the issue.",
      "I think I could figure it out in the code. You did mean that jarsToSkip=* overrides whatever is set as jarsToScan I suppose. That's likely not what's intended since jarsToScan is documented as having higher priority than jarsToSkip. The wildcard will no longer set the ignore everything flag if jarsToScan is present. Not sure if that configuration makes that much sense overall though.\nThe fix will be in 10.0.0-M4, 9.0.34, 8.5.54 and 7.0.104.",
      "(In reply to Remy Maucherat from comment #3)\n> I think I could figure it out in the code. You did mean that jarsToSkip=*\n> overrides whatever is set as jarsToScan I suppose. That's likely not what's\n> intended since jarsToScan is documented as having higher priority than\n> jarsToSkip. The wildcard will no longer set the ignore everything flag if\n> jarsToScan is present. Not sure if that configuration makes that much sense\n> overall though.\n> The fix will be in 10.0.0-M4, 9.0.34, 8.5.54 and 7.0.104.\n\nYou are right."
    ],
    "creation_ts": "2020-03-20T04:06:22Z",
    "fixes": [
      64247
    ]
  },
  {
    "id": 66513,
    "summary": "Primary Key Violation using  PersistentManager + PersistentValves +",
    "description": "Hi all,\nwhen using PersistentManager + org.apache.catalina.valves.PersistentValve to store session data in a Database table (in order to run Tomcat on containers without sticky sessions) we get sometimes a \"primary key constraint violation\" due to different thread that are badly synchronized.\n\nWhen looking at source code, it appears that the usage of PersistentValve assumes that we get only one request per session at any on time (and you propose a filter parameter on the persistentValve component to avoid having several requests at the same time).\nHowever, in the case this filter is not complete (and so we get several requests with the same sessionId at a time), the source code in org.apache.catalina.valves.PersistentValve as well in org.apache.catalina.session.DataSourceStore use a synchronized block to avoid this problem but this synchronized block is useless because it uses a session object that is different for each request.\n\nYou could solve this issue by using a static HashMap with keys and values storing sessionId string, and using this sessionId string value as an object to synchronize the blocks used to store the session in the DB table.\nThe process could be :\n-If sessionId String not already store as a HashMap Key\n    -Store sessionId String as key and values\nSynchronized(theHashMap(sessionId) {\n    ....\n    ....\n    remove it from the hashMap\n}\n\nThat way you would really synchronize threads that use a same sessionId (and no more) and would avoid those \"primary key violation\" errors.\n\nRegards",
    "comments": [
      "The synchronization in PersistentManager and DataSourceStore/JDBCStore appear to be reasonable. The session itself is being used as the monitor and not an arbitrary object stored within the session, which might have been a problem.\n\nI think your problem is not multiple simultaneous requests on a single node (which ought to be safe), but multiple simultaneous requests across more than one node.\n\nWhen saving the session, DataSourceStore/JDBCStore will DELETE the existing session record and INSERT a new record in its place. This does not happen in a transaction and therefore it's possible for two nodes in the group to execute this series of queries:\n\nNode A: DELETE FROM sessions...\nNode B: DELETE FROM sessions...\nNode A: INSERT INTO sessions...\nNode B: INSERT INTO sessions...\n\nThis could be fixed with a transaction which surrounds the DELETE and subsequent INSERT.\n\nIt could also be fixed with, as a TODO in the code suggests, using an UPDATE if the record already exists. (IMHO this is much better for performance as fewer indexes, etc. would need to be updated when saving a session.)\n\nBut there is another problem: even if the database synchronization issues are resolved, you may find that you have replaced the problem with a race-condition within your own application. Let's say the following situation occurs (paraphrasing):\n\nNode A: session.setAttribute(\"counts\", session.getAttribute(\"counts\") + 1);\nNode B: session.setAttribute(\"counts\", session.getAttribute(\"counts\") + 1);\nNode B: BEGIN ; DELETE ; INSERT\nNode A: BEGIN ; DELETE ; INSERT\n\nOne of the increments has been lost -- the increment from node B. You can abstract this to *any* change to the session, since Tomcat saves the session all at once and not as individual records e.g. for each attribute. The same can be true if Node A adds a new attribute to the session and Node B adds a different one.\n\nIf the sessions ever disagree about the contents of the session, some session data will be lost. It is very difficult to completely prevent this kind of thing from happening given the architecture of the DataSourceStore/JDBCStore.\n\nIn light of this, do you think that either using a transaction or switching to an INSERT ... ON UPDATE type of behavior would resolve this problem for you in a satisfactory way? If your sessions are colliding in the db itself but you aren't worried about conflicting data, then either of these solutions will probably work for you.",
      "Hi Christopher,\ni confirm that this issue happens when using only one node.\nIn my opinion, the issue comes from the session object used to synchronize the delete/insert sql request in DataSourceStore/JDBCStore. From what i can see the session object is different for each request (the session attributes can be the same but the objects themselves are different).\n\nI made a test by replacing the \"synchtonize(session)\" by a \"synchronize(lock)\" with a lock object define like this : \"private static final Object lock = new Object();\"\n=> It solves the issue (all \"primary key constraint violation\" disappear.\nOf course this is not the good solution because it synchronize the code block for each request, even for request using different sessionId (what could cause performance problems). \n\nThat is why i suggested to lock on a object that would lock all requests using the same sessionId. \n\nFinaly regarding the race condition you mention at the end of your comment, this is not something that should happen in our standard JEE application using sessionIds stored in cookies (as all the servlet requests using a specific sessionId should come from a unique client/browser \"in sequence\" - no AJAX usage or equivalent => So we should not attend conditions where concurrent requests updating the session attributes for a same sessionId be treated by different nodes in //. The issue we face with those \"primary key violation\" comes from an incomplete filter (where some requests on static components like gif/css/... are not filtered correctly).\n\nDo you agree with that ?\n\nRegards",
      "(In reply to Vincent Liautaud from comment #2)\n> I confirm that this issue happens when using only one node.\n\nInteresting.\n\n> In my opinion, the issue comes from the session object used to synchronize\n> the delete/insert sql request in DataSourceStore/JDBCStore. From what i can\n> see the session object is different for each request (the session attributes\n> can be the same but the objects themselves are different).\n\nAha, yes. I believe the PersistentValve causes the session to be re-loaded for each request. So that could result in separate Session objects in memory for a single session-id.\n\nI think this would be very difficult to \"fix\" because the application will get whatever session is returned by the Manager at the time it is requested. Thread A may cause the session to be loaded from storage and handed to Request A only to have Thread B do the same thing immediately afterward.\n\nYou are right: they will get separate objects each time, and therefore synchronization is nearly impossible. I'm not sure what the best was to do this is, because it's very easy to make bad mistakes like synchronizing on the whole session-store which will kill performance.\n\n> I made a test by replacing the \"synchtonize(session)\" by a\n> \"synchronize(lock)\" with a lock object define like this : \"private static\n> final Object lock = new Object();\"\n> => It solves the issue (all \"primary key constraint violation\" disappear.\n> Of course this is not the good solution because it synchronize the code\n> block for each request, even for request using different sessionId (what\n> could cause performance problems). \n> \n> That is why i suggested to lock on a object that would lock all requests\n> using the same sessionId. \n\nThis could be done with a separate map of locks-for-session-ids. Or maybe lock on the String object which holds the session-id as the key of the session-id-to-Session map. Though I don't think you can ask a Map for its key object(s) without iterating through the whole set of Map.Entry values.\n\nString.intern?\n\n> Finaly regarding the race condition you mention at the end of your comment,\n> this is not something that should happen in our standard JEE application\n> using sessionIds stored in cookies (as all the servlet requests using a\n> specific sessionId should come from a unique client/browser \"in sequence\" -\n> no AJAX usage or equivalent => So we should not attend conditions where\n> concurrent requests updating the session attributes for a same sessionId be\n> treated by different nodes in //. The issue we face with those \"primary key\n> violation\" comes from an incomplete filter (where some requests on static\n> components like gif/css/... are not filtered correctly).\n> \n> Do you agree with that ?\n\nYes, I think so. Thanks for giving more details about your specific use-case. Specifically, you aren't trying to ensure bullet-proof session-management under high-frequency session-contention. This is mostly about the PersistentValve+PersistentManager+DataSourceStore/JDBCStore tripping over its own feet.\n\nI think we can take this to the development mailing list for discussion, then come back here with a solution + fix.",
      "Great thanks...",
      "Hi all,\nin addition to the fix, may you ask the development team :\n1-To patch the following documentation regarding PersistentValve : https://tomcat.apache.org/tomcat-9.0-doc/config/valve.html\nThe documentation contains an example of filter : filter=\".*\\.gif|.*\\.js|.*\\.jpeg|.*\\.jpg|.*\\.png|.*\\.htm|.*\\.html| .*\\.css|.*\\.txt\" \n \nThis filter introduce a malicious space character before the .*\\.css !!!\nFor users (like me) who will copy and paste this filter in their configuration file, all css requests are not filtered.\n\n2-Could you ask the development team to add a debug trace in order to display all the requests that have not been filtered (see bellow). That way we could verify and detect all the errors/lack of filtering.\n\nRegards and have a nice week. \n\n\n@Override\npublic void invoke(Request request, Response response) throws IOException, ServletException {\n\n        // request without session\n        if (isRequestWithoutSession(request.getDecodedRequestURI())) {\n            getNext().invoke(request, response);\n            return;\n        }\n       \n\t// TO BE ADDED TO DISPLAY ALL THE REQUEST URI NOT FILTERED\n\tif (container.getLogger().isDebugEnabled()) {\n                            container.getLogger().debug(\"Request not filtered:\"+request.getRequestURI());\n        }",
      "(In reply to Vincent Liautaud from comment #5)\n> in addition to the fix, may you ask the development team :\n\nLet's try to keep the discussion of this enhancement request on-topic with the original request. If you have other fixes, etc. either post them to the development mailing list or file separate bugs for them.\n\nIt's not okay to have \"Random changes Vincent wants\" to be a perpetually-open bug in Bugzilla.",
      "First, I'd like to add that this issue is in the javadoc of PersistentValve: it requires a persistent manager, *and* \"to work correctly it assumes only one request exists per session at any one time\". So no big surprise then.\n\nActually, someone already talked about this problem (= the session object can change so sync on that object may fail to do what is expected): http://illegalargumentexception.blogspot.com/2008/04/java-synchronizing-on-transient-id.html\nUnfortunately, it seems the solution proposed is not good since it syncs too much.\nSimilarly, String.intern should not be used for sync (explanations are available online).\n\nInstead, I think we should use the original suggestion from Vincent: the ParsistentManager (or most likely, the StoreBase) should use a concurrent map to deduplicate the session ids. But there's still a problem: all the session ids that are in a store would now be in memory. Maybe that's not a problem these days but it was certainly something that was avoided before.\n\nSo I cannot find a solution yet that fixes this while keeping everything as it was.",
      "Hi Remy,\n\nthank you for your reply and i understand the issue regrding the memory usage of this concurrent map.\nAnyway, as explained before we have been in a position where multiple requests exist at a time for a same session (which is explicitly explained to avoid in your documentation, as you noticed) because :\n1-The documentation contained an example of filter : filter=\".*\\.gif|.*\\.js|.*\\.jpeg|.*\\.jpg|.*\\.png|.*\\.htm|.*\\.html| .*\\.css|.*\\.txt\" \n \nThis filter introduced a malicious space character before the .*\\.css !!!\nFor users (like me) who had copy and paste this filter in their configuration file, all css requests were not filtered (so Servlet + CSS generate concurrent requests for a same session => It seems you have corrected the documentation recently (So Thanks, problem fixed).\n\n2-There had no debug trace in order to display all the requests that have not been filtered. This kind of trace would be very useful to identify some lack on the filter (to check that no file type extention have been forgotten on these filter). \n\nRegards",
      "This bug is heading towards being resolved as WONTFIX.\n\nFor a long explanation see https://markmail.org/message/5gtpirnouqfraw6w\n\nThe short version is that while we can construct a solution to ensure no more than one concurrent request per session on a single Tomcat node, we can't do it across multiple nodes.\n\nGiven we can't fix the multiple node issue we have to rely on the clients not issuing more than one concurrent request per session. If the clients break that guarantee, stuff will break.\n\nIs the PersistenceValve still useful in these circumstances?\n\nRe-reading this issue, you mention both using this with containers plus non-sticky load-balancing and with a single node. What is the use case for a single node?\n\nIs there any benefit to Tomcat guaranteeing no more than one concurrent request per session for a single node. If so, how and why is that a benefit for your use case?",
      "I have applied the single Tomcat node fix to :\n- 11.0.x for 11.0.0-M7 onwards\n- 10.1.x for 10.1.10 onwards\n-  9.0.x for  9.0.76 onwards\n-  8.5.x for  8.5.90 onwards\n\nA final decision on deprecation & removal is pending answers to the questions in comment #9",
      "Hi, \n\nlet me try to give more explanation on the context and the issue we faced.\nWe are in a process where we move to the cloud (on Google Cloud Platform) some internal web application that currently run on premise, on several tomcat, all installed on different servers with a sticky session load balancer in front of them.\nBecause on this sticky session Load balancer we don't use persistent valve on premise (session information are stored in JVM Tomcat Memory).\nWhen moving to GCP, we choose to containerise those applications and run them on a Google managed services named Cloud Run. Cloud Run is typically a serverless solution that run and scale containers (up and down) based on the volume of requests.\nAs any solution that run and scale containers, you can't fully manage the ways the underlying solution (Cloud Run or K8S....) scale up and down the containers. Saying that, even if Google propose a solution that \"looks like\" a sticky session load balancer, this solution can't assure you 100% that all the requests of a same user will always target the same container (typically Google destroy sometimes some container because the volume of requests decrease, even if some users are \"connected\" to them.\nSo, this kind of containerised infrastructure, need a solution to centralise and share the session informations beetween different containers, BECAUSE you can't be 100% sure that all requests of a same session will always be treated by the same container.\nThat's why we used Persistent Valve to solve this issue.\nNow let's go back to the initial reason of raising this BZ tikcet : \nIn our use case, persistent Valve fully solve our problem, because we have no more concurrent requests on the same session (no more on a single node than on multiple node).\nThe ticket was raised because of another little bug described above (and repeated bellow) : When configuring PersistentValve we copied and pasted part of tomcat documentation explaining how to implement a filter : \nfilter=\".*\\.gif|.*\\.js|.*\\.jpeg|.*\\.jpg|.*\\.png|.*\\.htm|.*\\.html| .*\\.css|.*\\.txt\" \nThis filter introduced a malicious space character before the .*\\.css !!! resulting of having several concurrent requests (servlet but also CSS - badly filtered). In this configuration, the way persistentValve update the session information (by sequencing delete and insert SQL requests) genrated a kind of \"PRIMARY KEY VIOLATION\" on the database. As the synchonized block was useless (because of previous information given on the initial comments), with to concurrent request we were in a situation where : \n-Request 1 (Servlet) : DELETE session information\n-Request 2 (CSS) : DELETE session information\n-Request 1 (Servlet) : INSERT session information\n-Request 2 (CSS) : INSERT session information ******=> DUPLICATE KEY ERROR\nIt took some time to us to identify the problem with the filter (and the missing space) => Because no debug log can be used to identify which request is treated by persistent valve (servlet or CSS or something else)....But since we solved this issue with the filter...It works fine. We don't have any more errors and persistentValve work very well even in a containerised environnement.\n\nConclusion : Please don't deprecate this functionnity...\nAnd if possible add some debug information on the kind of request treated (would help to identify concurrent requests)....\nThank's for all\nRegards",
      "Thanks, that is really helpful. I'll add the debug logging. Given there is a valid use case, I don't plan to remove or deprecate the Valve.",
      "Debug logging added in:\n- 11.0.x for 11.0.0-M7 onwards\n- 10.1.x for 10.1.10 onwards\n-  9.0.x for  9.0.76 onwards\n-  8.5.x for  8.5.90 onwards"
    ],
    "creation_ts": "2023-03-06T18:00:34Z",
    "fixes": [
      66513
    ]
  },
  {
    "id": 47013,
    "summary": "JSP not compiled at startup when used as a servlet",
    "description": "I created a servlet with a jsp and the following web.xml entry:\n\n\t<servlet>\n\t\t<servlet-name>Repository</servlet-name>\n\t\t<jsp-file>/Repository.jsp</jsp-file>\n\t\t<load-on-startup>1</load-on-startup>\n\t</servlet>\n\t<servlet-mapping>\n\t\t<servlet-name>Repository</servlet-name>\n\t\t<url-pattern>/Repository</url-pattern>\n\t</servlet-mapping>\n\nI altered the JSP and started Tomcat.  The initial startup invokes the JSP with the following call stack:\n\n\torg.apache.jsp.Repository_jsp.jspInit(Repository_jsp.java:42)\n\torg.apache.jasper.runtime.HttpJspBase.init(HttpJspBase.java:51)\n\torg.apache.jasper.servlet.JspServletWrapper.getServlet(JspServletWrapper.java:159)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:329)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:267)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\torg.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1191)\n\torg.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:992)\n\torg.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4058)\n\torg.apache.catalina.core.StandardContext.start(StandardContext.java:4371)\n\torg.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045)\n\torg.apache.catalina.core.StandardHost.start(StandardHost.java:719)\n\torg.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045)\n\torg.apache.catalina.core.StandardEngine.start(StandardEngine.java:443)\n\torg.apache.catalina.core.StandardService.start(StandardService.java:516)\n\torg.apache.catalina.core.StandardServer.start(StandardServer.java:710)\n\torg.apache.catalina.startup.Catalina.start(Catalina.java:578)\n\tsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tjava.lang.reflect.Method.invoke(Method.java:597)\n\torg.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)\n\torg.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)\n\nThen I hit the servlet with a normal request with http://localhost:8080/context/Repository which yields this call stack:\n\n\torg.apache.jsp.Repository_jsp.jspInit(Repository_jsp.java:42)\n\torg.apache.jasper.runtime.HttpJspBase.init(HttpJspBase.java:51)\n\torg.apache.jasper.servlet.JspServletWrapper.getServlet(JspServletWrapper.java:159)\n\torg.apache.jasper.servlet.JspServletWrapper.getDependants(JspServletWrapper.java:263)\n\torg.apache.jasper.compiler.Compiler.isOutDated(Compiler.java:430)\n\torg.apache.jasper.compiler.Compiler.isOutDated(Compiler.java:351)\n\torg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:582)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:317)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:267)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\torg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n\torg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\torg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n\torg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n\torg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n\torg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n\torg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n\torg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)\n\torg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845)\n\torg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\n\torg.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)\n\tjava.lang.Thread.run(Thread.java:619)\n\nThe JSP gets compiled on the request, but not at startup.  I backtracked a little and found StandardWrapper is doing:\n\n\treq.setQueryString(\"jsp_precompile=true\");\n\nwhich is unsafe b/c the precompile param can be specified as system property org.apache.jasper.Constants.PRECOMPILE.  Instead it should be:\n\n\treq.setQueryString(Constants.PRECOMPILE + \"=true\");\n\nAnyway, I wasn't overriding it so that didn't help.",
    "comments": [
      "I don;t see this with trunk. Looks to be a duplicate of bug 41606 that was fixed recently.\n\n*** This bug has been marked as a duplicate of bug 41606 ***",
      "Shouldn't that precompile flag be changed though (bottom of the note).",
      "Re-opening to track the secondary issue. It has been fixed in trunk and proposed for 6.0.x.",
      "This has been fixed in trunk and will be in 6.0.20 onwards."
    ],
    "creation_ts": "2009-04-10T09:26:22Z",
    "fixes": [
      47013
    ]
  },
  {
    "id": 49799,
    "summary": "The new JSP 2.2 omit-attribute in jsp:attribute does not work with EL or expressions",
    "description": "Created attachment 25926\nA JSP file which show three different use cases of the jsp:attribute omit attribute\n\nI'm trying to make use of the new omit-attribute in the jsp:attribute. This new feature of JSP 2.2 is described in the Specs in JSP.5.10.\n\nTable JSP.5-7 Attributes for the <jsp:attribute> standard action\n\nomit (optional) Valid values are true and false. If true, and when\nused with <jsp:element>, the attribute in the element being\nouput is omitted. Ignored when used with a standard or\ncustom action. Defaults to false.\n\nThere is an introduction text here: \nhttp://www.ibm.com/developerworks/forums/thread.jspa?messageID=14471459\n\nand I'm trying to make this work in my setup but I'm failing. Or I don't get the point.\n\nThe following works:\n<jsp:element name=\"p\">\n\t<jsp:attribute name=\"style\" omit=\"true\" >color:red</jsp:attribute>\n\nThe following does NOT work:\n<jsp:element name=\"p\">\n\t<jsp:attribute name=\"style\" omit=\"<%=jspExpressionTrue%>\" >color:red</jsp:attribute>\n\nThe following does NOT work either:\n<jsp:element name=\"p\">\n\t<jsp:attribute name=\"style\" omit=\"${trueEL}\" >color:red</jsp:attribute>\n\nFull JSP code in my attachment. I actually use the JSP-document (XML / JSPX-)syntax, but it does not work in any of the JSP dialects.\n\n\nSo I don't get the point why I should not be able to use EL in the omit-attribute, because then it's kind of useless.\n\n\nI use\nWindows Vista 64bit\nJavaSE 1.6\nApache Tomcat 7.0.0 and Apche Tomcat 7.0.2beta\nJSTL 1.1.2\n\nAll setup together in a typical \"Dynamic Web Project\" in Eclipse 3.6 Helios",
    "comments": [
      "The expected behaviour is undefined since the EBNF in JSP.1.3.10.1 does not include the omit attribute at all.\n\nThe behaviour you are expecting sounds reasonable to me (even if it does make the code a tad more complicated than it is currently). I'm working on a patch and should have something soon. I'll also try and nag the EG about the error in the EBNF.",
      "I have fixed this in trunk. It will be included in 7.0.3 onwards."
    ],
    "creation_ts": "2010-08-22T16:44:10Z",
    "fixes": [
      49799
    ]
  },
  {
    "id": 41675,
    "summary": "Add a debug statement when some necessary header information is missing",
    "description": "Reference: org.apache.coyote.http11.Http11Processor.java\n\nIt would be helpful for developers to get informed when some required header\ninformation is missing. eg when headers.getValue(\"host\"); returns null and\nhttp11 is true.\n\nCouldn't you add a log.debug statement that informs the user about missing\nheader-fields? (For example in Http11Processor.java:1391)",
    "comments": [
      "Cedric means org.apache.coyote.http11.Http11Processor.prepareRequest() where in\nthe request the headers \"HTTP/1.1\" or \"Host\" are enforced, but only response\ncode 505 or 400 and 501 are sent, but no (valuable) background is written to any\nlog at any debug level (Unsupported transfer encoding, \"Host\" header missing, etc.)",
      "Created attachment 19634\nHttp11Processor.patch",
      "Good suggestion, thanks for sending in a patch.  I've applied it on the Tomcat\n5.5 and 6.0 trunks."
    ],
    "creation_ts": "2007-02-22T00:36:16Z",
    "fixes": [
      41675
    ]
  },
  {
    "id": 51477,
    "summary": "Support all protocol combinations in SSLProtocol of APR Connector",
    "description": "We have used SSLProtocol=\"SSLv3+TLSv1\" with the APR connectors in 6.0.x and 7.0.x successfully to support both SSLv3 and TLSv1 protocols exclusively (no SSLv2 support).  The following openssl s_client connection tests demonstrate this functionality with 7.0.8:\n\n$ openssl s_client -connect eiger.middleware.vt.edu:443 -tls1\nCONNECTED(00000003)\n...\nSSL handshake has read 6158 bytes and written 293 bytes\n---\nNew, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: zlib compression\nExpansion: zlib compression\nSSL-Session:\n    Protocol  : TLSv1\n...\n\n$ openssl s_client -connect eiger.middleware.vt.edu:443 -ssl3\nCONNECTED(00000003)\n...\nSSL handshake has read 6027 bytes and written 319 bytes\n---\nNew, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: zlib compression\nExpansion: zlib compression\nSSL-Session:\n    Protocol  : SSLv3\n...\n\n$ openssl s_client -connect eiger.middleware.vt.edu:443 -ssl2\n15389:error:140A90C4:SSL routines:SSL_CTX_new:null ssl method passed:ssl_lib.c:1453:\n\nUpon upgrading to Tomcat 7.0.16, which includes the fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=51073, our desired protocol combination fails with the expected \"unsupported protocol\" message.  Unfortunately, none of the officially supported strings mentioned at http://tomcat.apache.org/tomcat-7.0-doc/config/http.html#SSL%20Support provide the desired protocol support.  In particular the protocol values are exclusive, where setting SSLProtocol=\"SSLv3\" prevents TLSv1 connections and vice versa.  The following s_client tests confirm this behavior:\n\n(7.0.16 with SSLProtocol=\"SSLv3\")\n$ openssl s_client -connect eiger.middleware.vt.edu:443 -tls1\nCONNECTED(00000003)\n15696:error:1408F10B:SSL routines:SSL3_GET_RECORD:wrong version number:s3_pkt.c:293:\n\n$ openssl s_client -connect eiger.middleware.vt.edu:443 -ssl3\nCONNECTED(00000003)\n...\nSSL handshake has read 6027 bytes and written 319 bytes\n---\nNew, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: zlib compression\nExpansion: zlib compression\nSSL-Session:\n    Protocol  : SSLv3\n...\n\n\n(7.0.16 with SSLProtocol=\"TLSv1\")\n$ openssl s_client -connect eiger.middleware.vt.edu:443 -tls1\nCONNECTED(00000003)\n...\nSSL handshake has read 6158 bytes and written 293 bytes\n---\nNew, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: zlib compression\nExpansion: zlib compression\nSSL-Session:\n    Protocol  : TLSv1\n...\n\n$ openssl s_client -connect eiger.middleware.vt.edu:443 -ssl3\nCONNECTED(00000003)\n15816:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1102:SSL alert number 40\n15816:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:539:",
    "comments": [
      "Set Tomcat version to 7.0.16.",
      "Bugzilla is not a support form.\n\nPlease subscribe to the Tomcat users list and post your question there.\n\nSome hints: if you want the server to speak SSLv3 and TLSv1, you need to set the SSLProtocol to \"all\". To ensure secure communication you also need to set SSLCipherSuite to something sensible, like e.g.\n\nRC4-SHA:AES128-SHA:ALL:!aNULL:!EXP:!LOW:!MD5:!SSLV2:!NULL\n\nPlease don't proceed the discussion here. If the discussion on the users list gives reason to believe you really hit a bug, you can reopen this issue.\n\nRegards,\n\nRainer",
      "According to the source code, before bug 51073 was fixed (r1094089 or r1124211), the \"SSLv3+TLSv1\" value just worked as a synonym to \"all\".\n\nWhat happens with ssl2 connections if you configure SSLProtocol=\"all\"\n- in 7.0.16\n- in 7.0.8\n\ndoes it accept ssl2 connections or rejects them?\n\n\n--\nAnyway, I do not mind to add \"SSLv3+TLSv1\" as an allowed value, if it is actually supported by the library.\n\nLooking at implementation of SSLContext.make in sslcontext.c of tc-native 1.1.x, there is code for this combination of flags.\n\nhttp://svn.apache.org/viewvc/tomcat/native/branches/1.1.x/native/src/sslcontext.c?view=markup#l85",
      "But I *think* OpenSSL does not support it:\n\nhttp://www.openssl.org/docs/ssl/SSL_CTX_new.html\n\nIt looks like you have to do what I already posted here: choose \"all\" for the protocol and disable any SSLV2 ciphers.\n\nRainer",
      "\"SSLv3+TLSv1\" value just worked as a synonym to \"all\"\n\nAppears this is correct based on my testing.  Setting SSLProtocol=\"all\" in both 7.0.8 and 7.0.16 produced exactly the same results: TLSv1 and SSLv3 are supported but not SSLv2.  It appears that our SSLCipherSuite parameter is actually providing the desired behavior:\n\nSSLCipherSuite=\"HIGH:MEDIUM:-SSLv2\"\n\nSo we'll be able to preserve the desired functionality with SSLProtocol=\"all\" in versions 7.0.16 and later.\n\nI think there's merit in supporting other protocol combinations that make sense if for no other reason to maintain consistency with mod_ssl directives of the same name, which are eerily similar to APR connector attributes.  (I've assumed that similarity is intentional.)",
      "I verified the following mod_ssl directives provide equivalent behavior (no SSLv2):\n\nSSLProtocol +SSLv3 +TLSv1\nSSLCipherSuite HIGH:MEDIUM",
      "I checked the code of tcnative and of mod_ssl. Both have provisions for arbitrary combinations in SSLProtocol.\n\nThe way it works is there's a basic protocol selection in OpenSSL and then you can remove parts by adding an option.\n\nThe possible basic settings are SSLv2, SSLv3, TLSv1 and SSLv23. All except for the last one *only* understand that specific protocol, the last one understand SSLv2, SSLv3 *and* TLSv1, so this is \"all\".\n\nFor arbitrary combinations one chooses SSLv23 and then removes the protocols one doesn't want via SSL_CTX_set_options() using the options SSL_OP_NO_SSLv2, SSL_OP_NO_SSLv3 and/or SSL_OP_NO_TLSv1.\n\nIn tcnative in sslcontext.c there seems to be a bug in choosing SSLv2 if the configured protocol is SSLv2+TLSv1 and choosing SSLv3 if it is SSLv3+TLSv1. I'd say in both cases it should be SSLv23, because neither SSLV2 not SSLV3 support TLSv1. The additional protocol in SSLv23 is later removed via the options.\n\nFortunately those combinations do not yet get passed down by AprEndpoint.java. But yes, it'd be easy to support any combination.",
      "Created attachment 27260\nSupport for arbitrary protocol combinations\n\nThe combinations SSLv2+TLSv1 and SSLv3+TLSv1 will only work, if tcnative is patched as well.\n\nPatch is untested.",
      "I've reviewed the patch and it appears that it doesn't do the work of removing protocols via SSL_CTX_set_options() as you mentioned.  At this point it appears all supported strings will end up supporting SSLv2+SSLv3+TLSv1 due to the use of SSLv23_client_method(), which is not the equivalent behavior of similar mod_ssl directives.",
      "I dug a little further and found that the requisite SSL_CTX_set_options() calls are already in sslcontext.c.  I'll test the patch and report back.",
      "I tested the patch and verified that SSLv3+TLSv1 works as expected, allowing SSLv3 and TLSv1, but denying SSLv2 connections.  However, the setting SSLv2+TLSv1 only allows TLSv1 connections:\n\n$ openssl s_client -connect eiger.middleware.vt.edu:443 -tls1\nCONNECTED(00000003)\n...\nSSL handshake has read 6158 bytes and written 293 bytes\n---\nNew, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: zlib compression\nExpansion: zlib compression\nSSL-Session:\n    Protocol  : TLSv1\n$ openssl s_client -connect eiger.middleware.vt.edu:443 -ssl2\n25335:error:140A90C4:SSL routines:SSL_CTX_new:null ssl method passed:ssl_lib.c:1453:\n$ openssl s_client -connect eiger.middleware.vt.edu:443 -ssl3\nCONNECTED(00000003)\n25338:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1102:SSL alert number 40\n25338:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:539:",
      "Which SSLCipher did you use?",
      "While OpenSSL's s_client can certainly get the job done, you might make things easier on yourself by using sslscan (http://sourceforge.net/projects/sslscan/). Most Linux distros have packages for it, too.",
      "There is no SSLCipherSuite attribute defined for the SSL connector.  See attached server.xml file.",
      "Created attachment 27274\nTest server.xml",
      "I tested it now myself and it *does* work for me with all 8 possible combinations, each only allowing the configured protocol set.\n\nMaybe your OpenSSL client doesn't allow SSLv2? What happens if you set the SSLProtocol in the connector to SSLv2?",
      "I applied a slightly revised version of the patch in r1145209.\n\nThe new support for arbitrary protocol combinations will need a release of tcnative. For existing releases there will be only support for the documented combinations, because other combinations will give unexpected results.\n\nI'll keep this issue open and reassign to tcnative.",
      "Support is in tcnative starting with 1.2.22.",
      "Change also proposed for Tomcat 6.",
      "Applied to 6.0 in r1304509 and will be in 6.0.36",
      "*** Bug 53344 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2011-07-05T16:53:25Z",
    "fixes": [
      51477
    ]
  },
  {
    "id": 56917,
    "summary": "Create a configuration to write relative 302 responses instead of absolute",
    "description": "Create a Tomcat configuration to force tomcat to write relative location headers in 301/302 responses instead of absolute location headers.\n\nPurpose:\nToday Tomcat always writes an absolute response for redirects per RFC2616 standards.  However as many modern browsers support 302s to relative Locations as explained in https://en.wikipedia.org/wiki/HTTP_location , our friendly Tomcat application server should allow configuration to write back 302s in the more friendly form.\n\nThe ripple effect of this where applications choose to use this setting, will be very good for cpu cycles of web servers and load balancers all over the world.   This can greatly reduce the need for ProxyPassReverse in the Apache web server, and also for URL rewriting happenin in physical load balancers.\n\nSee this example where another gentleman has been compelled to recompile Tomcat to achieve the same thing\nhttp://community.jaspersoft.com/wiki/f5-load-balancer-and-tomcat-302-error",
    "comments": [
      "This would be contrary to the requirements of the Servlet specification.\n\nSee https://java.net/jira/browse/SERVLET_SPEC-100 for the request to change that (and some other stuff).",
      "Both the servlet spec and Tomcat need to be updated then.  Tomcat doesn't have to wait for the servlet spec, unless the update is already accepted.\n\nThe expense of doing 302 rewriting can be cleaned from numerous webserver environments.",
      "(In reply to Ajay Sindwani from comment #2)\n> Both the servlet spec and Tomcat need to be updated then.  Tomcat doesn't\n> have to wait for the servlet spec, unless the update is already accepted.\n\nTomcat, being spec-compliant, must maintain spec-compliance.\n\nThere are certainly examples of out-of-spec behavior in Tomcat which are usually controllable via certain configuration options. It seems like this could be one of them. Patches are always welcome.\n\n> The expense of doing 302 rewriting can be cleaned from numerous webserver\n> environments.\n\nAre you sure? If not all clients support it, then you can't remove that capability. It's one of the awful things about the web: you can't force users to upgrade. ;)",
      "Good news. RFC2616 has been obsoleted by RFC7231 and friends. RFC7231 allows redirects to be relative. This looks like it could turn into my favourite type of bug report - one I can fix by deleting code :)",
      "Similar to 58660, I think the behavior change may not be such a good idea. It could be done in 9, but not elsewhere by default.",
      "Allowing relative URIs should be low risk and it is consistent with RFC7231.\n\nI know the commit is large but 99% of that is for testing. My first approach replaced the encodeXXX methods so I added some tests. While I eventually dropped that approach (we need Java 9 for the URI performance to be better than the current one) I wanted to keep the tests.\n\nThe main reason for back-porting this beyond 9.0.x is that we need this to be able to fix bug 58655 without duplicating huge amounts of code. Hence back-porting as far as 7.0.x which is the earliest version we need to fix 58655.\n\nWould you like to see a configuration option for this in 7.0.x and 8.0.x. And if so, which what default?",
      "I verified the behavior with a telnet. If it is known all clients are compatible, then it should be fine. I read in the original description \"many modern browsers support 302s to relative Locations\", so what are the \"non modern\" browsers or clients that would not support it ?",
      "Not really related, the processing for session id encoding in the URL (encodeRedirectURL and encodeURL) is extraordinarily complex and expensive. I don't remember why it looks like that.",
      "The complexity is to ensure that the session ID only gets added if the redirect is to a location within the current web application.\n\nIn nearly all cases it will get skipped anyway since the session will have been provided by a cookie.",
      "I haven't found a client that doesn't support it yet. I did find one reference for curl [1] that suggests back then all browsers supported various forms of relative redirects.\n\n[1] http://daniel.haxx.se/blog/2011/12/31/top-3-curl-bugs-in-2011/",
      "@Mark Thomas\n\nLogically since 7/8 backports, existing app servers, will receive your patch through minor upgrades, the defaults should maintain the existing behavior to prevent wasted labor and troubleshooting for the majority of people.\n\nI'd recommend in 9 and up that the the default become the more efficient behavior and inline with RFC-7231.  \n\nDoing this CR is a good deed!  Imagine all the CPU cycles saved when the world no longer has all these Tomcats adding base URLs to redirects and Apache Httpd no longer has ProxyPassReverse added to every ProxyPass.  This is a good \"green\" eco-friendly change.",
      "1. I think this feature must be configurable.\n\na. Regardless of browsers, this may affect configuration of reverse proxies.\n\nI guess that ProxyPassReverse may fail to rewrite some of redirects.\n\nhttp://httpd.apache.org/docs/2.4/mod/mod_proxy.html#proxypassreverse\n\nb. There may be some old / dumb clients.\n\nI am REOPENING this.\n\n\n2. I agree that this is a nice feature and I think that enabling this feature by default is better from security point of view.",
      "It appears that ProxyPassReverse only rewrites absolute URLs. That will be a problem for redirects of the form /some/path\n\nTomcat generates redirects like this in a few places and we can fix those but it does look like an option is going to be required for the reverse proxy case where the context path is changed in the proxy.\n\nSomething else to add to the long list of reasons why changing the context path in the reverse proxy is a bad idea.",
      "I can get Tomcat to send a suitable relative redirect for directories but not context roots. I don't see a way around this. Any relative redirect from from /foo to /foo/ is going to have to have 'foo/' in it and that won't be caught by ProxyPassReverse. If the context name has been changed the redirect will break.\n\nAt the point where the redirect is generated, we have access to the context so adding a per context option for this should be fairly simple. I don't like adding configuration options unless we have to but the case for doing so here is strong, even if it does depend on a configuration (changing context paths in the proxy) that we know is generally problematic.\n\nI should be able to get this option added shortly.",
      "Configuration option added.",
      "Thank you.\n\nMinor things\n\n1. JMX\n\n2. As Servlet Specification javadoc [1] explicitly says \"servlet container must convert the relative URL to an absolute URL before sending the response to the client\" and references RFC 3986 (\"absolute\" is defined there), I think the default value of this option should depend on STRICT_SERVLET_COMPLIANCE.\n\nIt is not yet known what will be for Servlet 4.0, we can change the default later. The [1] link is for Servlet 3.1.\n\n\n[1] http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html#sendRedirect-java.lang.String-",
      "Review comments fixed."
    ],
    "creation_ts": "2014-09-05T16:46:31Z",
    "fixes": [
      56917
    ]
  },
  {
    "id": 40844,
    "summary": "JDBCRealm.getPassword throws NullPointerException",
    "description": "JDBCRealm.getPassword throws NullPointerException\n\nI'm using tomcat 5.5.20 with postgresql-8.1-407.jdbc3.jar and postgresql-8.1.4\non Ubuntu Dapper. Authenticating two users simultaneously with HTTP DIGEST\ncauses sometimes the following errors and a 401 Unauthorized reply:\n\n30.10.2006 14:24:54 org.apache.catalina.realm.JDBCRealm getPassword\nSEVERE: Exception performing authentication\norg.postgresql.util.PSQLException: ERROR: invalid message format\n        at\norg.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:1525)\n        at\norg.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1309)\n        at\norg.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:188)\n        at\norg.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:452)\n        at\norg.postgresql.jdbc2.AbstractJdbc2Statement.executeWithFlags(AbstractJdbc2Statement.java:354)\n        at\norg.postgresql.jdbc2.AbstractJdbc2Statement.executeQuery(AbstractJdbc2Statement.java:258)\n        at org.apache.catalina.realm.JDBCRealm.getPassword(JDBCRealm.java:546)\n        at org.apache.catalina.realm.RealmBase.getDigest(RealmBase.java:1156)\n        at org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:365)\n        at\norg.apache.catalina.authenticator.DigestAuthenticator.findPrincipal(DigestAuthenticator.java:282)\n        at\norg.apache.catalina.authenticator.DigestAuthenticator.authenticate(DigestAuthenticator.java:175)\n        at\norg.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)\n        at\norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)\n        at\norg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)\n        at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)\n        at\norg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)\n        at\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)\n        at\norg.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)\n        at\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)\n        at\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n        at java.lang.Thread.run(Thread.java:595)\n30.10.2006 14:24:54 org.apache.catalina.connector.CoyoteAdapter service\nSEVERE: An exception or error occurred in the container during the request\nprocessing\njava.lang.NullPointerException\n        at org.apache.catalina.realm.JDBCRealm.getPassword(JDBCRealm.java:568)\n        at org.apache.catalina.realm.JDBCRealm.getPrincipal(JDBCRealm.java:594)\n        at org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:398)\n        at\norg.apache.catalina.authenticator.DigestAuthenticator.findPrincipal(DigestAuthenticator.java:282)\n        at\norg.apache.catalina.authenticator.DigestAuthenticator.authenticate(DigestAuthenticator.java:175)\n        at\norg.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)\n        at\norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)\n        at\norg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)\n        at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)\n        at\norg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)\n        at\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)\n        at\norg.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)\n        at\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)\n        at\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n        at java.lang.Thread.run(Thread.java:595)",
    "comments": [
      "Thanks for the report.\n\nI have added the extra syncs required to fix this to SVN and the fix will be\nincluded in 5.5.21 onwards."
    ],
    "creation_ts": "2006-10-30T06:25:52Z",
    "fixes": [
      40844
    ]
  },
  {
    "id": 66359,
    "summary": "Document default value for RemoteIpValve#protocolHeader and RemoteIpFilter#protocolHeader",
    "description": "Update the Java documentation for RemoteIpValve and RemoteIpFilter with the correct protocolHeader default value of \"x-forwarded-proto\".  Documentation still shows default value as \"null\", although this value was changed with Bug 63196.  JavaDoc updates are needed in both the class and setProtocolHeader method locations.",
    "comments": [
      "Fixed in:\n- 11.0.x for 11.0.0-M1 onwards\n- 10.1.x for 10.1.3 onwards\n- 9.0.x for 9.0.70 onwards\n- 8.5.x for 8.5.85 onwards"
    ],
    "creation_ts": "2022-11-21T23:00:40Z",
    "fixes": [
      66359
    ]
  },
  {
    "id": 45026,
    "summary": "Custom HTTP-Error codes get remapped to 500er codes",
    "description": "We use Apache 2.2.8 with mod_JK 1.2.26 as a load-balancer for a Tomcat 5.5 cluster.\nWe use Custom HTTP-Error codes like 450 for authentication-purposes. Those\ncodes get remapped to 500.\nThe Error-Code 450 is in the RFC2616 described as valid return code so this is\na bug.\n\nThe custom error-codes worked fine in Apache 1.3.41 with MOD_JK/1.2.25.\n\nYou can easily reproduce this bug by writing a simple jsp-page with the following\nline:\n<%response.setStatus(450);%>",
    "comments": [
      "With the same version of Tomcat (trunk) and a slightly older mod_jk (1.2.24) this appears to be a difference between httpd 1.3.x and 2.2.x\n\nI've has a quick look in RFC 2616 and I didn't find anything relating to custom status codes. Can you provide a reference to the section of RFC2616 to which you are referring.\n\nI need to take a look at the httpd docs.",
      "If necessary, the httpd part of this issue should be discussed in its predecessor BZ 44495 ( https://issues.apache.org/bugzilla/show_bug.cgi?id=44995 ).",
      "Thanks Rainer. It would of been helpful if that had been included in the original report.\n\nI've taken a look at mod_jk and it seems to be complaining about a lack of a body. I'm not sure if this is a Tomcat or a mod_jk issue at the minute. Need to do more testing.",
      "Rainer - this might be quicker for you to track down. The following patch ensures the correct status is returned but the body generated by Tomcat is disappearing somewhere (I suspect inside mod_jk).\n\nIndex: java/org/apache/jk/common/JkInputStream.java\n===================================================================\n--- java/org/apache/jk/common/JkInputStream.java\t(revision 657140)\n+++ java/org/apache/jk/common/JkInputStream.java\t(working copy)\n@@ -278,6 +278,10 @@\n         } else {\n             message = message.replace('\\n', ' ').replace('\\r', ' ');\n         }\n+        if (message == null) {\n+            // mod_jk + httpd 2.x fails with a null status message - bug 45026\n+            message = Integer.toString(res.getStatus());\n+        }\n         tempMB.setString( message );\n         c2b.convert( tempMB );\n         outputMsg.appendBytes(tempMB);",
      "That helped a lot. Indeed it seems httpd 2.x forces a status line to contain a non empty reason phrase, although RFC 2616 seems to allow empty ones. I posted to httpd-dev about that.\n\nI would say your patch looks good, because having a trivial one looks better then none and it fixes the problem independent of any httpd fix.\n\nDepending on the httpd discussion, I'll see, if we add the same check to mod_jk as well, to fix the problem for older TC and httpd.",
      "See: http://marc.info/?t=121128830700002&r=1&w=2",
      "A fix will be included in mod_jk version 1.2.27.\n\nAlthough the root problem lies within Apache httpd 2.x, we are able to work around it. We will add \"Unknown Reason\" as a reason phrase in case we receive an http status with empty reason phrase from the backend (as is likely for custom http stati; unfortunately the servlet spec has no method for setting a reason phrase).\n\nA similar approach will be taken for Tomcat, to not return an empty reason phrase.\n\nI guess, the httpd people will also make httpd more tolerant for empty reason phrases.",
      "Thanks for the information - while 1.2.27 of the plugin is still not fully released and also the httpd will take a moment to get this implemented we managed to change our code to always include a reason phrase - the servlet spec allows to send one or leave it out. If a correct reason is provided, it is working out fine.\n\nwhen the code...\nresponse.setStatus(int) or\nresponse.sendError(int)\n...is used, the problem is showing up and HTTP 500 is returned to user.\n\nIf we use the both methods...\nresponse.setStatus(int, String) or\nresponse.sendError(int, String)\n...and the String is NOT NULL, then the resulting HTTP response code is correct.\n\nThanks & Best Regards,\n\nJens",
      "A fix has also been applied to TC 6.0 (r762499) and TC 5.5 (r762510) to become part of 6.0.20 and 5.5.28. So updating either one of mod_jk or Tomcat does already solve the problem."
    ],
    "creation_ts": "2008-05-18T04:16:12Z",
    "fixes": [
      45026
    ]
  },
  {
    "id": 59219,
    "summary": "AsyncListener#onError not called on exception during async processing",
    "description": "There are a couple of problems relating to error handling during exception\nprocessing. Basically, Tomcat should ensure that the AsyncListener onError\nand onComplete methods are correctly called if an exception occurs during\nasync processing in order to allow the listener code to release resources\nand do clean-up. This does not seem to happen.\n\nA sample servlet demonstrating the problem, AsyncDebugListener, is provided \nat the following location:\n\nhttps://github.com/msnicklous/AsyncDebug\n\nBuild the AsyncDebugListener module using 'mvn install' and deploy it on Tomcat.\n\nThe service method and each of the AsyncListener methods logs output to the\nAsyncListener.log file. You can follow execution by looking at the logs.\n\nAssuming Tomcat is installed locally, you can use the following URLs:\n\n1) No error - works correctly:\n\nhttp://localhost:8080/AsyncDebugListener/ltest?reps=3\n\n2) Exception during service method\n\nhttp://localhost:8080/AsyncDebugListener/ltest?err\n\nIf async processing is started and an exception is thrown before the end of\nthe service method, AsyncListener#onError is not called, however onTimeout\nfollowed by onComplete are both called. \n\nThis is incorrect, as onError followed by onComplete should be called. \n\n3) Exception during processing of AsyncContext#dispatch() target\n\nhttp://localhost:8080/AsyncDebugListener/ltest?reps=3&err\n\nPrecondition: Async processing is started and the request is dispatched using \nAsyncContext#dispatch(). The service method returns to the container.\n\nIf the container performs the resulting async dispatch and an exception is \nthrown, Tomcat drops the connection to the browser and no AsyncListener method\nis called.\n\nThis is incorrect. Tomcat should flush the contents of the buffer to the \nbrowser and call the AsyncListener onError followed by the onComplete methods.\n\nThanks for having a look at this!",
    "comments": [
      "I've made some changes in 9.0.x to address point 2. The provided test case (thanks for that it makes life a lot easier) now passes. I want to look at point 3 before thinking about back-porting.",
      "Point 3 is fixed as well in 9.0.x for 9.0.0.M5 onwards.\n\nI'll look at back-porting this next.",
      "Backports complete.\n- 8.5.x for 8.5.1 onwards\n- 8.0.x for 8.0.34 onwards\n- 7.0.x for 7.0.70 onwards\n- 6.0.x for 6.0.46 onwards",
      "(In reply to Mark Thomas from comment #3)\n> - 6.0.x for 6.0.46 onwards\n\nScratch the above one.\nTomcat 6 was not affected by this fix.\n\nAsyncListener is a feature of Servlet 3.0 API / Tomcat 7 onwards.",
      "Created attachment 33782\nUnit test of bug 59219\n\nUnit test patch of the bug 59219 (point 2).",
      "Created attachment 33783\nUnit test of bug 59219\n\nThis unit test checks 2 and 3 points.",
      "Created attachment 33784\nUnit test of bug 59219\n\nUnit test which checks point 2 and 3.",
      "Thanks for the patch. It is being looked at. Currently I'm seeing odd behaviour on Windows so I want to test it on another platform.\n\nI do have some basic feedback at this point. Expect some more when once I have test test working:\n1. Use separate methods for separate tests. It makes it easier to determine which tests are failing.\n2. We aim to keep the code warning free. If you use Eclipse, checkout the configuration settings we use under res/ide-support/eclipse\n3. It looks like you should be able to re-use the existing tracking listener.",
      "And some more:\n4. The wait loop logic is wrong.\n   - It will always wait 5s even if the output is correct\n   - If output in incorrect it will enter an infinite loop\n5. It is clearer to define an explicit Wrapper insatnce and then call\n   setAsyncSupported(true) on that.\n6. The test doesn't pass. This actually highlights a bug in the fix (regression\n   in the fix for point 2 when the fix for point 3 was made) which just goes to\n   demonstrate the usefulness of test cases.\n\nI have all this fixed locally but I think it would be useful for you to try and fix these issues yourself.",
      "I've fixed the regression. I held back on committing the test case to give you a chance to update your proposed patch.",
      "Created attachment 33796\nUnit test of bug 59219\n\nThank you for your useful feedback and especialy your patience and your time :), i use IntelliJ IDEA Community edition because i'm more familiar with its debugger and its features, i run ant to convert the project to eclipse project then import it inside IDEA as eclipse project (ant buildfile doesn't offer support for IDEA and IDEA supports importing eclipse projects).\n\nThe test case pass for point 2, but it doesn't for point 3, i noticed that when an exception occurs without a dispatch the onError run once, but if the exception occurs with no matter numbder of dispatch the onError run twice, i think it a bug in the fix as onError should run only once or the same as the dispatch has been called (i didn't read the servlet spec).",
      "Comment on attachment 33796\nUnit test of bug 59219\n\nNice. That is very, very close to what I have. The differences are:\n- refactoring to remove duplicate code\n- setting the timeout on the async context to speed up some failure modes\n- different logic around loop tracking\n\nI'll get this committed shortly so you can see the differences. You'll get a credit in the commit message.",
      "Created attachment 33802\nUnit test of bug 59219\n\nInserting timeout.\n\nAbout refactoring, of course there's some duplicate code as the servlets, ServletB can do what ServletA do, but i think like its better, because its more clear and more explicit for point 2, or not?? :)"
    ],
    "creation_ts": "2016-03-23T13:15:48Z",
    "fixes": [
      59219
    ]
  },
  {
    "id": 51862,
    "summary": "JreMemoryLeakPreventionListener enhancement to load configurable classes",
    "description": "Enhancement proposed : add a \"classesToInitialize\" parameter to JreMemoryLeakPreventionListener to provoke the loading of arbitrary classes.\nThis will allow users to tune the memory leak protection features to avoid leaks triggered when loading JRE classes not yet identified as leaky, or even third-party classes.\n\nI'll commit a patch in the next days...",
    "comments": [
      "Committed to trunk and tc7, will be available in tomcat 7.0.22.\n\nProposed backport to tc6\n\nhttp://svn.apache.org/viewvc?rev=1174359&view=rev",
      "Added to 6.0 in r1181719 and will be in 6.0.34.",
      "It seems like this feature could be used to reduce the amount of code in JMLPL by providing a default list of classes to load, since that's mainly what's going on in there.\n\nIs that worth it, or is it better to handle the cases we already handle and leave this feature for use with webapp-specific (e.g. private) classes?",
      "If you have predefined list of classes, what will this configuration property do: add to it, or replace it?\n\nIf it adds to it, how you remove items from predefined list (that is currently done by setting some properties to false) - by editing catalina.properties?\n\nIn general it makes sense, because it is easier to edit some default list (if we have to add some new classes to it in the default configuration) than introduce new setters and property name.",
      "It would indeed simplify JMLPL but would break the existing \"API\" if the setters and getters were removed. Or we can refactor to have the flag setters merely add some known class names to the set of classes to load.",
      "Konstantin: good point about add/remove/replace... I hadn't thought too hard about that. Some of the classes loaded should only be loaded if the user wants them loaded (e.g. AWT-related stuff, optional libraries, etc.) so there probably shouldn't be a far-reaching default.\n\nSylvain: the API can be (somewhat) simply refactored to modify a list of classes to load.\n\nI'll think about it and log another enhancement request with a more well-thought-out description."
    ],
    "creation_ts": "2011-09-21T21:56:46Z",
    "fixes": [
      51862
    ]
  },
  {
    "id": 52450,
    "summary": "Add setter for entityResolver in jasper's ParserUtils",
    "description": "Created attachment 28138\nPatch\n\nIn some cases (e.g. OSGi web modules) jasper.jar and dtds will be in different classloaders making the need for setting up custom entity resolver so dtds can be retrieved. A simple patch is attached.\nThis is already added in Glassfish's jasper fork and Jetty project is making use of it. Applying the patch will allow using Tomcat's Jasper in Jetty instead of Glassfish's one. See http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/jetty-osgi/jetty-osgi-boot-jsp/src/main/java/org/eclipse/jetty/osgi/boot/jasper/WebappRegistrationCustomizerImpl.java?id=306947b1420beed76c772e546eb3120b3bf4b112#n181 for details about the change and why it was needed.",
    "comments": [
      "Patch applied. Thanks!"
    ],
    "creation_ts": "2012-01-11T10:35:45Z",
    "fixes": [
      52450
    ]
  },
  {
    "id": 63781,
    "summary": "Prevent illegal reflective access warnings / errors from BeanELResolver",
    "description": "With Java module system, there might be cases, where interfaces are exported by a module, but not their implementations.\nIn such cases BeanELResolver will currently cause warnings / errors like this:\n\n[ERROR] java.lang.IllegalAccessException: class javax.el.BeanELResolver cannot access class C (in module M) because module M does not export <packagfe of C> to unnamed module ...\n\nThis could, and should be prevented, since in later Java versions those warnings will become errors by default.\n\nThere already seems to be the right spot in code to achieve this. In javax.el.Util (which seems to be tomcat-EL-sepcific, despite its package name) there is the following code in getMethod:\n\nif (m == null || Modifier.isPublic(type.getModifiers())) {\n            return m;\n        }\n        Class<?>[] inf = type.getInterfaces();\n        Method mp = null;\n        for (int i = 0; i < inf.length; i++) {\n            try {\n                mp = inf[i].getMethod(m.getName(), m.getParameterTypes());\n                mp = getMethod(mp.getDeclaringClass(), mp);\n...\n\nAFAIU, that code checks, if the type that declares the method, is public.\nIf not, it looks for the same method in interfaces and superclasses.\n\nThe check for \"is public\" could be extended to \"and is exported by the module\".",
    "comments": [
      "Created attachment 36807\nDraft patch\n\nThe fix for this is rather more involved than it might first appear.\n\nThe check in Java is AccessibleObject.canAccess(Object) but that is a new method in Java 9 and the EL API (and implementation) have to work on Java 8. That means introducing a cut-down version of JreCompat into the EL API.\n\nThere are a further 9 places in EL API where Modifiers.isPublic() is called. Each of those also need to be checked to see if a similar change is required there. As do the 7 places it is called elsewhere in the Tomcat code base.\n\nI've attached a draft patch that addresses the specific issue raised in this report for review / comment. I intend to use this as the basis for a broader, more complete patch.",
      "Thank you for considering this. Sorry, I did not want to imply it was easy... \n\nI has a look at you patch and it looks reasonable to me.\n\nMaybe, in Jre9Compat there could be a check for isPublic at first. If not, return false immediately, if it is public, do the (reflective) canAccess call.\nJust for performance ...",
      "I think you highlight a valid point. The patch conflates the test for the type being public and the new Java 9 accessibility. I think those two should be kept separate.\n\nI have a fix locally for most of these issues. I'll re-work it to address the issue above before committing.",
      "Fixed in:\n- master for 9.0.27 onwards\n- 8.5.x for 8.5.47 onwards\n- 7.0.x for 7.0.97 onwards",
      "I tried with 9.0-SNAPSHOT now.\n\nUnfortunately, the problem ist still there and now I have twice as muc warnings as before:\n\nWARNING: Illegal reflective access by javax.el.Jre9Compat (file:/C:/java/maven/repository/org/apache/tomcat/embed/tomcat-embed-el/9.0-SNAPSHOT/tomcat-embed-el-9.0-SNAPSHOT.jar) to method ...\n\nWARNING: Illegal reflective access by javax.el.BeanELResolver (file:/C:/java/maven/repository/org/apache/tomcat/embed/tomcat-embed-el/9.0-SNAPSHOT/tomcat-embed-el-9.0-SNAPSHOT.jar) to method ...\n\nI am not yet sure what is going on here, but I will investigate further.",
      "There is probably something wrong with the warnings in the JDK (?)\n\nSince if I set  \n\n--illegal-access=deny\n\nit works, where it would have failed before with 9.0.26.\n\nHowever, with \n\n--illegal-access=warn\n\nall the (fixed) warnings appear.\n\nStrange.",
      "Okay, the explanation is:\n\nWith --illegal-access=warn , the new canAccess()-check will return true, since the access is still allowed. It will, however, log the warning (which might be a little bit verbose, since we want to CHECK the access, but not do it).\nSince canAccess returned true, findMethod() will still return the method from the un-exported module. This leads to the second warning.\n\nWith --illegal-access=deny, the new canAccess()-check will return false and not log anything. \nThen findMethod() will search further for an exported method.\n\nI don't think there is anything more than can be done here.\nThe warnings will persist, but they will never turn into errors. And that is the primary goal.\n(Maybe there should be some hint in the documentation about this to avoid further bug tickets)"
    ],
    "creation_ts": "2019-09-29T12:15:02Z",
    "fixes": [
      63781
    ]
  },
  {
    "id": 41608,
    "summary": "The log level is different at same messages.",
    "description": "I suggest a little message improvement.\n\nThe log level is different at same messages.\nThe message \"Servlet.service() for servlet {0} threw exception\" is \noutput in eight places, but the message level is not same.\n\n--org.apache.catalina.core.ApplicationDispatcher#invoke\n...\nwrapper.getLogger().error(sm.getString(\"applicationDispatcher.serviceException\",\n    wrapper.getName()), e);\n...\nwrapper.getLogger().error(sm.getString(\"applicationDispatcher.serviceException\",\n    wrapper.getName()), e);\n...\nwrapper.getLogger().error(sm.getString(\"applicationDispatcher.serviceException\",\n    wrapper.getName()), rootCause);\n...\nwrapper.getLogger().error(sm.getString(\"applicationDispatcher.serviceException\",\n    wrapper.getName()), e);\n\n\n--org.apache.catalina.core.StandardWrapperValve#invoke\ncontainer.getLogger().warn(sm.getString(\"standardWrapper.serviceException\",\n    wrapper.getName()), e);\n...\ncontainer.getLogger().warn(sm.getString(\"standardWrapper.serviceException\",\n    wrapper.getName()), e);\n...\ncontainer.getLogger().error(sm.getString(\"standardWrapper.serviceException\",\n    wrapper.getName()), rootCause);\n...\ncontainer.getLogger().error(sm.getString(\"standardWrapper.serviceException\",\n    wrapper.getName()), e);\n\nAre there any reasons for using getLogger().warn()?\nI think it would be better that all of them use getLogger().error(...).",
    "comments": [
      "Fixe din svn for 5.5.x and 6.0.x. Thanks for the report."
    ],
    "creation_ts": "2007-02-13T21:45:29Z",
    "fixes": [
      41608
    ]
  },
  {
    "id": 47214,
    "summary": "Inner classes that are explicitly referenced - should not be anonymous",
    "description": "Classes\n o.a.catalina.security.SecurityClassLoad\n o.a.catalina.jasper.SecurityClassLoad\nperform preloading of certain classes of Tomcat.\n\nMy concern is that some of those preloaded classes are anonymous ones, e.g.\n\n        loader.loadClass\n            (basePackage + \"session.StandardSession\");\n        loader.loadClass\n            (basePackage + \"session.StandardSession$1\");\n\nReferencing anonymous classes by their numbers is too fragile. It can be broken by any code modification that will cause their renumbering. Also, it is hard to review patches to SecurityClassLoad when they contain such references. See e.g. r721704\n\nI suggest that all such classes were explicitly named. See classes referenced in o.a.catalina.security.SecurityClassLoad for an example (e.g.: o.a.c.core.ApplicationDispatcher with inner classes PrivilegedForward, PrivilegedInclude).",
    "comments": [
      "What do you suggest that classes be named?",
      "I think any reasonably descriptive name will do.\n\nIf you're considering preparing a patch, please grab the latest trunk (currently Tomcat 9.0.x) and write your initial patch for that version. Once it's been accepted, that patch can be back-ported to older versions of Tomcat.\n\nTry to make your patches as small as possible: don't fix 3 bugs at once and change all the whitespace around. If you need to re-factor some things, submit two patches: the refactoring in the first patch with no functional changes, and then the actual change in a second patch.",
      "Thank you for your advices and your time :), the problem is i'm not native english speaker and english is my fourth language, so i didn't find good names, but i will try my best, thank you again for your time :)",
      "Your English is great. If there is confusion, we will ask for clarification.\n\nDon't feel bad if we ask you to re-do your patch(es) several times. The goal is to get the best patch possible, and make you into a successful patch-writer ;)",
      "Fixed in 9.0.x for 9.0.0.M20 onwards. I do not propose to back-port it.",
      "See \"Re:r1817800\" thread for Tomcat 7 (fix for bug 61886)\nhttp://tomcat.markmail.org/thread/y5yyhse2rsrgg35b\n\nJava 6 generates helper anonymous classes when the code uses switch(enum).\n\nE.g. in Tomcat 7\norg.apache.coyote.http11.AbstractHttp11Processor$1 is\n\nstatic class AbstractHttp11Processor$1 {\n    static final int $SwitchMap$org$apache$coyote$ActionCode[];\n    static final int $SwitchMap$org$apache$tomcat$util$log$UserDataHelper$Mode[];\n\n    static \n    {\n    // the int arrays are initialized with Enum.ordinal() -> some integer value mapping\n    }\n}\n\nEssentially, it is a holder class that wraps a static field that is initialized lazily.\nhttps://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n\nThere is no way to assign a name to such class. As such, I went with an alternative implementation that uses a for(int++) loop to load all available classes starting with $1 - r1817901.\n\nThis will be in 7.0.84 onwards.",
      "Reassigning to Tomcat 8 to track forward-porting of r1817901.",
      "Nice fix. Since Tomcat 8 doesn't support the old JDKs, then it probably doesn't need the clever hack (IMO). The improvement should still be to stop using anonymous inner classes when they need preload.",
      "(In reply to Remy Maucherat from comment #8)\n> Nice fix. Since Tomcat 8 doesn't support the old JDKs, then it probably\n> doesn't need the clever hack (IMO). The improvement should still be to stop\n> using anonymous inner classes when they need preload.\n\nHttp11Processor$1.class is present in Tomcat 8.5.24/tomcat-coyote.jar\n\nDecompiling it, it is the same $SwitchMap$ support class.",
      "(In reply to Konstantin Kolinko from comment #7)\n> Reassigning to Tomcat 8 to track forward-porting of r1817901.\n+ r1820543\n\nApplied to Tomcat 8.5 in r1820546\nApplied to Tomcat 8.0 in r1820550\n\nSecurityClassLoad classes in Tomcat 9.0 do not load any anonymous inner classes. Thus there is no need for this fix in Tomcat 9."
    ],
    "creation_ts": "2009-05-17T18:32:20Z",
    "fixes": [
      47214
    ]
  },
  {
    "id": 42727,
    "summary": "CoyoteReader readLine returns null for some post request bodies that are a multiple of MAX_LINE_LENGTH in size",
    "description": "i have a webapp running on jboss-4.0.5.GA/apache-tomcat-5.5.20 that reads in \nthe http post request body and processes it.\n\ni noticed that for request bodies that didn't contain line separators and that \nhad sizes that were exact multiples of \norg.apache.catalina.connector.CoyoteReader.MAX_LINE_LENGTH (4096), i was \nreceiving null when calling org.apache.catalina.connector.CoyoteReader.readLine\n().\n\ni believe that the problem is at line 155 in \norg.apache.catalina.connector.CoyoteReader, where on the last iteration through \nthe loop, \"pos\" does equal zero and null is returned even though data has been \naggregated.\n\nhere's a command to run in cygwin to easily reproduce the problem:\nfor requestSize in 4095 4096 4097 8191 8192 8193; do dd if=/dev/zero bs=1c \ncount=$requestSize | tr '\\000' 'A' | curl --data-binary @- \nhttp://localhost:8080/DebugJboss/DebugServlet > $requestSize.txt; done;\n\noutput from directory listing (size filename):\n4095 4095.txt\n   0 4096.txt\n4097 4097.txt\n8191 8191.txt\n   0 8192.txt\n8193 8193.txt\n\nhere's the bulk of the servlet code i used to reproduce the problem:\npublic class DebugServlet extends HttpServlet {\n\tprotected void doPost(HttpServletRequest arg0, HttpServletResponse arg1)\n\t\t\tthrows ServletException, IOException {\n\t\tBufferedReader br = arg0.getReader();\n\t\tWriter writer = arg1.getWriter();\n\t\tString line = null;\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\twriter.write(line);\n\t\t}\n\t\twriter.close();\n\t\tbr.close();\n\t}\n}\n\nit appears that a workaround is to wrap the requests's input stream instead:\nBufferedReader br = new BufferedReader(new InputStreamReader(arg0.getInputStream\n()));",
    "comments": [
      "Created attachment 20405\nChecks aggregator==null before returning null\n\nI attached a patch to check that aggregator==null before returning null.",
      "*** Bug 44060 has been marked as a duplicate of this bug. ***",
      "I have reproduce similar behavior. \nI cannot read anything from ServletRequest.getInputStream or getReader for\nTomcat ver 5.5.15+.\nAny idea?\n\nRegards\nMladen",
      "Any chance of getting this fix in tomcat 5.5 ? \n\nAfter a few hours of debugging my application, i finally discovered this bug was the root cause. It's still there in Tomcat 5.5.26.",
      "Thanks for the patch. It has been applied to trunk and proposed for 6.0.x and 5.5.x.",
      "This has been fixed in 5.5.x and will be included in 5.5.27 onwards."
    ],
    "creation_ts": "2007-06-23T06:29:58Z",
    "fixes": [
      42727
    ]
  },
  {
    "id": 65995,
    "summary": "Change JavaScript MIME type from application/javascript to text/javascript",
    "description": "The default MIME type for JavaScript in Tomcat is application/javascript. This has been obsoleted and should be replaced with text/javascript.\n\nRef.:\nhttps://datatracker.ietf.org/doc/draft-ietf-dispatch-javascript-mjs/17/\nhttps://www.iana.org/assignments/media-types/media-types.xhtml#application",
    "comments": [
      "(In reply to Alexander Veit from comment #0)\n> Ref.:\n> [1] https://datatracker.ietf.org/doc/draft-ietf-dispatch-javascript-mjs/17/\n> [2] https://www.iana.org/assignments/media-types/media-types.xhtml#application\n\nSome notes.\n\n1. The IETF document [1] is a draft, but looking at its \"History\" [3] tab, it has been approved.\n\n> 2022-03-02 - IESG has approved the document\n> 2022-03-02 - IESG state changed to Approved-announcement sent\n\nThe document is currently in a queue [4] to be published.\n\n[3] https://datatracker.ietf.org/doc/draft-ietf-dispatch-javascript-mjs/history/\n[4] https://www.rfc-editor.org/current_queue.php#draft-ietf-dispatch-javascript-mjs\n\n2. The IETF Draft mentions (in \"6.\") that the HTML specification already uses \"text/javascript\" as the default media type.\n\nThat essentially refers section \"4.12.1.1 Processing model\" of the HTML Specification. [5]\n\n[5] https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\n\n3. Looking at the HTML specification, one can see the following text in section \"4.12.1.2 Scripting languages\" [6]:\n\n> Servers should use text/javascript for JavaScript resources.\n\n[6] https://html.spec.whatwg.org/multipage/scripting.html#scriptingLanguages\n\n\n4. The IETF Draft also mentions a new file extension \".mjs\" is being registered.\n\n\n5. Apache Tomcat generally follows Apache HTTP Server in its mime-type mappings.\n\nOne can see that the configuration file \"conf/mime.types\" in Apache HTTP Server project has not been updated yet.\n\nBoth in the trunk version [7] (last updated in December 2020), and on the 2.4.x branch [8] (last updated 4 years ago) as well.\n\n[7] https://svn.apache.org/viewvc/httpd/httpd/trunk/docs/conf/\n[8] https://svn.apache.org/viewvc/httpd/httpd/branches/2.4.x/docs/conf/\n\n\n6. Personally, it is odd to me to read that \"text/javascript\" is more popular than \"application/javascript\", despite RFC4329 [9] that suggested otherwise, despite all popularity of Apache HTTP Server and \"application/javascript\" being the default configuration.\n\nMy guess is that \"text/javascript\" is popular as a value of the type attribute of <script> tag of HTML (not only thanks to HTML 5 specification, but the previous HTML 4 as well [10]), but hardly anyone cares what Content-Type is used when sending a js file over the wire.\n\n[9] https://datatracker.ietf.org/doc/html/rfc4329\n[10] https://www.w3.org/TR/html401/interact/scripts.html\n\n\nOverall, I see that there are grounds to make the change. I would like to wait for the official publication of the document by IETF, and RFC4329 [9] being declared as obsolete.\n\nAlso it looks that we can add a mime-mapping for \"mjs\" to be \"text/javascript\" at the same time.",
      "I agree we should wait for publication of that standard to change the default mapping. Anyone can change this themselves at any point, of course.\n\nRFC 4329 specifically (a) defines text/javascript and text/ecmascript and (b) immediately obsoletes them[1]. LOL.\n\nI think text/javascript is superior to application/javascript because application/* MIME types are not supposed to have charset parameters.\n\nOn the other hand, Mozilla says serving with a charset parameter is practically prohibited[2].\n\nSo I guess we go back to BOMs and <script charset=\"\"> which is totally stupid.\n\n[1] https://www.rfc-editor.org/rfc/rfc4329.html#section-3\n[2] https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#textjavascript",
      "Moving this to NEEDINFO as it seems to best reflect the current state of waiting for the RFC to be published.",
      "Fixed in:\n- 11.0.x for 11.0.0-M5 onwards\n- 10.1.x for 10.1.8 onwards\n-  9.0.x for  9.0.74 onwards\n-  8.5.x for  8.5.88 onwards",
      "This change is also in accordance with RFC 9239:\n\n'IANA has added the note \"OBSOLETED in favor of text/javascript\"\nto all registrations except \"text/javascript\"; that is, this note\nhas been added to the \"text/ecmascript\", \"application/javascript\",\nand \"application/ecmascript\" registrations.'\n\nhttps://www.rfc-editor.org/rfc/rfc9239.html",
      "Hello!\n\nI'm wondering why this change also breaks existing applications setting Content-Type to 'application/javascript'. I'm totally agree that Tomcat should not use obsolete mime types.\n\nI can understand if Tomcat prints a warning about obsolete mime type, but in our case Tomcat returns http response code 406 and not returning response body.\n\nFor us it not critical, we can update our code. But for some other people this can trigger more problems."
    ],
    "creation_ts": "2022-04-06T13:48:33Z",
    "fixes": [
      65995
    ]
  },
  {
    "id": 42515,
    "summary": "API signature discrepancies in el-api",
    "description": "The el-api doesn't exactly match the API specification for JEE5 javax.el.\n\n\nSpecifically, the following method signatures:\n\n- javax.el.BeanELResolver$BeanProperties\npublic final javax.el.BeanELResolver$BeanProperty getBeanProperty(java.lang.String)\n\n- javax.el.BeanELResolver$BeanProperty\npublic final java.lang.Class getPropertyType()\n\n- javax.el.BeanELResolver$BeanProperty\npublic final java.lang.reflect.Method getReadMethod()\n\n- javax.el.BeanELResolver$BeanProperty\npublic final java.lang.reflect.Method getWriteMethod()\n\n- javax.el.ResourceBundleELResolver\npublic java.util.Iterator getFeatureDescriptors(javax.el.ELContext,java.lang.Object)\n\n\nshould replace these method signatures :\n\n- javax.el.BeanELResolver$BeanProperties\npublic final java.lang.Class<?> getType()\n\n- javax.el.BeanELResolver$BeanProperties\npublic final javax.el.BeanELResolver$BeanProperty\nget(javax.el.ELContext,java.lang.String)\n\n- javax.el.BeanELResolver$BeanProperty\npublic final java.lang.Class<?> getType()\n\n- javax.el.BeanELResolver$BeanProperty\nmethod  public final java.lang.reflect.Method read(javax.el.ELContext)\n\n- javax.el.BeanELResolver$BeanProperty\npublic final java.lang.reflect.Method write(javax.el.ELContext)\n\n- javax.el.ResourceBundleELResolver:\npublic java.util.Iterator<java.beans.FeatureDescriptor>\ngetFeatureDescriptors(javax.el.ELContext,java.lang.Object)",
    "comments": [
      "Created attachment 20272\npatch for el-api method signature discrepancies\n\nthe patch also contains a couple of changes that were produced while testing\ntomcat as the servlet container in geronimo 2.0.  if those non-api changes\nshould be separated from this patch then let me know.",
      "yes, please separate out the \"signature\" fixes from other changes",
      "Created attachment 20281\npatch containing only \"signature\" fixes, as requested\n\nobsoletes previous patch.",
      "*** Bug 42056 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2007-05-24T12:11:58Z",
    "fixes": [
      42515
    ]
  },
  {
    "id": 66023,
    "summary": "Getting requestbody as inputstream fails when upgrading to h2c",
    "description": "See here\nhttps://github.com/bclozel/h2c-tomcat/tree/spring-boot-30771\nfor a sample app demonstrating the issue. (It's a pure Tomcat application - no Spring Boot)\n\nSummary: when processing a POST request that asks for an h2c-upgrade, reading the requestbody as an inputstream results in a NullPointerException.",
    "comments": [
      "An upgrade with a request body is clearly not supposed to happen with Tomcat. It's actually likely not allowed since after sending the 101 back, the request is supposed to be of the new protocol, so the request \"body\" will have to be HTTP/2. Clearly that's not possible (if the upgrade does not happen, for example) so it is correct that this is not allowed.\n\nThe likely solution would be to avoid upgrading when there's a request body.",
      "Also, see https://bz.apache.org/bugzilla/show_bug.cgi?id=65726 which fixed a similar issue in the past.",
      "My reading of RFC 7230 is that when using upgrade the entire request is sent via HTTP/1.1, the upgrade happens and then the response is returned via the upgraded protocol.\n\nThis is going to require buffering the request body so it is going to be subject to the maxSavePostSize limit.\n\nI would have expected this to 'just work' after the fix for bug 65726. I'll take a look at what is going on.",
      "Ok, the spec is not as clear as I would expect.\n\nOTOH, upgrading is optional, and this has some resource use and could make some legitimate POSTs to fail (if they are over maxSavePostSize). Is it really worth it ? Shouldn't we simply skip upgrading if there's a request body ?",
      "It doesn't work because, although a SavedRequestInputFilter is set using setInputBuffer on the Request, the available() method uses an action to check the internal buffer, which now goes to the new processor (for HTTP/2 it's a StreamProcessor) while only Http11Processor has the correct behavior for the callback. So some additional \"fix\" is needed, maybe intercept the callback in Request.action to provide the correct result for available when a SavedRequestInputFilter is set (rather than delegate to the hook as usual). However, I don't like the fix and there might be other similar cases.\n\nSince overall this buffering may be very inefficient, I would prefer choosing to not upgrade when a request body is present.",
      "Interesting.\n\nI expanded the current upgrade with request body tests to use GET and POST and they still passed. Switching to a Reader triggered the issue because that triggers a call to available() and - as R\u00e9my pointed out - that is where things go wrong.\n\nI agree with R\u00e9my's comments on efficiency but I want to see what a patch to fix this would look like before deciding on whether I think we should support this or not. My starting point is that I would like to support it if practical.",
      "I've committed a fix for 10.1.x. I'll give folks a chance to review it before I think about back-porting it.",
      "Fixed in:\n- 10.1.x for 10.1.0-M15 onwards\n- 10.0.x for 10.0.21 onwards\n- 9.0.x for 9.0.63 onwards\n- 8.5.x for 8.5.79 onwards"
    ],
    "creation_ts": "2022-04-22T07:29:34Z",
    "fixes": [
      66023
    ]
  },
  {
    "id": 66325,
    "summary": "NestedState concurrency issue",
    "description": "We faced a jsp exception because the nestedState object is not properly synchronized. Even though the line triggering the exception is commented with \"Should never happen\", it happened to us making the page break.\n\nThe lines involved are:\n\n<c:set var=\"aName\">\n   <c:out value=\"${someVariable.stream().filter(i -> i.getEvent() == 'a-value').map(e -> e.getAsJson()).findFirst().orElse('')}\" />\n</c:set>\n\nThe error is:\n\nSEVERE: Servlet.service() for servlet [bestsecret] in context with path [] threw exception [An exception occurred processing [/...] at line ...\n\n...\njava.lang.IllegalStateException: Nested state may only be set once\n\tat org.apache.el.parser.AstLambdaExpression.setNestedState(AstLambdaExpression.java:123)\n\tat org.apache.el.parser.AstLambdaExpression.getNestedState(AstLambdaExpression.java:114)\n\tat org.apache.el.parser.AstLambdaExpression.getValue(AstLambdaExpression.java:43)\n\tat org.apache.el.parser.AstMethodParameters.getParameters(AstMethodParameters.java:33)\n\tat org.apache.el.parser.AstValue.getValue(AstValue.java:157)\n\tat org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:189)\n\nLines with the issue: https://github.com/apache/tomcat/blob/main/java/org/apache/el/parser/AstLambdaExpression.java#L112-L124\n\nThe issue IMO is that between the check at line 113 and the check at line 121, the nestedState is set, so the execution enters in the if triggering the unexpected exception, breaking the whole JSP page. The blocks should be synchronized on the object or any other measure taken.\n\nPlease fix it as you consider the better.",
    "comments": [
      "Thanks for the report.\n\nThe NestedState instance shouldn't be part of the AstLambdaExpression as expressions are cached (parsing is expensive).\n\nIt looks like moving the NestedState to the EvaluationContext should fix this. I'm looking at that now.",
      "Unfortunately the fix isn't going to be that simple. Still exploring options.",
      "Fixed in:\n- main\n- 10.1.x for 10.1.2 onwards\n-  9.0.x for  9.0.69 onwards\n-  8.5.x for  8.5.84 onwards\n\nMoving the state to EvaluationContext was the correct fix - just not in the way I had originally thought."
    ],
    "creation_ts": "2022-10-26T10:57:59Z",
    "fixes": [
      66325
    ]
  },
  {
    "id": 65806,
    "summary": "When running in FIPS mode on openjdk-17, SessionIdGeneratorBase.java throws SEVERE log messages",
    "description": "Unless one changes default configuration, starting catalina in a fips-enabled machine with jdk-17 print 2 SEVERE errors in catalina.out per context initialized.\n\nThe messages are generated in SessionIdGeneratorBase.java, and are caused by the fact that SHA1PRNG is missing in jdk-17.\n\nThe messages are confusing, but harmless. The class will use the default SecureRandom (PKCS11) when SHA1PRNG is not found.\n\nWorkaround:\n\n* For webapps that don't define a '<Context><Manager>', one can add '<Manager secureRandomAlgorithm=\"\"/>' to conf/context.xml. This works for ROOT and examples in a default install\n* For webapps that define a '<Context><Manager>', set 'secureRandomAlgorithm=\"\"' in META-INF/context.xml This works for manager and host-manager in a default install.\n\nThe log spam could be managed by checking on initialization of the class if the initial value works, and special-casing it from SHA1PRNG to \"\" (maybe printing a warning) in case it doesn't.\n\nAlso, I think the messages should be scaled down from SEVERE to INFO when the secureRandomAlgorithm value is SHA1PRNG, FIPS is enabled and the java version is jdk-17.",
    "comments": [
      "If Tomcat could determine that FIPS is enabled then it could switch to \"\" without even trying SHA1PRNG first.\n\nUnfortunately, I don't see a way to do that as FIPS support isn't part of the standard JRE (that also makes testing any solution tricky).\n\nI think testing SHA1PRNG on class init is the way to go.\n\nLogging at SEVERE seemed reasonable originally as SHA1PRNG should always be supported but if FIPS changes that then a single WARNING does seem more appropriate.",
      "Fixed in:\n- 10.1.x for 10.1.0-M11 onwards\n- 10.0.x for 10.0.17 onwards\n- 9.0.x for 9.0.59 onwards\n- 8.5.x for 8.5.76 onwards\n\nTomcat now falls back to the platform default with a single log message at WARNING level if the default (SHA1PRNG) is not available.\n\nExplicit configuration of SHA1PRNG when it is not available will now trigger one SEVERE log message per web application."
    ],
    "creation_ts": "2022-01-17T08:33:55Z",
    "fixes": [
      65806
    ]
  },
  {
    "id": 37458,
    "summary": "Datarace on org.apache.catalina.loader.WebappClassLoader",
    "description": "In findClassInternal, it is possible that entry.manifest is set to null by \nanother thread right before calling definePackage(packageName, entry.manifest, \nentry.codeBase).",
    "comments": [
      "Suggested fix?",
      "(In reply to comment #1)\n> Suggested fix?\n\nThis is one possible scence to cause an exeption: suppose two threads t1 and t2,\nboth are trying to load a same new class. t1 goes first and hit the line 1630,\ndefinePackage(packageName, entry.manifest, entry.codeBase), and stops before the\nmethod call. Then t2 goes ahead and it can hit the same method call too since\nthe entry.manifest is still not null at that time. And then t2 or t1 continues\nand loads the class and sets entry.manifest at the end. After this, when the\nother thread tries to finish the call to definePackage, an exception will be\nthrown since entry.manifest and entry.codebase have become null now.\n\nI haven't got any good solution so far. One could use a huge sync block to\nprotect the test on entry.manifest and the corresponding later change, but that\nwould make it inefficient. Another alternative is to catch the nullpointer\nexception thrown by definePackage and ignore it if possible.",
      "Fixed in SVN and will be included in 5.5.21 onwards.",
      "Is it possible that the fix has been regressed by the modifications in revision 510801, as the block is now synchronised on \"this\" rather than \"entry\"?\n\nWe have seen what appears to be the same bug occur when using version 5.5.23. The start of the stacktrace we see is\n\njava.lang.NullPointerException\n        at java.lang.Package.isSealed(Package.java:179)\n        at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:1800)\n        at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:869)\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1322)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:299)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n        at java.lang.Class.forName0(Native Method)\n        at java.lang.Class.forName(Class.java:242)\n        at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:430)\n        at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:165)\n        at java.rmi.server.RMIClassLoader$2.loadClass(RMIClassLoader.java:620)\n        at org.objectweb.jonas.server.RemoteClassLoaderSpi.loadClass(RemoteClassLoaderSpi.java:75)\n        at java.rmi.server.RMIClassLoader.loadClass(RMIClassLoader.java:247)\n        at sun.rmi.server.MarshalInputStream.resolveClass(MarshalInputStream.java:197)\n        at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1544)\n        at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1466)\n ...",
      "Re-opening so I remember to look at this.",
      "There are a couple of odd things about your stack trace.\n\n1. For 5.5.23, line 1800 of WebappClassLoader doesn't call Package.isSealed(). It is around 30 lines later.\n\n2. I don't understand why the NPE is thrown from within java.lang.Package. If pkg was null, I'd expect to see the NPE in WebappClassLoader\n\n3. I have checked the source for 1.4, 1.5 and 1.6 and don't see how Package.isSealed() could throw a NPE.\n\nI have reviewed the patch you referred to and I do not see a code path by which this bug could re-appear.\n\nYou may have found a new bug, in which case a new issue is in order, but the oddities above make me think that the root cause is more likely some other factor in your configuration.\n\nThe best place to get help on this is the users list. Before posting please try a clean 5.5.26 build and also post the OS and JDK you are using. If the discussion there concludes there is a bug, please create a new issue to track it.",
      "(In reply to comment #6)\n> There are a couple of odd things about your stack trace.\n> \n> 1. For 5.5.23, line 1800 of WebappClassLoader doesn't call Package.isSealed().\n> It is around 30 lines later.\n> \nI agree that this seems odd.  I installed a fresh download of 5.5.23 and it started reporting the error as \njava.lang.NullPointerException\n        at java.lang.Package.isSealed(Package.java:179)\n        at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:1833)\n        at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:873)\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1326)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:299)\n...\n\nI also tried a fresh install of 5.5.26 and the line numbers changed to \njava.lang.NullPointerException\n        at java.lang.Package.isSealed(Package.java:179)\n        at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:1839)\n        at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:875)\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1330)\n\n\n> 2. I don't understand why the NPE is thrown from within java.lang.Package. If\n> pkg was null, I'd expect to see the NPE in WebappClassLoader\n> \nIt's not pkg that is null, it is entry.codeBase which is null. My fault for posting incorrect line numbers.\n\n> 3. I have checked the source for 1.4, 1.5 and 1.6 and don't see how\n> Package.isSealed() could throw a NPE.\n> \nIt is not the call to Package.isSealed() but the call to Package.isSealed(URL url) which causes the problem: it throws an NPE trying to return \"url.equals(sealBase)\".\n\n> I have reviewed the patch you referred to and I do not see a code path by which\n> this bug could re-appear.\n> \nIn the initial fix for this bug (revision 469360), this section of code was included in a block which was synchronised on \"entry\" which contained a smaller block synchronised on \"this\".  In revision 510801 the synchronisation was changed to synchronise the outer block on \"this\", with no synchronisation on \"entry\".  The problem seems to me to be that although \"entry\" is a local variable, the object it references is obtained externally so two different threads are able to access the same object, and thus one thread is able to set entry.codeBase to null (at line 1853 in 5.5.23) after the other thread has entered the block and committed itself to calling pkg.isSealed(entry.codeBase).\n\n> The best place to get help on this is the users list. Before posting please try\n> a clean 5.5.26 build and also post the OS and JDK you are using. If the\n> discussion there concludes there is a bug, please create a new issue to track\n> it.\n> \nSorry for replying directly here but I thought it was appropriate to reply directly to your comments.  As I say, I see this with a clean 5.5.26 build, running in CentOS release 4.6 (Final) under Java HotSpot(TM) Client VM (build 1.5.0_14-b03, mixed mode, sharing).",
      "I've looked at the WebappClassLoader source and I can't see how one thread could set entry.codeBase to null whilst another thread calls Package.isSealed since both calls are inside the sync block.\n\nThe only way I could see entry.codeBase being null was if getCanonicalFile() throws an IOE (line 2230 in the latest 5.5.x code).\n\nI notice you are using RMI. I wonder if this is a factor since there does not appear to be any other reports of this issue. I have a vague recollection of issues with RMI and Tomcat installed in a path with spaces. Might this be affecting you?\n\nHow repeatable is this? A simple test case that demonstrates the issue would help significantly.\n\nFinally, where does JOnAS fit in to all of this. Given the lack of duplicate reports, I wonder if this might be an integration issue of some sort?",
      "Created attachment 23066\npatch for WebappClassLoader class of tc6.0.x\n\nI think the issue is caused by missing (entry.loadedClass == null) inside the synchronized block. (Remember the double-checked locking pattern?)\n\nI also wonder if there is a cause for (entry.loadedClass == null) check later in the synchronized block (line 1845, i.e. before calling defineClass()) other than this very bug.\n\nThus the patch. It is against tc6.0.x\n\nI do not remember whether pointer assignments are atomic in current Java, and thus whether it is safe to test for (entry.loadedClass) elsewhere in the code.",
      "Huh, I now have a TestCase that reproduces the issue. I see the same exception as in comment #4.\n\nNo wonder, that it is rare. To encounter this the following conditions must be met:\n1. A SecurityManager should be present\n2. The class that you are loading has to be in a sealed package.\n3. It is a race condition. Several iterations in the TestCase are required.",
      "Created attachment 23067\nTest case file 1: TestWebappClassLoader class.",
      "Created attachment 23068\nTest case file 2: sealed.jar resource file.",
      "To reproduce:\n1. Place TestWebappClassLoader.java and sealed.jar into package org.apache.catalina.loader of TC 6.0 test sources.\n\n2. Use JUnit to run the test case.\n\n3. The following exception is observed:\n\n...\nCaused by: java.lang.NullPointerException\n\tat java.lang.Package.isSealed(Package.java:181)\n\tat org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:1832)\n\tat org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:890)\n\tat org.apache.catalina.loader.TestWebappClassLoader$FindClassThread.run(TestWebappClassLoader.java:48)",
      "Thanks for the patch and your analysis. That makes perfect sense.\n\nI have applied your patch to trunk and proposed it for 6.0.x and 5.5.x.\n\nThanks again.",
      "This has been fixed in 6.0.x and will be included in 6.0.19 onwards.",
      "This has been fixed in 5.5.x and will be included in 5.5.28 onwards."
    ],
    "creation_ts": "2005-11-10T21:34:17Z",
    "fixes": [
      37458
    ]
  },
  {
    "id": 48863,
    "summary": "Log directory misconfiguration for class loaders",
    "description": "When developing our tomcat applications with eclipse, doing out-rebuild/sysdeo plugin and have the class files written into TOMCAT_HOME/common/classes is an effective approach.\n\nFor manageability reasons, we need to split our code among several eclipse projects. The problem is if both are configured to place their .class files in TOMCAT_HOME/common/classes that when one project rebuilds, it will wipe the class files of the other one.\n\nA great efficiency gain for the development of multiple projects therefore would be to be able to specify additional classes folders in server.xml to be added to the corresponding class-loader",
    "comments": [
      "Isn't that what you can already do using the loader entries in conf/catalina.properties?",
      "This is already supported. See the catalina.properties file.",
      "unfortunately, the com.sysdeo.eclipse.tomcat_3.2.1 ignores this \"common.loader\" attribute of catalina.properties at least with tomcat 5.5",
      "Created attachment 25088\npatchApacheTomcat48863.txt\n\noops, sysdeo works ;)\n\nbut a typo is not seen whatsoever\n\nThe attached patch helps users find such a configuration error.\n\nPls \n1) re-open this bug\n2) re-apply\n3) consider even using std-out for this error",
      "see also Bug 48870",
      "Thanks for the patch. I applied a variation to 7.0.x (will be in 7.0.9 onwards) and proposed it for 6.0.x",
      "Regarding the patch that is applied to tc7 at r1073047 and is currently proposed for 6.0.x:\n\n1) The calls to ClassLoaderFactory#validateFile(file, type) pass canonical path for DIR and JAR, but not for GLOB.  I mean, the following change to be done, for consistency: (in trunk)\n\nIndex: java/org/apache/catalina/startup/ClassLoaderFactory.java\n===================================================================\n--- java/org/apache/catalina/startup/ClassLoaderFactory.java\t(revision 1075098)\n+++ java/org/apache/catalina/startup/ClassLoaderFactory.java\t(working copy)\n@@ -187,6 +187,7 @@\n                     set.add(url);\n                 } else if (repository.getType() == RepositoryType.GLOB) {\n                     File directory=new File(repository.getLocation());\n+                    directory = new File(directory.getCanonicalPath());\n                     if (!validateFile(directory, RepositoryType.GLOB)) {\n                         continue;\n                     }\n\nBTW, with the above change the calls to file.getAbsolutePath() inside of #validateFile() become unnecessary.\n\n2) The following check in ClassLoaderFactory#validateFile(file, type) assumes that Bootstrap.getCatalinaBase() is an absolute (and canonical, because file is canonical) path. But that is not guaranteed to be so:\n\nif (!Bootstrap.getCatalinaHome().equals(       \n                Bootstrap.getCatalinaBase()) &&\n        file.getAbsolutePath().startsWith(     \n                Bootstrap.getCatalinaBase())) {",
      "Thanks for the review. Patch updated in 7.0.x for 7.0.9 and proposal for 6.0.x also updated.",
      "Fixed in 6.0.x and will be in 6.0.33 onwards."
    ],
    "creation_ts": "2010-03-05T09:04:04Z",
    "fixes": [
      48863
    ]
  },
  {
    "id": 69370,
    "summary": "DefaultServlet's HTML listing uses incorrect labels",
    "description": "When you turn on the listing with the DefaultServlet references all resources as \"Filename\" which is wrong/confusing since you have have directories and files. It should be reduced just to \"File\" like with mod_autoindex. Moreover, the keys in the LocalStrings.properties are unscoped and confusing as well:\ndirectory.filename=Filename\ndirectory.lastModified=Last Modified\ndirectory.parent=Up To [{0}]\ndirectory.size=Size\ndirectory.title=Directory Listing For [{0}]\n\nI would expect them to be:\ndefaultServlet.resource.name=Name\ndefaultServlet.resource.lastModified=Last Modified\ndefaultServlet.directory.parent=Up To [{0}]\ndefaultServlet.resource.size=Size\ndefaultServlet.directory.title=Directory Listing For [{0}]",
    "comments": [
      "By listing I refer to the HTML-rendered output.",
      "I recommend not changing the strings names, it's basically a waste of time.\n\nOther than that, I doubt anyone has any interest on improving the directory listings anymore (since they are considered a security issue), but if you find that useful go ahead. The issues should be \"enhancement\" however.",
      "(In reply to Remy Maucherat from comment #2)\n> I recommend not changing the strings names, it's basically a waste of time.\n> \n> Other than that, I doubt anyone has any interest on improving the directory\n> listings anymore (since they are considered a security issue), but if you\n> find that useful go ahead. The issues should be \"enhancement\" however.\n\nIf you deliberately enable it on a subpath only, then I don't see a problem especially when all requests requires proper authnz.\n\nWill work on a patch.",
      "Fixed in:\n- main for 12.0.0-M1 and onwards\n- 11.0.x for 11.0.1 and onwards\n- 10.1.x for 10.1.32 and onwards\n- 9.0.x for 9.0.97 and onwards"
    ],
    "creation_ts": "2024-10-03T16:01:48Z",
    "fixes": [
      69370
    ]
  },
  {
    "id": 44268,
    "summary": "Multiple registrations of same ServletContextListener class not possible",
    "description": "When I register the same class implementing ServletContextListener twice or more\nits' contextInitialized methods only gets called once.\n\nThe servlet specifications (2.4 and 2.5) say the conforming container has to \ncall the listeners in the same order they are registered in the deployment\ndescriptor.\nThe case that one listener class is registered twice is not mentioned\nexplicitly in the specification, though.\n\nExample:\n<listener>\n  <listener-class>test.ServletContextListener1</listener-class>\n</listener>\n<listener>\n  <listener-class>test.ServletContextListener2</listener-class>\n</listener>\n<listener>\n  <listener-class>test.ServletContextListener1</listener-class>\n</listener>\n\ntest.ServletContextListener1 and test.ServletContextListener2 get called,\nbut test.ServletContextListener1 does not get called again.\n\nApache Tomcat 5.5.25 has the same bug.",
    "comments": [
      "This is explicitly not allowed as a fix for\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=3770\n\nThe change is here http://svn.apache.org/viewvc?view=rev&revision=287588\n\nThe problem is that it is hard to distinguish between when multiple listeners is\na bug (ie 3770) and when it is intentional (this issue).\n\nThere are a few places where the spec could be read as only expecting one\ninstance of each listener class per webapp but it is far from clear.\n\nI am going to resolve this as WONTFIX since working around this issue is easier\nthan trying working around 3770.",
      "Thanks a lot for your fast reply.\n\nYes I already recognized the spec is not that clear on this issue.\nCould you at least print a warning log message if a listener is registered more\nthan once?",
      "A warning seems reasonable. Re-opening and changing this to an enhancement.\n\nI've committed a fix to trunk and proposed it for 6.0.x. It probably won't make\nthe 6.0.16 release but should make the following one.",
      "This did make it into 6.0.16.",
      "Thanks a lot Mark!\nThis will definitely help the next one running into this.",
      "When upgrading our developer boxes to tomcat 6.0.16, the following message is\nnow appearing for many of the listeners that we use. Each of our webapps has one\nand only one listener defined of each class, but we are now getting the \"The\nlistener {0} is already configured for this context. The duplicate definition\nhas been ignored.\"\n \nSo, what's going on here? Should I just ignore these messages? Why are they\nshowing up when it's clear that there are no duplicate definitions? Where else\ncould these listener definitions be besides in the webapp's web.xml? Should I\nopen a new ticket in Bugzilla? Or should this ticket be reopened?",
      "This enhancement uncovered a bug where all listeners in web.xml were registered\ntwice. See bug 44423."
    ],
    "creation_ts": "2008-01-18T08:42:18Z",
    "fixes": [
      44268
    ]
  },
  {
    "id": 64192,
    "summary": "Bug in Tomcat HTTP2 POST - with big payload",
    "description": "Created attachment 37056\ndebug log and exception\n\nI found a probably bug with http2 handling in tomcat.\n\nWhen I sending HTTP2 POST request with big payload I see below exception.\nThis request is OK when I use Undertow for example or Tomcat with HTTP1.1\n\nI prepared test where you can recreate this problem.\nHere is link https://github.com/zulk666/demo-http2\nTo start the demo you have to run com.example.demo.DemoApplication first\nthen run test DemoApplicationTests.\n\nException which I received is \norg.apache.coyote.http2.ConnectionException: Invalid frame type [HEADERS]\n\n\nI tested also with curl, Chrome and Firefox and result is the same as in test.",
    "comments": [
      "If you set useAsyncIO=\"false\" on the Connector this should start working.\n\nWe need to look into where things are going wrong in the asynIO code. I've narrowed it down to reading one less byte than is actually present. This triggers an off-by-one error when reading the next frame which causes it to be read as a HEADERS frame rather than a SETIINGS frame.",
      "I didn't expect a real problem so I hadn't really investigated, so thanks for finding that out.\n\nThat odd 16383 payload size in the logs is hard to miss. That's where that off by one would occur, but I haven't found out why.",
      "I think that might be a red herring. I think it is an artefact of client buffering. I've seen similar behaviour with Chrome.\n\nI'm currently looking at SecureNioChannel.read(ByteBuffer,int,int). I've been adding various debug logging and I think I have tracked it down to this method. Still looking for a root cause.",
      "There is a bug there (in the number of bytes returned) but not the root cause of this issue. I have a quick fix for SecureNioChannel that I'll look at refining once I've tracked down the root cause.",
      "(In reply to Mark Thomas from comment #4)\n> There is a bug there (in the number of bytes returned) but not the root\n> cause of this issue. I have a quick fix for SecureNioChannel that I'll look\n> at refining once I've tracked down the root cause.\n\nI added a test, and I cannot reproduce the discrepancy SecureNioChannel.read using it (the read count returned matches the amount of data that is added into the buffers). My test also fails to reproduce the POST issue described so far, despite appearing identical. I do get some flow control errors though (non async, mostly). So not a very good result so far ...",
      "I think I have got to the bottom of this.\n\nIt relates to reading HTTP/2 frames using asyncIO over TLS.\n\nTLS sometimes needs to decrypt more data that the caller requests. This is because data is decrypted in 'blocks' and the call may only have requested part of the next block.\n\nThis excess data is placed in the read buffer so it is available for the next read.\n\nHTTP/2 async reads HTTP/2 frames using a gathering read. It uses one ByteBuffer for the 9 byte header and another for the frame payload. At this point the size of the frame payload is unknown so a bufter is used that is big enough for the largest frame.\n\nIt is possible that more data is read into the payload buffer than is required. This excess data is returned to the read buffer so it is available for the next read.\n\nThe problem is that we have two components writing to the read buffer and the code that returns this data assumes the read buffer is empty.\n\nConsider the following (thinking purely in terms of decrypted data):\n- There are 4 TLS \"blocks\" (A, B, C and D) of data in the socket input buffer\n- HTTP/2 async triggers a read\n- The payload buffer is big enough to hold all of blocks A and B and half of block C (C1)\n- The other half of C (C2) is placed into the read buffer\n- The HTTP/2 parser only needed block A so block B and C1 are returned to the read buffer\n- The order of data in the read buffer is now \"C2, B, C1\". It should be \"B, C1, C2\"\n\nIn this instance, \"B C1\" is a single byte - hence why it looked like an off-by-one error. But it isn't.\n\nReturning the correct number of bytes for the TLS read is a separate issue.\n\nIt is also the case that, if the TLS code puts some data into the read buffer, it will try and put as much as possible into the read buffer. I think this needs to change else there is a risk that the amount of data returned by the HTTP/2 parser will be in excess of the space available in the read buffer.\n\nI'm working on a fix. I need to be careful as fixing one of these issues may be sufficient to mask the others and I want to try and avoid that.",
      "Thanks for the test case. Being able to recreate the issue in an environment I can debug was a huge help.\n\nFixed in:\n- master for 10.0.0-M2 onwards\n- 9.0.x for 9.0.32 onwards\n\n8.5.x and earlier are not affected.\n\nI made the following changes:\na) fixed the case of returning data to the read buffer when it was non-empty\nb) stopped TLS reads once they started to overflow into the readBuffer\nc) corrected the value returned (bytes read) by the gathering TLS read\n\nFixing either a) or b) was sufficient for the test case to pass because the additional TLS reads from b) were what was causing the read buffer to be non-empty.\n\nIt may be the case that either a) or b) is sufficient to fix all potential issues but I opted to fix both.",
      "Perfect, I did not get anywhere with my test case [I really don't like working with SB on Tomcat dev, so ...], I still don't understand why it failed to reproduce the issue so feel free to improve it as needed. Heaving a heavy HTTP/2 POST test with TLS cannot hurt apparently, that's the kind of issue that will keep coming back otherwise.",
      "The test fails for me if I remove the fixes I made for this issue so I think all is well. I just made a minor tweak to prevent the test hanging on failure.",
      "Thanks for quick fix.\nThis error has caused many strange problems for my application since we use http2."
    ],
    "creation_ts": "2020-03-03T11:48:46Z",
    "fixes": [
      64192
    ]
  },
  {
    "id": 65577,
    "summary": "Intermittent AccessControlException using NIO2 with security manager enabled",
    "description": "We are doing some testing prior to upgrading from 8.5.66 to 8.5.70. When we configure a SSL/TLS connector using Nio2 and run Tomcat with Security Manger enabled we are getting intermittent java.security.AccessControlException errors when accessing the default Tomcat root, e.g. https://hostname:8443/\n\nWe have observed the issue using Oracle Java 1.8.0_251, 1.8.0_301 and 11.0.8 2020-07-14 LTS on Windows Server 2019 and RedHat Linux 7.\n\nWhen we change the connector configuration to use org.apache.coyote.http11.Http11NioProtocol the errors are not present.\n\nExample connector configuration\n----------------\n\n    <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11Nio2Protocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\">\n        <SSLHostConfig>\n            <Certificate certificateKeystoreFile=\"I:\\tomcat-win\\8.5.70\\apache-tomcat-8.5.70\\cert\\tomcat.jks\"\n                         certificateKeystorePassword=\"xxxxx\"\n                         type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\nThe catalina.policy is the default one which comes with the 8.5.70 release\n\nStartup command:\n\n.\\catalina.bat start -security\n\nExample error message\n--------------------\n\n16-Sep-2021 12:38:11.824 SEVERE [https-jsse-nio2-8443-exec-4] org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.doRun Error running socket processor\n        java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.org.apache.tomcat.util.net\")\n                at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)\n                at java.security.AccessController.checkPermission(AccessController.java:886)\n                at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\n                at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)\n                at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:335)\n                at java.lang.ClassLoader.loadClass(ClassLoader.java:405)\n                at java.lang.ClassLoader.loadClass(ClassLoader.java:351)\n                at org.apache.tomcat.util.net.SecureNio2Channel.processSNI(SecureNio2Channel.java:387)\n                at org.apache.tomcat.util.net.SecureNio2Channel.handshakeInternal(SecureNio2Channel.java:231)\n                at org.apache.tomcat.util.net.SecureNio2Channel.handshake(SecureNio2Channel.java:222)\n                at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.doRun(Nio2Endpoint.java:1593)\n                at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n                at org.apache.tomcat.util.net.AbstractEndpoint.processSocket(AbstractEndpoint.java:1111)\n                at org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler.completed(SecureNio2Channel.java:104)\n                at org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler.completed(SecureNio2Channel.java:97)\n                at sun.nio.ch.Invoker.invokeUnchecked(Invoker.java:126)\n                at sun.nio.ch.Invoker$2.run(Invoker.java:218)\n                at sun.nio.ch.AsynchronousChannelGroupImpl$1.run(AsynchronousChannelGroupImpl.java:112)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                at java.lang.Thread.run(Thread.java:748)\n\nExample Java security debug output\n-------------\n\naccess: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.org.apache.tomcat.util.net\")\njava.lang.Exception: Stack trace\n        at java.base/java.lang.Thread.dumpStack(Thread.java:1387)\n        at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:462)\n        at java.base/java.security.AccessController.checkPermission(AccessController.java:897)\n        at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:322)\n        at java.base/java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1290)\n        at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:174)\n        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:575)\n        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)\n        at org.apache.tomcat.util.net.SecureNio2Channel.processSNI(SecureNio2Channel.java:387)\n        at org.apache.tomcat.util.net.SecureNio2Channel.handshakeInternal(SecureNio2Channel.java:231)\n        at org.apache.tomcat.util.net.SecureNio2Channel.handshake(SecureNio2Channel.java:222)\n        at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.doRun(Nio2Endpoint.java:1593)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n        at org.apache.tomcat.util.net.AbstractEndpoint.processSocket(AbstractEndpoint.java:1111)\n        at org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler.completed(SecureNio2Channel.java:104)\n        at org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler.completed(SecureNio2Channel.java:97)\n        at java.base/sun.nio.ch.Invoker.invokeUnchecked(Invoker.java:127)\n        at java.base/sun.nio.ch.Invoker$2.run(Invoker.java:219)\n        at java.base/sun.nio.ch.AsynchronousChannelGroupImpl$1.run(AsynchronousChannelGroupImpl.java:112)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.base/java.lang.Thread.run(Thread.java:834)\naccess: domain that failed ProtectionDomain  null\n null\n <no principals>\n null",
    "comments": [
      "We'll tale a look but given that the long term future of the Java security manager doesn't look good you might want to look at why you want to run under a security manager and what alternative solutions are available.",
      "Fixed in:\n- 10.1.x for 10.1.0-M6 onwards\n- 10.0.x for 10.0.12 onwards\n- 9.0.x for 9.0.54 onwards\n- 8.5.x for 8.5.72 onwards",
      "Thanks for the quick turnaround Mark. We will look into migrating off of security manager."
    ],
    "creation_ts": "2021-09-16T19:51:13Z",
    "fixes": [
      65577
    ]
  },
  {
    "id": 42650,
    "summary": "PooledParallelSender.sendMessage throws NullpointerException",
    "description": "org.apache.catalina.tribes.transport.PooledSender.getSender() has the \npossibility of returning Null. \nHowever, \norg.apache.catalina.tribes.transport.nio.PooledParallelSender.sendMessage \ndoesn't check Null. \n(PooledParallelSender.sendMessage calls getSender())\nTherefore, NullpointerException is thrown. \nFinally, NullpointerException is thrown in the finally block. \n\nThe following are the stack traces. \n\norg.apache.catalina.tribes.ChannelException: java.lang.NullPointerException; \nNo faulty members identified.\n    at org.apache.catalina.tribes.group.GroupChannel.send\n(GroupChannel.java:225)\n    at org.apache.catalina.tribes.group.GroupChannel.send\n(GroupChannel.java:175)\n    at org.apache.catalina.ha.tcp.SimpleTcpCluster.send\n(SimpleTcpCluster.java:835)\n    at org.apache.catalina.ha.tcp.SimpleTcpCluster.sendClusterDomain\n(SimpleTcpCluster.java:814)\n    at org.apache.catalina.ha.tcp.ReplicationValve.send\n(ReplicationValve.java:551)\n    at org.apache.catalina.ha.tcp.ReplicationValve.sendMessage\n(ReplicationValve.java:535)\n    at \norg.apache.catalina.ha.tcp.ReplicationValve.sendSessionReplicationMessage\n(ReplicationValve.java:517)\n    at org.apache.catalina.ha.tcp.ReplicationValve.sendReplicationMessage\n(ReplicationValve.java:428)\n    at org.apache.catalina.ha.tcp.ReplicationValve.invoke\n(ReplicationValve.java:362)\n    at org.apache.catalina.connector.CoyoteAdapter.service\n(CoyoteAdapter.java:261)\n    at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:190)\n    at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:283)\n    at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:767)\n    at org.apache.jk.common.ChannelSocket.processConnection\n(ChannelSocket.java:697)\n    at org.apache.jk.common.ChannelSocket$SocketConnection.runIt\n(ChannelSocket.java:889)\n    at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:686)\n    at java.lang.Thread.run(Thread.java:595)\nCaused by: java.lang.NullPointerException\n    at org.apache.catalina.tribes.transport.PooledSender.returnSender\n(PooledSender.java:48)\n    at \norg.apache.catalina.tribes.transport.nio.PooledParallelSender.sendMessage\n(PooledParallelSender.java:52)\n    at org.apache.catalina.tribes.transport.ReplicationTransmitter.sendMessage\n(ReplicationTransmitter.java:80)\n    at org.apache.catalina.tribes.group.ChannelCoordinator.sendMessage\n(ChannelCoordinator.java:78)\n    at org.apache.catalina.tribes.group.ChannelInterceptorBase.sendMessage\n(ChannelInterceptorBase.java:75)\n    at \norg.apache.catalina.tribes.group.interceptors.TcpFailureDetector.sendMessage\n(TcpFailureDetector.java:87)\n    at org.apache.catalina.tribes.group.ChannelInterceptorBase.sendMessage\n(ChannelInterceptorBase.java:75)\n    at \norg.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor.sendMe\nssage(MessageDispatchInterceptor.java:73)\n    at org.apache.catalina.tribes.group.ChannelInterceptorBase.sendMessage\n(ChannelInterceptorBase.java:75)\n    at org.apache.catalina.tribes.group.GroupChannel.send\n(GroupChannel.java:216)\n\n\nWhen Sender cannot be acquired, it is necessary to throw ChannelException.\nOtherwise, because the exception can not catch with interceptor such as \norg.apache.catalina.tribes.group.interceptors.TcpFailureDetector, \nthe exception handling cannot be done. \nThe same processing of \norg.apache.catalina.tribes.transport.bio.PooledMultiSender checks Null.",
    "comments": [
      "Thanks for the bug report, \nconsider increasing your sender pool, or find out why you are running out of\nthem, or you can send messages asynchrously\n\nFilip"
    ],
    "creation_ts": "2007-06-13T02:27:35Z",
    "fixes": [
      42650
    ]
  },
  {
    "id": 48973,
    "summary": "Don't create SESSIONS.ser when no session exists",
    "description": "Created attachment 25171\nPatch skiping SESSIONS.ser file creation if no session exists\n\nWhen a webapp is unloaded, a SESSIONS.ser file is created even if no session exists for the application. This is useless.",
    "comments": [
      "Patch applied on trunk, it will be available for tomcat 7.0.6.\nBackport to tomcat 6 proposed.",
      "In fact the patch was incomplete and applying it as it introduces a bug: if no session exist, no SESSIONS.ser should be created AND previous SESSIONS.ser should be deleted (if any old file exists).",
      "(In reply to comment #2)\nAFAIK, the SESSIONS.ser file is deleted in StandardManager.doLoad() upon successful or unsuccessful attempt to read it. Do you have a scenario where a stale SESSIONS.ser file is left behind?",
      "(In reply to comment #3)\n\nI hadn't checked doLoad(). I was only thinking that not writing a file with 0 sessions could have a consequence. I think that you're right and that no problem should occur.",
      "Thanks again for the patch.\n\nThis has been applied to 6.0.x and will be included in 6.0.30 onwards."
    ],
    "creation_ts": "2010-03-24T09:22:46Z",
    "fixes": [
      48973
    ]
  },
  {
    "id": 45832,
    "summary": "add DIGEST authentication support to Ant tasks",
    "description": "It would be useful if the Catalina Ant tasks supported HTTP Digest authentication, in addition to Basic authentication. This is convenient if one already has a digest-based security realm and doesn't want to maintain an extra  tomcat-users.xml file. (And Basic authentication is terribly insecure.)\n\nCurrently the AbstractCatalinaTask [1] just performs Basic authentication:\n\n  // Set up an authorization header with our credentials\n  String input = username + \":\" + password;\n  String output = new String(Base64.encode(input.getBytes()));\n  hconn.setRequestProperty(\"Authorization\",\n                           \"Basic \" + output);\n\n[1] http://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/catalina/ant/AbstractCatalinaTask.java",
    "comments": [
      "Patches are always welcome.",
      "(In reply to comment #1)\n> Patches are always welcome.\n\nIs it ok to use something like commons-httpclient that does Digest auth?",
      "Personally, I'd rather not add a dependency just for that.",
      "There turned out to be a very simple solution that didn't require an external library using java.net.Authenticator.\n\nFixed in:\n- trunk for 9.0.0.M22 onwards\n- 8.5.x for 8.5.16 onwards\n- 8.0.x for 8.0.45 onwards\n- 7.0.x for 7.0.78 onwards"
    ],
    "creation_ts": "2008-09-18T05:17:41Z",
    "fixes": [
      45832
    ]
  },
  {
    "id": 60900,
    "summary": "org.apache.tomcat.util.net.AprEndpoint$Poller.run throws java.lang.NullPointerException",
    "description": "Created attachment 34866\nserver.xml configure file\n\nEnvironment:\n\nOS: Red Hat Enterprise Linux Server release 6.7  2.6.32-573.el6.x86_64\nJDK: version \"1.8.0_65\" Java HotSpot(TM) 64-Bit Server VM\nMemory: 16G\nCPU: 1\nTomcat:  tested 8.5.3 and 8.5.11\nAPR: 1.5.2-1\n\n\nTest step:\n\n1. Install tomcat\n2. Test home page\n\n./wrk -t2000 -c 2000 -d 100s http://testhost:8080/\n\n\nException throws in catalina.log:\n\n22-Mar-2017 09:09:04.344 WARNING [http-apr-8080-Poller] org.apache.tomcat.util.net.AprEndpoint$Poller.run Unexpected poller error\n java.lang.NullPointerException\n        at org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper.access$400(AprEndpoint.java:2292)\n        at org.apache.tomcat.util.net.AprEndpoint$Poller.run(AprEndpoint.java:1703)\n        at java.lang.Thread.run(Thread.java:745)",
    "comments": [
      "The similar bug https://bz.apache.org/bugzilla/show_bug.cgi?id=54513",
      "Any update? Server closed connection and Client will receive RST due to this issue.",
      "I have been unable to reproduce this with 9.0.x or 8.5.x.\n\nNext step is a code review to try and identify a code path that could trigger this. I don't want to just ignore the null without understanding what is going on.",
      "One additional question. Which version of Tomcat Native are you using?",
      "I was looking at possible triggers for this around concurrent timeout/close and new data arriving. While I was doing that I found and fixed some edge cases that made this bug easier to trigger. I have therefore fixed this bug too.\n\nFixed in:\n- trunk for 9.0.0.M19 onwards\n- 8.5.x for 8.5.13 onwards",
      "Tomcat 8.5.3, Tomcat Native 1.2.7\nTOmcat 8.5.11 Tomcat Native 1.2.10\n\nThanks Mark, I will test fixed version when it is available.",
      "The fix for Bug 60900 (https://bz.apache.org/bugzilla/show_bug.cgi?id=60900) should also be applied to Tomcat 7.0.x.  The issue still exists in 7.0.81, as the wrapper assigned on AprEndpoint.java:1898 is not checked for null prior to reference on AprEndpoint.java:1906.",
      "I've back-ported the NPE fix to:\n- 8.0.x for 8.0.47 onwards\n- 7.0.x for 7.0.82 onwards\n\nI didn't back-port the edge case fixes as the refactoring in 8.5.x means the associated code is different (e.g. it has Comet handling) and I didn't want to risk triggering a regression."
    ],
    "creation_ts": "2017-03-22T01:33:54Z",
    "fixes": [
      60900
    ]
  },
  {
    "id": 62496,
    "summary": "Add option to write auth information (remote user/auth type) to response headers",
    "description": "I have a fairly simple usecase for an enhancement request from which a lot of users can benefit.\n\nUse case:\n\n* Apache HTTPd (2.4.33) <====> Tomcat (8.5.30) via mod_proxy\n* Apache logs with CustomLog ... common\n* VirtualHost does not only proxy Tomcat, also hosts other unrelated apps (.e.g, Subversion), so changing the log format is not an option\n* Tomcat performs authentication\n* Apache logs the requests, but remote_user column is empty. This is ugly and I do not really want duplicate logging, i.e., on both sides or if both need to be consistent.\n\nThanks to rjung@ and jim@ I worked out a solution which does a nice job.\n\nhttpd-tomcat.conf:\n> <Location \"/app\">\n>     ProxyPreserveHost On\n>     ProxyPass ..\n>     ProxyPassReverse ..\n>     RequestHeader set X-Forwarded-Proto \"https\"\n>     Header note X-Remote-User REMOTE_USER\n>     LuaHookLog /usr/local/etc/apache24/register_remote_user.lua register_remote_user\n> </Location>\n\nregister_remote_user.lua:\n> require 'apache2'\n> \n> function register_remote_user(r)\n>     local remote_user = r.notes[\"REMOTE_USER\"]\n>     if remote_user ~= nil then\n>         r.user = remote_user\n>         -- not implemented in mod_lua\n>         -- r.ap_auth_type = \"SPNEGO\"\n>     end\n>     return apache2.OK\n> end\n\nOn the Tomcat side I have added:\n> public class ResponseRemoteUserValve extends ValveBase {\n> \n> \t@Override\n> \tpublic void invoke(Request request, Response response) throws IOException, ServletException {\n> \t\tString remoteUser = request.getRemoteUser();\n> \n> \t\tif (remoteUser != null) {\n> \t\t\tresponse.setHeader(\"X-Remote-User\", remoteUser);\n> \t\t}\n> \n> \t\tgetNext().invoke(request, response);\n> \t}\n> \n> }\n\nIdeally for request#getAuthType() to X-Remote-AuthType too. I think this is suitable for either AuthenticatorBase or RemoteIPValve.\n\nComments and ideas welcome!",
    "comments": [
      "One glitch: \"Header unset X-Remote-User\" is missing from the config.",
      "Seems reasonable.\n\nCare to prepare a patch, including javadoc + XML/HTML documentation?",
      "(In reply to Christopher Schultz from comment #2)\n> Seems reasonable.\n> \n> Care to prepare a patch, including javadoc + XML/HTML documentation?\n\nThe patch isn't an issue. I'd like to assess where (classwise) it fits best.",
      "Well, there doesn't seem to be a need to implement this as a Valve (unless I'm missing something important), so let's implement it as a Filter.\n\nThe other filters Tomcat provides are all in the org.apache.catalina.filters package. The class name you have now seems awkward, but I don't have a better idea for it.\n\nIt would be nice to be able to set the header field-names, and enable either/or X-Remote-User and X-Remote-AuthType.",
      "I wonder how hard it would be to rewrite something like mod_headers in Java. Similar to our RewriteValve that mimics mod_rewrite. That would be more flexible, but we would need to find a good place to put the config for the headers valve or filter. The RewriteValve uses it's own rewrite.config due to the goal of config compatibility with httpd, but mod_headers config syntax is much simpler, so maybe it can be transformed to xml style without getting to ugly.\n\nJust an idea...",
      "I should have added, how such a headers filter or valve would then be used:\n\nHeader set X-Remote-User %{REMOTE_USER}\n\nThat would be httpd syntax, it could be adjusted for our uses. Also %{REMOTE_USER} is httpd syntax and also used by our own RewriteValve, but we could instead use something else.",
      "(In reply to Christopher Schultz from comment #4)\n> Well, there doesn't seem to be a need to implement this as a Valve (unless\n> I'm missing something important), so let's implement it as a Filter.\n\nThat is true, but opted for Valve because I can phyically register it *after* my authenticator (in context.xml) guaranteeing that auth has actually happened. I had it at Host level and it did not work of course.\n\nWhy do we need that actually separately? Why not add it to AuthenticatorBase? That seems to be perfect.\n\n> It would be nice to be able to set the header field-names, and enable\n> either/or X-Remote-User and X-Remote-AuthType.\n\nAgreed.",
      "(In reply to Christopher Schultz from comment #4)\n\nOh, I forgot. Here is the code I have put on the server now: https://sourceforge.net/p/mo-tomcat-ext/code/121/",
      "Fixed in:\n- master for 9.0.23 onwards\n- 8.5.x for 8.5.44 onwards\n- 7.0.x for 7.0.97 onwards"
    ],
    "creation_ts": "2018-06-27T14:26:20Z",
    "fixes": [
      62496
    ]
  },
  {
    "id": 69382,
    "summary": "Inefficient code generated for <jsp:include>",
    "description": "This JSP fragment:\n\n<jsp:include page=\"${feature.template}\">\n   <jsp:param name=\"featureName\" value=\"${feature.featureName}\"/>\n</jsp:include>\n\ntranslates into a single, very long line of Java:\n\norg.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(\"${feature.template}\", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null) + (((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(\"${feature.template}\", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).indexOf('?')>0? '&': '?') + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(\"featureName\", request.getCharacterEncoding())+ \"=\" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(\"${feature.featureName}\", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), request.getCharacterEncoding()), out, false);\n\nFormatting is unhelpful, however there's a problem buried in there:  \"${feature.template}\" is evaluated twice, presumably with the same output both times.  The JSP snippet clearly does not intend two evaluations so it should be possible to execute once and reuse the value.\n\nIn addition, there are two calls to request.getCharacterEncoding()... which seems simple until our application wraps that value multiple layers deep:\n\nServletRequestWrapper\nServletRequestWrapper\nApplicationHttpRequest\nApplicationHttpRequest\nApplicationHttpRequest\nApplicationHttpRequest\nRequestFacade\nRequest\n\nReusing this value would also be helpful.",
    "comments": [
      "Apologies, coworker pointed out that I misread the evaluated strings.  Sorry, staring at code all day.  :)\n\nClosing.",
      "The concern is valid, see how these repeated-evaluations can possibly be commonized for the shared code snippet -\n\n```\nString proprietaryEvaluatedFeatureTemplate = (String) PageContextImpl.proprietaryEvaluate(\"${feature.template}\", String.class, (PageContext) _jspx_page_context, null);\n    char seperator = (proprietaryEvaluatedFeatureTemplate).indexOf('?') > 0 ? '&' : '?';\n    String characterEncoding = request.getCharacterEncoding();\n    String proprietaryEvaluatedFeatureName = (String) PageContextImpl.proprietaryEvaluate(\"${feature.featureName}\", String.class, (PageContext) _jspx_page_context,\n            null);\n    String featureName = proprietaryEvaluatedFeatureTemplate + seperator + JspRuntimeLibrary.URLEncode(\"featureName\", characterEncoding) + \"=\" + JspRuntimeLibrary.URLEncode(proprietaryEvaluatedFeatureName, characterEncoding);\n    org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, featureName, out, false);\n```",
      "Created attachment 39914\nDemo patch",
      "I've added a sample patch that does the following:\n\n1. If the include contains zero params, no change\n2. If the include contains 1+ params:\n  a. Create a local variable, set to the evaluation of the url\n  b. Create a local variable, set to the request encoding\n  c. Substitute in the local variables as necessary\n\n\nPost-change, this JSP snippet:\n\n<jsp:include page=\"${myPageName}\">\n  <jsp:param name=\"param1\" value=\"${'1'}\"/>\n  <jsp:param name=\"param2\" value=\"${'2'}\"/>\n</jsp:include>\n\nis translated into this Java:\n\n      String _jspx_temp0_url = (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(\"${myPageName}\", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null);\n      String _jspx_temp0_requestEncoding = request.getCharacterEncoding();\n      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, _jspx_temp0_url + ((_jspx_temp0_url).indexOf('?') > 0 ? '&': '?') + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(\"param1\", _jspx_temp0_requestEncoding)+ \"=\" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(\"1\", _jspx_temp0_requestEncoding) + \"&\" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(\"param2\", _jspx_temp0_requestEncoding)+ \"=\" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(\"2\", _jspx_temp0_requestEncoding), out, false);",
      "Thanks for the analysis and the patch.\n\nFixed in:\n- 11.0.x for 11.0.1 onwards\n- 10.1.x for 10.1.32 onwards\n-  9.0.x for  9.0.97 onwards",
      "Looks like implementation created regression. See details in https://bz.apache.org/bugzilla/show_bug.cgi?id=69508"
    ],
    "creation_ts": "2024-10-07T20:09:17Z",
    "fixes": [
      69382
    ]
  },
  {
    "id": 49711,
    "summary": "HttpServletRequest#getParts() does not work in a Filter",
    "description": "In order to have the ability to process multipart/form-data transparently with help of the new Servlet 3.0 HttpServletRequest#getParts(), a Filter is the most suitable place for this. \n\nThis works fine in Glassfish v3. However, in Tomcat the getParts() returns null and it works only inside a servlet with @MultipartConfig annotation.\n\nThis is too strict. This makes it hard if not impossible to process multipart/form-data requests transparently with help of a Filter (i.e. creating a new parametermap and replacing the original one in HttpServletRequest).\n\nIt is true that the Servlet 3.0 spec tells nothing about the use of this method inside a Filter, but this is in my opinion an oversight. There is no other way to obtain the parts than parsing the stream yourself with good 'ol Apache Commons FileUpload.\n\nSince it works fine in Glassfish v3, I'd suggest to make Tomcat 7 that lenient as well.",
    "comments": [
      "I've just read the spec and my reading of the spec is that this is expected to work. A quick look at the code suggests it should work. If you want to dig into this yourself, start at line 2499 of o.a.catalina.connector.Request",
      "Correction: it didn't return null, it returned an empty collection.\n\nI will dig in the source.",
      "Well, the getWrapper().getMultipartConfigElement() at line 2493 always returns null and thus an empty collection will be returned. Only when I call getParts() inside a Servlet with @MultipartConfig, it works. But the intent is to call getParts() inside a Filter. The getWrapper() always returns the target JSP/Servlet associated with the request which in my case does not necessarily have the @MultipartConfig annotation (or cannot have one because it's a 3rd party one out of your control, e.g. FacesServlet).",
      "If the Servlet doesn't have the @MultipartConfig annotation then getParts() should not work. Tomcat is therefore specification compliant in this regard.\n\nI'm not adverse to adding a (probably per context) configuration attribute to relax this requirement. Therefore, I am changing this to an enhancement request.",
      "Thank you. This is imo an oversight in the Servlet 3.0 specification. I will report it sooner or later.",
      "If @MultipartConfig in a servlet is the sole way to trigger multipart handling during a request, then a Filter must be able to check the target servlet to determine if Request.getParts will work (which I don't believe is possible). I agree with balusc's assertion that this is an oversight in the specification.\n\nMy only question is what the overall behavior should be. If a Filter calls Request.getParts and the content-type of the request is multipart/form-data, should Tomcat simply parse it as a multipart request regardless of the presence (or absence) of an @MultipartConfig annotation on the servlet?\n\nI would argue that Tomcat /should/ go ahead and do this. I would also argue that this ought to be the /default configuration/ as well.\n\nThere are some web applications where a Filter is expected to be the content generator. All Apache Struts 2 applications are like this: the front controller is implemented as a Filter instead of as a Servlet (don't ask me why this is the case). Ignoring the fact that S2 provides multipart parsing itself, S2 applications would not be able to use the 3.0 specification for loading multipart data because the request will never reach a servlet (or, at best, the request would have to be mapped to both a Filter which does the real work, and to a dummy servlet that simply has the @MultipartConfig annotation just to achieve the goal).",
      "FYI: this issue is currently reported on servlet-spec-public: https://servlet-spec-public.dev.java.net/issues/show_bug.cgi?id=14",
      "Working on a patch.",
      "Fixed. Will be available in 7.0.7 onwards.\n\nSee documentation for <Connector> for how to enable this.",
      "Patch needs tweaking. Configuration belongs in the Context, not in the Connector.",
      "Fixed (again). Will be in 7.0.7 onwards.",
      "Fixed in 7.0.7, but back in 7.0.16?? \nPlease tell me if I'm wrong, but the code from BalusC works with Glassfish v3.1 it dosn't with Tomcat 7.0.16. HttpServletRequest#getParts() in the filter returns an empty collection.\nDo anybody know more about it?",
      "See allowCasualMultipartParsing on the Context and ask on the users list if you have any further questions.",
      "This problem also exists in Tomcat 7.0.47.",
      "(In reply to noel from comment #14)\n> This problem also exists in Tomcat 7.0.47.\n\nThe burden of proof is yours. You provided no proof.\n\nPlease discuss this on the users mailing list so that others confirm\nthat there is an issue, before reopening or submitting other issue.\n\nNote that\n\n1. The testsuite contains testcases for this feature,\n\norg.apache.catalina.core.TestStandardContext#testBug49711()\norg.apache.catalina.connector.TestRequest#testBug54984()\n\nSo it does work, if configured properly.\n\n2. You must read documentation on \"allowCasualMultipartParsing\" option, as mentioned above. It is off by default.\n\nhttp://tomcat.apache.org/tomcat-7.0-doc/config/context.html\n\nRe-closing as FIXED."
    ],
    "creation_ts": "2010-08-05T16:39:53Z",
    "fixes": [
      49711
    ]
  },
  {
    "id": 42072,
    "summary": "The call of the jspDestroy method violates it about the Java Servlet Specification 2.4, SRV.2.3.2.1.",
    "description": "When a JSP is accessed for a second time, the jspDestroy method is called even\nif a ServletException is thrown from the init method of the class that extends\nHttpJspPage.\n\nThis violates the Java Servlet Specification 2.4, SRV.2.3.2.1.",
    "comments": [
      "Created attachment 19925\nThis problem is solved with this patch.\n\nThis problem is solved with this patch.",
      "Patch applied and will be included in 5.5.24 onwards.\n\nMany thanks."
    ],
    "creation_ts": "2007-04-08T18:07:02Z",
    "fixes": [
      42072
    ]
  },
  {
    "id": 66621,
    "summary": "Bug in WebdavServlet?",
    "description": "While looking at the WebdavServlet source code I spotted the following line where expired collection locks are being removed from the resource locks:\n\nhttps://github.com/apache/tomcat/blob/8.5.x/java/org/apache/catalina/servlets/WebdavServlet.java#L1064\n\nHowever, the usual pattern seems to be that expired locks are being removed from the same collection they were found in. So this may be a bug. Is this correct?",
    "comments": [
      "Thanks for spotting that. I agree that there is a bug there.\n\n\nFixed in:\n- 11.0.x for 11.0.0-M7 onwards\n- 10.1.x for 10.1.10 onwards\n-  9.0.x for  9.0.76 onwards\n-  8.5.x for  8.5.90 onwards"
    ],
    "creation_ts": "2023-05-31T13:12:41Z",
    "fixes": [
      66621
    ]
  },
  {
    "id": 69302,
    "summary": "ReadListener#onError not called on read exception during async processing with read timeout",
    "description": "Created attachment 39859\nUse case and potential fix\n\nHi,\n\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=69068 throws a SocketTimeoutException after stream timeout is reached. When this timeout is big (streaming gRPC requests for example), when a client closes the connection, no error/completion is reported at the level of the servlet listeners.\n\nLet me know what you think.\n\nThanks\n\nFran\u00e7ois",
    "comments": [
      "There is a lof of useful background in the Servlet specification issue that is discussing how issues like this should be handled:\n\nhttps://github.com/jakartaee/servlet/issues/433\n\nI've looked at this some more and I going to start work on an approach based around Stream.receiveReset(long). On first look, it appears that that fits nicely with what Stuart was proposing in the Servlet issue.",
      "Fixed in:\n- 11.0.x for 11.0.0-M25 onwards\n- 10.1.x for 10.1.29 onwards\n-  9.0.x for  9.0.94 onwards",
      "Thanks a lot !",
      "Since TestHttp2Section_5_1 is rollback in commit 'Fix regression caused by the fix for BZ 69302', I have tried but failed to find out the corresponding testcase, pls let me know if there has."
    ],
    "creation_ts": "2024-08-30T15:30:52Z",
    "fixes": [
      69302
    ]
  },
  {
    "id": 66602,
    "summary": "TCP abnormal shutdown during pressure testing based on HTTP2 (h2c)",
    "description": "Created attachment 38559\nnormal request log comparison\n\n**Perform a simple GET request pressure test on the HTTP2 (h2c) service, and the TCP link will shutdown abnormally.**\n\n\n1.By simulating 50 concurrent requests with 500 each, perform pressure testing and packet capture on a simple GET request.\n2.The process found that the TCP link would be disconnected.\n3.The reason is that tomcat sent a WINDOW_UPDATE Frame with window size value is zero.\n\n\ncall Http2UpgradeHandler.endRequestBodyFrame method the dataLength is zero? Is this reasonable\uff1f\n\nHttp2UpgradeHandler:\n\n    public void endRequestBodyFrame(int streamId, int dataLength) throws Http2Exception, IOException {\n        AbstractNonZeroStream abstractNonZeroStream = getAbstractNonZeroStream(streamId, true);\n        if (abstractNonZeroStream instanceof Stream) {\n            ((Stream) abstractNonZeroStream).getInputBuffer().onDataAvailable();\n        } else {\n            // The Stream was recycled between the call in Http2Parser to\n            // startRequestBodyFrame() and the synchronized block that contains\n            // the call to this method. This means the bytes read will have been\n            // written to the original stream and, effectively, swallowed.\n            // Therefore, need to notify that those bytes were swallowed here.\n            onSwallowedDataFramePayload(streamId, dataLength);\n        }\n    }",
    "comments": [
      "Comment on attachment 38559\nnormal request log comparison\n\nThe overall process is as follows:\n\n1. http-nio-9988-exec-4 thread: Read data from the stream. After reading the header frame, asynchronously start the request distribution processing for data (http-nio-9988-exec-13) and continue reading the data frame data.\n\n2. http-nio-9988-exec-13 thread: Process data requests. If the request is completed, the status changes to CLOSE and replaces the current stream with the recycling stream\uff08RecycledStream\uff09\n\n3. http-nio-9988-exec-4 thread: Process data frame data. If it is processed, execute endRequestBodyFrame. is RecycledStream will send WINDOW_UPDATE notify.",
      "Didn't anyone reply\uff1f",
      "If you want a guaranteed SLA, you'll have to pay for it.\n\nI can't speak for the other committers but I have been preparing for a conference this week. I was planning on looking at this next week unless someone else gets there first.\n\nThis will get looked at (and fixed if necessary) between now and the June releases.",
      "As per RFC 9113, section 6.9 it is not legal to send a WINDOW_UPDATE frame of length zero.\n\nI've had a quick look at the code it should be a simple fix to skip sending the WINDOW_UPDATE frame if the increment is zero.",
      "Could you be tempted into submitting a patch or PR for this? (Don't forget the change log.)",
      "A PR has been submitted based on the 9.0.x branch \n\nPR\uff1a https://github.com/apache/tomcat/pull/619",
      "Thanks for the report and PR.\n\nFixed in:\n- 11.0.x for 11.0.0-M7 onwards\n- 10.1.x for 10.1.10 onwards\n- 9.0.x for 9.0.76 onwards\n- 8.5.x for 8.5.90 onwards"
    ],
    "creation_ts": "2023-05-16T10:07:52Z",
    "fixes": [
      66602
    ]
  },
  {
    "id": 66681,
    "summary": ".getBasicRemote().flushBatch() causes NPE with PerMessageDeflate",
    "description": "java.lang.NullPointerException: Cannot invoke \"java.nio.ByteBuffer.limit()\" because the return value of \"org.apache.tomcat.websocket.MessagePart.getPayload()\" is null\n\tat org.apache.tomcat.websocket.PerMessageDeflate.sendMessagePart(PerMessageDeflate.java:317)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:282)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:256)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.flushBatch(WsRemoteEndpointImplBase.java:124)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointBase.flushBatch(WsRemoteEndpointBase.java:48)",
    "comments": [
      "This has been fixed in:\n\n- 11.0.x for 11.0.0-M10 onwards\n- 10.1.x for 10.1.12 onwards\n- 9.0.x for 9.0.79 onwards\n- 8.5.x for 8.5.92 onwards"
    ],
    "creation_ts": "2023-07-07T21:51:20Z",
    "fixes": [
      66681
    ]
  },
  {
    "id": 49165,
    "summary": "Enhancement - Allow %{TIME_FORMAT}t As Configuration for AccessLogValve",
    "description": "AccessLogValve.DateAndTimeElement() can currently be configured only with %t which output the date/time in Common Log Format.\n\nBy adding the capability to configure with %{TIME_FORMAT}, one could override (at least) the timeFormatter property of the class ... or it could go further and allow overriding of all the [day, month, year, time]Formatter properties.\n\nJustification for enhancement:  The log currenlty provide the ability to log processing time in millis (via %T), but an accurate log of the order in which requests are received cannot be determined without the capabilities of logging a  a format with milliseconds using the %t element.",
    "comments": [
      "Created attachment 25778\n#49165 fix (added %t{TIME_FORMAT} support)\n\nIntroduced new format for %t for AccesLogValve.\n- new format %{TIME_FORMAT}t available. \n- if custom pattern contains milliseconds field, then optimizations, which performs new current date time object creation only once per 1000 millis, will be turned off.\n- unit tests for added/changed functionality\n- performance tests\n\nResults of perfomance testing (tested on MacOS X 10.6.4):\nAccessLogValve: 5 threads and 1000000 iterations using oldValve           took 8381ms\nAccessLogValve: 5 threads and 1000000 iterations using newValve           took 7742ms\nAccessLogValve: 5 threads and 1000000 iterations using newValveWithMillis took 8651ms\nAccessLogValve: 5 threads and 2000000 iterations using oldValve           took 16864ms\nAccessLogValve: 5 threads and 2000000 iterations using newValve           took 15945ms\nAccessLogValve: 5 threads and 2000000 iterations using newValveWithMillis took 16806ms\nAccessLogValve: 5 threads and 3000000 iterations using oldValve           took 25010ms\nAccessLogValve: 5 threads and 3000000 iterations using newValve           took 24575ms\nAccessLogValve: 5 threads and 3000000 iterations using newValveWithMillis took 26674ms\nAccessLogValve: 5 threads and 4000000 iterations using oldValve           took 33775ms\nAccessLogValve: 5 threads and 4000000 iterations using newValve           took 33043ms\nAccessLogValve: 5 threads and 4000000 iterations using newValveWithMillis took 33796ms",
      "Introduced new format for %t for AccesLogValve.\n- new format %{TIME_FORMAT}t available. \n- if custom pattern contains milliseconds field, then optimizations, which performs new current date time object creation only once per 1000 millis, will be turned off.\n- unit tests for added/changed functionality\n- performance tests\n\nResults of perfomance testing (tested on MacOS X 10.6.4):\nAccessLogValve: 5 threads and 1000000 iterations using oldValve           took 8381ms\nAccessLogValve: 5 threads and 1000000 iterations using newValve           took 7742ms\nAccessLogValve: 5 threads and 1000000 iterations using newValveWithMillis took 8651ms\nAccessLogValve: 5 threads and 2000000 iterations using oldValve           took 16864ms\nAccessLogValve: 5 threads and 2000000 iterations using newValve           took 15945ms\nAccessLogValve: 5 threads and 2000000 iterations using newValveWithMillis took 16806ms\nAccessLogValve: 5 threads and 3000000 iterations using oldValve           took 25010ms\nAccessLogValve: 5 threads and 3000000 iterations using newValve           took 24575ms\nAccessLogValve: 5 threads and 3000000 iterations using newValveWithMillis took 26674ms\nAccessLogValve: 5 threads and 4000000 iterations using oldValve           took 33775ms\nAccessLogValve: 5 threads and 4000000 iterations using newValve           took 33043ms\nAccessLogValve: 5 threads and 4000000 iterations using newValveWithMillis took 33796ms",
      "Created attachment 25779\n49615 + unit tests\n\nupdated patch file (unit tests added to version control)",
      "done",
      "(In reply to comment #4)\n\nThanks for the patch. I have reviewed it and have the following comments:\n1. It uses a mix of tabs and spaces for indenting. Only spaces should be used.\n2. Log messages should use the StringManager to provide i18n support.\n3. Setting currentDate in the AccessDateStruct serves no purpose\n4. Same for currentDateString\n5. DateAndTimeElementVolumeTest can probably be added to the existing Benchmarks test.\n\nOut of curiosity, if you remove the code that manages the only creating the date once a second entirely and use a date format that does not include millis, what is the performance like? I'm wondering if we can just remove that code entirely.\n\nIf you can update the patch, I'll take another look. With the issues above fixed it should be ready to apply.",
      "(In reply to comment #5)\n> 1. It uses a mix of tabs and spaces for indenting. Only spaces should be used.\nDone.\n\n> 2. Log messages should use the StringManager to provide i18n support.\nDone (only English string was added).\nBTW there are others Strings in class used in exception. I haven't touched them, because they're not related to this bug. Please let me know if this should be done.\n\n> 3. Setting currentDate in the AccessDateStruct serves no purpose\nRemoved initialization in variable declaration. Leaved as is in constructor: otherwise NPE will be thrown on first AccessDateStruct access in startInternal().\n\n> 4. Same for currentDateString\nRemoved\n\n> 5. DateAndTimeElementVolumeTest can probably be added to the existing\n> Benchmarks test.\nDone.\n\n> Out of curiosity, if you remove the code that manages the only creating the\n> date once a second entirely and use a date format that does not include millis,\n> what is the performance like? I'm wondering if we can just remove that code\n> entirely.\nWithout millis chunks we have small performance drop on same %t pattern:\n5 thr x 1000000 iter. newValve           7772ms\n5 thr x 1000000 iter. newValveNoChunks   8483ms\n5 thr x 1000000 iter. newValveWithMillis 8630ms\n5 thr x 2000000 iter. newValve           14857ms\n5 thr x 2000000 iter. newValveNoChunks   15633ms\n5 thr x 2000000 iter. newValveWithMillis 19687ms\n5 thr x 3000000 iter. newValve           22171ms\n5 thr x 3000000 iter. newValveNoChunks   23433ms\n5 thr x 3000000 iter. newValveWithMillis 26765ms\n5 thr x 4000000 iter. newValve           29615ms\n5 thr x 4000000 iter. newValveNoChunks   31525ms\n5 thr x 4000000 iter. newValveWithMillis 35067ms\n5 thr x 5000000 iter. newValve           36889ms\n5 thr x 5000000 iter. newValveNoChunks   39176ms\n5 thr x 5000000 iter. newValveWithMillis 43527ms\nLooks like performance graphs are linear for all cases. I think if we remove chunks, this could possible cause slight load increase on GC under heavy load (new Date instances will keep creating). Test was done under MacOS X 10.6.\nPlease let me know your decision: are we going to go with this or leave it as is.\nBTW there will be error up to 1000 mills in output, because we're creating date once in 1000 millis.\nNote: volume benchmark is writing output in real file to $CATALINA_HOME/logs and shouldn't be included in automatic test pack (it's slow and it's it's generating REALLY big output file, so CI server will quickly run out of disk space).\n\n> If you can update the patch, I'll take another look. With the issues above\n> fixed it should be ready to apply.\nWill provide patch file after your decision.",
      "Created attachment 25834\n#49165 fix with requested changes\n\nPlease let me know if version without 1000 millis chunk is required (in this case some unit test should be removed).",
      "(In reply to comment #6)\n> Note: volume benchmark is writing output in real file to $CATALINA_HOME/logs\n> and shouldn't be included in automatic test pack (it's slow and it's it's\n> generating REALLY big output file, so CI server will quickly run out of disk\n> space).\n\nCould you modify the volume benchmark to dump to /dev/null or some kind of null logger? That would give you a better benchmark since you aren't at the mercy of disk I/O to skew your results.",
      "I added support for full SimpleDateFormat in r1137336.\n\nIt also supports:\n- choosing the timestamp, either begin of request and finish of response\n  By using multiple %{xxx}t tokens one can also log bot timestamps.\n- logging second, milliseconds since the epoch\n\nDocumented in r1137338."
    ],
    "creation_ts": "2010-04-21T14:20:08Z",
    "fixes": [
      49165
    ]
  },
  {
    "id": 55559,
    "summary": "UserDatabaseRealm enhacement: may use local JNDI",
    "description": "Created attachment 30841\nPatch\n\nDataSourceRealm may use global or local JNDI registry to look for resources, but UserDatabaseRealm can use only global resources.\n\nTomcat has implemented authentication users agains XML file, and I wanted to use that feature for my application. The problem is that thr file with users must be registered in global Tomcat configuration file, but I wanted to have the file managed by application, not a server.\n\nThen I modified a class UserDatabaseRealm in similar manner as DataSourceRealm is implemented. I also updated a documentation. Class MBeanUtils is modified to avoid error on shutdown.\n\nPatch is constructed against revision 93bcdde55f62c6598f0dde9de2a575705e6b5abb (origin/trunk)\n\nI could attach application for patch verification, but it seems to me that only one attachement is allowed. However, main idea is allow the following configuration in application META-INF/context.xml file:\n\n<Context>\n \n  <Resource name=\"MyUserDatabase\" auth=\"Container\"\n    type=\"org.apache.catalina.UserDatabase\" description=\"User database that can be updated and saved\"\n    factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n    pathname=\"conf/example-users.xml\" />\n  <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n    resourceName=\"MyUserDatabase\" localDataSource=\"true\"/>\n\n</Context>",
    "comments": [
      "Created attachment 30842\nsample XML file with user definition",
      "Created attachment 30843\nsample application",
      "Proposed test:\n1. Copy the sample XML file to $(TOMCAT)/conf directory and name it example-users.xml\n2. Deploy sample application and try to open.\n\nIf everything is OK, browser ask you for username and password and only q/qq will be accepted, as defined is sample XML file",
      "After all this time, and the various refactorings, the proposed patch needed quite a few changes. I ended up using the DataSourcRealm as a base instead but this is now implemented.\n\nFixed in:\n- master for 10.0.0-M10 onwards\n- 9.0.x for 9.0.40 onwards\n- 8.5.x for 8.5.60 onwards"
    ],
    "creation_ts": "2013-09-14T22:16:08Z",
    "fixes": [
      55559
    ]
  },
  {
    "id": 68884,
    "summary": "Delayed HTTP Traffic Processing After Mass Websocket Disconnect/Reconnect",
    "description": "Apache Tomcat Bug Report\nDelayed HTTP Traffic Processing After Mass Websocket Disconnect/Reconnect\n\nDescription:\n\nA significant delay of 10+ minutes occurs in resuming normal HTTP traffic processing after a mass websocket disconnect/reconnect event. This issue arises when a network interruption or stop-the-world garbage collection event exceeds the maxIdleTimeout (35 seconds), leading to numerous websocket session closures. \n\nWith several thousand websocket sessions closing simultaneously, all available nio2 threads (maxThreads=50) become occupied with the closure process. These threads enter a continuous loop, repeatedly calling Thread.yield while waiting to acquire the WsRemoteEndpointImplBase messagePartInProgress semaphore. This behavior, introduced as part of the fix for BZ66508, allows closing threads to relinquish CPU time while waiting for the send semaphore (up to the default 20-second timeout).\n\njava. base@11.0.21/java.lang.Thread.yield(Native Method)\norg.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.acquireMessagePartInProgressSemaphore(WsRemoteEndpointImplServer.java:130)\norg.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase-java: 292)\norg.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase. java: 256)\norg.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:801)\norg.apache.tomcat.websocket.WsSession.onClose(WsSession.java:711)\n\nObservations indicate that on Linux, Thread.yield places the thread at a lower priority in the CPU scheduling queue, resulting in a prolonged series of yield calls until the timeout is reached and a SocketTimeoutException is triggered. HTTP traffic processing remains stalled until all session closures are completed.\n\nWe have implemented a temporary solution by introducing a property to limit the time spent in the on-close yield loop. Reducing this value from the default significantly improves recovery time. Additionally, decreasing maxThreads appears to further extend the recovery time, although the exact relationship requires further investigation.\n\nReproducing the Issue:\n\nThe issue, initially identified in a scenario with 50 threads and 5000 maximum websocket connections, can also be reproduced at a smaller scale with varying thread and session counts.\n\n1. Establish several thousand websocket connections that periodically send/receive data to simulate traffic.\n2. Induce a JVM pause or network interruption lasting 40 seconds or more.\n3. Restore client-side connectivity.\n4. Start a timer and attempt to obtain a 200 response from the server.\n5. Stop the timer once a successful response is received.\n\nTest Configurations and Results:\n\n5 nio2 threads, 300 websocket connections:\n\nClose Timeout\tRecovery Times (seconds)\n10s\t        218, 300, 159, 168, 312\n 5s\t        60, 42, 102, 199, 160\n 2s\t        27, 30, 42, 19, 18\n 1s\t        13, 15, 15\n\n15 nio2 threads, 300 websocket connections:\n\nClose Timeout\tRecovery Time (seconds)\n2s\t        11, 8, 7, 6, 7, 12\n\nObservations:\n\nThe issue was initially observed with Tomcat 9.0.75 (embedded) and remains reproducible with versions up to 9.0.82 (embedded), even with the 9.0.86 fix for reentrant lock on close handling applied. While the 9.0.86 fix resolved a memory leak, it did not alleviate the extended recovery times.\n\nProposed Solution:\n\nIntroducing a separate property specifically for the on-close send timeout would allow for finer-grained control and optimization of session closure behavior, particularly for servers operating with fixed thread pool sizes.\n\nAdditional Notes:\n\nWhile BZ66508 removed the fixed timeout for on-close acquisition, the potential for a 20-second wait during semaphore acquisition persists, leading to prolonged session closure times and increased overhead on the OS scheduler due to the repeated yield calls.\n\nWe are investigating the precise relationship between thread count and recovery time and will provide additional data as it becomes available.\n\nWe believe that implementing the proposed solution would significantly improve Tomcat's performance under these conditions and provide administrators with greater control over resource utilization during mass websocket disconnect events.",
    "comments": [
      "Created attachment 39658\nProposed patch",
      "Patches should be in diff -u form.\n\nThe Tomcat team avoids using system properties for configuration unless absolutely necessary (it isn't necessary here).\n\nGiven that this requires a network interruption or stop the world GC of > 35 seconds, I'd argue that if you are dealing with network drop-outs or GC pauses of that length you have much bigger problems than this issue. Not that we won't try and fix this issue but it may affect how we address it.",
      "Created attachment 39664\nProposed patch\n\nUpdated format\nDiff vs 9.0.86",
      "Thank you for the feedback and completely agree that there are other factors involved in creating the conditions for this issue to occur.\n\nThe intent behind the proposal is to make those scenarios more recoverable when they do occur and to solicit feedback on if there may be a better way to accomplish this.",
      "I'm ignorant of the threading details of Websocket, so maybe this is a stupid question: Could a single thread be used to perform these kinds of cleanups, instead of an army of threads? That would let a single thread trigger many session-shutdowns and only yield once for each of them.",
      "(In reply to Christopher Schultz from comment #5)\n> I'm ignorant of the threading details of Websocket, so maybe this is a\n> stupid question: Could a single thread be used to perform these kinds of\n> cleanups, instead of an army of threads? That would let a single thread\n> trigger many session-shutdowns and only yield once for each of them.\n\nMy understanding is that there is a single write semaphore per remote endpoint socket so the threads trying to write their close messages are in contention for that and yield rather than block waiting in tryAcquire which was the original behavior pre bz66508.\n\nThe spin count in yield can run into the thousands even for a relatively short expiry period which puts additional pressure on the OS level thread scheduler.  More than one http thread can be in this spin wait.\n\nGiven that its waiting for a write semaphore, I am not sure if a dedicated close  thread would help - I think a similar approach may have been used a while back in jetty.  That write semaphore is used for any write, not just closures.\n\nIs this something that can be looked into for 9.0.89?",
      "Fixed by reducing the timeout for non-standard WebSocket closes.\n\nFixed in:\n- 11.0.x for 11.0.0-M20 onwards\n- 10.1.x for 10.1.24 onwards\n-  9.0.x for  9.0.89 onwards"
    ],
    "creation_ts": "2024-04-11T20:58:00Z",
    "fixes": [
      68884
    ]
  },
  {
    "id": 48795,
    "summary": "Tomcat tries to use cache when compilation failed",
    "description": "Created attachment 25037\nFull error log.\n\nAfter compilation of a JSP fails, Tomcat will often still try to use the (non-existant) cached version.\n\nFor example, I have a simple JSP containing only \"Hello, <%=name%>\".\nWhen accessing for the first time, Tomcat throws \"org.apache.jasper.JasperException: Unable to compile class for JSP\".\n\nSubsequent requests will alternate between this error, and \"java.lang.ClassNotFoundException: org.apache.jsp.jsp.test_jsp\".\n\nIn the case of editing existing JSPs which have compiled fine, the response will alternate between the original error, and the cache of the last-good JSP.\n\nI'm using Sun JVM 1.6.0_18-b07.",
    "comments": [
      "This has been fixed in trunk and proposed for 6.0.x",
      "After some discussion, a modified patch has been applied and proposed.\n\nThe issue is that immediately re-trying the compilation increases the risk of a DOS attack. Whilst JSP compilation failures shouldn't happen in production, they often do.\n\nThe new approach adds a new init parameter for the JSP servlet that controls if failed compilations are immediately retried on the next access or if modificationTestInterval is honour. This only applies in development mode.\n\nFor versions where this feature is not available, consider setting modificationTestInterval to 0. Again the same warning re DOS applies.",
      "Thanks for following up on this issue.\n\nDoes the proposed patch also address the case when a JSP has compiled and cached successfully and is subsequently edited with some syntax error? In this situation Tomcat seems to not invalidate the cache.",
      "This has been fixed in 6.0.x and will be included in 6.0.26 onwards."
    ],
    "creation_ts": "2010-02-22T15:13:26Z",
    "fixes": [
      48795
    ]
  },
  {
    "id": 69623,
    "summary": "regression between 9.0.27 and 9.0.29: UnknownServiceException: no content-type",
    "description": "something seems to have changed in the classloader available to webapps just after version 9.0.27\n\nWe used to load files from WEB-INF/classes/fileName.mdd (i.e. a custom extension) using:\n\nthis.getClass().getClassLoader().getResource(filePath).getContent();\n\nThis code used to work in versions <= 9.0.27 but it fails in 9.0.29 and later (and a few late 8 versions)\n\njava.net.UnknownServiceException: no content-type\n        at java.net.URLConnection.getContentHandler(URLConnection.java:1241)\n        at java.net.URLConnection.getContent(URLConnection.java:740)\n        at java.net.URL.getContent(URL.java:1081)\n\nTested this regression with a number of Java runtimes from versions 8 to 23. \n\nChecked the Tomcat changelog and I cannot find any change at 9.0.28 or 9.0.29  that looks related to the classloader. So I wonder what Tomcat change could have lead to this, and whether the change is intended.",
    "comments": [
      "A few people noticed this earlier, for example:\n\nhttps://stackoverflow.com/questions/64645338/java-net-url-getcontent-unknownserviceexception-no-content-type",
      "getContent() used to return an input stream. which we were using to read the text file with the .mdd extension. Now it throws instead",
      "The cited version (9.0.29) is over 4 years old; does this issue still exist on the current level (9.0.102)?\n\nAre you sure you didn't lose a custom mime-mapping when you tried the newer Tomcat version?",
      "Thank you for your response! \n\nYes the issue exists in all versions older than 9.0.27. I could not find 9.0.28 to test it, but 9.0.29 has the issue, and all subsequent versions that I tested. This is the complete list of versions I tested with (a binary search basically)\n\ndrwxr-xr-x  12 cristi  staff       384 Mar 22 00:29 apache-tomcat-9.0.10\ndrwxr-xr-x  17 cristi  staff       544 Mar 22 02:05 apache-tomcat-9.0.102\ndrwxr-xr-x  16 cristi  staff       512 Mar 22 02:11 apache-tomcat-9.0.11\ndrwxr-xr-x  16 cristi  staff       512 Mar 22 02:17 apache-tomcat-9.0.59\ndrwxr-xr-x  16 cristi  staff       512 Mar 22 02:20 apache-tomcat-9.0.33\ndrwxr-xr-x  16 cristi  staff       512 Mar 22 02:22 apache-tomcat-9.0.24\ndrwxr-xr-x  16 cristi  staff       512 Mar 22 02:24 apache-tomcat-9.0.29\ndrwxr-xr-x  16 cristi  staff       512 Mar 22 02:26 apache-tomcat-9.0.26\ndrwxr-xr-x  16 cristi  staff       512 Mar 22 02:29 apache-tomcat-9.0.27\nlrwxr-xr-x   1 cristi  staff        20 Mar 22 03:54 tomcat -> apache-tomcat-9.0.27\n\nSince the tomcat9 docker image(s) did not work due to this issue, I resorted to running exactly the same webapp (in ./webapps/ROOT) using a docker-compose configuration with a jvm docker image:\n\n tomcat:\n    container_name: tomcat\n    image: arm64v8/eclipse-temurin:23\n    volumes:\n      - \"./tomcat:/usr/local/tomcat/\"\n      - \"./webapps:/usr/local/tomcat/webapps/\"\n    command: sh /usr/local/tomcat/bin/start.sh  \n    ports:\n      - '8080:8080'\n\nI simply symlink the ./tomcat folder to different tomcat downloads, and copy a simplified start.sh script in the downloaded apache-tomcat-VERSION/bin. The script is:\n\njava \\\n-Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties \\\n-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \\\n-Djava.protocol.handler.pkgs=org.apache.catalina.webresources \\\n-Dignore.endorsed.dirs= \\\n-classpath /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar \\\n-Dcatalina.base=/usr/local/tomcat \\\n-Dcatalina.home=/usr/local/tomcat \\\n-Djava.io.tmpdir=/usr/local/tomcat/temp \\\norg.apache.catalina.startup.Bootstrap start\n\nI've never used custom mime mappings. Maybe that could be the solution to my problem (apart from changing my decade-old webapp to not use getContent for .mdd files). But I reported here since I could not see any mention of webapp classloader changes in the CHANGELOG.",
      "Switched version to 9.0.102 as the most advanced one where this occurs.\n\nI am not sure a custom mime mapping can help here, as this is not a file served by tomcat, but a file loaded by the webapp from WEB-INF/classes using the webapp classloader",
      "The issue occurs also with tomcat 10, ran the old webapp using \n<Loader jakartaConverter=\"TOMCAT\"/>",
      "Exactly what path are you passing to\n\nthis.getClass().getClassLoader().getResource(filePath)\n\n?\n\ngetResource() is documented to find class resources by name so to obtain the resource at WEB-INF/classes/fileName.mdd you should be passing \"fileName.mdd\".\n\nTo obtain the resource at WEB-INF/classes/org/apache/tomcat/fileName.mdd you should be passing \"org/apache/tomcat/fileName.mdd\"\n\nIt is possible that Tomcat was more lenient about this in older versions and that it has become less lenient as the WebResources implementation has evolved.",
      "You can ignore my previous question. I've done some further work on this and I see this error now.\n\nThe root cause is this commit:\nhttps://github.com/apache/tomcat/commit/03e7bc8487cb706adf1f56586948a7762dd42d14\n\nI'm surprised it has taken over 5 years for this regression to be reported. But now it has, I'll see what I can do to fix it.",
      "(In reply to Mark Thomas from comment #8)\n> You can ignore my previous question. I've done some further work on this and\n> I see this error now.\n> \n> The root cause is this commit:\n> https://github.com/apache/tomcat/commit/\n> 03e7bc8487cb706adf1f56586948a7762dd42d14\n> \n> I'm surprised it has taken over 5 years for this regression to be reported.\n> But now it has, I'll see what I can do to fix it.\n\nI think everyone uses getResourceAsStream instead. The only ones who don't used it to do something like getClassLoader().getResource(directoryPath), then toString() + myFile. It's harder to get it to work, it took a while ...",
      "Fixed in:\n- 11.0.x for 11.0.6 onwards\n- 10.1.x for 10.1.40 onwards\n-  9.0.x for  9.0.103 onwards"
    ],
    "creation_ts": "2025-03-22T18:20:05Z",
    "fixes": [
      69623
    ]
  },
  {
    "id": 56890,
    "summary": "getRealPath returns null",
    "description": "There is more than one report for this kind of error.\n\nsince #55837 and #55345 are marked as fixed I have to add another one for 8.0.11.\n\nCalling\n\n\t\tservletContext.getRealPath( \"\" )     -> some path\n\t\tservletContext.getRealPath( \".\" )    -> null\n\t\tservletContext.getRealPath( \"./\" )   -> null\n\t\tservletContext.getRealPath( \"/\" )    -> same path s.a.\n\t\tservletContext.getRealPath( \"test\" ) -> null\n\nAt least the third one worked under tomcat 7.0.54 as I was using it in order to determine where tomcat had it's webapp directory (this isn't so clear when e.g. running from eclipse)\n\nI think most (if not all) of the null results are bugs and the behaviour was perfectly fine under tomcat <8.\n\n(Note that this code has worked in Tomcat 5, 6, 7)\n\nI would expect that this method to just do translation of the path.\n\nAs I read the other bug reports it seems that tomcat tries to check if this file exists. But I think this is wrong because the concept of Java File doesn't imply that a File must exist. (It weekly implies that it could exist). So instead File has a method 'createNewFile' which clearly wouldn't be there if the file already existed. Furthermore if I wanted to check if a paricular file existed I would use file.exists(), ...canRead() and so on.\n\nFinally the specs state that this method could return under any circumstances. If taken literally this would lead to the question what good it is for anyway if it could just return null no matter what. As I read e.g. https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/ServletRequest.html the 'null' result is there to indicate that the path to this (potential) file is not leading into the filesystem and therefor makes no sense at all.\n\nBest regards and keep up the great work\n\nScheintod",
    "comments": [
      "Resource paths are expected to start with a \"/\" (per javadoc of ServletContext.getResource()). [1]\n\nThe behaviour in Tomcat 8 is caused by a more strict underlying Resources implementation.\n\nThat said,\n- I would expect \"strict compliance\" option (or more specifically GET_RESOURCE_REQUIRE_SLASH option) to control this behaviour both in this and in older versions. Apparently it is not so. [2]\n\n- I wonder whether passing \"\" instead of \"/\" to getRealPath(\"\") is valid.\n\n\n[1] http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html#getResource%28java.lang.String%29\n\n[2] http://tomcat.apache.org/tomcat-7.0-doc/config/systemprops.html#Specification",
      "I'm leaning towards resolving this as invalid.\n\nWhile the spec and the Javadoc could be clearer, it seems pretty obvious that a 'virtual path' is 'servletPath + pathInfo' along the lines of section 3.5 of the Servlet spec.\n\nTherefore, requiring that the virtual path is either empty or starts with '/' seems reasonable.\n\nIt is not unusual for one major verison of Tomcat to interpret a specification more strictly than the previous major version. Such changes are to be expected across major versions and certainly do not qualify as bugs. If these changes are causing problems, then they can be added to the migration guide.\n\nAn argument could be made that the virtual path, if it doesn't start with '/', should be taken as being relative to the ServletContext root - i.e. append '/' and then process it. I'm not convinced that that argument is valid since there is nothing I see in the specs or the Javadoc to support it.",
      "I have no strong opinion on this. Just a few thoughts:\n\n1. getResource() is fundamental different to getRealPath(). Above all getResource( \"/in_war/something\" ) would return data whereas getRealPath( \"/in_war/something\" ) would return null.\n\n2. There is nothing in the spec which tell that getRealPath() must start with a slash. At least not as far as I can see. (IMHO the spec for the whole servlet api is fubar anyway...) So the new behavior is not more strict but just different.\n\n3. The leading slash in the path of urls is kind of inexistent anyway. (In complete urls there is no \"leading slash\". Just a separator between the host and the path)\n\n4. The main advantage of not answering to requests for path's without a leading slash would be imho that the developer (say me) who is already confused about the **** servlet api is remindet that this is an absolute path. On the other hand throwing an exception would be the right thing to take in this case.\n\n5. The spec says: \"This method returns null if the servlet container cannot translate the virtual path to a real path [...]\". The key here is \"cannot\". How it stands right now it is a \"doesn't want to\". (The server could translate it if it wanted to)\n\n6. To be consistent getRealPath( \"\" ) should return null, too.\n\n7. Why fix what's not broken?\n\n8. Finally: For my part I replaced my \"./\" string (after some heavy searching for the problem) with \"/\" and everything worked again. (I won't change this back anyway). But this was the first time I had to fix something for Tomcat upgrades since Tomcat 5. And I liked that very much ;)\n\nBest Regards \n\nScheintod",
      "+1 for invalid.",
      "(In reply to f.bantner from comment #3)\n> I have no strong opinion on this. Just a few thoughts:\n> \n> 1. getResource() is fundamental different to getRealPath().\n\nYes and no. The purpose is very different but they both take a path relative to the base of the servlet context.\n\n> 2. There is nothing in the spec which tell that getRealPath() must start\n> with a slash.\n\nI think it is strongly implied but I agree it could be clearer.\n\n> 3. The leading slash in the path of urls is kind of inexistent anyway.\n\nRegardless, the servlet spec uses leading '/'\n\n> 4. The main advantage of not answering to requests for path's without a\n> leading slash would be imho that the developer (say me) who is already\n> confused about the **** servlet api is remindet that this is an absolute\n> path. On the other hand throwing an exception would be the right thing to\n> take in this case.\n\nThe Javadoc for getRealPath() strongly suggests returning null rather than throwing an exception.\n\n> 5. The spec says: \"This method returns null if the servlet container cannot\n> translate the virtual path to a real path [...]\". The key here is \"cannot\".\n> How it stands right now it is a \"doesn't want to\". (The server could\n> translate it if it wanted to)\n\nAt this point, I really do wish the spec was clearer. I'll raise a bug and see if we can get this addressed for Servlet 3.2. When a later spec clarifies something, Tomcat often back-ports the clarification to earlier versions.\n\nI've re-read the Javadoc for getRealPath() several times. It could be read as \"Take the value of path, append it to 'http://<host>:<port>/<contextPath>' and return the absolute path on the file system that that request would be mapped to or null if that is not possible.\"\n\nThe 'interesting' part here is that path gets appended to something that does not end in '/'. Taking your 5 examples from earlier, that gives us:\ngetRealPath(\"\")     -> http://<host>:<port>/<contextPath>\ngetRealPath(\".\")    -> http://<host>:<port>/<contextPath>.\ngetRealPath(\"./\")   -> http://<host>:<port>/<contextPath>./\ngetRealPath(\"/\")    -> http://<host>:<port>/<contextPath>/\ngetRealPath(\"test\") -> http://<host>:<port>/<contextPath>test\n\nThe first and fourth examples should be OK (assuming the web app is expanded). The others will fail.\n\nThis is actually (more by luck than judegment) how Tomcat is behaving now. I'm not entirely comfortable with this. I'd be happier with either a requirement that the path must start with / (else an IAE is thrown) or a requirement the '/' is prepended if not present.\n\n> 6. To be consistent getRealPath( \"\" ) should return null, too.\n\nIt depends what you are being consistent with. See my response to point 5 that demonstrates that the current behaviour is consistent with at least one point of view.\n\n> 7. Why fix what's not broken?\n\nThe resource handling was almost impossible to maintain. It was horribly fragile and implementing what - then - was expected to be in Servlet 3.1 in terms of overlays would have been a nightmare. The new resource handling is much more robust and provides much more consistent behaviour. What we have here is yet another grey area in the Servlet spec that needs some clarification.\n\n> 8. Finally: For my part I replaced my \"./\" string (after some heavy\n> searching for the problem) with \"/\" and everything worked again. (I won't\n> change this back anyway). But this was the first time I had to fix something\n> for Tomcat upgrades since Tomcat 5. And I liked that very much ;)\n\nI'm fairly sure that however the Servlet EG clarifies this, that starting with \"./\" will end up being invalid so I think you were going to have to change this sooner or later. It is nice to know that for well written applicaitons that follow the spec the upgrade process is as smooth as it is meant to be.\n\nI'm going to leave this in the NEEDINFO state until we get some clarification from the Servlet EG.",
      "https://java.net/jira/browse/SERVLET_SPEC-105",
      "Updated location for the Servlet-spec issue.\n\nhttps://github.com/javaee/servlet-spec/issues/105",
      "Updating the location again:\n\nhttps://github.com/eclipse-ee4j/servlet-api/issues/105",
      "One of the benefits of moving to Eclipse is that is that progress on issues like this is no longer dependent on a single spec lead who may have other priorities.\n\nThe consensus is that the following will be added for Servlet 5.1 onwards:\n\nThe path should begin with a \"/\" and is interpreted as relative to the current context root. If the path does not begin with a \"/\", the container will behave as if the method was called with \"/\" appended to the beginning of the provided path.\n\nI'll update Tomcat to the new behaviour shortly.",
      "Fixed in:\n- 10.0.x for 10.0.0-M11 onwards\n- 9.0.x for 9.0.41 onwards\n- 8.5.x for 8.5.61 onwards\n\n7.0.x was not affected."
    ],
    "creation_ts": "2014-08-26T23:29:41Z",
    "fixes": [
      56890
    ]
  },
  {
    "id": 45015,
    "summary": "Quoting in attributes",
    "description": "According to JSP 2.0 specification (chapter 1.7 page 72,73)\n\nThis code is illegal:\n<mytags:tag value=\"<%= \"hi!\" %>\" />\n\nInstead the correct sentence would be:\n<mytags:tag value='<%= \"hi!\" %>' />\n<mytags:tag value=\"<%= \\\"hi!\\\" %>\" />\n<mytags:tag value='<%= \\\"name\\\" %>' />\n...\n\nBut Tomcat 5.5 accept the first sentence. It's not a real bug but accepting a wrong sentence allow developpers to write code which does not respect the JSP specification. And when this code is executing in another servlet container (Websphere 6.1 for example) it doesn't work.",
    "comments": [
      "This has been fixed in trunk and proposed for 5.5.x and 6.0.x",
      "This has been fixed in 6.0.x and will be in 6.0.17 onwards.",
      "A quick note to anyone being bitten by this bug fix: you can easily search which of your JSPs (*.jsp*) need to be updated with the following regular expression (take a deep breath):\n\n<\\w+:[^>]+=\"[^<\"]*<%=[^%]*\"|<\\w+:[^>]+='[^<']*<%=[^%]*'\n\nUnfortunately, I haven't found a way to automatically fix JSPs, but at least you (hopefully) won't forget any!",
      "This has been fixed in 5.5.x and will be included in 5.5.27 onwards.",
      "Mark,\nI am using Tomcat 5.5.27 on Linux but still facing the problem.\nI am using c:ret tld and using following code in my abc.jsp,\n\n<c-rt:set var=\"currUrl\" value=\"<%=request.getAttribute((String)pageContext.getAttribute(\"param\")+\"_Url\")%>\" />\nWhile jsp compilation , I am getting following error,\norg.apache.jasper.JasperException: file:browser/abc.jsp(51,42) Attribute value request.getAttribute((String)pageContext.getAttribute(\"param\")+\"_Url\") is quoted with \" which must be escaped when used within the value.\n\nWhen I modify the code with escape character it works fine.This is my modified code,\n<c-rt:set var=\"currUrl\" value=\"<%=request.getAttribute((String)pageContext.getAttribute(\\\"param\\\")+\\\"_Url\\\")%>\" />\n\nAccording to comment # 4 this issue is resolved. But I am not sure if it is resolved for Linux version of Tomcat 5.5.27 too.\n\nLet me know if you need more info on this.\n\nOne quick question , Do I have to set any Tomcat JVM options to get rid of the issue temporarily??",
      "I see the same issue for some files having nested quotes and dont see it for some other files having the same kind of nested quoting.\n\nThe kind of quoting giving the problem is mentioned in my previous comment.\nBut the following seam to the working.\nid=\"<%= c.var(\"ActivityBanner.Name\") %><%= c.var(\"ActivityBanner.Index\") %>\"\n\nI don't see any particular standard way in which it fails. Both the cases i have used tomcat 5.5.27",
      "Re comment 5, what you are seeing is the correct behaviour. The checking can be relaxed. See http://tomcat.apache.org/tomcat-5.5-doc/config/systemprops.html\n\nRe comment 6, that could be a bug. Can you provide the simplest complete JSP that demonstrates the issue please.",
      "I have done some more testing and I can't repeat the issue reported in comment 6. If you still see it, please re-open this report and add the simplest JSP that demonstrates the issue.",
      "Hi,\n\nI use apache-tomcat-6.0.18 with jdk1.5.0_13. Ant version is apache-ant-1.6.2.\n\n[b]While using ant to pre-compile JSPs, i get the error message related to quotes and compilation fails.[/b]\n\nSee user list discussion \nhttp://mail-archives.apache.org/mod_mbox/tomcat-users/200810.mbox/%3C20D88322B9D55444A327FEB661C303900BD408E4@HYD-MDP-MBX01.wipro.com%3E \n\nI have tried all that i could (available in link above), but it seems it does not work without code changes. i.e. the System property is not effective for precompilation\n\nPlease check if this is a bug as this is a blocker for us now?",
      "Comment #9 is a question for the Tomcat users list, or possibly even the Ant users list.",
      "Thanks to Cedric for the helpful regex.  I've modified it a bit so it can actually be used to replace and fix (most) instances of this problem automatically.  If you have an IDE that supports regex replace (I used IDEA), do a replace in path for this regex:\n\n(<\\w+:(?:[^>]|<%=[^%]+%>)+=)\"([^<\"]*<%=[^%]*\"[^%]*%>[^\"]*)\"\n\nFor the replacement text, enter:\n\n$1'$2'\n\nDoing this was a necessity for me as I had to make thousands of changes to over 300 JSP files on the code base I'm working on.  I have to say I think this should have been implemented as an opt-in fix via a config or something, rather than breaking backward compatibility for every tomcat user.  Please be more careful in the future guys.  We rely on you to not do things like this to us.",
      "Ok.  I guess I should have read this thread a little more carefully before spending hours fixing all this.  So there is an opt-out for the strict parsing.\n\nhttp://tomcat.apache.org/tomcat-5.5-doc/config/systemprops.html\n\nToo late for me.  Maybe it would be helpful to put something like \"or disable strict quote checking\" in the error message?",
      "You can add this config option to the file \"catalina.properties\" which is in the directory of \"%tomcat_home%/conf\",as follows:\norg.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING=false\nAnd the problem will be resolved\n(In reply to comment #3)\n> A quick note to anyone being bitten by this bug fix: you can easily search\n> which of your JSPs (*.jsp*) need to be updated with the following regular\n> expression (take a deep breath):\n> \n> <\\w+:[^>]+=\"[^<\"]*<%=[^%]*\"|<\\w+:[^>]+='[^<']*<%=[^%]*'\n> \n> Unfortunately, I haven't found a way to automatically fix JSPs, but at least\n> you (hopefully) won't forget any!",
      "Test in TC 6.0.26, the \"strip quote escaping Parser\" didn't work.\n\n-- JUST use this testing code\n<mytags:tag value=\"<%= \"hi!\" %>\" />\n\n-- I setup a jspc command line to debug the JspC\n-- Then I reaches this stack frames\nmain@1, prio=5, in group 'main', status: 'RUNNING'\n\t  at org.apache.jasper.compiler.AttributeParser.getUnquoted(AttributeParser.java:54)\n\t  at org.apache.jasper.compiler.Parser.parseAttributeValue(Parser.java:249)\n\t  at org.apache.jasper.compiler.Parser.parseAttribute(Parser.java:205)\n\t  at org.apache.jasper.compiler.Parser.parseAttributes(Parser.java:148)\n\t  at org.apache.jasper.compiler.Parser.parseCustomTag(Parser.java:1204)\n\t  at org.apache.jasper.compiler.Parser.parseElementsScriptless(Parser.java:1467)\n\t  at org.apache.jasper.compiler.Parser.parseElements(Parser.java:1385)\n\t  at org.apache.jasper.compiler.Parser.parseBody(Parser.java:1630)\n\t  at org.apache.jasper.compiler.Parser.parseOptionalBody(Parser.java:974)\n\t  at org.apache.jasper.compiler.Parser.parseCustomTag(Parser.java:1242)\n\t  at org.apache.jasper.compiler.Parser.parseElementsScriptless(Parser.java:1467)\n\t  at org.apache.jasper.compiler.Parser.parseElements(Parser.java:1385)\n\t  at org.apache.jasper.compiler.Parser.parseBody(Parser.java:1630)\n\t  at org.apache.jasper.compiler.Parser.parseOptionalBody(Parser.java:974)\n\t  at org.apache.jasper.compiler.Parser.parseCustomTag(Parser.java:1242)\n\t  at org.apache.jasper.compiler.Parser.parseElementsScriptless(Parser.java:1467)\n\t  at org.apache.jasper.compiler.Parser.parseElements(Parser.java:1385)\n\t  at org.apache.jasper.compiler.Parser.parseBody(Parser.java:1630)\n\t  at org.apache.jasper.compiler.Parser.parseOptionalBody(Parser.java:974)\n\t  at org.apache.jasper.compiler.Parser.parseCustomTag(Parser.java:1242)\n\t  at org.apache.jasper.compiler.Parser.parseElementsScriptless(Parser.java:1467)\n\t  at org.apache.jasper.compiler.Parser.parseBody(Parser.java:1633)\n\t  at org.apache.jasper.compiler.Parser.parseJspBody(Parser.java:1584)\n\t  at org.apache.jasper.compiler.Parser.parseJspAttributeAndBody(Parser.java:1001)\n\t  at org.apache.jasper.compiler.Parser.parseOptionalBody(Parser.java:972)\n\t  at org.apache.jasper.compiler.Parser.parseCustomTag(Parser.java:1242)\n\t  at org.apache.jasper.compiler.Parser.parseElements(Parser.java:1418)\n\t  at org.apache.jasper.compiler.Parser.parse(Parser.java:130)\n\t  at org.apache.jasper.compiler.ParserController.doParse(ParserController.java:255)\n\t  at org.apache.jasper.compiler.ParserController.parse(ParserController.java:103)\n\t  at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:185)\n\t  at org.apache.jasper.compiler.Compiler.compile(Compiler.java:347)\n\t  at org.apache.jasper.JspC.processFile(JspC.java:1182)\n\t  at org.apache.jasper.JspC.execute(JspC.java:1331)\n\t  at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)\n\t  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\t  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\t  at java.lang.reflect.Method.invoke(Method.java:597)\n\t  at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)\n\t  at org.apache.tools.ant.TaskAdapter.execute(TaskAdapter.java:134)\n\t  at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n\t  at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)\n\t  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\t  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\t  at java.lang.reflect.Method.invoke(Method.java:597)\n\t  at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)\n\t  at org.apache.tools.ant.Task.perform(Task.java:348)\n\t  at org.apache.tools.ant.Target.execute(Target.java:357)\n\t  at org.apache.tools.ant.Target.performTasks(Target.java:385)\n\t  at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n\t  at org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n\t  at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\t  at org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n\t  at org.apache.tools.ant.Main.runBuild(Main.java:698)\n\t  at org.apache.tools.ant.Main.startAnt(Main.java:199)\n\t  at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n\t  at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)\n\n-- In this frame: parseAttributeValue(Parser.java:249) - \n   The method signature is: private String parseAttributeValue(String watch) throws JasperException\n   We can see the parameter (watch)'s value is three characters: '%', '>', '\"' \n   So after this code fragment executed\n   -> 245 \u00a0\u00a0\u00a0\u00a0 char quote = 0;\n   -> 246 \u00a0\u00a0\u00a0\u00a0 if (watch.length() == 1) {\n   -> 247 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 quote = watch.charAt(0);\n   -> 248 \u00a0\u00a0\u00a0\u00a0 }\n   the \"quote\" variable is actually 0\n   so event the system property \"org.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING\" isn't set to \"false\"\n   the strit parser didn't report for this problem \n   ->  (codes in org.apache.jasper.compiler.AttributeParser)\n   -> 307 \u00a0\u00a0\u00a0\u00a0 } else if (ch == quote && strict) {\n   -> 308 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 String msg = Localizer.getMessage(\"jsp.error.attribute.noescape\",\n   -> 309 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 input, \"\"+ quote);\n   -> 310 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throw new IllegalArgumentException(msg);\n   -> 311 \u00a0\u00a0\u00a0\u00a0 } else {\n   the line 307's condition should never be evaluated to \"true\"",
      "Test this issue in 6.0.20, and it works. So there should be a regression between 6.0.21 and 6.0.26",
      "Confirmed. I have a failing test case. I'll add that to trunk and then work on a fix.",
      "This has been re-fixed in trunk and proposed for 6.0.x\n\nMoving to 6.0.x since the regression does not exist in 5.5.x",
      "This has been fixed in 6.0.x and will be included in 6.0.27 onwards.",
      "adding org.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING=false in catalina.properties worked for me\n\nThanks to (In reply to comment #13)\n> You can add this config option to the file \"catalina.properties\" which is in\n> the directory of \"%tomcat_home%/conf\",as follows:\n> org.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING=false\n> And the problem will be resolved\n> (In reply to comment #3)\n> > A quick note to anyone being bitten by this bug fix: you can easily search\n> > which of your JSPs (*.jsp*) need to be updated with the following regular\n> > expression (take a deep breath):\n> > \n> > <\\w+:[^>]+=\"[^<\"]*<%=[^%]*\"|<\\w+:[^>]+='[^<']*<%=[^%]*'\n> > \n> > Unfortunately, I haven't found a way to automatically fix JSPs, but at least\n> > you (hopefully) won't forget any!\n\nWorked for me, thanks !!"
    ],
    "creation_ts": "2008-05-16T04:22:28Z",
    "fixes": [
      45015
    ]
  },
  {
    "id": 66536,
    "summary": "tagsfiles seem to be compiled with the wrong source encoding",
    "description": "Created attachment 38526\nminimal webapp\n\nHi there,\n\nWhen I let tomcat/jasper compile the following tag file \n(WEB-INF/tags/umlaut.jsp):\n\n<%@tag\n  trimDirectiveWhitespaces=\"true\"\n  pageEncoding=\"UTF-8\"\n%>\n<%= \"\u00fc does not work\" %> // bytes c3 bc\n\ncompiles into umlaut_tag.java in which the umlaut is doubly utf-8 encoded\nlike this:\n\n      out.print( \"\u00c3\u00bc does not work\" ); // bytes c3 83 c2 bc\n\nString literals in jsp files work just fine, so I'd like to rule out\nerrors in my encoding setup.\n\n(Tomcat is running with LC_ALL=de_DE.UTF-8.)\n\nI've attached a minimal webapp demonstrating that jsp is working, but the tag files are not.\n\nRegards,\n  Holger",
    "comments": [
      "Thanks for the report. I can confirm that this is a Tomcat bug.\n\nFixed in:\n- 11.0.x for 11.0.0-M5 onwards\n- 10.1.x for 10.1.8 onwards\n-  9.0.x for  9.0.74 onwards\n-  8.5.x for  8.5.88 onwards\n\nIt you want a short-term work-around, add a single space character after <%@tag and before the newline."
    ],
    "creation_ts": "2023-03-21T13:47:54Z",
    "fixes": [
      66536
    ]
  },
  {
    "id": 64373,
    "summary": "tag-file reference from .tld in /WEB-INF/classes/META-INF cannot be resolved",
    "description": "Created attachment 37195\npatch for TagLibraryInfoImpl\n\nWhen the Jar Scanner is configured with scanAllDirectories, TldScanner will load tag library descriptors in /WEB-INF/classes/META-INF/ (@see TldScanner.TldScannerCallback#scanWebInfClasses)\n\nWhen a .tld references a tag-file, it MUST reference it as /META-INF/tags/blah.tag (attempting a relative path results in Illegal tag file path..., I guess that's a spec requirement)\n\ne.g. /WEB-INF/classes/META-INF/tags.tld\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<taglib xmlns=\"http://java.sun.com/xml/ns/j2ee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee web-jsptaglibrary_2_0.xsd\"\n\tversion=\"2.0\">\n\t<tlib-version>1.0</tlib-version>\n\t<short-name>tags</short-name>\n\t<tag-file>\n\t\t<name>bug</name>\n\t\t<path>/META-INF/tags/bug.tag</path>\n\t</tag-file>\n</taglib>\n\n\nA .tld living in /WEB-INF/classes referencing a tag-file in /META-INF/tags intends it to be loaded from /WEB-INF/classes/META-INF/tags in the same way that a .tag living in a jar is loaded from /META-INF inside the jar.\n\nHOWEVER the tag-file is instead loaded from /META-INF/tags at the root of the webapp, which of course can't be found.\n\nI think this should be resolved, as Tomcat appears to support .tlds in /WEB-INF/classes/META-INF. I also _think_ the solution is quite simple (hey sometimes it is!)...\n\nTagLibraryInfoImpl#createTagFileInfo knows the path and whether it's in a jar or not, so it can \"correct\" the path to have /WEB-INF/classes in front. I've attached a patch for this change.\n\nAll the best,\nKarl",
    "comments": [
      "Looking at this now...\n\nYes, it is a spec requirement (JSP.8.4.1) that for tags packaged in a JAR the path must always start with \"/META-INF/tags/...\"",
      "Many thanks for the report and the patch. Your analysis looks to be spot on to me.\n\nFixed in:\n- master for 10.0.0-M5 onwards\n- 9.0.x for 9.0.35 onwards\n- 8.5.x for 8.5.55 onwards",
      "That's fantastic, thank you very much Mark."
    ],
    "creation_ts": "2020-04-23T20:41:32Z",
    "fixes": [
      64373
    ]
  },
  {
    "id": 61055,
    "summary": "RewriteValve proxy support",
    "description": "Hi\n\nin rewrite valve there is this comment:\n\n        // FIXME: Proxy not supported, would require proxy capabilities in Tomcat\n        /* } else if (flag.startsWith(\"proxy\") || flag.startsWith(\"P\")) {\n            rule.setProxy(true);*/\n\nIs it planned to actually implement it? One implementation could rely on some external library addition like httpcomponent for instance. Wdyt?\n\nIf not intended maybe throwing an error or warning should replace that commented logic?",
    "comments": [
      "The documentation for the valve is accurate (\"P\" is not mentioned).\n\nWriting a proxy is rather big business IMO both for development and even more for maintenance. There's no plan to write one at the moment, unless something is contributed.",
      "I've updated the comments to make it clear that there are no plans to implement proxy support.\n\nThis has been fixed in:\n- 9.0.x for 9.0.0.M22 onwards\n- 8.5.x for 8.5.16 onwards\n- 8.0.x for 8.0.45 onwards"
    ],
    "creation_ts": "2017-04-30T12:55:17Z",
    "fixes": [
      61055
    ]
  },
  {
    "id": 69508,
    "summary": "<jsp:include> in some circumstances produces malformed url",
    "description": "Pre-10.1.33 Tomcat properly generates java code for jsp:include like next\n\n<jsp:include page=\"/main?cmd=someCommand\">\n  <jsp:param name=\"param1\" value=\"value1\"/>\n</jsp:include>\n\nGenerated java code is:\n\norg.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,\n    \"/main?cmd=someCommand\"\n        + \"&\"\n        + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(\"param1\", request.getCharacterEncoding())\n        + \"=\"\n        + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(\"value1\", request.getCharacterEncoding()),\n    out, false);\n\nResulting url is \"/main?cmd=someCommand&param1=value1\"\n\nStarting from 10.1.33 generated java code is:\n\nString _jspx_temp0_url = \"/main?cmd=utility.getRefreshRate\";\nString _jspx_temp0_requestEncoding = request.getCharacterEncoding();\norg.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,\n    _jspx_temp0_url\n        + \"?\" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(\"rateType\", _jspx_temp0_requestEncoding)\n        + \"=\" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(\"Dashboard\", _jspx_temp0_requestEncoding)\n    , out, false);\n\nresulting url is \"/main?cmd=someCommand?param1=value1\". There are has two question marks in url and it is malformed.\n\n As far as I understand issue was introduced by fix for 'Bug 69382 - Inefficient code generated for <jsp:include>'. Source of the issue is the introduction of the _jspx_temp0_url variable in 10.1.33. Method generateIncludeWithParameters calls method printParams with variable name in pageParam parameter instead of value from page attribute of jsp:include tag. As result code in line 1030 now can't work properly.\nI mean this code:\nif (literal) {\n    sep = pageParam.indexOf('?') > 0 ? \"\\\"&\\\"\" : \"\\\"?\\\"\";\n} else {\n    sep = \"((\" + pageParam + \").indexOf('?')>0? '&': '?')\";\n}",
    "comments": [
      "see PR https://github.com/apache/tomcat/pull/803",
      "Thanks. PR applied with minor changes.\n\nFixed in:\n- 11.0.x for 11.0.3 onwards\n- 10.1.x for 10.1.35 onwards\n-  9.0.x for  9.0.99 onwards",
      "I also verified the fix earlier today, so +1. I thought the included test was too big since the code coverage is already 100%, but it works.\n\nNote: Without the fix, the parameter value would be something like: \"value1?param2=value2\". But it won't produce an error by itself. So it is quite stealthy.",
      "*** Bug 69570 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2024-12-21T21:56:40Z",
    "fixes": [
      69508
    ]
  },
  {
    "id": 65921,
    "summary": "Null pointer exception if RewriteRule attempts to set mime type",
    "description": "A rewrite rule like:\n\nRewriteRule ^/path/.*$ - [T=text/xml]\n\nfails with a NullPointerException because the contentTypeMB field in the Request object has not initialized.  Request.setContentType should initialize contentTypeMB, or the rewrite valve should call getContentType first.  The former is preferable in case there is no content type in the request.\n\nThis always happens with the HTTP/1.1 connector.  With the AJP connector the exeception occurs if the request does not contain a Content-Type header.\n\nBacktrace:\n\n\tjava.lang.NullPointerException: Cannot invoke \"org.apache.tomcat.util.buf.MessageBytes.setString(String)\" because \"this.contentTypeMB\" is null\n\t\tat org.apache.coyote.Request.setContentType(Request.java:465)\n\t\tat org.apache.catalina.connector.Request.setContentType(Request.java:1057)\n\t\tat org.apache.catalina.valves.rewrite.RewriteValve.invoke(RewriteValve.java:448)\n\t\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)\n\t\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\n\t\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:359)\n\t\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)\n\t\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n\t\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:889)\n\t\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1735)\n\t\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\t\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n\t\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n\t\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\t\tat java.base/java.lang.Thread.run(Thread.java:833)",
    "comments": [
      "This should be setting the content-type on the response rather than the request.",
      "Fixed in:\n- 10.1.x for 10.1.0-M12 onwards\n- 10.0.x for 10.0.18 onwards\n- 9.0.x for 9.0.60 onwards\n- 8.5.x for 8.5.77 onwards",
      "The use case here was to fix up the content-type in a request before it reaches he application (the client code was sending the wrong type).\n\nIf this RewriteRule mechanism is in fact designed to set the response type, how can the request type be changed?  I can write a custom valve but the rewrite mechanism seemed better.",
      "The portable way would be to use a Filter and wrap the HttpServletRequest."
    ],
    "creation_ts": "2022-02-28T14:53:24Z",
    "fixes": [
      65921
    ]
  },
  {
    "id": 61740,
    "summary": "Intermittent NIO HTTP/2 errors",
    "description": "Created attachment 35509\nscreenshot of bug, code to reproduce (hopefully)\n\nI\u2019m trying to troubleshoot an intermittent response error using Tomcat 8.5.23 or 9.0.1 when using HTTP/2.  Basically we noticed that when running in HTTP/2 random css, js or html pages would error out causing small bugs that would go away on refresh.  We were finally able to isolate it to a test case that \"usually\" reproduces the error. \n\nThe test case uses 100 iframes to draw 10 table cells that each get colored green by a seperate css file so in total it makes 1101 requests.  If some of those requests don't make it and then it displays red on that cell.  (See attached image in the zip of the error in action).  I reproduced it using the latest version of Firefox with caching disabled so that it makes every request independently.  It is very hard to reproduce in Chrome since it tends to ignore no-caching settings.  I've also found it easier to reproduce using a client that has Windows 10 and a powerful computer.  A less powerful client running Windows 7 had difficulty reproducing the error but still could after enough tries.\n\nSo Tomcat running on Windows x64 and fresh download of either 9.0.1 or 8.5.23 with stock configuration I enable HTTP/2 with:\n\n    <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\" >\n        <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n        <SSLHostConfig>\n            <Certificate \n                certificateKeystoreFile=\"xxx.pfx\"\n                certificateKeystorePassword=\"xxx\"\n                certificateKeystoreType=\"PKCS12\"\n                type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\nAnd put the test files in the ROOT app and then hit https://localhost:8443/newtest.html until the error happens.\n\nAs you can see in the image, some of the responses have 0 bytes and they will display in red, some of the responses have response bodies but no HTTP status code, some have HTTP 200 but no response body.  When there is no http status returned the access log records these as 500 errors.  I can't find any meaningful exception with catalina debug logging turned on.",
    "comments": [
      "According to my testing, this demonstrates some amount of reliability issues and possible fixes pretty much everywhere, but more with NIO2. Lots of things to work on and debug, thanks for keeping us busy ;)",
      "I fixed the NIO2 specific issue (it will be in 9.0.2) pending possible further improvements. The behavior is now the same as with NIO, I can reproduce that very few of the static requests fail and I don't see where the root cause can be at the moment.",
      "A huge thank you for the test case. This bug has all the hallmarks of being very tricky to track down the root cause. Having a reliable test case is an enormous help.\n\nI'm able to reproduce the problem and, with debug logging for HTTP/2 enabled, I can see an exception relating to HPACK decoding. I'm looking into this now.",
      "Fixed in:\n- trunk for 9.0.2 onwards\n- 8.5.x for 8.5.24 onwards\n\nAgain, many, many thanks for the test case.",
      "Thanks for the speedy fixes!"
    ],
    "creation_ts": "2017-11-08T23:13:55Z",
    "fixes": [
      61740
    ]
  },
  {
    "id": 42390,
    "summary": "JSP compilation error with nested tagfile tags with variables with \"AT_BEGIN\" scope",
    "description": "Given a tagfile \"test.tag\" in /WEB-INF/tags/t:\n---- begin test.tag ----\n<%@ variable name-given=\"X\" scope=\"AT_BEGIN\" %>\n<jsp:doBody/>\n---- end test.tag ----\nthe following JSP \"testTest.jsp\":\n---- begin testTest.jsp ----\n<t:test><t:test/></t:test>\n---- end testTest.jsp ----\ngives a JSP compilation error:\norg.apache.jasper.JasperException: Unable to compile class for JSP: \nStacktrace:\n        at\norg.apache.jasper.compiler.DefaultErrorHandler.javacError(DefaultErrorHandler.java:85)\n        at\norg.apache.jasper.compiler.ErrorDispatcher.javacError(ErrorDispatcher.java:330)\n        at\norg.apache.jasper.compiler.JDTCompiler.generateClass(JDTCompiler.java:435)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:298)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:277)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:265)\n        at\norg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:564)\n        at\norg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:299)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:315)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:265)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:269)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)\n        at\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:210)\n        at\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)\n        at\norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n        at\norg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)\n        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:542)\n        at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)\n        at\norg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:151)\n        at\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:870)\n        at\norg.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665)\n        at\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)\n        at\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:685)\n        at java.lang.Thread.run(Thread.java:613)",
    "comments": [
      "Created attachment 23070\nready-to-use WAR file that reproduces the issue",
      "I have arranged the OP's sources as a ready-to-use web application - that is the WAR file that I attached above.\n\nUsing it I can reproduce the problem in the following TC versions:\n5.5.27, 6.0.18 and the current tc6.0.x branch as at revision 730794. Thus bumping the Version field.\n\nTo reproduce:\n1. Deploy the application\n2. Access http://localhost:8080/bug42390/\n3. The following compilation error is displayed: (tc6.0.x)\n\norg.apache.jasper.JasperException: Unable to compile class for JSP: \n\nAn error occurred at line: 99 in the generated java file\n_jspx_X_1 cannot be resolved\n...\n\nNote: The tag file compiles fine. It is JSP that does not compile.",
      "Created attachment 23072\npatch for tc6.0.x that fixes the issue\n\nI am attaching patch that fixes the issue. It is against the tc6.0.x branch.\n\nThe cause was that scripting var info of the nested Node.CustomTag was not populated by ScriptingVariableVisitor#setScriptingVars() call.\n\nIt occurred because it thought that the variable was already declared, because it was present in ScriptingVariableVisitor#scriptVars, because the same instance of ScriptingVariableVisitor was used for the parent and child.",
      "Again, many thanks for the patch.\n\nIt has been applied to trunk and proposed for 6.0.x and 5.5.x",
      "Patch has been reverted for more testing.",
      "I have done some further testing of the patch and can't find any regressions. I have therefore re-proposed the patch for 6.0.x and 5.5.x",
      "The patch has been applied to 6.0.x and will be included in 6.0.21 onwards.",
      "Note that the patch caused bug48616. Find a solution that fixes both bugs will be tracked in bug48616.",
      "The proposed patch for 5.5.x has been updated with a fix for the regession.",
      "This issue was fixed in 5.5.x in r935941 and will be in 5.5.30 onwards."
    ],
    "creation_ts": "2007-05-11T00:59:37Z",
    "fixes": [
      42390
    ]
  },
  {
    "id": 66276,
    "summary": "Intermittent ClassCastException with HTTP/2 streams",
    "description": "Overview: When Tomcat is configured to use HTTP/2, the following errors will occasionally be seen in the application logs:\n\n2022-09-04 09:28:59.481 FATAL   [http-exec-36] Unhandled exception in thread \"http-exec-36\": java.lang.ClassCastException: org.apache.coyote.http2.RecycledStream cannot be cast to org.apache.coyote.http2.Stream\njava.lang.ClassCastException: org.apache.coyote.http2.RecycledStream cannot be cast to org.apache.coyote.http2.Stream\n\tat org.apache.coyote.http2.AbstractNonZeroStream.rePrioritise(AbstractNonZeroStream.java:79)\n\tat org.apache.coyote.http2.Http2UpgradeHandler.reprioritise(Http2UpgradeHandler.java:1651)\n\tat org.apache.coyote.http2.Http2AsyncUpgradeHandler.reprioritise(Http2AsyncUpgradeHandler.java:41)\n\tat org.apache.coyote.http2.Http2Parser.readPriorityFrame(Http2Parser.java:299)\n\tat org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler.completed(Http2AsyncParser.java:254)\n\tat org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler.completed(Http2AsyncParser.java:164)\n\tat org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler.completed(SocketWrapperBase.java:1113)\n\tat org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper$NioOperationState.run(NioEndpoint.java:1634)\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:750)\n\n\nSteps to reproduce: Enable HTTP/2 connections, and view the application logs after it has been running for a period of time.\n\nActual Results: No obvious affect on the application. Appears to be an intermittent error.",
    "comments": [
      "Thanks for the report.\n\nFixed in:\n- 10.1.x for 10.1.1 onwards\n- 10.0.x for 10.0.27 onwards (Maybe)\n- 9.0.x for 9.0.68 onwards\n- 8.5.x for 8.5.83 onwards",
      "Fixed in:\n- 10.0.x for 10.0.27 onwards"
    ],
    "creation_ts": "2022-09-26T08:35:41Z",
    "fixes": [
      66276
    ]
  },
  {
    "id": 53737,
    "summary": "Use ServletContext.getJspConfigDescriptor() in Jasper instead of XML-parsing of merged web.xml [PATCHES]",
    "description": "In Tomcat 7.0.29 in ContextConfig#webConfig() a merged web.xml file is serialized into String and is put as an attribute into ServletContext.\n\n[[[\n        String mergedWebXml = webXml.toXml();\n        sContext.setAttribute(\n               org.apache.tomcat.util.scan.Constants.MERGED_WEB_XML,\n               mergedWebXml);\n]]]\n\nThen in JspConfig#processWebDotXml() of Jasper it is parsed again from XML into objects.\n\nIt would be better to access the necessary configuration through Servlet 3.0 API methods such as ServletContext.getJspConfigDescriptor().",
    "comments": [
      "Fixed in trunk and 7.0.x and will be included in 7.0.30 onwards.",
      "The fix wasn't as simple as it first appeared due to having to support JspC. The original fix has been reverted pending a re-think.",
      "Created attachment 30504\nAdd support for JspConfig to JspC's ServletContext\n\nRelated to r1377509 (reverted), this patch adds support for identifying the effective version of an application and for setting up a JspConfigDescriptor for JspC that would match the one returned by a container at runtime.\n\nThis should mean that Mark's original change would also work in JspC, allowing the two implementations to be consolidated.\n\nThis patch does not yet attempt to merge in web-fragment.xml files as that functionality is not supported by the current JspC implementation either. I plan to add that later if this looks like a good way to go.\n\nThere is also some duplication with implementations in o.a.c.core. Jasper does not have any dependencies on catalina so I did not reuse those. However, these could potentially be moved to o.a.tomcat.util and shared.",
      "Created attachment 30533\nAdd changes from r1377509\n\nUpdate previous patch to merge in changes from r1377509 that were reverted due to issues with JspC. This removes need for Jasper's compiler to parse a web.xml, instead relying on a ServletContext provided by the container or now by the JspC shell. Jasper's WebXml class was deprecated in r1377509, it is not longer referenced in Jasper and could be removed.\n\nRan test-bio with no failures, and ran JspC separately on a simple webapp to verify <jsp-config> is being handled (checked default-content-type is picked up from web.xml).\n\nPatch still has todo's to add web-fragment support when JspC builds its ServletContext.",
      "Created attachment 30568\nIncremental, adds merging of fragments and scanning using ServletContext\n\nIncrement on prior patch to add merging of jsp-config found in web-fragments.\n\nAlso change to JspC to scan for JSPs based on resources found in the ServletContext. This currently works just for resources in the main webapp but not for those in META-INF/resources in jars - work is still needed in JspCServletContext to map those.",
      "This has been partially fixed using a combination of the original fix, the patches here and patches from violetagg.\n\nweb-fragment and annotations are still TODO so the code is effectively in the same place funcitonaly as before the patch.",
      "Support for web fragments has been added.\n\nSupport for annotations is not required as they do not affect JspC.\n\nSupport for JSPs in resource JARs is still to do.",
      "Resource JAR supported added to:\n- 9.0.x for 9.0.14 onwards\n- 8.5.x for 8.5.36 onwards\n\n7.0.x does not support resource JARs."
    ],
    "creation_ts": "2012-08-18T00:54:55Z",
    "fixes": [
      53737
    ]
  },
  {
    "id": 66442,
    "summary": "Data frame included in response for 204 No Content status",
    "description": "Hi,\n\nWhile investigating issue https://github.com/reactor/reactor-netty/issues/2664\nwhere the server is Tomcat and the client is Reactor Netty, I'm observing that Tomcat sends (the logs below are from the client side):\n\nHEADERS: streamId=3 headers=DefaultHttp2Headers[:status: 204, date: Wed, 25 Jan 2023 07:46:07 GMT] padding=0 endStream=false\n\nDATA: streamId=3 padding=0 endStream=true length=0 bytes=\n\nI expect that for responses 204/304 Tomcat will send only HEADERS with endStream=true as these kind of response are defined as \"no content\".\n\nA reproducible example can be found in the linked issue above.\n\nRegards,\nVioleta",
    "comments": [
      "I can see what the problem is and I think I have a fix for this. Just need to work on some additional unit tests and confirm the fix works as intended.",
      "Fixed in:\n- 11.0.x for 11.0.0-M3 onwards\n- 10.1.x for 10.1.6 onwards\n-  9.0.x for  9.0.72 onwards\n-  8.5.x for  8.5.86 onwards",
      "Thanks a lot"
    ],
    "creation_ts": "2023-01-25T10:00:24Z",
    "fixes": [
      66442
    ]
  },
  {
    "id": 49180,
    "summary": "Add option to disable log rotation in FileHandler.",
    "description": "Small enhancement to FileHandler.java which allow susers to disable log rotation by setting the .rotation attribute to \"false\".",
    "comments": [
      "Created attachment 25344\nDisables log rotation in Tomcat's JULI FileHandler",
      "applied change via http://svn.apache.org/viewvc?rev=1029719&view=rev",
      "Created attachment 26844\n2011-04-02_tc6_49180.patch\n\nPatch for Tomcat 6.0.\nIt is r1029719 + JavaDoc update.",
      "Fixed in 6.0.x and will be included in 6.0.33 onwards."
    ],
    "creation_ts": "2010-04-24T13:34:58Z",
    "fixes": [
      49180
    ]
  },
  {
    "id": 43741,
    "summary": ".tag files in a .tar recompiled for each .jsp -- extremely slow (with fix)",
    "description": "Jasper is *extremely* slow at compiling .tag files packaged in a .jar -- tens \nof seconds per JSP. One cause is that .tag files are repeatedly recompiled for \neach .jsp even though they have not changed.\n\nThe following few lines fix this.  The added code is marked between // --------\n AJB markers.  \nIt effectively turns off the timestamp checking on .jar files.\n\nThis does NOT actually introduce a bug.  There is an existing bug in that .jsp \nfiles are not \nautomatically recompiled if any .tags in .jars are changed.  So you need to \npurge work in either case.  \nA proper fix would be to check dependencies properly, at least to the .jar \nfile itself.  \nBut the current fix is *much* better that the existing behavior.\n\nThere are better solutions, but an 80% solution is better than no solution.\n\n\n// Tomcat 6.0.10 Src deployed version.\n\npublic class JspCompilationContext {...\n\n    public void compile() throws JasperException, FileNotFoundException {\n        createCompiler();\n\n        // ------------ begin AJB\n        // Hack to stop .tag files that are packaged in .jars being recompiled \nfor every single .jsp that uses them.\n        // The hack means that .tag files will not be automatically recompiled \nif they change -- you need to delete work area.\n        // But that was actually an existing bug -- .jsps are not dependent on \nthe .tag .jars so the work area needed deleting anyway.\n        // (Outstanding is to compile multiple .tags in one pass and so make \nthe process Much faster.)\n        boolean outDated;\n        if (isPackagedTagFile) outDated = ! new File(getClassFileName()).exists\n();\n        else outDated = jspCompiler.isOutDated();\n//        AjbLog.log(\"### Compiler.compile \" + jspUri + \" pkgTagFile \" + \nisPackagedTagFile + \" outDated \" + outDated + \" \" + getClassFileName());\n        if (outDated) {\n//     if (isPackagedTagFile || jspCompiler.isOutDated()) { // original code.\n//     ---------------- end AJB\n            try {\n                jspCompiler.removeGeneratedFiles();\n                jspLoader = null;\n                jspCompiler.compile();\n                jsw.setReload(true);\n                jsw.setCompilationException(null);\n            } catch (JasperException ex) {\n                // Cache compilation exception\n                jsw.setCompilationException(ex);\n                throw ex;\n            } catch (Exception ex) {\n                JasperException je = new JasperException(\n                            Localizer.getMessage(\"jsp.error.unable.compile\"),\n                            ex);\n                // Cache compilation exception\n                jsw.setCompilationException(je);\n                throw je;\n            }\n        }\n    }",
    "comments": [
      "I'd much rather fix the cause than the symptom. The proper fix for this will be\nto implement the enhancement described in bug 43742.\n\nI'll check the code to see if the JSP -> JAR dependency has been fixed (and if\nit hasn't - fix it) but if you have a bug number that would save me some time.",
      "I have looked at this some more.\n\nI think your patch is pretty much spot on. Generally, if a JAR changes, the app\nneeds to be re-loaded (eg using reloadable or watched resources). That is true\nfor any other JAR and I don't see why it shouldn't be true for JARs containing\ntag files.\n\nCompiling tags in a single pass (bug 43742) would also help.\n\nBug 43878 will also contribute to poor performance, although in a different way.\n\nYour patch has been applied to trunk and proposed for 6.0.x.",
      "My relaoding comment is wrong. The app needs to be redployed (ie the work dir\ncleared as pointed out in the original report). I have reverted the patch and am\nworking on one that handles tags in JARs.",
      "I have a proper fix for this now:\nhttp://svn.apache.org/viewvc?rev=618481&view=rev\n\nIt has been committed to trunk and proposed for 6.0.x",
      "This has been committed to 6.0.x and will be in 6.0.17 onwards."
    ],
    "creation_ts": "2007-10-30T21:10:48Z",
    "fixes": [
      43741
    ]
  },
  {
    "id": 64080,
    "summary": "Graceful shutdown does not occur for connected clients that have not yet submitted their request payload",
    "description": "Continuing from bug 62515, testing shows that graceful shutdown will occur if:\n- the request has reached the servlet\n- bindOnInit is set to false on Connector in server.xml\n- unloadDelay is set to sufficient high value on Context in context.xml\n\nThe key point here is \"the request has reached the servlet\".\n\nThe server will accept a connect SYN/ACK and still terminate the connection, resulting in error upstream.\n\nExpected behavior for Tomcat here would be to:\n1. Either not accept the connect (as it is shutting down)\nOr\n2. If accepted, wait unloadDelay/some_other_property period of time to receive the request and respond to it.\n\nTo reproduce the error:\n\nSERVER\n- servlet with sleep of 30s\n- unloadDelay set to 60s\n- bindOnInit set to false\n\nTestcase:\n1. Use HTTPUrlConnection\nurlConn.setDoInput (true);\nurlConn.setDoOutput (true);\nurlConn.setUseCaches (false);\nurlConn.setConnectTimeout(1000); //1 second\nurlConn.setReadTimeout(10000); // 10 seconds\nurlConn.connect();\n\nAt this point a succesful connection to Tomcat server has been established by the Java Client\n\n2. Shutdown Tomcat server\nTomcat will abort this connection\n\n3. Submit request: \nOutputStreamWriter printout = new OutputStreamWriter(urlConn.getOutputStream (), charset);\n\nThis will throw a IOException (SocketTimeOutException)",
    "comments": [
      "I'll note that:\n- there is a similar situation with requests in the keep-alive state;\n- the issue was introduced largely as a result of the switch from blocking IO to non-blocking IO.\n\nAre you expecting Tomcat to process these requests normally (within some configured timeout or set of timeouts for each stage) or is cleanly returning a 503 an acceptable response?\n\nLooking at the existing code, processing the requests normally is a much more invasive change that returning a 503.\n\nA likely issue with a 503 is that clients won't read it until they have sent the entire request so the Connector's maxSwallowSize configuration becomes a factor as well.\n\nIt looks like changes would be required;\n- in the Processor.service() implementations to always process the request on the first iteration around the processing loop\n- in Endpoint.stopInternal() to add a delay / wait between pause() (which stops the Acceptor) and stopping the Poller (NIO/APR) / closing the active connections (NIO2)\n\nI'm moving this to an enhancement",
      ">Are you expecting Tomcat to process these requests normally (within some >configured timeout or set of timeouts for each stage) or is cleanly returning a >503 an acceptable response?\n\nIn a perfect world, I'd like Tomcat to behave like an enterprise server, eg if it accepts a connection, it will process the request and submit the response before shutting down. A timeout should be provided (IMO unloadDelay is sufficient), for in-flight requests (including the connection stage) to complete.\n\nIf this is not possible, then I would prefer the socket NOT to accept the connection, eg any connection attempt from the client (after the server shutdown has started) should result in a connection time out. This is IMO a much better approach than 503, as it is a more clear cut message to the upstream client that this server is not available, so either fail over to another server or report the error message further up stream.",
      "(In reply to carbattles from comment #2)\n> In a perfect world, I'd like Tomcat to behave like an enterprise server, eg\n> if it accepts a connection, it will process the request and submit the\n> response before shutting down.\n\nAIUI, this means that connectors cannot be paused. It also means that incoming requests can indefinitely keep the server running, if each incoming requests has its own separate timeout.\n\nI think what you are requesting is not possible.\n\nThe way to get the behavior you want is to use a reverse proxy in front of the application server. The proxy can re-try a request if it is dropped by the back-end server, possibly failing-over to another node.",
      "@Christopher Schultz In the previous bug 62515 I mentioned the first thing that should happen, when a shutdown is requested, is that the port should be closed, so no more incoming requests are accepted.\n\nThen in-flight requests should be executed to completion based on timeout.\n\nThis bug is about that this is only partially implemented, as the port is partially closed as the first thing, it still accepts connect requests, but fails when the client tries to submit the request payload (eg on a POST).",
      "(In reply to carbattles from comment #4)\n> @Christopher Schultz In the previous bug 62515 I mentioned the first thing\n> that should happen, when a shutdown is requested, is that the port should be\n> closed, so no more incoming requests are accepted.\n\nClosing the port will terminate all the connections, including those in-flight.\n\n> Then in-flight requests should be executed to completion based on timeout.\n\nNot possible.\n\n> This bug is about that this is only partially implemented, as the port is\n> partially closed as the first thing, it still accepts connect requests, but\n> fails when the client tries to submit the request payload (eg on a POST).\n\nThere is no such thing as \"partially closed\". The port is either bound or not. When unbinding, everything is lost. So you either wait and possibly never close or you close and possibly drop connections in the backlog.",
      "(In reply to Christopher Schultz from comment #5)\n> (In reply to carbattles from comment #4)\n> > @Christopher Schultz In the previous bug 62515 I mentioned the first thing\n> > that should happen, when a shutdown is requested, is that the port should be\n> > closed, so no more incoming requests are accepted.\n> \n> Closing the port will terminate all the connections, including those\n> in-flight.\n> \n> > Then in-flight requests should be executed to completion based on timeout.\n> \n> Not possible.\n> \n> > This bug is about that this is only partially implemented, as the port is\n> > partially closed as the first thing, it still accepts connect requests, but\n> > fails when the client tries to submit the request payload (eg on a POST).\n> \n> There is no such thing as \"partially closed\". The port is either bound or\n> not. When unbinding, everything is lost. So you either wait and possibly\n> never close or you close and possibly drop connections in the backlog.\n\nI understand what you are saying, but this is how most enterprise servers does it.\n\nQuote from WebSphere:\n>WebSphere Application Server supports three shutdown modes: stop, stop immediate and terminate (in order of immediacy).\n>\n>A normal stop begins by preventing new inbound HTTP and IIP requests and then has a quiesce period in which in-flight requests are allowed to complete. The maximum time allowed for these requests to complete is 180 seconds (configurable via a JVM property). This maximum is enforced regardless of whether or not a request is part of a global transaction. At the end of this period the application server components (including any in-process messaging engine) then begin to shutdown.",
      "I recommend folks take a look at bug 62515 and the associated commits before commenting further on this bug. It might save us all some time discussing what is and is not possible and what Tomcat currently does.\n\nHistorically, the Tomcat approach has been to shut the server down ASAP, providing a 503 response or similar (e.g. a timeout signal for async) where the opportunity allows and allowing the request to complete (with a short timeout) where there is no opportunity for a 503.\n\nThe move to non-blocking opened a gap where it is now possible that an in-flight request will just see a closed connection.\n\nFixing the closed connection issue is relatively simple. Switching strategy from 'provide a 503 as early as possible' to 'allow requests to complete if possible' is a more invasive change and is not consistent with, historically, the behaviour Tomcat users have asked for on shutdown. Whether it is possible to make the shutdown strategy configurable isn't something I've looked at. That looks to be worth doing to see how invasive the patch to do that would be.",
      "> 'allow requests to complete if\n> possible' is a more invasive change and is not consistent with,\n> historically, the behaviour Tomcat users have asked for on shutdown. \n\nIsn't this what unloadDelay is for? My testing shows, this is exactly what it does, it provides time for requests that have reached the servlet to finish processing. If the servlets do not finish their processing, and the time runs out, the in-flight requests are terminated.\n\nI also think this bug is being over-compilicated. I'm not asking for new functionality, just the shutdown to also respect connections that have already been established (but not yet reached the servlets) and allow them time to complete based on unloadDelay.\n\nIf it is any help, our setup is 12 tomcat servers, with load balancer in front. Our build process will restart the tomcat servers in sequence. We expect that not a single request is dropped, however may process slower. This should have been fixed in bug 62515, but as I understand Mark, a new bug was introduced with the introduction of non blocking IO.",
      "(In reply to carbattles from comment #8)\n> > 'allow requests to complete if\n> > possible' is a more invasive change and is not consistent with,\n> > historically, the behaviour Tomcat users have asked for on shutdown. \n> \n> Isn't this what unloadDelay is for? My testing shows, this is exactly what\n> it does, it provides time for requests that have reached the servlet to\n> finish processing. If the servlets do not finish their processing, and the\n> time runs out, the in-flight requests are terminated.\n\nNo. unloadDelay applies only once the request has been passed to the Servlet.\n \nThere are opportunities to respond with a 503 before the request is passed\nto the Servlet and this is what Tomcat does because that is what users have\npreviously requested.\n\n> I also think this bug is being over-compilicated. I'm not asking for new\n> functionality,\n\nYes you are.\n\n> just the shutdown to also respect connections that have\n> already been established (but not yet reached the servlets) and allow them\n> time to complete based on unloadDelay.\n\nThat *is* new behaviour and runs contrary to the current design. That is what\nmakes the change more invasive / complicated / risky / etc.\n\n> If it is any help, our setup is 12 tomcat servers, with load balancer in\n> front. Our build process will restart the tomcat servers in sequence. We\n> expect that not a single request is dropped, however may process slower.\n> This should have been fixed in bug 62515, but as I understand Mark, a new\n> bug was introduced with the introduction of non blocking IO.\n\nThe bug has always existed. Non-blocking I/O just makes it more likely the\nconnection is closed immediately rather than a 503 response being written\nand then the connection being closed.",
      "I understand the complexity. I look forward to seeing what you think is the way forward. \n\nIf the conclusion is a 503, then I assume it is guaranteed that the request is not forwarded to the servlet? eg the loadbalancer can use the 503 as a retry to another tomcat server? Executing the same request twice is fatal in our setup.\n\nThank you.",
      "(In reply to carbattles from comment #8)\n> If it is any help, our setup is 12 tomcat servers, with load balancer in\n> front. Our build process will restart the tomcat servers in sequence. We\n> expect that not a single request is dropped, however may process slower.\n\nIf the expectation is that a request (from the client's perspective) will not be dropped, then I think you can solve this at the load-balancer with retry-based fail-over: the lb takes care of the fail-over and the client detects no problems at all.\n\nIf you refuse to allow a request to an individual node to be dropped, that is a much taller order.\n\nIn my environment, we tell the lb that the nodes are coming down so we avoid any of this. The lb allows all in-flight requests to complete and we only shut-down the node after that point. No new requests are sent to the target node after the lb is told to take it (softly) out of service. The only time requests should ever be dropped in this situation is if a node unexpectedly goes down. We do this using mod_jk with DISABLED and STOP states. mod_proxy_* has these same states and can be used with either AJP or HTTP as the communication protocol.\n\nI'm not sure if this gives you any viable alternatives, here, but I believe it allows you to accomplish your goal without adding a lot of complexity to the application server (i.e. Tomcat).",
      "> If the expectation is that a request (from the client's perspective) will\n> not be dropped, then I think you can solve this at the load-balancer with\n> retry-based fail-over: the lb takes care of the fail-over and the client\n> detects no problems at all.\n\nThe problem here is that the loadbalancer is in-house developed using Java, and the HttpURLConnection class does not distinguish between SocketTimeOutException for request payload sent and not sent, due to its built-in retry functionality. Therefore neither the exception nor the message is any indication of whether the loadbalancer can retry or not.\nI can provide links explaining this in detail, if this is of interest. \n\nTo solve this we will have to either handle sockets ourselves, or switch to another http client instead of HttpUrlConnection\n \n> If you refuse to allow a request to an individual node to be dropped, that\n> is a much taller order.\n> \n> In my environment, we tell the lb that the nodes are coming down so we avoid\n> any of this. The lb allows all in-flight requests to complete and we only\n> shut-down the node after that point. No new requests are sent to the target\n> node after the lb is told to take it (softly) out of service. The only time\n> requests should ever be dropped in this situation is if a node unexpectedly\n> goes down. We do this using mod_jk with DISABLED and STOP states.\n> mod_proxy_* has these same states and can be used with either AJP or HTTP as\n> the communication protocol.\n\nThat is plan B, depending on the conclusion for this bug: Do a custom integration between our build server and the load balancer. \n\nEven a 503 could be use able, provided that we can retry knowing, the request was rejected by tomcat.\n\nWho can provide a conclusion on this defect, in terms of next step?",
      "FYI there is some movement on this.\n\nhttps://lists.apache.org/thread.html/r980a8ed033a14b417231f1296e52daf07b15f76d565586520e5446f1%40%3Cdev.tomcat.apache.org%3E",
      "Fixed in:\n- 10.0.x for 10.0.0-M11 onwards\n- 9.0.x for 9.0.41 onwards\n\nBack-port to 8.5.x and earlier isn't practical due to the extent of the refactoring between 8.5.x and 9.0.x particularly around the Acceptor.",
      "This has now been back-ported to 8.5.x for 8.5.76 onwards.\n\nOther fixes required 8.5.x to be updated to align with 9.0.x which made this back-port possible."
    ],
    "creation_ts": "2020-01-16T11:12:46Z",
    "fixes": [
      64080
    ]
  },
  {
    "id": 68558,
    "summary": "Redundant calls to ByteChunk.toString()",
    "description": "Our high-volume, latency-sensitive application spends approximately 0.16% of cpu executing org.apache.tomcat.util.buf.ByteChunk.toString. We see only two direct callers: org.apache.tomcat.util.buf.MessageBytes.toString() and org.apache.tomcat.util.http.Parameters.processParameters().  Aggregate cost is split evenly between the two.\n\nCall data shows many different routes trigger both these paths. Examination of the specific strings being looked up shows:\n1. 40% Redundant parsing of key fields on org.apache.catalina.connector.Request: method, queryString, requestURI, headerNames, content type.\n2. 10% Redundant lookup/iteration of header names\n3. 50% Redundant parsing of request parameters, triggered from multiple paths within the JSP (see stack traces below).\n\nKey portions of the stack traces are included below.\n\nThis code can be substantially optimized by locally caching the translated fields.  Local tests of modifications to the simplest case (Request.getMethod()) confirm improvement.\n \n \n \norg.apache.tomcat.util.buf.StringCache.toString\norg.apache.tomcat.util.buf.ByteChunk.toString\norg.apache.tomcat.util.buf.MessageBytes.toString\norg.apache.catalina.connector.Request.getMethod\norg.apache.catalina.connector.RequestFacade.getMethod\njavax.servlet.http.HttpServletRequestWrapper.getMethod\njavax.servlet.http.HttpServletRequestWrapper.getMethod\norg.apache.jsp.WEB_002dINF.<proprietary>.common_jsp._jspService\n\norg.apache.tomcat.util.buf.StringCache.toString\norg.apache.tomcat.util.buf.ByteChunk.toString\norg.apache.tomcat.util.http.Parameters.processParameters\norg.apache.tomcat.util.http.Parameters.processParameters\norg.apache.tomcat.util.http.Parameters.handleQueryParameters\norg.apache.catalina.core.ApplicationHttpRequest.mergeParameters\norg.apache.catalina.core.ApplicationHttpRequest.parseParameters\norg.apache.catalina.core.ApplicationHttpRequest.getParameter\njavax.servlet.ServletRequestWrapper.getParameter\njavax.servlet.ServletRequestWrapper.getParameter\njavax.servlet.jsp.el.ImplicitObjectELResolver$ScopeManager$7.getAttribute\njavax.servlet.jsp.el.ImplicitObjectELResolver$ScopeManager$7.getAttribute\njavax.servlet.jsp.el.ImplicitObjectELResolver$ScopeMap.get\njavax.el.MapELResolver.getValue\norg.apache.jasper.el.JasperELResolver.getValue\norg.apache.el.parser.AstValue.getValue\norg.apache.el.ValueExpressionImpl.getValue\norg.apache.jasper.el.JspValueExpression.getValue\norg.apache.jsp.WEB_002dINF.<proprietary>_jsp._jspx_meth_c_005fset_005f1\n\nRef: <c:set var = \"featureName\" value= \"${ param.featureName }\"/> \n\n\norg.apache.tomcat.util.buf.StringCache.toString\norg.apache.tomcat.util.buf.ByteChunk.toString\norg.apache.tomcat.util.http.Parameters.processParameters\norg.apache.tomcat.util.http.Parameters.processParameters\norg.apache.tomcat.util.http.Parameters.handleQueryParameters\norg.apache.catalina.connector.Request.parseParameters\norg.apache.catalina.connector.Request.getParameterNames\norg.apache.catalina.connector.Request.getParameterMap\norg.apache.catalina.connector.RequestFacade.getParameterMap\n<proprietary>Filter.doFilter()",
    "comments": [
      "Are you sure about the request parameters being parsed multiple times? They should only be parsed once per request.\n\nIs org.apache.tomcat.util.buf.StringCache not caching the Strings or is just that local caching has much lower latency (which wouldn't surprise me)?\n\nCaching the String in ByteChunk.toString() is an option. I did look at that when I last worked on this code but it raises all sorts of complications around cache invalidation as the byte array is directly accessible.",
      "> Are you sure about the request parameters being parsed multiple times? They should only be parsed once per request.\nYes - this appears to be triggered when an extra param is added by a JSP include, for example:\n\n<jsp:include page=\"/myExample.jsp\" >\n <jsp:param name=\"type\" value=\"image\" />\n <jsp:param name=\"index\" value=\"${status.index}\" />\n</jsp:include>\n\nApplicationDispatcher.wrapRequest is invoked and creates a new ApplicationHttpRequest with un-parsed parameters.  If the included JSP ever checks the parameters, the full set of parameters is parsed: the original plus any new ones added by the <jsp:include>.  Nested JSP includes can trigger reparsing once per nest.\n\nRelevant stack trace:\norg.apache.catalina.core.ApplicationDispatcher.org.apache.catalina.core.ApplicationDispatcher.doInclude\norg.apache.catalina.core.ApplicationDispatcher.doInclude\norg.apache.catalina.core.ApplicationDispatcher.include\norg.apache.jasper.runtime.JspRuntimeLibrary.include\n\n\n> Is org.apache.tomcat.util.buf.StringCache not caching the Strings or is just that local caching has much lower latency (which wouldn't surprise me)?\n\nLower latency.  70% of StringCache.toString() is spent in org.apache.tomcat.util.buf.StringCache.findClosest() which does appear to function as intended.\n\n> Caching the String in ByteChunk.toString() is an option. I did look at that when I last worked on this code but it raises all sorts of complications around cache invalidation as the byte array is directly accessible.\n\nMakes sense.  :(  This may be easier for org.apache.coyote.Request, where a reference to MessageBytes could be replaced by a reference to String (possibly lazy-loaded).",
      "Thanks for the additional info. I'll try and address each part in turn.\n\n1. Caching the key fields is low cost as it is just a reference to an existing String. I think that is a better solution that trying to cache in MessageBytes/ByteChunk/CharChunk due to the cache invalidation complexities. I think we can do this quickly.\n\n2. Could you provide examples. If there is any low-hanging fruit similar to1 that should be easy to address.\n\n3. Ah. Got it. That is going to be a little trickier to address. I suspect some refactoring will be required as we have to take account of the parameter merging  rules. Not sure how easy that will be.\n\nMy plan at this stage is to address the low hanging fruit and then switch this to an enhancement (strictly this is all an enhancement) for the parameter refactoring.",
      "A quick update:\n\n1.\ngetMethod() is already effectively cached due to use of MessageBytes.toStringType()\n\ngetQueryString() could be cached but there is a potential performance issue. If applications parse the query string manually or use getParameter() and friends all is well. If an application uses both, using MessageBytes.toStringType() could trigger bytes -> String -> bytes if getQueryString() is called before getParameter() and friends. I'm minded to leave this one alone for now.\n\nrequestURI(), contentType() and headerNames can all switch to MessageBytes.toStringType(). I'll do that shortly.\n\n2. Waiting for examples.\n\n3. Cannot reproduce. I've reviewed the code and manually debugged an included JSP. The original query string is parsed once and the additional query string is parsed once.",
      "Simple things fixed in:\n- 11.0.x for 11.0.0-M17 onwards\n- 10.1.x for 10.1.19 onwards\n-  9.0.x for  9.0.86 onwards\n-  8.5.x for  8.5.99 onwards\n\nSwitching to NEEDINFO for the remaining issues.",
      "Thank you for the quick turnaround!  Additional data:\n\nReferring to #1:\n> getMethod() is already effectively cached due to use of \n> MessageBytes.toStringType()\n\nOur data is clear that this is re-parsing each time.  The call occurs at the beginning of each JSP at the very beginning of the generated _jspService() method:\n\nfinal java.lang.String _jspx_method = request.getMethod();\n\n\nReferring to #2: the code triggering this is below.  I can't clearly determine whether the slow enum comes from request.getHeaders() or request.getHeaderNames().\n\nHttpServletRequest request = context.getRequest();\nEnumeration<String> nameEnum = request.getHeaderNames();\nwhile (nameEnum.hasMoreElements()) {\n  String name = nameEnum.nextElement();\n  List<String> headerValues = new LinkedList<String>();\n\n  Enumeration<String> valueEnum = request.getHeaders(name);\n  while (valueEnum.hasMoreElements()) {\n    headerValues.add(valueEnum.nextElement());\n  }\n\n  headerMap.put(name, Collections.unmodifiableList(headerValues));\n}\n\nReferring to #3:\n> Cannot reproduce.\nI don't immediately see another trigger for this case, but will keep looking.  The behavior occurs throughout our app but I'll also compare with some others.",
      "Updating status",
      "The caching for getMethod() isn't present in 9.0.81. It is present from 9.0.83 onwards.\n\nI've added caching of the header values as well as the names.",
      "Regarding #1: apologies, I was able to track down an invokeinterface that confused our primary tool.  Specifically, a class calling HttpServletRequest.getMethod() on an instance of HttpServletRequestWrapper that could wrap: a) an instance of org.apache.catalina.connector.Request, b) another HttpServletRequestWrapper, or c) one of multiple custom subclasses.\n\nI agree that the value of Request.getMethod() is cached on MessageBytes and I'll fix the issue for our application by implementing local caching on a custom subclass.\n\nRegarding #3: I suspect the same problem as #1, and am certain that the same custom class can be modified to solve this problem.\n\nNo Tomcat issues beyond what you've already fixed. Sorry for the noise!",
      "Thanks for the update. Marking this as fixed based on that update.",
      "These changes reached prod and eliminated the respective profiles."
    ],
    "creation_ts": "2024-01-29T17:26:32Z",
    "fixes": [
      68558
    ]
  },
  {
    "id": 49125,
    "summary": "toString on byte[] array probably is not correct",
    "description": "Two examples of using toString() on a byte[] array, which is unlikely to produce the desired output:\n\nha.deploy.FileMessageFactory.writeMessage()\nlog message uses toString on msg.getData() which is a byte[] array\n\ncoyote.ajp.AjpMessage.dump\nuse toString on \"msg\" which is of type byte[]",
    "comments": [
      "The first issue only affects debug messages.\n\nThe second issue doesn't match the code and is therefore invalid.",
      "Looks like AjpMessage.java:417 in trunk does concatenate \"buf\" with other strings and /will/ emit an ugly [B@abcd. :(",
      "Created attachment 26261\nPatch to show byte arrays as hex strings",
      "Fixed in trunk. Will be in 7.0.6."
    ],
    "creation_ts": "2010-04-14T18:54:35Z",
    "fixes": [
      49125
    ]
  },
  {
    "id": 44633,
    "summary": "say which jar/class is wrong when throwing UnsupportedClassVersionError",
    "description": "after happily using tomcat 6/java6, we had to move back to tomcat 5/java5. \n\nUnfortunately, it seems that one jar or .class files not yet compiled under java5 got there too.\n\nSuggestion:\n\nin  at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:1815)\n\ncatch UnsupportedClassVersionError and re-throw it after adding hints with which class sought/jar file it happens!\n\njava.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:294)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:432)\nCaused by: java.lang.UnsupportedClassVersionError: Bad version number in .class file\n        at java.lang.ClassLoader.defineClass1(Native Method)\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n        at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:1815)\n        at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:869)\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1322)\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1201)\n        at org.apache.catalina.core.StandardWrapper$1.run(StandardWrapper.java:1017)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1013)\n        at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:932)\n        at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:3951)\n        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4225)\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013)\n        at org.apache.catalina.core.StandardHost.start(StandardHost.java:718)\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013)\n        at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442)\n        at org.apache.catalina.core.StandardService.start(StandardService.java:450)\n        at org.apache.catalina.core.StandardServer.start(StandardServer.java:709)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java:551)\n        ... 6 more",
    "comments": [
      "Created attachment 21704\nLsjar.java\n\nthis is an approach to determine whether your jar files are the culprits\n\nso, if there is java5 the requirement, you shouldn't see a major of 50\n\njava -jar lsjar.jar -dir -jvmVersion /usr/share/tomcat/shared/lib/ | grep -v 48 | grep -v 46 | grep -v 49 | grep -v 47 | grep -v 45\n\n-- \n\nin my case, they aren't  :(",
      "I have patched trunk and proposed it for inclusion in 6.0.x",
      "This has been fixed in 6.0.x and will be in the 6.0.17 onwards.",
      "Created attachment 21822\nLsjar2.java\n\nSome class files of a jar may not have been compiled with the same version of Java than the others. It therefore may be useful to check the version of each class file contained in a jar.",
      "Comment on attachment 21822\nLsjar2.java\n\nAdded an -all option to Lsjar.java that allow to check every class file in a jar."
    ],
    "creation_ts": "2008-03-19T08:25:39Z",
    "fixes": [
      44633
    ]
  },
  {
    "id": 51744,
    "summary": "JNDI Lookup Error after a Context is closed",
    "description": "I was integrating Atomikos into Tomcat to register the transaction manager, and the lookup for the transaction manager works fine in JNDI, unless someone else, looks up a JNDI context and closes it. And subsequent calls to lookup the transaction manager also fails saying java:comp is not found. I went through the code and found the problem at \"org.apache.naming.SelectorContext\". When methods of that class is calls, those are delegated to a Context received through \"getBoundContext()\", which returns a \"org.apache.naming.NamingContext\" object. And these are stored in a map in ContextBindings class. So the getBoundContext checks this cache, and if it's found it returns it or else, create a new object and store it and returns it. So the problem happens, if someone calls \"close()\" in the NamingContext object. Then it's implemented in the following way,\n\n   public void close()\n        throws NamingException {\n        env.clear();\n    }\n\nWhich just clears the environment, but it doesn't in no way invalidate that cache in the ContextBindings class to remove its entry. So in the next time also when getBoundContext is called to get the same context, it will return the earlier 'closed' context without creating a new one. And the environment it has would be cleared and subsequent lookups done from that will fail. \n\nSo I guess the proper fix would be to remove that context from ContextBinding's cache when its close method is closed.\n\nCheers,\nAnjana.",
    "comments": [
      "Given that the JNDI context is meant to be (largely) read-only, I don't think calls to close() should be permitted here. I have added a call to checkWriteable() before the environment is cleared.\n\nThis fix has been applied to trunk and 7.0.x and will be included in 7.0.22 onwards.",
      "Hi Mark,\n\nSo for the situation I'm facing, in the close method, if the environment is cleared, will this be removed from \"ContextBindings\" also? .. Since that was the problem I faced. \n\nCheers,\nAnjana.",
      "No. The attempt to use the close() method will fail.",
      "Hi Mark,\n\nSorry, maybe I misunderstood, I guessed the modified version would be something like the following,\n\npublic void close() throws NamingException {\n    if (checkWriteable()) {\n        env.clear();\n    } else {\n        throw something...\n    }\n}\n\nso in the case of checkWriteable() == true, the environment is cleared and if the user again looks up that context, wouldn't my same problem occur again? .. \n\nCheers,\nAnjana.",
      "Rather than guessing why don't you look at the source code and see what it actually does? You might also want to investigate when the JNDI context is writeable.",
      "Hi Mark,\n\nOK, sorry, I should have looked at the code before. I just didn't know where the svn for this was (yeah it was a simple looking around the tomcat project page), I thought you wouldn't mind showing the code. \n\nAnyways, yeah, the code was close to what I assumed. So a quick question, let's assume the context is writeable (I'm still not that sure when they are exactly writeable or not), just bare with me, so in the case where \"checkWriteable\" doesn't throw anything, wouldn't you want to clear this object from the map at ContextBindings?, so later the method \"getBoundContext\" from SelectorContext wouldn't return an invalid Context object, and also I guess you would want to remove it from that map for it to be GC'ed later. \n\nCheers,\nAnjana.",
      "I'll repeat: \"You might also want to investigate when the JNDI context is\nwriteable.\"\n\nI really do not appreciate code reviews based on guess work. If you are going to comment on the code please have the courtesy to read and understand the relevant portions of the source rather than guessing what the source code might be.\n\nI do not intend replying to further comments on this issue until you have actually read the relevant code.",
      "Mark,\n\nYou could have used all those words to give me a simple explanation, I gave the comments and reported the bug to my ability, I explained the issue as I understood it, and since I actually faced it, it's not like I \"guessed\" this issue or imagined it and reported it. And I accept I'm not in any kind of an expert in these areas, that's why we talk to you guys, the actual developers, to get some help. Talking about \"courtesy\", you should have the common courtesy to give a proper response or at-least direct the user to some resources to understand it more. So much for the spirit of open source development! .. I don't expect you to respond to this also, good bye!.\n\nCheers,\nAnjana.",
      "Guys,\n\nIt appears that something is not quite right with this fix in 7.0.22. The following worked just fine in 7.0.14 (and GlassFish, WebLogic, and WebSphere) and now fails on envCtx.close() with \"Context is read only\" message.\n\njavax.naming.Context initCtx = new InitialContext();\njavax.naming.Context envCtx = (javax.naming.Context) initCtx.lookup(\"java:comp/env\");\n//some clever logic that uses envCtx\nenvCtx.close();//Fails here!\ninitCtx.close();\n\nAccording to JavaDoc I should be able to safely close the context when I am done with it.  \n\nThanks,\n\nLeon",
      "Reopening, so that new issue in comment 9 is not lost.\nDo you have a stack trace?",
      "Here you go:\n\njavax.naming.NamingException: Context is read only\n\tat org.apache.naming.NamingContext.checkWritable(NamingContext.java:941)\n\tat org.apache.naming.NamingContext.close(NamingContext.java:747)\n\tat com.esri.sds.rest.AdminDatasourcesResource.listDatasources(AdminDatasourcesResource.java:44)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$TypeOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:149)\n\tat com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:67)\n\tat com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:259)\n\tat com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:83)\n\tat com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:133)\n\tat com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:71)\n\tat com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:990)\n\tat com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:941)\n\tat com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:932)\n\tat com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:384)\n\tat com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:451)\n\tat com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:797)\n\tat com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:770)\n\tat com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:731)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:929)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:405)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:964)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515)\n\tat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n\tat java.lang.Thread.run(Unknown Source)\n\nThanks,\n\nLeon",
      "To quote from section EE.5.3.4 of the Java EE spec\n<quote>\nThe container must ensure that the application component instances have only read access to their naming context. The container must throw the javax.naming.OperationNotSupportedException from all the methods of the javax.naming.Context interface that modify the environment naming context and its subcontexts.\n</quote>\n\nI would argue that the close() method is a method that \"modifies the environment naming context\" and therefore an exception should be thrown here. Tomcat is, however, not throwing the right exception in this case. Fortunately, the exception we should be throwing is a sub-class of the one we are throwing so changing it shouldn't break anything.\n\nProviding an option on the StandardContext to silently swallow this error rather than throwing an Exception looks doable. I'll take a look.",
      "The correct exception is now thrown and the option to control whether or not an exception is thrown has been added to the StandardContext.\n\nBoth of these changes have been made to trunk and 7.0.x and will be included in 7.0.23 onwards.",
      "(In reply to comment #13)\n> The correct exception is now thrown and the option to control whether or not an\n> exception is thrown has been added to the StandardContext.\n> \n> Both of these changes have been made to trunk and 7.0.x and will be included in\n> 7.0.23 onwards.\n\nMark,\n\nI just installed 7.0.23 and I still see \"Context is read only\" exception thrown. \n\nIn your previous message you mentioned:\n> To quote from section EE.5.3.4 of the Java EE spec\n> <quote>\n> The container must ensure that the application component instances have only\n> read access to their naming context. The container must throw the\n> javax.naming.OperationNotSupportedException from all the methods of the\n> javax.naming.Context interface that modify the environment naming context and\n> its subcontexts.\n> </quote>\n> \n> I would argue that the close() method is a method that \"modifies the\n> environment naming context\" and therefore an exception should be thrown here.\n\nI hoped to avoid an argument but... I believe you are not interpreting the spec correctly. Here is a recommendation from a tutorial (http://docs.oracle.com/javase/jndi/tutorial/ldap/connect/close.html) explaining how one is supposed to work with Contexts:\n\n\"Normal garbage collection takes care of removing Context instances when they are no longer in use. Connections used by Context instances being garbage collected will be closed automatically. Therefore, you do not need to explicitly close connections. Network connections, however, are limited resources and for certain programs, you might want to have control over their proliferation and usage.\" \n\nAnd here is a promoted usage pattern:\n    // Create initial context\n    DirContext ctx = new InitialDirContext(env);\n    // Get a copy of the same context\n    Context ctx2 = (Context)ctx.lookup(\"\");\n    // Get a child context\n    Context ctx3 = (Context) ctx.lookup(\"ou=NewHires\");\n    // do something useful with ctx, ctx2, ctx3\n    // Close the contexts when we're done\n    ctx.close();\n    ctx2.close();\n    ctx3.close();\n\nClosing a context has nothing to do with modifying it - you are just telling the system that you are done with a resource and it can be safely released at this time. Modifying a context means adding and/or deleting something from it. \n\nI have written a sample application that works as described above with no logged exceptions in GlassFish and in all Tomcat versions prior to 7.0.22. \nI can send it to you if you like.\n\nI don't believe the current implementation is correct. No exceptions should be logged by default.\n\nRegards,\n\nLeon",
      "I'm using Tomcat 7.0.25 and am still seeing this same issue. Any attempt to close a Context object results in the exception \"Context is read only\", and I am unable to instantiate a JNDI DataSource. My code worked fine on previous versions (earlier than 7.0.22), but is now broken.\n\nAre we supposed to just leave the Context open, and it will not cause memory leaks?",
      "(In reply to comment #14)\n\n> I hoped to avoid an argument but... I believe you are not interpreting the\n> spec correctly. Here is a recommendation from a tutorial\n> (http://docs.oracle.com/javase/jndi/tutorial/ldap/connect/close.html)\n\nI agree and I also hope to avoid an argument but I also hope that the bug gets fixed... Just retried on 7.0.27 and the current behaviour is incorrect.",
      "(In reply to comment #16)\n> I agree and I also hope to avoid an argument but I also hope that the bug\n> gets fixed... Just retried on 7.0.27 and the current behaviour is incorrect.\n\nYou're not going to get an argument but you are going to be told to have the courtesy to actually read the bug before re-opening it.\n\nTo repeat:\n- the current behaviour is required by the specification\n- if you don't like it (and there are plenty of valid reasons why you might not) there is an option available on the StandardContext to disable it.\n\nThe only reason I can think of that would warrant re-opening this bug is if the option on the StandardContext did not work but that is not what you are saying.",
      "*** Bug 54168 has been marked as a duplicate of this bug. ***",
      "The work-around is to apply jndiExceptionOnFailedWrite to the context (https://tomcat.apache.org/tomcat-7.0-doc/config/context.html#Standard_Implementation), e.g.\n\n<Context jndiExceptionOnFailedWrite=\"false\">"
    ],
    "creation_ts": "2011-08-30T08:43:40Z",
    "fixes": [
      51744
    ]
  },
  {
    "id": 40306,
    "summary": "mod_jk, POST request bodies are not restored on successful login when using mod_jk",
    "description": "After the FormAuthenticator intercepts a POST request to a protected resource,\nthe original request is not properly restored upon successful login when using\nmod_jk. When connectiong to tomcat directly (8080), the POST request is restored\nas expected.\n\nI've tested this with mod_jk 1.2.15 and 1.2.18. It seems the problem is that the\norginal request is not saved properly. I (think) I've narrowed down the issue in\n  FormAuthenticator.java. body.toString() was returning null. (The buffer was\nnull) so it looks like the root of the problem is that nothing is read from the\ninput stream.\n\nDuring testing I reverted to the old way of adding the request parameters\n(saved.addParameter()) to see if they were indeed there and it worked. \n\nI also tried,\nInputStream is = new BufferedInputStream(request.getInputStream()); \nwhich didn't work..\n\n\nfrom FormAuthenticator.java: \n\nprotected void saveRequest(Request request, Session session)\n        throws IOException {\n\n      ...\n\n      if (\"POST\".equalsIgnoreCase(request.getMethod())) {\n            ByteChunk body = new ByteChunk();\n            body.setLimit(request.getConnector().getMaxSavePostSize());\n\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            InputStream is = request.getInputStream();\n        \n            while ( (bytesRead = is.read(buffer) ) >= 0) {\n                body.append(buffer, 0, bytesRead);\n            }\n\t\t\t\n            saved.setBody(body);\n        } \n\n        ...\n}",
    "comments": [
      "I've also seen the following warning occasionaly showing up in catalina.out,\nhowever I do not know if it is related:\n\nWARN (org.apache.jk.core.MsgContext:295) - Error sending end packet\njava.net.SocketException: Broken pipe\n        at java.net.SocketOutputStream.socketWrite0(Native Method)\n        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)\n        at java.net.SocketOutputStream.write(SocketOutputStream.java:136)\n        at org.apache.jk.common.ChannelSocket.send(ChannelSocket.java:518)\n        at org.apache.jk.common.JkInputStream.endMessage(JkInputStream.java:112)\n        at org.apache.jk.core.MsgContext.action(MsgContext.java:293)\n        at org.apache.coyote.Response.action(Response.java:182)\n        at org.apache.coyote.Response.finish(Response.java:304)\n        at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:204)\n        at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:282)\n        at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:754)\n        at\norg.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:684)\n        at\norg.apache.jk.common.ChannelSocket$SocketConnection.runIt(ChannelSocket.java:876)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n        at java.lang.Thread.run(Thread.java:595)",
      "After going over this again, body.toString() wasn't returning null after all,\nbut the POST parameter values were still missing. I debugged the coyoteRequest\nand noticed that the contentLength was equal to -1 upon entering the\nrestoreRequest() method of FormAuthenticator when going over the http connector\n(8080). When going over AJP it was set to 0. \n\nThis causes a problem in\norg.apache.catalina.connector.Request.parseParameters(). Before attempting to to\nfind POST parameters, it calls org.apache.coyote.Request.getContentLength()\nwhich doesn't look at the content-length header when the current value of\ncontentLength > -1. Being that the current value equals 0, no parameters were\nparsed.  \n\nAt any rate, the following code fixes the problem.\n\norg.apache.coyote.ajp.AjpAprProcessor.java (5.5.16), starting at line 579:\n\n        } else if (actionCode == ActionCode.ACTION_REQ_SET_BODY_REPLAY) {\n\n            // Reset the content length on the saved request.\n            request.setContentLength(-1);\n            // Set the given bytes as the content\n            ByteChunk bc = (ByteChunk) param;\n            bodyBytes.setBytes(bc.getBytes(), bc.getStart(), bc.getLength());\n            first = false;\n            empty = false;\n            replay = true;\n\n        }\n \nI would greatly appreciate it if a commiter would take a look at this.",
      "Created attachment 18755\najp/jk connector patch\n\nResets the contentLength to -1 on the request so that future calls to\nRequest.getContentLengthLong() will examine the 'content-length' header and\nreturn the actual content length. \n\nThis occurs when a SavedRequest is restored\n(ActionCode.ACTION_REQ_SET_BODY_REPLAY). \n\nWithout resetting this value, the current contentLength equals 0 and POST\nparameters are never parsed on the restored SavedRequest.\n\nconnectors/jk/java/org/apache/jk/core/MsgContext.java\nconnectors/jk/java/org/apache/coyote/ajp/AjpAprProcessor.java",
      "Comment on attachment 18755\najp/jk connector patch\n\nthe patch was created using the SVN trunk.",
      "Actually, the HTTP connector sets the content length of the request to the saved\nbody length (which is the right thing to do), although it is a bit hidden.",
      "Patch applied to SVN trunk.  \n\nThanks much!",
      "No, to be consistent with the HTTP connector, it should be\nsetContentLength(bc.getLength()). In practice, it won't make much difference, I\nthink, but you never know.",
      "*** Bug 41244 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2006-08-23T19:48:03Z",
    "fixes": [
      40306
    ]
  },
  {
    "id": 42119,
    "summary": "request.getCharacterEncoding misparses charset=UTF-8; xyz=3",
    "description": "(This bug is also present in Coyote source 6.0.10.)\n\nIf there is an HTTP header\n Content-Type: text/abc; charset=UTF-8; xyz=3\nrequest.getCharacterEncoding() returns \"UTF-8; xyz=3\" but Tomcat 4.1.24 returns\n\"UTF-8\".\n\nIn Tomcat 4.1.24, request.getCharacterEncoding uses parseCharacterEncoding\ndefined in\n \njakarta-tomcat-4.1.24-src/catalina/src/share/org/apache/catalina/util/RequestUtil.java\n\nand it correctly handles the case of other Content-Type parameters.\n\nIn Tomcat 5.5.23, however, request.getCharacterEncoding uses\ngetCharsetFromContentType defined in \nfrom\napache-tomcat-5.5.23-src/connectors/util/java/org/apache/tomcat/util/http/ContentType.java\n\nwhich does not search for a possible terminating semicolon in the charset, thus\nerroneously including additional characters in the charset.\n\nThe code in 5.5.23 has a comment begins\n     // Basically return everything after \";charset=\"\n\nPlease consider using the code from 4.1.24\n\nThis problem showed up when Content-Type was multipart/mixed and a client\nspecified a charset parameter to Content-Type; however, it will occur in any\nContent-Type where charset is specified and is not the last parameter.",
    "comments": [
      "This has been fixed in svn for 5.5.x and 6.0.x and will be included in the next\nreleases of each.\n\nThanks for the report.",
      "*** Bug 49960 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2007-04-13T12:01:02Z",
    "fixes": [
      42119
    ]
  },
  {
    "id": 57172,
    "summary": "NullPointerException in findResources of WebappClassLoader",
    "description": "Enumeration<URL> findResources(String name) of class org.apache.catalina.loader.WebappClassLoaderBase (for Tomcat 8.0.14, the code was located in org.apache.catalina.loader.WebappClassLoader for Tomcat 8.0.12) throws a NullPointerException if the \"resources\" attribute is null.\n\nI'm unsure why it is null in some cases (restarting the server, instead of simply redeploying one of our apps, fixes the issue for us) but this should be fixed in the classloader implementation anyway.\n\nThe code looks like this\n\n        WebResource[] webResources = resources.getClassLoaderResources(path);\n        for (WebResource webResource : webResources) {\n            if (webResource.exists()) {\n                result.add(webResource.getURL());\n            }\n        }\n\nand should be replaced by\n\n        if (resources != null) {\n            WebResource[] webResources = resources.getClassLoaderResources(path);\n            for (WebResource webResource : webResources) {\n                if (webResource.exists()) {\n                    result.add(webResource.getURL());\n                }\n            }\n        }\n\nSearching for this problem returns results as old as 2006.\n\nOther code that's using \"resources\" without null check:\n    public boolean modified()\n    public void start()\n    protected ResourceEntry findResourceInternal(final String name, final String path)\n\nCode that already acknowledges that \"resources\" may be null:\n    public String getContextName() {\n        if (resources == null) {\n            return \"Unknown\";\n        } else {\n            return resources.getContext().getName();\n        }\n    }\n\nFull stacktrace of our specific issue (running on Tomcat 8.0.12):\njava.lang.NullPointerException\n\tat org.apache.catalina.loader.WebappClassLoader.findResources(WebappClassLoader.java:998)\n\tat java.lang.ClassLoader.getResources(ClassLoader.java:1139)\n\tat java.util.ServiceLoader$LazyIterator.hasNextService(ServiceLoader.java:348)\n\tat java.util.ServiceLoader$LazyIterator.hasNext(ServiceLoader.java:393)\n\tat java.util.ServiceLoader$1.hasNext(ServiceLoader.java:474)\n\tat javax.xml.stream.FactoryFinder$1.run(FactoryFinder.java:352)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat javax.xml.stream.FactoryFinder.findServiceProvider(FactoryFinder.java:341)\n\tat javax.xml.stream.FactoryFinder.find(FactoryFinder.java:313)\n\tat javax.xml.stream.FactoryFinder.find(FactoryFinder.java:227)\n\tat javax.xml.stream.XMLInputFactory.newFactory(XMLInputFactory.java:205)\n\nThe XMLInputFactory.newFactory() is executed in initialValue() of a ThreadLocal<XMLInputFactory>.",
    "comments": [
      "resources should only be null when the web application class loader is not running. Methods that may be called when the class loader is stopped (generally management methods to get the name etc.) handle the case where resources is null. Methods that are not expected to be called while the class loader is stopped (such as findResources) do not handle the null.\n\nThe NPE you are getting is indicative of trying to use the web application class loader after it has been stopped.\n\nI suspect you have a memory leak and something is retaining a reference the class loader that shouldn't be.",
      "How about indicating that the web application is trying to use the web application class loader after it has been stopped instead of throwing a non-descriptive NPE?\n\nThe webapp in question was simply using a Java 8 forkjoin.\n\n\tat java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n\tat java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1540)\n\tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\n\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\n\tat java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)\n\tat java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)\n\tat java.util.stream.AbstractTask.compute(AbstractTask.java:316)\n\tat java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)\n\tat java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\n\tat java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:902)\n\tat java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1689)\n\tat java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1644)\n\tat java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\n\nAre you seriously suggesting that leaving the current behavior is preferable to, say, a proper error message?\n\nBeside that: the webapp behaved like that without being stopped. This is related to undeploy magic performed by Tomcat regarding ThreadLocal and this problem shows up after RE-deploying an application without restarting Tomcat.\n\nAs I mentioned in my original report: if you search for this on the web then you'll find mentions of similar problems from 2006. I can't be sure since they just refer to generic NPE's in the findResources method spread over various Tomcat versions.\n\nIf you consider the usage of a ThreadLocal a memory leak in our app then, yes, we have a memory leak. I, on the other hand, would argue that it's the responsibility of the application server to shield web-applications from leaks like that by using separate worker threads for each webapp.\n\nI'm fully aware how this is supposed to work. But it isn't. I just observed this NPE in a live web application.\n\nAlright. Let's settle for a compromise. Just add\n\nif(resources == null) {\n    throw new IllegalStateException(\"OMG! SNAFU! This can't happen! findResources has been called on a (probably) stopped web context! /o\\\\\");\n}\n\nThis would be easier to search for than a simple NPE and would probably prove my point in the future.",
      "The INVALID response was more aimed at the suggestion that the correct way to handle this would be a check for null. Whatever the root cause, that would simply hide the symptom rather than fix the problem which is never a good idea.\n\nThe ISE is a much better idea although I'd change the wording since it is the state of the web application class loader rather than the application that is the primary concern. Better still, would be to include a check of that state as well just in case someone manages to trigger this via some other route.\n\nFirst you say this happened without the web application being stopped. Then you say it happened after a redploy (which includes a stop followed by a start). I guess you mean the problem happened after the web app was redeployed but while that redployed web application was running. That would be consistent with the reported symptoms.\n\nYes I do consider the use of a ThreadLocal that exists outside the scope of a single web application without being cleaned up when that application stops a memory leak. The Servlet spec is (currently) silent on the use of ThreadLocals and on thread pools being shared across multiple applications. Feel free to share you views with the Servlet EG in this issue:\nhttps://java.net/jira/browse/SERVLET_SPEC-82\n\nPersonally I am in favour of a single thread pool. Partly for efficiency, partly for performance (per application thread pools would still require a common thread pool to handle a request until the correct web app was identified and then hand off the request to the correct thread pool). If you really want the isolation of per application thread pools then it is probably simpler to just deploy each application to a separate instance.\n\nThere are alternative solutions to using ThreadLocals that may be appropriate depending on the circumstances. For example, the SecureRandom instances Tomcat uses to generate session IDs:\nhttp://svn.apache.org/viewvc/tomcat/trunk/java/org/apache/catalina/util/SessionIdGeneratorBase.java?view=annotate\n\nI'm re-opening this as an enhancement request for a better error message in this case.",
      "Fixed in 9.0.x and 8.0.x for 8.0.16 onwards."
    ],
    "creation_ts": "2014-10-31T12:24:40Z",
    "fixes": [
      57172
    ]
  },
  {
    "id": 57309,
    "summary": "Custom type conversion sometimes bypassed",
    "description": "As per section 1.23 of the EL spec, the current ELResolver should be given an opportunity to apply custom type conversion before falling back on the standard rules.\n\nSee also http://tomcat.markmail.org/thread/utk3nsn4aakjl4gj",
    "comments": [
      "Proposed fix:\nhttps://github.com/markt-asf/tomcat/commit/53e9f7b44e1cd450ab27025a0202dbf4d383851d\nhttps://github.com/markt-asf/tomcat/commit/d075c49460df3bcfbda3e6ed9f3e357003bad5df\n\nI plan to commit this to trunk and back-port to 8.0.x once svn returns to read-write.",
      "This has been fixed in trunk and 8.0.x (for 8.0.16 onwards).",
      "Reviewing r1643367\nReviewing ELSupport.compare(Object, Object) and coerceToNumber(ctx, Object, BigDecimal.class) calls there:\n\n1. The first branch in compare() method:\n        if (isBigDecimalOp(obj0, obj1)) {\n            BigDecimal bd0 = (BigDecimal) coerceToNumber(ctx, obj0, BigDecimal.class);\n            BigDecimal bd1 = (BigDecimal) coerceToNumber(ctx, obj1, BigDecimal.class);\n            return bd0.compareTo(bd1);\n        }\n\nIn this branch isBigDecimalOp check returned true, so one of operands is already a BigDecimal.\n\nQUESTION: Does coerceToNumber() need to call ELResolver to convert it? Can it skip conversion if the object is already of the expected type.\n\n\n2. Minor\n                if (ctx.isPropertyResolved()) {\n                    return (Number) result;\n                }\nIt could be type.cast(result)."
    ],
    "creation_ts": "2014-12-04T14:14:44Z",
    "fixes": [
      57309
    ]
  },
  {
    "id": 66076,
    "summary": "Final block of encrypted response payload not being sent occasionally over TLS",
    "description": "Created attachment 38291\nserver-side tcpdump\n\nWe're occasionally encountering a problem where the last encrypted block of an outbound websocket payload is not being sent over TLS.\n\nThis looks very similar to bug 65448, but this is not simulating blocking and this is not when sending a file.  It's async I/O over NIO for outbound websocket traffic.\n\nMost of the time it works, but occasionally it does not.  We can usually reproduce the problem in a few hours when sending a request every 2 seconds.\n\nThe problem only occurs over TLS, not over unencrypted channels.  It reproduces with both openssl (via tomcat native) and Java's TLS impl.\n\nThe outbound payload being sent in this test is 105493 bytes (encrypted).\n\nI've attached a tcpdump that shows the behavior, but I'll copy a bit of it here....\n\nHere's an example of a working request/response (I have removed the client acks for brevity, but they can be seen in the attachment)...\n\n\n# Begin Request 3\n16:42:43.728300 IP 10.132.54.95.58275 > 10.63.72.78.8444: Flags [P.], seq 4338:4390, ack 4052, win 8210, length 52\n# Begin Response 3 (success)  Full response is 105493 bytes\n16:42:43.735921 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 4052:6972, ack 4390, win 311, length 2920\n16:42:43.735936 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 6972:9892, ack 4390, win 311, length 2920\n16:42:43.735947 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 9892:12812, ack 4390, win 311, length 2920\n16:42:43.735954 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 12812:15732, ack 4390, win 311, length 2920\n16:42:43.735962 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 15732:18652, ack 4390, win 311, length 2920\n16:42:43.736675 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 18652:24492, ack 4390, win 311, length 5840\n16:42:43.736695 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 24492:30332, ack 4390, win 311, length 5840\n16:42:43.736702 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 30332:36172, ack 4390, win 311, length 5840\n16:42:43.736720 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 36172:44932, ack 4390, win 311, length 8760\n16:42:43.737386 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 44932:58072, ack 4390, win 311, length 13140\n16:42:43.737457 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 58072:72672, ack 4390, win 311, length 14600\n16:42:43.738146 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 72672:82892, ack 4390, win 311, length 10220\n16:42:43.738187 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 82892:100412, ack 4390, win 311, length 17520\n16:42:43.738926 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [P.], seq 100412:109545, ack 4390, win 311, length 9133\n# End Response 3 (all 105493 bytes sent and acknowledged)\n\n\nAnd here is an example of a response that demonstrates the problem (again with client acks removed)...\n\n\n# Begin Request 4\n16:42:45.750396 IP 10.132.54.95.58275 > 10.63.72.78.8444: Flags [P.], seq 4390:4442, ack 109545, win 8212, length 52\n# Begin Response 4 (failure)  Full response is 105493 bytes\n16:42:45.757878 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [P.], seq 109545:125958, ack 4442, win 311, length 16413\n16:42:45.757953 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [P.], seq 125958:142371, ack 4442, win 311, length 16413\n16:42:45.758108 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 142371:146751, ack 4442, win 311, length 4380\n16:42:45.758765 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 146751:165731, ack 4442, win 311, length 18980\n16:42:45.758832 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 165731:181791, ack 4442, win 311, length 16060\n16:42:45.759519 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], seq 181791:197851, ack 4442, win 311, length 16060\n16:42:45.759635 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [P.], seq 197851:210991, ack 4442, win 311, length 13140\n\n########### START OF PROBLEM ########### \n# Only 101446 bytes sent so far.  This last block of 4047 bytes is not sent until the connection begins closing over a minute after the previous block was sent.\n16:44:21.222056 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [P.], seq 210991:215038, ack 4442, win 311, length 4047\n# End Response 4 (all 105493 bytes sent and acknowledged)\n########### END OF PROBLEM ############# \n\n# Begin closing handshake\n16:44:21.222117 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [P.], seq 215038:215119, ack 4442, win 311, length 81\n16:44:21.222812 IP 10.132.54.95.58275 > 10.63.72.78.8444: Flags [.], ack 215119, win 8212, length 0\n16:44:21.237321 IP 10.132.54.95.58275 > 10.63.72.78.8444: Flags [P.], seq 4442:4527, ack 215119, win 8212, length 85\n16:44:21.237428 IP 10.132.54.95.58275 > 10.63.72.78.8444: Flags [P.], seq 4527:4558, ack 215119, win 8212, length 31\n16:44:21.237503 IP 10.132.54.95.58275 > 10.63.72.78.8444: Flags [F.], seq 4558, ack 215119, win 8212, length 0\n16:44:21.237786 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [.], ack 4559, win 311, length 0\n16:44:21.239201 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [P.], seq 215119:215150, ack 4559, win 311, length 31\n16:44:21.239234 IP 10.63.72.78.8444 > 10.132.54.95.58275: Flags [F.], seq 215150, ack 4559, win 311, length 0\n16:44:21.240606 IP 10.132.54.95.58275 > 10.63.72.78.8444: Flags [R.], seq 4559, ack 215150, win 0, length 0\n\n\nUnfortunately, I do not have a simple reproducible project yet, but I'm hoping you might have an idea where to look, since this looks very similar to bug 65448",
    "comments": [
      "Created attachment 38292\nserver-side application log",
      "After a bit of investigation, my rudimentary understanding is that \n\n1) a buffer of unencrypted data makes it down to SecureNioChannel.write\n\nhttps://github.com/apache/tomcat/blob/93108de1127fb228e343a3f3304554bfe7177583/java/org/apache/tomcat/util/net/SecureNioChannel.java#L786\n\n\n2) SecureNioChannel.write encrypts it into a new buffer (netOutBuffer)\n\nhttps://github.com/apache/tomcat/blob/93108de1127fb228e343a3f3304554bfe7177583/java/org/apache/tomcat/util/net/SecureNioChannel.java#L810\n\n3) And then flushes that encrypted buffer\n\nhttps://github.com/apache/tomcat/blob/93108de1127fb228e343a3f3304554bfe7177583/java/org/apache/tomcat/util/net/SecureNioChannel.java#L824\n\n\n4) But flush is not guaranteed to write all the encrypted bytes to the channel, and returns false if the buffer was not completely emptied...\n\nhttps://github.com/apache/tomcat/blob/93108de1127fb228e343a3f3304554bfe7177583/java/org/apache/tomcat/util/net/SecureNioChannel.java#L120-L127\n\nBut the return value is ignored, and there's no subsequent re-flush until the next write.\n\nTherefore, the unwritten encrypted data remains in the netOutBuffer.",
      "Thanks for the analysis. What you describe makes sense to me. It looks like the non-blocking variant of bug 65448.\n\nMy current thinking is that SocketWrapper.flushNonBlocking() needs an NIO specific implementation that can take account of the status of netOutBuffer in NioSecureChannel.\n\nOnce we have a potential fix, are you in a position to either builds Tomcat 9.0.x yourself from source and/or test a 9.0.x dev build I provide for you?",
      "> Once we have a potential fix, are you in a position to either builds Tomcat 9.0.x yourself from source and/or test a 9.0.x dev build I provide for you?\n\nYes, Definitely!  I'd prefer a dev build to be provided if possible, but I'm sure I could spend some time to build it myself if needed.",
      "Great. I'll do a dev build for you. It isn't that tricky but I am all set up for it.\n\nI think I know what the problem is. I should have something for you to test on Monday.",
      "Perfect.\n\nAlso note, my project uses embedded tomcat.  Specifically these three artifacts:\n\norg.apache.tomcat.embed:tomcat-embed-core\norg.apache.tomcat.embed:tomcat-embed-el\norg.apache.tomcat.embed:tomcat-embed-websocket\n\nI assume the build will produce everything, but just wanted to be clear what I'm using.",
      "A 9.0.x dev build is available here:\nhttps://people.apache.org/~markt/dev/v9.0.64-dev-b311c0a/\n\nUsual caveats apply. This isn't an official release. Use at your own risk.\n\nIt is the standard release layout so the JARs you want will be in bin/embed/apache-tomcat-9.0.64-dev-b311c0a-embed.tar.gz",
      "Thanks Mark!  I'll get the test started today.  The test will need to run for a while before I'm confident in the fix.",
      "The test using the dev build unfortunately failed after about 3 hours with the same symptom.\n\nAfter it failed, a re-ran it with a breakpoint in NioEndpoint.flushNonBlocking to see the new code in action, but my breakpoint unfortunately never gets hit when sending outbound websocket messages. \n\n(It does get hit when sending a normal HTTP response, so I can confirm the new code is active and the breakpoint is working.)\n\nHere's the partial stacktrace when SecureNioEndpoint.flush gets called (when it doesn't write everything out).  Perhaps that provides some visibility into why NioEndpoint.flushNonBlocking is never called ?\n\nBreakpoint reached\n\tat org.apache.tomcat.util.net.SecureNioChannel.flush(SecureNioChannel.java:123)\n\tat org.apache.tomcat.util.net.SecureNioChannel.write(SecureNioChannel.java:863)\n\tat org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper$NioOperationState.run(NioEndpoint.java:1674)\n\tat org.apache.tomcat.util.net.SocketWrapperBase$OperationState.start(SocketWrapperBase.java:1063)\n\tat org.apache.tomcat.util.net.SocketWrapperBase.vectoredOperation(SocketWrapperBase.java:1482)\n\tat org.apache.tomcat.util.net.SocketWrapperBase.write(SocketWrapperBase.java:1408)\n\tat org.apache.tomcat.util.net.SocketWrapperBase.write(SocketWrapperBase.java:1379)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:93)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:512)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:398)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendBytesByCompletion(WsRemoteEndpointImplBase.java:155)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointAsync.sendBinary(WsRemoteEndpointAsync.java:65)\n\tat org.springframework.web.reactive.socket.adapter.StandardWebSocketSession.sendMessage(StandardWebSocketSession.java:92)\n\n\nShould something in that stack be triggering NioEndpoint.flushNonBlocking (either directly or indirectly via flushing the socket)?",
      "Well, here it would simply need the same change since there's nothing in that otehr code path that checks the network output buffer: https://github.com/apache/tomcat/blob/main/java/org/apache/tomcat/util/net/NioEndpoint.java#L1591",
      "NIO2 should not be affected by this and does not need any patching, since SecureNio2Channel simply uses more async operations to fully empty the network output buffer.",
      "(In reply to Remy Maucherat from comment #10)\n> Well, here it would simply need the same change since there's nothing in\n> that other code path that checks the network output buffer:\n> https://github.com/apache/tomcat/blob/main/java/org/apache/tomcat/util/net/\n> NioEndpoint.java#L1591\n\nI think it is going to be a bit more complicated. For the case where all the application bytes have been written and it is just the netOutBuffer that has data left to write, I can't see a clean way to ensure the write isn't completed at https://github.com/apache/tomcat/blob/main/java/org/apache/tomcat/util/net/NioEndpoint.java#L1628",
      "I have a proposed fix. Just running the test suite. Assuming it passes, I'll commit the fix to 9.0.x and do another dev build.",
      "Updated dev build:\nhttps://people.apache.org/~markt/dev/v9.0.64-dev-680db44/\n\nSame caveats as before.",
      "Got it.  Testing...",
      "Good news!  The test has been running with no failures continuously since my last comment.  I'll keep letting it run today.  But I'm pretty confident that the problem is fixed since the test would normally fail after a few of hours.",
      "Thanks for testing.\n\nFixed in:\n- 10.1.x for 10.1.0-M16 onwards\n- 10.0.x for 10.0.22 onwards\n- 9.0.x for 9.0.64 onwards\n- 8.5.x for 8.5.80 onwards"
    ],
    "creation_ts": "2022-05-18T18:30:45Z",
    "fixes": [
      66076
    ]
  },
  {
    "id": 44088,
    "summary": "Cannot expire session via html manager webapp",
    "description": "The html manager webapp done not work correctly when clicking the expire\nsessions button. The idle param is missing from the form.\n\nThe following html shows this bug...\n\n<form method=\"POST\" action=\"/manager/html/expire?path=/\">\n  <small>\n  &nbsp;<input type=\"submit\" value=\"Expire sessions\">&nbsp;with idle\n&ge;&nbsp;<input type=\"text\" name=\"expire\" size=\"5\" value=\"30\">&nbsp;minutes&nbsp;\n  </small>\n  </form>\n\nThe name of the text input should be idle.",
    "comments": [
      "Created attachment 21280\nPatch code this fixes this bug\n\nThis patch should be applied to the trunk.",
      "Fixed in trunk and proposed for 6.0.x",
      "This is fixed in svn and will be included in 6.0.16 onwards."
    ],
    "creation_ts": "2007-12-17T15:14:23Z",
    "fixes": [
      44088
    ]
  },
  {
    "id": 66609,
    "summary": "invalid XML in directory listing with file names containing \"&\" and \"'\"",
    "description": "similar to bug 33535: if files in a directroy contain \"'\" or \"&\" symbols, generted XML is not valid and XSLT style sheet cannot be applied to render the directory listing. \n\nCause: DefaultServelt considers \"'\" as a valid character on URLEncoder.DEFAULT, renderXML surronds attributes with ' symbol, and thus XML generated by renderXML may contain invalid entry with url attribute like this <entry urlPath='file's name.txt' />",
    "comments": [
      "*** This bug has been marked as a duplicate of bug 33535 ***",
      "The bug may be similar to bug 33535, but bug 33535 says only about & in the names of the files. My bug report says that there are can be symbols that are not valid for XML, such as symbol \"'\". And I have a simple solution to that which I was goign to provide as a fix for this bug.",
      "(In reply to webmascon from comment #2)\n> The bug may be similar to bug 33535, but bug 33535 says only about & in the\n> names of the files. My bug report says that there are can be symbols that\n> are not valid for XML, such as symbol \"'\". \nIMO, Those reports are all about handling file names that contain special characters which lead XML is invalided.\n\n> And I have a simple solution to that which I was goign to provide as a fix for this bug.\n\nGreat.",
      "created pull request: https://github.com/apache/tomcat/pull/621",
      "Fixed in:\n- 11.0.x for 11.0.0-M7 onwards\n- 10.1.x for 10.1.10 onwards\n- 9.0.x for 9.0.76 onwards\n- 8.5.x for 8.5.90 onwards",
      "thanks!"
    ],
    "creation_ts": "2023-05-21T23:20:31Z",
    "fixes": [
      66609
    ]
  },
  {
    "id": 69559,
    "summary": "WARNING: sun.misc.Unsafe::invokeCleaner has been called by org.apache.tomcat.util.buf.ByteBufferUtils",
    "description": "Windows 11\nopenjdk-24-ea+34_windows-x64_bin\nSpring boot: 3.4.2\nApache Tomcat/10.1.34\n\nGets WARNING at startup:\n\n===\nC:\\LocalData\\DEV\\Java\\jdk-24\\bin\\java.exe --enable-preview --enable-native-access=ALL-UNNAMED -XX:TieredStopAtLevel=1 ...\n\n19:42:21.172  INFO - tools.ToolsApplication                   : Starting ToolsApplication using Java 24-ea with PID 19000 (...)\n...\n19:42:22.188  INFO - o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (https)\n19:42:22.198  INFO - o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n19:42:22.198  INFO - o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.34]\n...\n19:42:23.171  INFO - o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (https) with context path '/'\n19:42:23.177  INFO - tools.ToolsApplication                   : Started ToolsApplication in 2.428 seconds (process running for 2.821)\nWARNING: A terminally deprecated method in sun.misc.Unsafe has been called\nWARNING: sun.misc.Unsafe::invokeCleaner has been called by org.apache.tomcat.util.buf.ByteBufferUtils (file:/E:/.gradle/caches/modules-2/files-2.1/org.apache.tomcat.embed/tomcat-embed-core/10.1.34/f610f84be607fbc82e393cc220f0ad45f92afc91/tomcat-embed-core-10.1.34.jar)\nWARNING: Please consider reporting this to the maintainers of class org.apache.tomcat.util.buf.ByteBufferUtils\nWARNING: sun.misc.Unsafe::invokeCleaner will be removed in a future release\n===\n\nHavent' seen this reported anywhere else (searching here did not find anything).",
    "comments": [
      "This is a Java 24 feature.\n\nYou should try to move away from using any direct ByteBuffer (since garbage collecting them is impossible without Unsafe), which means:\n- Avoid using the direct buffers options from the Tomcat Connector (this is not the default configuration).\n- Do not use tomcat-native for OpenSSL on Java 24, use Java FFM instead (remove the tomcat-native library).",
      "But *I* am not doing anything, other than using the default Tomcat stasrter in Spring Boot:\n\n\"\"\"\nsun.misc.Unsafe::invokeCleaner has been called by org.apache.tomcat.util.buf.ByteBufferUtils\n===\n\nI assume that you need to know this:\n\n===\nPlease consider reporting this to the maintainers of class org.apache.tomcat.util.buf.ByteBufferUtils\nWARNING: sun.misc.Unsafe::invokeCleaner will be removed in a future release\n===\n\nI guess I'll raise this with the Spring Boot guys...",
      "There is currently no way to avoid this even if direct buffers are not being used. I have some ideas for a fix.",
      "Fixed in:\n- 11.0.x for 11.0.3 onwards\n- 10.1.x for 10.1.35 onwards\n-  9.0.x for  9.0.99 onwards"
    ],
    "creation_ts": "2025-01-31T10:01:44Z",
    "fixes": [
      69559
    ]
  },
  {
    "id": 56653,
    "summary": "Concurrency issue with Mapper$ContextList when stopping Contexts",
    "description": "I noticed this issue while reviewing the code of Mapper.removeContextVersion() of the current trunk (@1604217). The same code exists in Tomcat 7 and 6.\n\nIn Mapper.removeContextVersion() (Mapper.removeContext() in Tomcat 6) it does the following:\n[[[\nhost.contextList.contexts = newContexts;             \n// Recalculate nesting                               \nhost.contextList.nesting = 0;                        \nfor (int i = 0; i < newContexts.length; i++) {       \n    int slashCount = slashCount(newContexts[i].name);\n    if (slashCount > host.contextList.nesting) {     \n        host.contextList.nesting = slashCount;       \n    }                                                \n}                                                    \n]]]\n\nThe problem is there is a delay between when the list of contexts is updated (contextList.contexts) and the contextList.nesting field is updated. The \"nesting\" field is used when mapping contexts.\n\nFor example,\n1. If there are the following contexts:\nROOT\nfoo\nfoo#bar\n\n2. Context foo#bar is being stopped.\n\n3. A request for \"foo\" comes in, e.g. http://localhost/foo/index.html\nExpected behaviour: Map the context to foo application.\nActual behaviour:\nIt may be that the request will be erroneously mapped to the ROOT webapp instead of \"foo\".\n\nI have a test case.",
    "comments": [
      "I added the test case in r1604309.\nIt may pass, but I also observed the following failures:\n\norg.junit.ComparisonFailure: expected:<[/foo/bar/bla]> but was:<[]>\n\tat org.apache.catalina.mapper.TestMapper.testContextListConcurrencyBug56653(TestMapper.java:263)",
      "Created attachment 31736\n2014-06-21_tc8_56653_v1.patch\n\nThis patch fixes the issue, BUT breaks aliases support.\nThanks to TestMapper tests for catching that.\n\nThe idea to turn ContextList into an immutable object with final fields does not work, because all aliases share the same ContextList object.",
      "Fixed in Tomcat 8 by r1604319 and will be in 8.0.10 onwards.",
      "(In reply to Konstantin Kolinko from comment #3)\n> Fixed in Tomcat 8 by r1604319 and will be in 8.0.10 onwards.\n\nA part of that solution was reverted in r1604934 and re-implemented in a different way in r1604940.\n\nInstead of introducing an additional level of indirection, I run a loop to update all the aliases.",
      "Fixed in Tomcat 7 with r1608983 and r1608993 and  will be in 7.0.55 onwards.",
      "Marking as fixed since this was fixed in 7.0.x.\n\nNote it was not back-ported to 6.0.x since 6.0.x reached end of life before anyone expressed an interest in back-porting the fix."
    ],
    "creation_ts": "2014-06-21T02:19:53Z",
    "fixes": [
      56653
    ]
  },
  {
    "id": 65118,
    "summary": "Spurious null pointer exception in Http2UpgradeHandler when reloading web page",
    "description": "We have a web application using Tomcat configured to use HTTP/2\n\nSometimes (about 1 out of 10) when reloading a web page one or more resources fails to load, typically style.css, with error connection reset reported by web browser.\n\nIn the catalina log file the following it logged:\n>27-Jan-2021 16:59:02.435 FINE [https-openssl-apr-0.0.0.0-8443-exec-2] org.apache.coyote.http2.Http2UpgradeHandler.upgradeDispatch Entry, Connection [2], SocketStatus [OPEN_READ]\n>27-Jan-2021 16:59:02.435 FINE [https-openssl-apr-0.0.0.0-8443-exec-2] org.apache.coyote.http2.Http2UpgradeHandler.init Connection [2], State [CONNECTED]\n>27-Jan-2021 16:59:02.436 FINE [https-openssl-apr-0.0.0.0-8443-exec-2] org.apache.coyote.http2.Http2Parser.validateFrame Connection [2], Stream [1019], Frame type [HEADERS], Flags [37], Payload size [44]\n>27-Jan-2021 16:59:02.436 FINE [https-openssl-apr-0.0.0.0-8443-exec-2] org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams Connection [2] Starting pruning of old streams. Limit is [100] + 10% and there are currently [509] streams.\n>27-Jan-2021 16:59:02.436 FINE [https-openssl-apr-0.0.0.0-8443-exec-2] org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams Connection [2] Pruned completed stream [1]\n>27-Jan-2021 17:00:23.798 FINE [https-openssl-apr-0.0.0.0-8443-exec-2] org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams Connection [2] Pruned completed stream [3]\n>27-Jan-2021 17:00:57.370 FINE [https-openssl-apr-0.0.0.0-8443-exec-2] org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams Connection [2] Pruned completed stream [1]\n>27-Jan-2021 17:01:18.505 SEVERE [https-openssl-apr-0.0.0.0-8443-exec-2] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Error reading request, ignored\n>\tjava.lang.NullPointerException\n>\t\tat org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams(Http2UpgradeHandler.java:1249)\n>\t\tat org.apache.coyote.http2.Http2UpgradeHandler.createRemoteStream(Http2UpgradeHandler.java:1129)\n>\t\tat org.apache.coyote.http2.Http2UpgradeHandler.headersStart(Http2UpgradeHandler.java:1508)\n>\t\tat org.apache.coyote.http2.Http2Parser.readHeadersFrame(Http2Parser.java:225)\n>\t\tat org.apache.coyote.http2.Http2Parser.readFrame(Http2Parser.java:99)\n>\t\tat org.apache.coyote.http2.Http2Parser.readFrame(Http2Parser.java:71)\n>\t\tat org.apache.coyote.http2.Http2UpgradeHandler.upgradeDispatch(Http2UpgradeHandler.java:339)\n>\t\tat org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:60)\n>\t\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:59)\n>\t\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\n>\t\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:1991)\n>\t\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n>\t\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n>\t\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n>\t\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n>\t\tat java.lang.Thread.run(Thread.java:748)\n\nWe see this with multiple web browsers including Chrome (88.0.4324.104) and Firefox (84.0.2)\n\nTomcat is configured to use HTTP/2 with default values.\n\nIn order to reproduce this issue we continuously reload a web page until issue occurs.\n\nAfter examining the logs and the code (Http2UpgradeHandler.java:1249) it seems to me that the same stream is pruned twice, in the same go, and the second time its parent is already removed resulting in a NPE due to variable parent is null.",
    "comments": [
      "The issue looks like concurrent modification of Http2UpgradeHandler.streams to me. I think pruning needs to be performed while holding the priorityTreeLock but I want to try and recreate this to confirm that theory before looking at a fix.",
      "Fixed in:\n- 10.0.x for 10.0.3 onwards\n- 9.0.x for 9.0.44 onwards\n- 8.5.x for 8.5.63 onwards\n\n7.0.x is not affected.",
      "I have now tested the fix for this issue using SNAPSHOT tomcat-9.0-20210208.120325-3060.\n\nI am afraid that the fix does not solve the issue. I still get a null pointer exception at the same place in the code (however other row number 1252).\n\n>08-Feb-2021 14:07:10.564 FINE [https-openssl-apr-0.0.0.0-8443-exec-34] org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams Connection [1] Starting pruning of old streams. Limit is [500] and there are currently [509] streams.\n>08-Feb-2021 14:07:10.564 FINE [https-openssl-apr-0.0.0.0-8443-exec-34] org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams Connection [1] Pruned completed stream [1]\n>08-Feb-2021 14:07:10.564 FINE [https-openssl-apr-0.0.0.0-8443-exec-34] org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams Connection [1] Pruned completed stream [3]\n>08-Feb-2021 14:07:10.564 FINE [https-openssl-apr-0.0.0.0-8443-exec-34] org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams Connection [1] Pruned completed stream [5]\n>08-Feb-2021 14:07:10.564 FINE [https-openssl-apr-0.0.0.0-8443-exec-34] org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams Connection [1] Pruned completed stream [7]\n>08-Feb-2021 14:07:10.564 FINE [https-openssl-apr-0.0.0.0-8443-exec-34] org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams Connection [1] Pruned completed stream [5]\n>08-Feb-2021 14:07:10.565 SEVERE [https-openssl-apr-0.0.0.0-8443-exec-34] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Error reading request, ignored\n>\tjava.lang.NullPointerException\n>\t\tat org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams(Http2UpgradeHandler.java:1252)\n>\t\tat org.apache.coyote.http2.Http2UpgradeHandler.createRemoteStream(Http2UpgradeHandler.java:1129)\n>\t\tat org.apache.coyote.http2.Http2UpgradeHandler.headersStart(Http2UpgradeHandler.java:1512)\n>\t\tat org.apache.coyote.http2.Http2Parser.readHeadersFrame(Http2Parser.java:225)\n>\t\tat org.apache.coyote.http2.Http2Parser.readFrame(Http2Parser.java:99)\n>\t\tat org.apache.coyote.http2.Http2Parser.readFrame(Http2Parser.java:71)\n>\t\tat org.apache.coyote.http2.Http2UpgradeHandler.upgradeDispatch(Http2UpgradeHandler.java:339)\n>\t\tat org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:60)\n>\t\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:59)\n>\t\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)\n>\t\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:1991)\n>\t\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n>\t\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n>\t\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n>\t\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n>\t\tat java.lang.Thread.run(Thread.java:748)\n\n\nFor testing purposes I changed the source code in Http2UpgradeHandler line 1252. \n\nFrom \n> while (toClose > 0 && parent.getIdAsInt() > 0 && parent.getIdAsInt() < stream.getIdAsInt() && parent.getChildStreams().isEmpty()) {\nTo\n>  while (toClose > 0 && parent != null && parent.getIdAsInt() > 0 && parent.getIdAsInt() < stream.getIdAsInt() && parent.getChildStreams().isEmpty()) {\nIn order to avoid the NPE. This fix solved the issue. At least no NPE was thrown and no problem with loading resources could be seen in the web browsers. \nI hope this can help you pin point the root cause.",
      "That patch looks to be tackling the symptom rather than the root cause. My concern is that the root cause may trigger other errors.\n\nWhat would really help here is a test case (ideally a simple WAR) that demonstrates the issue.",
      "(In reply to Mark Thomas from comment #4)\n> That patch looks to be tackling the symptom rather than the root cause. My\n> concern is that the root cause may trigger other errors.\n> \n> What would really help here is a test case (ideally a simple WAR) that\n> demonstrates the issue.\n\nI understand. I will try to create a test case that you can use.",
      "Moving to NEEDINFO as we need a test case for this.",
      "Woot! I managed to trigger this locally just with Tomcat's default home page. Investigating...",
      "Found it. The priority hierarchy was being corrupted when a closed stream was replaced with a RecycledStream instance.\n\nFixed in:\n- 10.0.x for 10.0.3 onwards\n- 9.0.x for 9.0.44 onwards\n- 8.5.x for 8.5.63 onwards\n\n7.0.x is not affected.",
      "Still seen in 9.0.55:\n\n Exception in thread \"https-jsse-nio-8443-exec-6\" java.lang.NullPointerException\n[INFO] [talledLocalContainer] \tat org.apache.coyote.http2.Http2UpgradeHandler.pruneClosedStreams(Http2UpgradeHandler.java:1293)\n[INFO] [talledLocalContainer] \tat org.apache.coyote.http2.Http2UpgradeHandler.createRemoteStream(Http2UpgradeHandler.java:1170)\n[INFO] [talledLocalContainer] \tat org.apache.coyote.http2.Http2UpgradeHandler.headersStart(Http2UpgradeHandler.java:1596)\n[INFO] [talledLocalContainer] \tat org.apache.coyote.http2.Http2AsyncUpgradeHandler.headersStart(Http2AsyncUpgradeHandler.java:41)\n[INFO] [talledLocalContainer] \tat org.apache.coyote.http2.Http2Parser.readHeadersFrame(Http2Parser.java:226)",
      "Thanks for the report.\n\nI've taken another look at the code and I have found what I believe is the remaining root cause of the NPE.\n\nFixed in:\n- 10.1.x for 10.1.0-M16 onwards\n- 10.0.x for 10.0.22 onwards\n- 9.0.x for 9.0.64 onwards\n- 8.5.x for 8.5.80 onwards"
    ],
    "creation_ts": "2021-02-01T09:43:40Z",
    "fixes": [
      65118
    ]
  },
  {
    "id": 69415,
    "summary": "ExpiresFilter incorrectly caches responses that are explicitly declared as not cacheable",
    "description": "Currently ExpiresFilter appends \"Expires\" header for response even with header \"Cache-Control: no-store\". Per rfc9111#section-3, response with \"no-store\" must not be cached.\n\nBTW, suggest introduce \"ExpiresIncludedMethods\", \"ExpiresIncludedResponseStatusCodes\" initial parameters to improve configurability.",
    "comments": [
      "Created attachment 39915\ntest case.",
      "Fixed in:\n- 11.0.x for 11.0.1 onwards\n- 10.1.x for 10.1.32 onwards\n-  9.0.x for  9.0.97 onwards"
    ],
    "creation_ts": "2024-10-28T06:52:59Z",
    "fixes": [
      69415
    ]
  },
  {
    "id": 53677,
    "summary": "ArrayIndexOutOfBoundsException when response header exceeds maxHttpHeaderSize",
    "description": "Created attachment 29184\nSmall sample web app\n\nWhen a servlet adds enough information to a response exceed the maxHttpHeaderSize limitconfigured for an HTTP 1.1 connector, an ArrayIndexOutOfBoundsException is thrown by Tomcat (example stacktrace below), and the connection is closed without writing any data.\n\nIn a scenario like this, should a response with a status of 500 be returned to indicate a server error? (and perhaps the server should log a message indicating that the limit has been exceeded for a response, instead of throwing an ArrayIndexOutOfBoundsException?)\n\n\n\nThis issue can be reproduced by testing with a servlet that implements this contrived doGet method (sample application with this is attached):\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tchar[] bigBuffer = new char[1024 * 8];\n\t\tArrays.fill(bigBuffer, 'a');\n\t\tresponse.setHeader(\"x-example\", new String(bigBuffer));\n\t\t\n\t\tresponse.setContentType(\"text/plain\");\n\t\tresponse.setCharacterEncoding(\"ISO-8859-1\");\n\n\t\tWriter out = response.getWriter();\n\t\tout.write(\"Hello!\");\n\t\tout.close();\n\t}\n\n\nThis has been observed under the following configurations:\n\nTomcat 6.0.26/Oracle JDK 1.6.0_25 (64-bit)/SUSE Linux 10\nTomcat 6.0.35/Oracle JDK 1.7.0 (64-bit)/Windows 7\n\n- Tomcat is not running behind a web server in any of these configurations\n\n- The connector being used in both cases is Coyote HTTP/1.1\n\n\n\n\nStacktrace:\n\nAug 07, 2012 6:11:26 PM org.apache.catalina.core.StandardWrapperValve invoke\nSEVERE: Servlet.service() for servlet SampleServlet threw exception\njava.lang.ArrayIndexOutOfBoundsException: 8192\n\tat org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:730)\n\tat org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:641)\n\tat org.apache.coyote.http11.InternalOutputBuffer.sendHeader(InternalOutputBuffer.java:514)\n\tat org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1637)\n\tat org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:956)\n\tat org.apache.coyote.Response.action(Response.java:183)\n\tat org.apache.coyote.Response.sendHeaders(Response.java:379)\n\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:314)\n\tat org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:274)\n\tat org.apache.catalina.connector.CoyoteWriter.close(CoyoteWriter.java:108)\n\tat com.example.SampleServlet.doGet(SampleServlet.java:36)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:617)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n\tat java.lang.Thread.run(Unknown Source)\n\nAug 07, 2012 6:11:26 PM org.apache.catalina.core.StandardWrapperValve invoke\nSEVERE: Servlet.service() for servlet SampleServlet threw exception\njava.lang.ArrayIndexOutOfBoundsException: 8192\n\tat org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:730)\n\tat org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:641)\n\tat org.apache.coyote.http11.InternalOutputBuffer.sendHeader(InternalOutputBuffer.java:514)\n\tat org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1637)\n\tat org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:956)\n\tat org.apache.coyote.Response.action(Response.java:183)\n\tat org.apache.coyote.Response.sendHeaders(Response.java:379)\n\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:314)\n\tat org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:274)\n\tat org.apache.catalina.connector.CoyoteWriter.close(CoyoteWriter.java:108)\n\tat com.example.SampleServlet.doGet(SampleServlet.java:36)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:617)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n\tat java.lang.Thread.run(Unknown Source)\n\nAug 07, 2012 6:11:26 PM org.apache.coyote.http11.Http11Processor process\nSEVERE: Error processing request\njava.lang.ArrayIndexOutOfBoundsException\n\tat java.lang.System.arraycopy(Native Method)\n\tat org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:701)\n\tat org.apache.coyote.http11.InternalOutputBuffer.sendStatus(InternalOutputBuffer.java:438)\n\tat org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1624)\n\tat org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:956)\n\tat org.apache.coyote.Response.action(Response.java:183)\n\tat org.apache.coyote.Response.sendHeaders(Response.java:379)\n\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:314)\n\tat org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:274)\n\tat org.apache.catalina.connector.Response.finishResponse(Response.java:493)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:317)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n\tat java.lang.Thread.run(Unknown Source)\n\nAug 07, 2012 6:11:26 PM org.apache.coyote.http11.Http11Processor process\nSEVERE: Error processing request\njava.lang.ArrayIndexOutOfBoundsException\n\tat java.lang.System.arraycopy(Native Method)\n\tat org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:701)\n\tat org.apache.coyote.http11.InternalOutputBuffer.sendStatus(InternalOutputBuffer.java:438)\n\tat org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1624)\n\tat org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:956)\n\tat org.apache.coyote.Response.action(Response.java:183)\n\tat org.apache.coyote.Response.sendHeaders(Response.java:379)\n\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:314)\n\tat org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:274)\n\tat org.apache.catalina.connector.Response.finishResponse(Response.java:493)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:317)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n\tat java.lang.Thread.run(Unknown Source)\n\nAug 07, 2012 6:11:26 PM org.apache.coyote.http11.Http11Processor process\nSEVERE: Error finishing response\njava.lang.ArrayIndexOutOfBoundsException\n\tat java.lang.System.arraycopy(Native Method)\n\tat org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:701)\n\tat org.apache.coyote.http11.InternalOutputBuffer.sendStatus(InternalOutputBuffer.java:438)\n\tat org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1624)\n\tat org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:956)\n\tat org.apache.coyote.Response.action(Response.java:181)\n\tat org.apache.coyote.http11.InternalOutputBuffer.endRequest(InternalOutputBuffer.java:398)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:901)\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n\tat java.lang.Thread.run(Unknown Source)\n\nAug 07, 2012 6:11:26 PM org.apache.coyote.http11.Http11Processor process\nSEVERE: Error finishing response\njava.lang.ArrayIndexOutOfBoundsException\n\tat java.lang.System.arraycopy(Native Method)\n\tat org.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java:701)\n\tat org.apache.coyote.http11.InternalOutputBuffer.sendStatus(InternalOutputBuffer.java:438)\n\tat org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1624)\n\tat org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:956)\n\tat org.apache.coyote.Response.action(Response.java:181)\n\tat org.apache.coyote.http11.InternalOutputBuffer.endRequest(InternalOutputBuffer.java:398)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:901)\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n\tat java.lang.Thread.run(Unknown Source)",
    "comments": [
      "Fixed in trunk and 7.0.x and will be included in 7.0.30 onwards.\n\nIt has not yet been proposed for back-port as due to the connector refactoring, a 6.0.x specific patch will be required.",
      "Marking as fixed since this was fixed in 7.0.x.\n\nNote it was not back-ported to 6.0.x since 6.0.x reached end of life before anyone expressed an interest in back-porting the fix."
    ],
    "creation_ts": "2012-08-07T23:28:11Z",
    "fixes": [
      53677
    ]
  },
  {
    "id": 47124,
    "summary": "Run the unit tests as part of the build!!!",
    "description": "Created attachment 23565\nPatch running the unit tests as part of the build\n\nThe lack of unit tests is really a shame for a project like Tomcat! A few unit tests are available in the source code but first they are not run as part of the build process and second many of them fail.\n\nI've attached a patch to this issue that:\n- runs the existing unit tests as integral part of the build\n- renames some of the unit tests to have a consistent naming pattern for the unit tests (ie XXXXXTest)\n- makes a minimal cleanup\n\nThe consequence is that the build fails with this patch as 11 of the 51 unit tests fail. My current knowledge of Tomcat doesn't allow me to decide if the failing tests should be simply removed or adapted. With feedback on this, I can provide a modified version of the patch.",
    "comments": [
      "I am -1 for this patch as is on the following grounds:\n- The tests take far too long to run by default with every build. This patch increases the rebuild time from 1s to over 5min.\n- The patch doesn't follow the Tomcat convention for defining external libs\n\nI'm also very close to -1 on the renaming. I don't think it adds that much.\n\nGiven this, what I have done is modified the current test/build.xml in trunk to run all the tests. There are currently see a number of errors/failures - mostly in Tribes. How many of those are genuine and how many are faulty tests is TBD. Given the failures and the time taken, the Tribes tests are currently commented out.\n\nThe remaining failures are caused by the use of ServerFactory that doesn't play nicely with o.a.c.startup.Tomcat when multiple Tomcat instance are created.\n\nAs noted in the code ServerFactory needs to be removed.\n\nSeveral resolutions are applicable here, I went for FIXED.",
      "I'm glad to see that you've committed some changes, nevertheless for me it doesn't really change the situation that unit tests are not considered seriously in Tomcat project.\n\nTests *should* be integral part of the build. It's normal that a build takes (far) longer than 5 minutes if it runs tests (nevertheless these tests should have some sense to be worth this time, what is perhaps not yet the case).\n\nI'm sorry if I didn't followed the convention for external libs. I thought that it was the case. What about using Ivy rather than this self made \"strategy\"?\n\nThis is is far less important that running the tests as part of the build, but I think that the tests should be renamed for consistency and as it just allows to use name patterns to select the tests (currently there is no convention here). In the current state of the test suite, I would prefer to select the tests by name pattern rather than having a TestAll as it doesn't have any advantage and this file needs to be modified each time a test is added (with the risk to have tests that aren't run).\n\nI don't understand either why you don't use Ant's junit task.\n\nAt the end I have the feeling that this issue has been closed as WONTFIX rather than as FIXED :-(",
      "(In reply to comment #2)\n> Tests *should* be integral part of the build. It's normal that a build takes\n> (far) longer than 5 minutes if it runs tests (nevertheless these tests should\n> have some sense to be worth this time, what is perhaps not yet the case).\nRunning the tests as part of the Gump build would make sense. Changing the build we use all the time in development from 1s to >5min does not.\n\n> I'm sorry if I didn't followed the convention for external libs. I thought that\n> it was the case. What about using Ivy rather than this self made \"strategy\"?\nChanging this is a separate question for the dev list. As with any change, there would need to sufficient benefit to justify it.\n\n> This is is far less important that running the tests as part of the build, but\n> I think that the tests should be renamed for consistency and as it just allows\n> to use name patterns to select the tests (currently there is no convention\n> here). In the current state of the test suite, I would prefer to select the\n> tests by name pattern rather than having a TestAll as it doesn't have any\n> advantage and this file needs to be modified each time a test is added (with\n> the risk to have tests that aren't run).\nThat is a reasonable argument. Patches tend to get very large when renames are concerned. A set of svn commands to run would be easier to review and to apply.\n\n> I don't understand either why you don't use Ant's junit task.\nNo idea. Merging the test.xml with the main build.xml and using Ant's junit task would make sense.",
      "(In reply to comment #3)\n>... \n> > This is is far less important that running the tests as part of the build, but\n> > I think that the tests should be renamed for consistency and as it just allows\n> > to use name patterns to select the tests (currently there is no convention\n> > here). In the current state of the test suite, I would prefer to select the\n> > tests by name pattern rather than having a TestAll as it doesn't have any\n> > advantage and this file needs to be modified each time a test is added (with\n> > the risk to have tests that aren't run).\n> That is a reasonable argument. Patches tend to get very large when renames are\n> concerned. A set of svn commands to run would be easier to review and to apply.\n\nIsn't it even more efficient if one committer (you?) just rename the files and commit the changes?\n\n> \n> > I don't understand either why you don't use Ant's junit task.\n> No idea. Merging the test.xml with the main build.xml and using Ant's junit\n> task would make sense.\n\nthis was in the proposed patch. Should I upload an other one?",
      "(In reply to comment #4)\n> Isn't it even more efficient if one committer (you?) just rename the files and\n> commit the changes?\n\nDepends how you measure efficiency. It would be less work for me just to review a set of proposed changes.\n\n> this was in the proposed patch. Should I upload an other one?\n\nThere was a lot to the patch. Separating out the junit task (and checking that it still applies to the latest trunk) would be useful.\n\nRe-opening so this doesn't get forgotten.",
      "(In reply to comment #5)\n> (In reply to comment #4)\n> > Isn't it even more efficient if one committer (you?) just rename the files and\n> > commit the changes?\n> \n> Depends how you measure efficiency. It would be less work for me just to review\n> a set of proposed changes.\n\nif you know an easy way to generate the set of SVN commands, I'm interested. Otherwise. due to the very small number of files impacted, it's better if you do it directly. I've already provided a patch for that but you haven't applied it.\n\n> > this was in the proposed patch. Should I upload an other one?\n> \n> There was a lot to the patch. Separating out the junit task (and checking that\n> it still applies to the latest trunk) would be useful.\n> \n> Re-opening so this doesn't get forgotten.\n\nok, I'll submit an other one just with this features",
      "I found some time to work on this.\n\nTest cases have been renamed and a test task added to build. It will remain optional for now but could be made mandatory in the future if that is deemed useful.\n\nIt hasn't been proposed for backport to 6.0.x, mainly as the one class that will hopefully be really helpful when building tests cases (o.a.c.startup.Tomcat) isn't available and would need a number amount of other patches to be applied before it could be used.\n\nWe can always revisit the back-porting decision at a later date."
    ],
    "creation_ts": "2009-04-30T00:06:39Z",
    "fixes": [
      47124
    ]
  },
  {
    "id": 69406,
    "summary": "StringInterpreterEnum rethrows IllegalArgumentException for invalid enum",
    "description": "When StringInterpreterEnum is used, an attempt to evaluate a non-existent enum value results in an IllegalArgumentException that interrupts JSP code generation and is recorded by the caller.  The desired behavior is to instead fall back to request-time EL interpretation, similar to the behavior of ELInterpretertagSetters when encountering a non-existent enum value.\n\nThe use of non-existent enums shows up repeatedly in our large application thanks to a poor coding practice of using \"${''}\" to represent null. This works during EL resolution but not at compile-time.\n\n\nCurrent code:\n\n@Override\nprotected String coerceToOtherType(Class<?> c, String s, boolean isNamedAttribute) {\n\tif (c.isEnum() && !isNamedAttribute) {\n\t\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\t\tEnum<?> enumValue = Enum.valueOf((Class<? extends Enum>) c, s);\n\t\treturn c.getName() + \".\" + enumValue.name();\n\t}\n\n\treturn null;\n}\n\nShould be wrapped in a try/catch such as:\n\n@Override\nprotected String coerceToOtherType(Class<?> c, String s, boolean isNamedAttribute) {\n\tif (c.isEnum() && !isNamedAttribute) {\n\t\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        try {\n\t\t\tEnum<?> enumValue = Enum.valueOf((Class<? extends Enum>) c, s);\n\t\t\treturn c.getName() + \".\" + enumValue.name();\n\t\t} catch (IllegalArgumentException iae) {\n            log.debug(Localizer.getMessage(\"jsp.error.typeConversion\", s, \"Enum[\" + c.getName() + \"]\"), iae);\n\t\t}\n\t}\n\n\treturn null;\n}",
    "comments": [
      "Created attachment 39913\nJUnit reproducer",
      "Created attachment 39917\nPatch\n\nPatch w/ change + JUnit",
      "Fixed in:\n- 11.0.x for 11.0.1 onwards\n- 10.1.x for 10.1.32 onwards\n-  9.0.x for  9.0.97 onwards"
    ],
    "creation_ts": "2024-10-21T12:59:53Z",
    "fixes": [
      69406
    ]
  },
  {
    "id": 42459,
    "summary": "Tomcat Web Application Manager table error",
    "description": "html table -> tr wrong formating when stop (not last) in Tomcat Web Application \nManager.",
    "comments": [
      "Created attachment 20220\nscreen showing error",
      "Fixed in r539895 for 6.0.14."
    ],
    "creation_ts": "2007-05-19T13:32:58Z",
    "fixes": [
      42459
    ]
  },
  {
    "id": 64226,
    "summary": "Tomcat 9 can return HTTP date headers in timezone other than GMT",
    "description": "We have an existing web application deployed within Tomcat. Recently we upgraded Tomcat from 8.0.32 to 9.0.27. The application sets an Expires HTTP header ultimately via Response.setDateHeader. Initially the application correctly returns the Expires header in the GMT timezone but over time (since the last restart) these headers begin to be returned in CET timezone. Different nodes in the cluster will flip to CET at different times.\n\nWe can flip a node to CET by sending a request with a CET date in a header e.g.\n$ curl -H \"If-Modified-Since: Thu, 12 Mar 2020 14:40:22 CET\" --verbose localhost:18000/some/url/within/our/application -o /dev/null\n\nAfter investigation the issue appears to be with the new ConcurrentDateFormat class which uses a ConcurrentLinkedQueue to hold a reusable collection of SimpleDateFormats. The collection is shared between the format and parse methods. When parse is called with a date string containing a timezone that is *not* GMT (e.g. \"Thu, 12 Mar 2020 14:40:22 CET\") then the timezone within the SimpleDateFormat used is changed to the timezone in the string (e.g. CET). This SimpleDateFormat is then placed back in the queue where it will be used by calls to format which will then return date strings in the wrong timezone.",
    "comments": [
      "Added pull request https://github.com/apache/tomcat/pull/262 containing test and fix for this issue.",
      "Yet another wonderful feature of SimpleDateFormat. I had no idea that parsing a date string could poison the time zone of a SimpleDateFormat object.",
      "I thought it would be simpler to reset the timezone after parsing a date. Will change it if it's not a good idea. Thanks for the patch.\nThe fix will be in 10.0.0-M4, 9.0.34, 8.5.54 and 7.0.104."
    ],
    "creation_ts": "2020-03-13T11:55:44Z",
    "fixes": [
      64226
    ]
  },
  {
    "id": 65342,
    "summary": "IllegalArgumentException \"endpointClass cannot be null\" after upgrade to 9.0.46",
    "description": "On upgrade from 9.0.45 to 9.0.46, we see failures in WebSocket integration tests with the following stacktrace:\n\njava.lang.IllegalArgumentException: endpointClass cannot be null\n\tat javax.websocket.server.ServerEndpointConfig$Builder.<init>(ServerEndpointConfig.java:314)\n\tat javax.websocket.server.ServerEndpointConfig$Builder.create(ServerEndpointConfig.java:287)\n\tat org.apache.tomcat.websocket.WsSession.<clinit>(WsSession.java:77)\n\tat org.apache.tomcat.websocket.WsWebSocketContainer.connectToServerRecursive(WsWebSocketContainer.java:498)\n\tat org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:185)\n\tat org.springframework.web.reactive.socket.client.StandardWebSocketClient.lambda$executeInternal$0(StandardWebSocketClient.java:111)\n\nI'm hoping the stacktrace provides enough of a clue. It looks like on line 77 WsSession invokes ServerEndpointConfig.Builder#create with null values which is then rejected by the create method. If not, I'll try and extract an isolated sample.",
    "comments": [
      "Thanks, I can see what is going on.\n\nThe CDI integration needs to know if it can \"short-cut\" the Endpoint creation process and use the InstanceManager to create the Endpoint instance (which allows non-zero-arg constructors to be used) or whether the Endpoint instance needs to be created via the standard WebSocket mechanism and then passed to the InstanceManager.\n\nI used a hack to figure this out that depends on how Tomcat implemented the WebSocket API. It appears you are using a different API implementation that has stricter checking. I should be able to fix this in the next release. In the meantime, a workaround would be to use the WebSocket API JAR from Tomcat 9.",
      "FWIW the relevant dependencies are tomcat-websocket, tomcat-embed-core, tomcat-util, and javax.websocket:javax.websocket-api and it's the ServerEndpointConfig.Builder in javax.websocket:javax.websocket-api where the exception is raised.",
      "Fixed in:\n- 10.0.x for 10.0.7 onwards\n- 9.0.x for 9.0.47 onwards\n- 8.5.x for 8.5.67 onwards"
    ],
    "creation_ts": "2021-05-29T09:41:45Z",
    "fixes": [
      65342
    ]
  },
  {
    "id": 44620,
    "summary": "infinit loop in nio connector code",
    "description": "The code below has a chance to cause tomcat enter dead loop in class InternalNioOutputBuffer \n\n    private synchronized void addToBB(byte[] buf, int offset, int length) throws IOException {\n -->       while (socket.getBufHandler().getWriteBuffer().remaining() < length) {\n            flushBuffer();\n        }\n\nwhen the buffer size of socket is smaller than length. \nThe default size of socket comes from socket.appWriteBufSize, which is 8192; The value of length is limited by maxHttpHeaderSize, which is 9000. Well, the chance for dead loop exists and happened.\nIt can be avoid if we config the two value correctly in server.xml",
    "comments": [
      "We had a similar issue that was fixed by applying the following patch:\nhttp://svn.apache.org/viewvc?view=rev&revision=618420\n\nCan you try this patch ?",
      "I will put in a check, and throw an exception if the system is misconfigured to detect this issue.",
      "I also tested the trunk patch, and couldn't get it to work properly either.",
      "ignore previous comment, wrong bug :)",
      "Sorry for that I do not express it clearly(We made some mistake in it). Since our application will cause the following problem:\n\n2008-3-21 14:54:12 org.apache.catalina.connector.CoyoteAdapter service\n\u4e25\u91cd: An exception or error occurred in the container during the request processing\njava.lang.ArrayIndexOutOfBoundsException: 8192\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.write(InternalNioOutputBuffer.java:734)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.write(InternalNioOutputBuffer.java:641)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.sendHeader(InternalNioOutputBuffer.java:507)\n\tat org.apache.coyote.http11.Http11NioProcessor.prepareResponse(Http11NioProcessor.java:1707)\n\tat org.apache.coyote.http11.Http11NioProcessor.action(Http11NioProcessor.java:1023)\n\tat org.apache.coyote.Response.action(Response.java:183)\n\tat org.apache.coyote.Response.sendHeaders(Response.java:379)\n\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:305)\n\tat org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:273)\n\tat org.apache.catalina.connector.Response.finishResponse(Response.java:492)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:310)\n\tat org.apache.coyote.http11.Http11NioProcessor.process(Http11NioProcessor.java:879)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:719)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:2080)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)\n\tat java.lang.Thread.run(Thread.java:619)\n2008-3-21 14:54:12 org.apache.coyote.http11.Http11NioProcessor endRequest\n\u4e25\u91cd: Error finishing response\njava.lang.ArrayIndexOutOfBoundsException\n\tat java.lang.System.arraycopy(Native Method)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.write(InternalNioOutputBuffer.java:703)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.sendStatus(InternalNioOutputBuffer.java:460)\n\tat org.apache.coyote.http11.Http11NioProcessor.prepareResponse(Http11NioProcessor.java:1696)\n\tat org.apache.coyote.http11.Http11NioProcessor.action(Http11NioProcessor.java:1023)\n\tat org.apache.coyote.Response.action(Response.java:181)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.endRequest(InternalNioOutputBuffer.java:382)\n\tat org.apache.coyote.http11.Http11NioProcessor.endRequest(Http11NioProcessor.java:977)\n\tat org.apache.coyote.http11.Http11NioProcessor.process(Http11NioProcessor.java:913)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:719)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:2080)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)\n\tat java.lang.Thread.run(Thread.java:619)\nwe changed the server.xml and set maxHttpHeaderSize=\"1024\" , and which cause dead loop and cost 100%CPU.  the detailed stack trace is below(tomcat 6.0.16):\nDaemon Thread [catalina-exec-4] (Suspended)\t\n\tInternalNioOutputBuffer.flushBuffer() line: 768\t\n\tInternalNioOutputBuffer.addToBB(byte[], int, int) line: 616\t\n\tInternalNioOutputBuffer.commit() line: 608\t\n\tHttp11NioProcessor.action(ActionCode, Object) line: 1024\t\n\tResponse.action(ActionCode, Object) line: 183\t\n\tResponse.sendHeaders() line: 379\t\n\tOutputBuffer.doFlush(boolean) line: 305\t\n\tOutputBuffer.close() line: 273\t\n\tResponse.finishResponse() line: 492\t\n\tCoyoteAdapter.service(Request, Response) line: 310\t\n\tHttp11NioProcessor.process(NioChannel) line: 879\t\n\tHttp11NioProtocol$Http11ConnectionHandler.process(NioChannel) line: 719\t\n\tNioEndpoint$SocketProcessor.run() line: 2080\t\n\tThreadPoolExecutor$Worker.runTask(Runnable) line: 885\t\n\tThreadPoolExecutor$Worker.run() line: 907\t\n\tThread.run() line: 619\t\n\nAt  last we also increased the  socket.appWriteBufSize=\"10240\" and solved the problem.",
      "sorry for typed mistake:\n   we changed the server.xml and set maxHttpHeaderSize=\"1024\" , \nshould be \n   we changed the server.xml and set maxHttpHeaderSize=\"10240\" ,",
      "The patch referred to in comment #2 is insufficient to fix this issue. I have committed a fix to trunk and proposed it for 6.0.x.",
      "The fix for this will be in 6.0.17 onwards."
    ],
    "creation_ts": "2008-03-17T08:53:41Z",
    "fixes": [
      44620
    ]
  },
  {
    "id": 59261,
    "summary": "Request getAsyncContext should throw IllegalStateException if async is not started",
    "description": "If ServletRequest.getAsyncContext() IllegalStateException is invoked and has not been put into asynchronous mode an . From the javadoc [1]:\n\n> Throws: IllegalStateException - if this request has not been put into\n> asynchronous mode, i.e., if neither startAsync() nor \n> startAsync(ServletRequest,ServletResponse) has been called\n\nFor implementations of HttpServletRequestWrapper that override this method, the fact that result can be null can cause problems [2]. It appears there are parts of tomcat that check if getAsyncContext() is null rather than checking isAsycStarted(). For example, ApplicationDispatcher checks if getAsyncContext() is null.\n\n\n[1] http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getAsyncContext()\n[2] https://github.com/spring-cloud/spring-cloud-netflix/issues/868",
    "comments": [
      "I messed up the description some. Sorry about that. It should read:\n\nIf ServletRequest.getAsyncContext() is invoked and has not been put into asynchronous mode an IllegalStateException should be thrown.",
      "Maybe that is what the specification says, but using null in this situation is considerably better than using an ISE which should be reserved for some invalid/meaningless situations.\n\nBad design ! [being part of that EG, I include myself in that since I missed it then ...]",
      "Right now the spec is that getAsyncContext() should throw an ISE if isAsyncStarted returns false (which is not the same as asyncContext != null). This is an extremely risky change, some other places do check if asyncContext is null because it may have been there but is no longer started, so it cannot be swapped with isAsyncStarted.",
      "On the plus side, the async code is reasonably well covered by the unit tests.\n\nThe down side, as R\u00e9my points out is that we'll need to carefully review all the calls to getAsyncContext(). We may also need a getAsyncContextInternal() method (or something along those lines) so we can get the async context in those cases where we need it even if isAsyncStarted() is false.\n\nI guess working on this in 9.0.x, and ironing out the wrinkles before slowly back-porting is the way to go.",
      "Reading the Javadoc, the test is 'has one of the startAsync() methods been called' which is not quite the same as isAsyncStarted() == false. The spec document isn't much better. It uses the phrase 'has not been put in asynchronous mode'.\n\nThe key question is does the spec really mean '...has not been put in...' or was the intent to mean '...is not currently in...'. R\u00e9my, do you have any insight on this?",
      "isAsyncStarted is correct, and it's not the same as asyncContext != null, I checked GF before writing comment 3. However; Tomcat needs to know if a startAsync has been called earlier for its cleanup operations.\n\nI was also thinking about a getAsyncContextInternal method, but it needs to be accessed on the internal Request class, which is harder.",
      "isAsyncStarted() makes sense and if we code to that and it is later relaxed we won't need to change anything. I think I am most of the way to a working patch for this.\n\nWe also need to raise this with the Servlet EG for clarification.",
      "Fixed in trunk for 9.0.0.M5 and the unit tests still all pass.",
      "I've back-ported this to 8.5.x for 8.5.1 and 8.0.x for 8.0.34.\n\nI'll hold off on back-porting this to 7.0.x until after the 7.0.69 tag.",
      "Fix applied to 7.0.x for 7.0.70 onwards."
    ],
    "creation_ts": "2016-04-01T15:05:15Z",
    "fixes": [
      59261
    ]
  },
  {
    "id": 43944,
    "summary": "org.apache.el.lang.ELArithmetic.coerce throws MissingResourceException for key el.convert",
    "description": "The class org.apache.el.lang.ELArithmetic\nhas the following code snippet:\n\nthrow new IllegalArgumentException(MessageFactory.get(\"el.convert\", obj, \nobjType));\n\nBut the key \"el.convert\" doesn't exist in \"org.apache.el.Messages\". As a \nresult, I'm receiving the exception:\njava.util.MissingResourceException: Can't find resource for bundle \njava.util.PropertyResourceBundle, key el.convert\n\tat java.util.ResourceBundle.getObject(ResourceBundle.java:325)\n\tat java.util.ResourceBundle.getString(ResourceBundle.java:285)\n\tat org.apache.el.util.MessageFactory.getArray(MessageFactory.java:67)\n\tat org.apache.el.util.MessageFactory.get(MessageFactory.java:47)\n\tat org.apache.el.lang.ELArithmetic.coerce(ELArithmetic.java:367)\n\tat org.apache.el.lang.ELArithmetic.add(ELArithmetic.java:238)\n\tat org.apache.el.parser.AstPlus.getValue(AstPlus.java:24)\n\tat org.apache.el.ValueExpressionImpl.getValue\n(ValueExpressionImpl.java:186)",
    "comments": [
      "Created attachment 21176\nSample project to duplicate the defect\n\nTo duplicate the defect:\n1. Download jar files:\nhttp://repo1.maven.org/maven2/org/apache/tomcat/el-api/6.0.14/el-api-6.0.14.jar\nand\nhttp://repo1.maven.org/maven2/org/apache/tomcat/jasper-el/6.0.14/jasper-el-6.0.14.jar\n\n2. Open project in Eclipse, correct the references to el-api-6.0.14.jar and\njasper-el-6.0.14.jar by the new downloaded files\n3. Run the App class, the exception will be displayed",
      "Fixed in trunk. Proposed for 6.0.x",
      "This has been fixed in svn and will be included in 6.0.16 onwards."
    ],
    "creation_ts": "2007-11-22T19:23:45Z",
    "fixes": [
      43944
    ]
  },
  {
    "id": 55381,
    "summary": "Issue with the Non Blocking API & TestNonBlockingAPI test",
    "description": "Looking at the the NBReadServlet class included in TestNonBlockingAPI, the class appears to be directly calling the ReadListener.onDataAvailable() method.\n\n@WebServlet(asyncSupported = true)\npublic class NBReadServlet extends TesterServlet {\n   private static final long serialVersionUID = 1L;\n   public volatile TestReadListener listener;\n   @Override\n   protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n       // step 1 - start async\n       AsyncContext actx = req.startAsync();\n       actx.setTimeout(Long.MAX_VALUE);\n       actx.addListener(new AsyncListener() {\n           // removed for brevity \n       });\n       // step 2 - notify on read\n       ServletInputStream in = req.getInputStream();\n       listener = new TestReadListener(actx);\n       in.setReadListener(listener);\n\n       listener.onDataAvailable();\n   }\n}\n\nIn Section 3.7 of the spec it says...\n\n\"The onDataAvailable method is invoked on the ReadListener when data is available to read from the incoming request stream. The container will invoke the method the first time when data is available to read. The container will subsequently invoke the onDataAvailable method if and only if isReady method on ServletInputStream, described below, returns false.\"\n\n...which leads me to believe that the container should be calling onDataAvailable and not the servlet.\n\nIf the line \"listener.onDataAvailable()\" is removed from the test, then the test will hang and ReadListener.onDataAvailable() is never called.\n\n\nThe same is true with the NBWriteServlet in TestNonBlockingAPI and the WriteListener.onWritePossible() method.  The NBWriteServlet is calling this method directly, while the spec seems to indicate that it should be called by the container.\n\n\"void onWritePossible(). When a WriteListener is registered with the ServletOutputStream, this method will be invoked by the container the first time when it is possible to write data. The container will subsequently invoke the onWritePossible method if and only if isReady method on ServletOutputStream, described below, returns false.\"\n\nThanks",
    "comments": [
      "This has been fixed in trunk and will be included in 8.0.0-RC2 onwards."
    ],
    "creation_ts": "2013-08-07T19:17:49Z",
    "fixes": [
      55381
    ]
  },
  {
    "id": 41265,
    "summary": "JspServlet's checkInterval parameter cannot be set to 0 implicitly",
    "description": "conf\\web.xml's JspServlet init parameters include 'checkInterval', whose value\nis explained as follows:\n  If development is false and checkInterval is greater than zero, background\ncompilations are enabled.\n\nIf I add the following parameters one would think the background compilations\nwould be disabled (the value is not greater than zero).\n\n        <init-param>\n            <param-name>checkInterval</param-name>\n            <param-value>0</param-value>\n        </init-param>\n        <init-param>\n            <param-name>development</param-name>\n            <param-value>false</param-value>\n        </init-param>\n\nHowever, the value is changed to 300 and the following warning is outputted:\nDec 30, 2006 7:13:57 PM org.apache.jasper.EmbeddedServletOptions <init>\nWARNING: Warning: Invalid value for the initParam checkInterval. Will use the\ndefault value of \"300\" seconds\n\nAccording to the comment in web.xml \"0\" was a valid value. Either the comment or\nthe validity check is wrong. Or my understanding of them.",
    "comments": [
      "This is fixed in svn and will be in 5.5.21 onwards. I removed the code that\nreset the value to 300 if specified as zero."
    ],
    "creation_ts": "2006-12-30T02:34:23Z",
    "fixes": [
      41265
    ]
  },
  {
    "id": 31804,
    "summary": "setParent() is not called on nested tags in a tag file (.tagx)",
    "description": "Hi, everybody.\n\nSuppose I have a tag file (.tagx to be precise). I have some custom tags of mine \nincluded in that tag file. If I override setParent() in such a custom tag, then \nI see, that it's invoked with \"null\" parameter. Custom tag is a \"Classic\" tag \n(extends TagSupport).\n\nSimplified example: This tag file is called \"submit.tagx\"\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jsp:root xmlns:jsp=\"http://java.sun.com/JSP/Page\" xmlns:custom=\"http://my.com/\ntags-html\" version=\"2.0\" >\n\n    <jsp:directive.tag body-content=\"empty\"/>\n    <jsp:directive.attribute name=\"action\" required=\"true\" rtexprvalue=\"true\"/>\n    <jsp:directive.attribute name=\"label\" required=\"true\" rtexprvalue=\"true\"/>\n\n    <custom:submit action=\"${action}\" label=\"${label}\" name=\"submitButton\" />\n\n</jsp:root>\n\nIn debug output from setParent(Tag) of custom:submit I see, that it's called \nwith \"null\" value.\n\nIf, instead of custom:submit, I put there another custom tag, which follows \nSimpleTagSupport model, then setParent(JspTag) is not called at all!!!\n\nI would expect a reference to something, representing translated class of Tag \nFile (submit.tagx) is passed.\n\nAs the result, tag nesting tree is broken. \n\nI need to access Struts html:form tag, which is the embracing tag from my inner \n<custom:submit> tag to obtain form name, but this is not possible.\n\n<nested:form action=\"/Action\">\n   <ctrl:submit action=\"save\" label=\"Save\"/>\n</nested:form>\n\n(where ctrl:submit is submit.tagx)",
    "comments": [
      "I may misunderstand your problem entirely, but I believe the behaviour you are\nseeing is expected. \n\nAccording to javax.servlet.jsp.tagext.Tag.setParent() javadocs:\n\n     * Set the parent (closest enclosing tag handler) of this tag handler.\n     * Invoked by the JSP page implementation object prior to doStartTag().\n     *\n     * @param t The parent tag, or null.\n\nSince <custom:submit> is not nested inside any custom tag invocation in your\n.tagx snippet, NULL is passed to your tag handler's setParent().\n\nLikewise, javax.servlet.jsp.tagext.SimpleTag.setParent() has this:\n\n     * Sets the parent of this tag, for collaboration purposes.\n     * <p>\n     * The container invokes this method only if this tag invocation is \n     * nested within another tag invocation.\n     *\n     * @param parent the tag that encloses this tag\n\nSince your SimpleTag isn't nested, the container does not call its setParent()\nmethod at all.\n\n> I would expect a reference to something, representing translated class of Tag \n> File (submit.tagx) is passed.\n\nYour expectation is wrong. You should expect setParent() to be called on your\ntag handler, and a non-null argument passed to it, only if your custom tag is\nnested inside another custom tag.",
      "> Your expectation is wrong. You should expect setParent() to be called on your\n> tag handler, and a non-null argument passed to it, only if your custom tag is\n> nested inside another custom tag.\n\nShouldn't we expect setParent() to be called on <custom:submit> tag handler with\nthis.getParent() of .tagx file handler? I mean if our .tagx snippet in its term\nwill ever be nested inside another custom tag at some other place, then\nsetParent() will be called with this.getParent(), which was set to point to real\nparent tag handler in that case.",
      "> Your expectation is wrong. You should expect setParent() to be called on your\n> tag handler, and a non-null argument passed to it, only if your custom tag is\n> nested inside another custom tag.\n\nShouldn't we expect setParent() to be called on <custom:submit> tag handler with\nthis.getParent() of .tagx file handler? I mean if our .tagx snippet in its term\nwill ever be nested inside another custom tag at some other place, then\nsetParent() will be called with this.getParent(), which was set to point to real\nparent tag handler in that case.\n\nFor example I have batch.tag file with the number of <sql:update> tags. Now I\nwant that those statements would run in the context of <sql:transaction>. If I\nsimply put \n\n<sql:transaction>\n  <my:batch />\n</sql:transaction>\n\nthen <sql:update> statements won't be connected with the tag invocation tree\nthat includes <sql:transaction>.\n\nI do not see any particular reason why enclosed <sql:update> invocations should\nbe isolated from their enclosing enviromnent...",
      "http://issues.apache.org/bugzilla/show_bug.cgi?id=31804\n \nCould someone please advise me on whether this Bug is fixed?\nBugzilla shows this bug to be filed under Tomcat 4.0 I am using Tomcat 5.0.28 \nand am having problems when using the jsp:param tag. I get tons of deprecation \nerrors.\n \nMy IDE is jbuilder 2005 and am using :\njava version \"1.4.2_05\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_05-b04) Java \nHotSpot(TM) Client VM (build 1.4.2_05-b04, mixed mode)\n\n \nany tips on whether this bugID is fixed for Tomcat 5.0.28 (or how could it be \nfixed OR a workaround ) would be greatly appreciated.",
      "Rohan, I would guess this \"bug\" is not fixed, assuming it's a bug at all.  We're\nnormally pretty good about closing bugzilla item as resolved/fixed once we\ncommit the fix to CVS.",
      "The only case where setParent() will be invoked in when its tag is nested in\nanother tag, such as\n\n<nested:form action=\"/Action\">\n   <ctrl:submit action=\"save\" label=\"Save\"/>\n</nested:form>\n\nIn this case, setParent() will be invoked for <ctrl:sumit> but not\n<nested:form>.  This can be easily verified by examining the generated java\nfiles, as I have done for 5.x.  It doen't matter if <ctrl:submit> is a tag file\nor not.",
      "This isn't working correctly.  However I think the examples given so far have been incomplete.  I will try \nto give a full example.\n\nLets suppose we have two traditional custom tags, for this example I'm going to use the Spring 2.0 \nform tag libraries as they are the ones that led me here.\n\nThe first tag is form:form tag, which sets up context to be accessed by nested tags via the setParent \nmechanism.\n\nThe second tag is form:label tag, which makes use of the context created by the form:form tag and only \nfunctions properly when nested within a form:form tag.\n\nSo we might have an example jsp as follows.\n\n<form:form> \n  <form:label>hello</form:label>\n</form:form>\n\nthe generated java file for this jsp would invoke setParent(null) on the form:form tag and would invoke \nsetParent([reference to the form tag]) on the label tag.  This would be correct.\n\nNow let us assume that we create a tag file which makes use of the form:label tag because we tired of \ntyping \"Hello\" everywhere.\n\nOur tag file might look like this.\n\n<form:label>Hello</form:label>\n\nand our revised jsp page would look like this.\n\n<form:form>\n  <mycustumtag/>\n</form:form>\n\nIn this case the form:form tag would again get a setParent invoked with null, (still correct) and \nmycustomtag would get it's setParent invoked with the reference to the form:form tag, (also still \ncorrect), but the form:label tag inside of mycustomtag would get it's setParent method invoked with \n\"null\".  This is \"Not Correct\".  The label tag is nested inside of an outer tag and should have it's \nsetParent method invoked with the reference to that outer tag.\n\nHere is the logic I would propose for this section of code.\n\nif (myParent == null) {\n  // set parent of any top level tags used in tag file to null\n} else {\n  // set parent of any top level tags used in tag file to \"this\"\n}",
      "I have read through section JSP.8 and whilst I can't see anything that\nexplicitly refers to this case:\n- tag files are simple tags so should behave in the same way\n- tag files currently have their own parent set correctly\n- tag files can contain other tags\n- not setting the tag file as the parent of tags within the tag file breaks\nthings like the Spring form tags\n\nTherefore I have committed a patch that fixes this bug. The fix will be in\n5.5.20 onwards."
    ],
    "creation_ts": "2004-10-20T16:26:40Z",
    "fixes": [
      31804
    ]
  },
  {
    "id": 48668,
    "summary": "Template text that looks like a deferred expression can be mishandled even if EL is ignored",
    "description": "In some cases text that happens to look similar to a deferred expression (#{..}) can get mangled even if the EL is not active. This appears to only happen if the text in question immediately proceeds a custom tag (either a full blown custom tag or a simple .tag file tag). The initial # and { characters get removed.\n\nThis happens in Tomcat v6.0.24 but did not happen in v6.0.20 so appears to be unintentional.\n\nWe have been upgrading legacy sites to Tomcat v6 and have hit this problem.\n\nThis problem can be recreated in a bog standard install of Tomcat v6.0.24. Create a simple .tag file that does nothing more than say 'hello'. Place a reference to this tag into a JSP with the offending text immediately after it. \n\nA test JSP that looks something like (note that EL is being ignored)...\n\n<%@ page isELIgnored=\"true\" %>\n<%@ taglib tagdir=\"/WEB-INF/tags/custom\" prefix=\"custom\" %>\n<html>\n<title>Test</title>\n</head>\n<body>\n  <custom:example />#{foo.bar}\n</body>\n</html>\n\nWhere the custom example tag (/WEB-INF/tags/custom/example.tag) looks like this...\n\nHello\n\nRather than the page returning the following...\n\n<html>\n<title>Test</title>\n</head>\n<body>\n  Hello#{foo.bar}\n</body>\n</html>\n\nIt will return...\n\n<html>\n<title>Test</title>\n</head>\n<body>\n  Hellofoo.bar}\n</body>\n</html>\n\nNotice the missing # and { from the text.\n\nI don't believe the platform Tomcat is running on matters. Have seen this behaviour on both Mac OS X and Linux.",
    "comments": [
      "Thanks for the report. This has been fixed in trunk and proposed for 6.0.x",
      "This has been fixed in 6.0.x and will be included in 6.0.25 onwards.",
      "Reopening.\n\nAdditional tests added in r919847.\nSome of them are failing.\n\nThis issue is also reproducible in the current 5.5 using /test/webapp/bug48668a.jsp from trunk. (bug48668b.jsp is not applicable to 5.5)",
      "Additional fixes have been applied to trunk and 6.0.x and will be included in 6.0.26 onwards."
    ],
    "creation_ts": "2010-02-03T09:22:59Z",
    "fixes": [
      48668
    ]
  },
  {
    "id": 69635,
    "summary": "JSP fails to import nested enum or class",
    "description": "This should work:\n\n\n<code>\npackage business.domain;\n\npublic class Category {\n  public enum Type { HIGH, MEDIUM, LOW }\n\n  // Workaround\n  public static Type[] getTypeValues() {\n    return Type.values();\n  }\n}\n</code>\n\nIn the JSP:\n\n\n*Attempt 1: Import the class access enum through class (statically).*\n<code>\n<%@page import=\"business.domain.Category\" %>\n\n<%-- This fails: Error: No public static field named [Type] was found on exported class [business.domain.Category]\nCategory types: ${Category.Type.values()}<br>--%>\n\n<%-- Workaround: Static method on Category --%>\nCategory types: ${Category.getTypeValues()}\n</code>\n\n\n*Attempt 2: Import enum Type directly.*\n<code>\n<%@page import=\"business.domain.Category.Type\" %>\n<%-- Type is null; no output shown --%>\nCategory types: ${Type.values()}\n</code>\n\n\n*Attempt 3: Import enum Type using nested class name like Class$NestedClass.*\n<code>\n<%@page import=\"business.domain.Category$Type\" %>\n<%-- Unable to compile class for JSP: An error occurred at line: .. import business.domain.Category$Type cannot be resolved Stacktrace:... --%>\n</code>",
    "comments": [
      "You are mixing up JSP imports and EL imports. The rules for imports in EL are stricter than those for JSPs.\n\nAttempt 1 will work if you use <%= Outer.Inner.values() %> in the JSP. It won't work, and isn't expected to work in EL.\n\nAttempt 2 currently fails because of what looks like a bug in the EL import handling. There needs to be a conversion from canonical name to type name.\n\nAttempt 3 won't work because JSP imports require canonical names.\n\nI want to look at the EL spec to see if if specifies a format for importing classes by name.",
      "It doesn't. I've opened an issue to be explicit that canonical names must be used when specifying imports for inner classes.\n\nhttps://github.com/jakartaee/expression-language/issues/313",
      "Fixed in:\n- 11.0.x for 11.0.7 onwards\n- 10.1.x for 10.1.41 onwards\n-  9.0.x for  9.0.105 onwards",
      "Amazing -- thank you so much, Mark!"
    ],
    "creation_ts": "2025-03-28T15:11:11Z",
    "fixes": [
      69635
    ]
  },
  {
    "id": 65736,
    "summary": "Improve org.apache.naming.factory.BeanFactory to mitigate JNDI injection",
    "description": "I can reproduce that vulnerability which leverage \"org.apache.naming.factory.BeanFactory\" and \"javax.el.ELProcessor\" described in https://www.veracode.com/blog/research/exploiting-jndi-injections-java\nIt would be great if tomcat can do something to mitigate it.",
    "comments": [
      "Can we drop \"forceString\" supports?\n\nhttps://github.com/apache/tomcat/blob/f5a732e74e2a36442b2bf562c665917c4bb1167a/java/org/apache/naming/factory/BeanFactory.java#L150",
      "To be crystal clear:\n\nThere is no Apache Tomcat vulnerability here.\n\nTo quote from the linked article:\n<quote>\nThe actual problem here is not within the JDK or Apache Tomcat library, but rather in custom applications that pass user-controllable data to the \"InitialContext.lookup()\" function, as it still represents a security risk even in fully patched JDK installations.\n</quote>\n\nMoving this to an enhancement request.\n\nIt is highly unlikely Tomcat will remove/disable existing functionality.\n\nSuggestions for mitigation / hardening that can improve security without impacting legitimate uses will be welcomed.",
      "Honestly, any \"feature\" that significantly reduces security should be difficult to enable. My initial reaction after reading that piece was \"why is forceString enabled by default?\"\n\nI don't know the history of that feature, so I'm not sure how popular it is or what the use-cases are. My guess is that, mostly, there are simple uses of JNDI in Tomcat. For more \"exotic\" use-cases, it shouldn't be too much trouble for an admin to enable this feature explicitly.\n\nIt's also not clear to me how much *more* secure things are /without/ \"forceString\" available. JNDI lookups are, by definition, fairly sensitive things: if you allow users to control the lookups, they can kind of ... well, look-up ANYTHING.",
      "The feature was added by Rainer in Jan 2015. The idea of the bean factory is to avoid having to use custom object factories (personally: I think using custom object factories is usually better), and this forceString increased flexibility further. Normally, once you get to the point where you can configure the JNDI environment of Tomcat, you can also configure everything else, so limiting forceString shouldn't add any extra safety.",
      "I agree that \"forceString\" should be disabled by default and removed in future version, It will increase safety, \"you can configure the JNDI environment of Tomcat\" is more harder since it need another gadget, let's remove \"org.apache.naming.factory.BeanFactory\" from existing gadgets.",
      "The history of forceString (thanks Remy) can be seen in the log message of svn r1655312 or github d1cf73ab16da6fccde3c323e16b582be8d579008. I paste it here. I am totally open to drop it, if it now turns out to pose security risks.\n\n Enhance our naming BeanFactory.\n\nIf a bean property exists which the Introspector\npresents us with a type that we don't have a\nstring conversion for, but the bean actually\nhas a method to set the property from a string,\nallow to provide this information to the\nBeanFactory.\n\nNew attribute \"forceString\" taking a comma separated\nlist of items as values. Each item is either a bean\nproperty name (e.g. \"foo\") meaning that there is a\nsetter function \"setFoo(String)\" for that property.\nOr the item is of the form \"foo=method\" meaning that\nproperty \"foo\" can be set by calling \"method(String)\".\n\nThis should make writing a custom bean factory\nobsolete in quite a few cases.\n\nConcrete use case was tibco TibjmsConnectionFactory\nwhich has an attribute SSLIdentity detected by\nIntrospector as byte[] but which can be set by\nsetSSLIdentity(String). Existing BeanFactory throws\nNamingException.\n\nRegards,\nRainer",
      "Looking at this in a bit more detail I have a couple of observations/questions:\n\n1. Has anyone got a suggestion to make enabling forceString support configurable that doesn't involve a system property?\n\n2. Is removing this feature entirely in 10.1.x reasonable?\n\n3. Why doesn't Introspector find the \"setSSLIdentity(String)\" method. It looks like it should. Is improving the method matching in Introspector an approach that could work long term?\n\nThe answer to the first part of 3 may need some research. That is on my TODO list but I'm unlikely to get to it before January.",
      "(In reply to Mark Thomas from comment #7)\n> Looking at this in a bit more detail I have a couple of\n> observations/questions:\n> \n> 1. Has anyone got a suggestion to make enabling forceString support\n> configurable that doesn't involve a system property?\n\nNope.\n\n> 2. Is removing this feature entirely in 10.1.x reasonable?\n\nI think it's fine. Overall JNDI should use real object factories.\n\n> 3. Why doesn't Introspector find the \"setSSLIdentity(String)\" method. It\n> looks like it should. Is improving the method matching in Introspector an\n> approach that could work long term?\n\nNo idea. But the BeanFactory doesn't use our IntrospectionUtils, as you just said, and we're totally used to its very user friendly behavior.\n\n> The answer to the first part of 3 may need some research. That is on my TODO\n> list but I'm unlikely to get to it before January.",
      "(In reply to Mark Thomas from comment #7)\n> 1. Has anyone got a suggestion to make enabling forceString support\n> configurable that doesn't involve a system property?\n\nJNDI environment variable? (lol just kidding). I think this is either a system property (preferable to me, even though system properties kinda suck) or an otherwise unnecessary global Listener.\n\n> 2. Is removing this feature entirely in 10.1.x reasonable?\n\n+1 to reasoning provided by remm and rjung (via email)",
      "(In reply to Remy Maucherat from comment #8)\n\n> No idea. But the BeanFactory doesn't use our IntrospectionUtils, as you just\n> said, and we're totally used to its very user friendly behavior.\n\nDoh! Of course. As a Bean factory it is following the Bean spec.\n\nI think we might be able to do something along the lines of if the setter method doesn't use String and we can't coerce it, is there a method identical to the setter part from it uses String? If so, use that. Is that worth implementing?",
      "I've implemented this alternative approach for 10.1.x. It isn't as generic as forceString but it is sufficient to meet the original requirement.\n\nTwo questions:\n1. Should we back-port this? If so, how far?\n\n2. Do we want to expand conversion so if the setter is for Type T that we can't convert and T has a constructor T(String) we use that constructor to create an instance of T and then pass that to the setter?",
      "> 1. Should we back-port this? If so, how far?\nYes, back to 8.x.\n\n> 2. Do we want to expand conversion so if the setter is for Type T that we can't convert and T has a constructor T(String) we use that constructor to create an instance of T and then pass that to the setter?\nI think we should keep it as simple as possible, BeanFactory is not widely used AFAIK.",
      "Fixed in:\n- 10.1.x for 10.1.0-M14 onwards\n- 10.0.x for 10.0.21 onwards\n- 9.0.x for 9.0.63 onwards\n- 8.5.x for 8.5.79 onwards"
    ],
    "creation_ts": "2021-12-10T08:32:52Z",
    "fixes": [
      65736
    ]
  },
  {
    "id": 65384,
    "summary": "org.apache.coyote.http2.TestFlowControl test depends on user's language",
    "description": "Running the unit tests for Tomcat 9.0.48, the following test fails:\n\nTestsuite: org.apache.coyote.http2.TestFlowControl\nTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1,589 sec\n[...]\n------------- ---------------- ---------------\n\nTestcase: testNotFound[0] took 1,399 sec\n\tFAILED\nexpected:<...[content-language]-[[en]]\n3-Header-[content-...> but was:<...[content-language]-[[ru]]\n3-Header-[content-...>\njunit.framework.AssertionFailedError: expected:<...[content-language]-[[en]]\n3-Header-[content-...> but was:<...[content-language]-[[ru]]\n3-Header-[content-...>\n\tat org.apache.coyote.http2.TestFlowControl.testNotFound(TestFlowControl.java:97)\n\n\nApparently it expects content-language to be English, but for some reason it differs.",
    "comments": [
      "$god help us if we run it in Turkish locale[1]. :)\n\n[1] https://mattryall.net/blog/the-infamous-turkish-locale-bug",
      "Fixed in:\n- 10.1.x for 10.1.0-M2 onwards\n- 10.0.x for 10.0.8 onwards\n- 9.0.x for 9.0.49 onwards\n- 8.5.x for 8.5.69 onwards"
    ],
    "creation_ts": "2021-06-16T15:36:45Z",
    "fixes": [
      65384
    ]
  },
  {
    "id": 55735,
    "summary": "Additional quote entity in html element attribute evaluated in tagx if attribute contains EL expression",
    "description": "Well, after fix for Bug 55198, if a tag file contains\n<a href=\"#\" onclick=\"window.alert(&quot;${text}&quot;)\">foobar</a>\nIt can now be correctly rendered as (if text='foobar')\n<a href=\"#\" onclick=\"window.alert(&quot;foobar&quot;)\">foobar</a>\n\nBut, It is rendered completely wrongly as ***** IF text='&amp;foobar' *****\n<a href=\"#\" onclick=\"window.alert(&quot;&amp;amp;foobar&quot;)\">foobar</a>\n\nThe EL expression ${text} should be rendered without any escape, but now it is\nescaped just as other literal part in the attribute.\n\nGenerally, a tagx file's compiler must not make any assumption that it's output is a well-formed XML or not, it should just keep the literal atrribute or text as is, and output any EL expression directly. It's the tagx file's author's reponsibility to determine whether a text variable should be escaped, e.g.:\n<a href=\"#\" onclick=\"window.alert(&quot;${fn:escape(text)}&quot;)\">foobar</a>\n\nSuppose we have:\nrequest.setAttribute(\"text\", \"2 &gt; 1\");\nAnd in a tagx file:\n<div title=\"&quot;${text}&quot;\">&quot;${text}&quot;</div>\n\nThe correct output could be:\n<div title=\"&quot;2 &gt; 1&quot;\">&quot;2 &gt; 1&quot;</div>\n\nBut neither\n<div title=\"&quot;2 &amp;gt; 1&quot;\">&quot;2 &gt; 1&quot;</div>\n\nnor\n<div title=\"\"2 > 1\"\">&quot;2 &gt; 1&quot;</div>",
    "comments": [
      "Um... it seems JSP spec doesn't clarify the behavior at all...\n\nBut XSLT does. If we \"borrow\" rules from XSLT, then some correct examples could be (text=\"2 &gt; 1\"):\n\ntagx/jspx:  <div title=\"&quot;${text}&quot;\">ABCD</div>\noutput:     <div title=\"&quot;2 &amp;gt; 1&quot;\">ABCD</div>\n\ntagx/jspx:  <div>&quot;<c:out value=\"&amp;nbsp;${text}&quot;\" escapeXml=\"false\"></div>\noutput:     <div>&quot;&nbsp;2 &gt; 1\"</div>\n\nBut XSLT doesn't allow expressions in template text, thus, what can be the correct result generated by the following example?\n\ntagx/jspx:  <div>&quot;${text}&quot;</div>\n\nShould it be\noutput:     <div>&quot;2 &amp;gt; 1&quot;</div>\nor\noutput:     <div>\"2 &gt; 1\"</div>\nor\noutput:     <div>&quot;2 &gt; 1&quot;</div>\nor\noutput:     <div>\"2 &amp;gt; 1\"</div>\n\n????????",
      "Conclusion:\n\n1. If you use jspx or tagx, then never use any EL expressions within attribute values, and always use JSTL <out> tag to output expression values within template content -- unless you know the expression value must not contain any\nXML reserved characters;\n\n2. Do not use jspx or tagx at all, use jsp and tag files instead -- whose behaviors are relatively determined.",
      "Thanks for the report. This was a regression in the fix for bug55198.\n\nThis has been fixed in trunk for 8.0.0-RC6 onwards.\n\nThis has been fixed in 7.0.x for 7.0.48 onwards.",
      "I've updated the back-port proposal for 55198 to include the fix for this regression so there is no need to keep this bug open."
    ],
    "creation_ts": "2013-11-02T06:14:56Z",
    "fixes": [
      55735
    ]
  },
  {
    "id": 48967,
    "summary": "Externalize Strings \"catalina.base\" and \"catalina.home\"",
    "description": "Created attachment 25169\nPatch externalizing strings\n\nStrings \"catalina.base\" and \"catalina.home\" are present multiple times in the code base. Most of them should be replaced by a reference to a constant.",
    "comments": [
      "Possible patch available for review under\n\nhttp://people.apache.org/~rjung/patches/trunk-catalina_home_base.patch",
      "Thanks for the patch.\n\nApplied to TC 7 in r991959 and r991965.\n\nI won't propose for backport to TC 6."
    ],
    "creation_ts": "2010-03-23T14:19:02Z",
    "fixes": [
      48967
    ]
  },
  {
    "id": 44428,
    "summary": "FunctionMapperImpl.Function throws a NPE in certain circumstances",
    "description": "In FunctionMapperImpl.Function it is possible for writeExternal to fail if the\nclass has just been de-serialised and is then serialised again.\n\nIf you look at writeExternal:\n\n   public void writeExternal(ObjectOutput out) throws IOException {\n      out.writeUTF((this.prefix != null) ? this.prefix : \"\");\n      out.writeUTF(this.localName);\n      out.writeUTF(this.m.getDeclaringClass().getName());\n      out.writeUTF(this.m.getName());\n      out.writeObject(ReflectionUtil.toTypeNameArray(\n         this.m.getParameterTypes()));\n   }\n\nyou can see that it externalises the function to be invoked by using the\nreference to the Method itself.\n\nIf you look at readExternal however:\n\n   public void readExternal(ObjectInput in) throws IOException,\n         ClassNotFoundException {\n            \n      this.prefix = in.readUTF();\n      if (\"\".equals(this.prefix)) this.prefix = null;\n      this.localName = in.readUTF();\n      this.owner = in.readUTF();\n      this.name = in.readUTF();\n      this.types = (String[]) in.readObject();\n   }\n\nYou can see that it doesn't restore the Method after deserialisation. The method\nis restored if it is accessed, however if it's not and then serialisation is\nperformed writeExternal will throw a NPE (as m is still null).\n\nThe fix is to either get the method to be reconstructed as soon as\ndeserialisation completes - or perhaps to be a bit more efficient, in\nwriteExternal change it such that if m is null it externalises using the\ncomponents of the method:\n\n   public void writeExternal(ObjectOutput out) throws IOException {\n      out.writeUTF((this.prefix != null) ? this.prefix : \"\");\n      out.writeUTF(this.localName);\n      if (m == null) {\n         out.writeUTF(this.owner);\n         out.writeUTF(this.name);\n         out.writeObject(this.types);\n      } else if (this.m != null) {\n         out.writeUTF(this.m.getDeclaringClass().getName());\n         out.writeUTF(this.m.getName());\n         out.writeObject(ReflectionUtil.toTypeNameArray(\n            this.m.getParameterTypes()));\n      }\n   }",
    "comments": [
      "Fixed in trunk with a different patch. I went with simple that didn't duplicate code. I have proposed the patch for 6.0.x.",
      "This bug has been fixed in svn and will be in 6.0.17 onwards."
    ],
    "creation_ts": "2008-02-15T02:36:16Z",
    "fixes": [
      44428
    ]
  },
  {
    "id": 44041,
    "summary": "WebappClassLoader duplicate class definition under high Load if hasExternalRepositories is true",
    "description": "I am using Tomcat Sysdeo Plugin combined with their DevLoader.\nThis class extends Tomcat WebappClassLoader to add external repositories through:\nWebappClassLoader#addRepository\n\nUnder high load this exception occurs if a Servlet or JSP calls:\n\t\t\tClass clazz =\nThread.currentThread().getContextClassLoader().loadClass(\"<Class Name>\");\n\n\njava.lang.LinkageError: duplicate class definition:\ncom/ubikingenierie/bug/ClassLoadedDynamically\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat\norg.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:890)\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1329)\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1208)\n\tat com.ubikingenierie.servlet.BasicServlet.service(BasicServlet.java:27)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:269)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)\n\tat\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n\tat\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:544)\n\tat\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:151)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:874)\n\tat\norg.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665)\n\tat\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)\n\tat\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81)\n\tat\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689)\n\tat java.lang.Thread.run(Thread.java:595)\n\n\nPhilippe.\nhttp://www.ubik-ingenierie.com",
    "comments": [
      "Created attachment 21244\nSample Project that contains the Servlet and a Test case\n\nThis project uses Tomcat Sysdeo DevLoader.\nTO use it, import the project DependentProject (next attachment) in Eclipse.\nTO use it, import the project BugTomcat5 in Eclipse.\nDefine classpath variable LIBRARIES that points to a folder containing:\n-commons-codec-1.3.jar\n-commons-httpclient-3.1.jar\n-commons-logging-1.0.4.jar\n-junit-3.8.jar\n-junitperf-1.8.jar\n-log4j-1.2.15.jar\nReference the config\\server-j2ee14.xml as Tomcat config file\nStart tomcat\nRun com.ubikingenierie.client.MultiThreadedTestClientSuite",
      "Created attachment 21245\nThe dependent project that will be added by DevLoader as an externalrepository\n\nSee previous patch.\nYou just have to import in in the same Eclipse workspace as a project called\nDependentProject",
      "Created attachment 21246\nTomcat Sysdeo DevLoader Last version\n\nYou can get this from:\nhttp://www.eclipsetotale.com/tomcatPlugin.html",
      "I just forgot one thing:\nYou have to unpack DevLoader.zip in TOMCAT5_HOME/server/classes to make the\nDevLoader available to Tomcat.\nSee:\nhttp://www.eclipsetotale.com/tomcatPlugin.html\nAnd inside plugin see DevLoader.zip",
      "Their is a solution, add synchronized to loadClass(String name, boolean resolve)\nline 1238, but it is maybe an important contention point for you:\npublic synchronized Class loadClass(String name, boolean resolve)\n\nAlthough note that java.lang.ClassLoader has a synchronized method:\n    protected synchronized Class<?> loadClass(String name, boolean resolve)\n\nPhilippe.",
      "Thanks for the test case. I was able to reproduce this. A sync is required to\nfix it but a much smaller one than proposed.\n\nI have fixed trunk and proposed the fix for backport to 6.0.x and 5.5.x",
      "Fixed in 5.5.x and will be included in 5.5.26 onwards.\nFixed in 6.0.x and will be included in 6.0.16 onwards.",
      "Are you sure it is OK to synchronize around the call to URLClassLoader.findClass?\n\nIf you have a page with 2 frames, each loading a JSP at the same time:\n\nThread T1 tries to load my.class.Foo\nThread T2 tries to load my.class.Foo\n\nT1 calls WebappClassLoader.loadClass\nT2 calls WebappClassLoader.loadClass\n\nWebappClassLoader determines it has not loaded the class for both threads (since there is no synchronization at this point).\n\nBoth T1 and T2 get to the synchronized block in findClass.\nThey get synchronized, but doing the wrong thing, and a LinkageError gets thrown.\n\nDon't you think that WebappClassLoader.loadClass(String, boolean) ought to be synchronized just like it is in java.lang.ClassLoader?\n\nI am actually running into this problem with Tomcat 5.5.27 (on a 4 core machine):\n\nCaused by: java.lang.LinkageError: loader (instance of  org/apache/catalina/loader/WebappClassLoader): attempted  duplicate class definition for name: \"org/apache/struts/taglib/tiles/PutTag\"\n    at java.lang.ClassLoader.defineClass1(Native Method)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:621)\n    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n    at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n    at java.net.URLClassLoader.access$000(URLClassLoader.java:56)\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n    at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:904)\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1353)\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1232)\n    at org.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:125)\n    at org.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:63)\n    at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320) \n.... etc ....",
      "(In reply to comment #8)\n\nHi,\n\nWe also experienced this issue while using the Sysdeo plugin with DevLoader. It was resolved (for us) by synchronizing WebappClassLoader.loadClass.\n\nCheers.\n\n> Are you sure it is OK to synchronize around the call to\n> URLClassLoader.findClass?\n> \n> If you have a page with 2 frames, each loading a JSP at the same time:\n> \n> Thread T1 tries to load my.class.Foo\n> Thread T2 tries to load my.class.Foo\n> \n> T1 calls WebappClassLoader.loadClass\n> T2 calls WebappClassLoader.loadClass\n> \n> WebappClassLoader determines it has not loaded the class for both threads\n> (since there is no synchronization at this point).\n> \n> Both T1 and T2 get to the synchronized block in findClass.\n> They get synchronized, but doing the wrong thing, and a LinkageError gets\n> thrown.\n> \n> Don't you think that WebappClassLoader.loadClass(String, boolean) ought to be\n> synchronized just like it is in java.lang.ClassLoader?\n> \n> I am actually running into this problem with Tomcat 5.5.27 (on a 4 core\n> machine):\n> \n> Caused by: java.lang.LinkageError: loader (instance of \n> org/apache/catalina/loader/WebappClassLoader): attempted  duplicate class\n> definition for name: \"org/apache/struts/taglib/tiles/PutTag\"\n>     at java.lang.ClassLoader.defineClass1(Native Method)\n>     at java.lang.ClassLoader.defineClass(ClassLoader.java:621)\n>     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n>     at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n>     at java.net.URLClassLoader.access$000(URLClassLoader.java:56)\n>     at java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n>     at java.security.AccessController.doPrivileged(Native Method)\n>     at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n>     at\n> org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:904)\n>     at\n> org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1353)\n>     at\n> org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1232)\n>     at org.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:125)\n>     at org.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:63)\n>     at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320) \n> .... etc ....",
      "Just to add to that, we are using Tomcat 6.0.18, with Sysdeo 3.2.1. I realise there it may be a little heavy-handed synchronizing the whole method, but since this is only a patch intended for use in dev I don't see it as too much of an issue.\n\nCheers.",
      "Point taken re syncs and WebappClassLoader.loadClass(String, boolean)\nI have proposed a patch for 6.0.x and 5.5.x that adds that sync.",
      "This has been fixed in 6.0.x (with a slightly different patch) and will be included in 6.0.21 onwards.",
      "Further testing has identified issues under some circumstances. The final solution is being worked on for 7.0.x and when that is finalised it will be back-ported to 6.0.x and 5.5.x",
      "Updated patch that uses synchronized(this) applied to 7.0.x and proposed for 5.5.x and 6.0.x",
      "The issue was fixed in 5.5.x in r935947 and will be in 5.5.30 onwards.\n\nThe patch for 6.0.x mentioned in Comment 13 is tracked as bug 48903. As of now, it has been proposed for 6.0.x, but has not been applied yet.",
      "Moving to 6 since this is fixed in 5.",
      "Fixed in TC 6 by r941868. Will be part of 6.0.27."
    ],
    "creation_ts": "2007-12-07T13:55:58Z",
    "fixes": [
      44041
    ]
  },
  {
    "id": 51687,
    "summary": "Improve JreMemoryLeakPreventionListener against leak caused by sun.java2d.Disposer",
    "description": "The sun.java2d.Disposer class, when loaded, starts an endless daemon thread that can inherit the WebappClassLoader as its context loader. This will cause a leak when the webapp is unloaded.\n\nIt would be useful if JreMemoryLeakPreventionListener could load this class to prevent the leak.",
    "comments": [
      "Which daemon thread?\n\nIs this the same as bug #51688?",
      "I do not think so. It is a thread named \"Java2D Disposer\", created in the static initializer of the sun.java2d.Disposer class.",
      "Can you post minimal code to cause this thread to be created?\n\nI've just added a fix for that other, somewhat related, bug and I'd be happy to add this as well.",
      "The exact code that causes it in the webapp at hand is a\nsun.java2d.Disposer.getQueue() call\nsomewhere in the standard JRE library,\nbut actually just anything that loads the class, even Class.forName(\"sun.java2d.Disposer\"), is enough.",
      "Fixed in trunk, 7.0.x branch. Will be included in 7.0.22 onward."
    ],
    "creation_ts": "2011-08-19T14:41:36Z",
    "fixes": [
      51687
    ]
  },
  {
    "id": 66294,
    "summary": "Util.getContextClassLoader() can be a hotspot",
    "description": "Created attachment 38401\nBenchmark which shows performance difference between getting class loader with/without privileges\n\nIn our application Util.getContextClassLoader() is a hotspot with almost all the cost coming from AccessController.doPrivileged. By adding instrumentation we've confirmed that the native implementation of AccessController.doPrivileged itself and not PrivilegedGetTccl.run() is expensive. In an example request to our application we had 17000 calls to Util.getContextClassLoader() and recorded this CPU time in the methods:\n0.682 ms for javax.el.Util$PrivilegedGetTccl.run()\n27.800 ms for javax.el.Util.getContextClassLoader()\n\nThis potential hotspot was introduced four years ago when a change was made to get the context class loader of the Thread with privileges enabled: https://bz.apache.org/bugzilla/show_bug.cgi?id=62080\n\nWe'd like to fix this hotspot by calling Thread.currentThread().getContextClassLoader() without privileges enabled again. This would be a revert of the change here: https://github.com/apache/tomcat/commit/7c359957f0b600b92e964b1a2497374e6cac4bc3#diff-f5b7c13f66b3d070a6b1c1713ad4b60fd70b26f579a746edc8fe9f19109243b2L93\nSince this change addressed a rare bug, we probably have to make this change backwards compatible by adding a configuration switch.\n\nI have also included a basic benchmark which compares the performance of the two approaches. The benchmark shows a difference by factor 100. I ran the benchmark with JDK 8 and 11.\n\nSince SecurityManager and related functionality are on track to deprecation, this change may be mandatory in the future, irrespective of the performance benefit:\nhttps://openjdk.org/jeps/411",
    "comments": [
      "Given that the SecurityManager is heading towards deprecation, why not just run without a SecurityManager to avoid this hotspot?",
      "(In reply to Mark Thomas from comment #1)\n> Given that the SecurityManager is heading towards deprecation, why not just\n> run without a SecurityManager to avoid this hotspot?\n\nWe've checked this, but unfortunately, it is not possible for us to run without SecurityManager for non-Tomcat reasons.",
      "Fixed in:\n- 10.1.x for 10.1.2 onwards\n-  9.0.x for  9.0.69 onwards\n-  8.5.x for  8.5.84 onwards\n\nThe privileged block is now disabled by default so this should \"just work\" once you upgrade.",
      "Thanks, that's great to hear."
    ],
    "creation_ts": "2022-10-04T10:20:37Z",
    "fixes": [
      66294
    ]
  },
  {
    "id": 66508,
    "summary": "Tomcat after a GC pause causes the HTTP threads to be blocked to acquire a semaphore to process WebSockets connection closure.",
    "description": "For this issue to happen there are three events that need to happen and they are listed below:\n\nEvent 1. Tomcat is going through a GC Pause.\nEvent 2. WebSocket connection at the client is closed (not processed by the tomcat as it is going through a GC pause)\nEvent 3. Tomcat is trying to write a message on the same connection as above but has not started as the tomcat is going through a pause.\n\nEvent 2 happens on an HTTP thread (In the below stack trace it is http-nio2-8082-exec-7) and Event 3 happens on a background thread (pool-12-thread-1).\n\nIf Event 3 happens before Event 2, then the semaphore acquired by the event 3 thread is not released and the event 2 thread is blocked for a duration of org.apache.tomcat.websocket.BLOCKING_SEND_TIMEOUT (default value is 20 seconds). If I am not wrong event 3 thread never releases the semaphore.\n\nIf there are 5000 connections on a Tomcat and all going through the above issue, causes all the Tomcat HTTP thread pools to stuck for a long duration not processing any incoming HTTP requests. In a way, each tomcat HTTP thread tries to process the socket close and waits to acquire the semaphore for 20 seconds. With a thread pool of 50, and 5000 connections then it takes 100 * 20 Seconds (default time out) = 2000 seconds = 33.33 Minutes.\n\n\nIn our environment, we are using CometD (https://cometd.org/) to support transport independent client-to-server and server-to-client communication via Bayeux protocol. This protocol sends heartbeat messages every 30 seconds to detect the availability of both parties. If the server does not respond within 30 seconds + 10 seconds (Configurable grace period) the client considers the server is not available and re-connects by opening a new connection and closing the old one. Due to a GC Pause at the server, the client won't receive a heartbeat message within a certain interval and is closing the connection. The server when it processes this socket close message writes a response back to the client about it (not sure why it is needed or even if it is needed why it is trying to acquire semaphore with max waiting for org.apache.tomcat.websocket.BLOCKING_SEND_TIMEOUT).\n\nPlease review below stack traces. The main issue is http-ni02-8082-exec-7 thread is trying to acquire a semaphore for 20 seconds and pool-12-thread-1 trying to write a message never releases the lock. My debugging points out that the pool-12-thread-1 in our environment is doing a nonblocking write and for some reason, this never completes and never calls to release the semaphore.\n\nLet me know if you need any further information.\n\nEvent 2 Stack Trace:\n\n\"http-nio2-8082-exec-7\" #112 daemon prio=5 os_prio=31 tid=0x00007fc9c07e9000 nid=0x1f403 waiting on condition [0x0000700008eb7000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x0000000748319390> (a java.util.concurrent.Semaphore$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:1037)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1328)\n        at java.util.concurrent.Semaphore.tryAcquire(Semaphore.java:409)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:299)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:262)\n        at org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:816)\n        at org.apache.tomcat.websocket.WsSession.onClose(WsSession.java:739)\n        - locked <0x000000074831a820> (a java.lang.Object)\n        at org.apache.tomcat.websocket.WsFrameBase.processDataControl(WsFrameBase.java:367)\n        at org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:296)\n        at org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:133)\n        at org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:85)\n        at org.apache.tomcat.websocket.server.WsFrameServer.doOnDataAvailable(WsFrameServer.java:183)\n        at org.apache.tomcat.websocket.server.WsFrameServer.notifyDataAvailable(WsFrameServer.java:162)\n        at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.upgradeDispatch(WsHttpUpgradeHandler.java:157)\n        at org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:60)\n        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:59)\n        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:831)\n        at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.doRun(Nio2Endpoint.java:1615)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n        - locked <0x0000000748310ca8> (a org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper)\n        at org.apache.tomcat.util.net.AbstractEndpoint.processSocket(AbstractEndpoint.java:1111)\n        at org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2.completed(Nio2Endpoint.java:564)\n        at org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2.completed(Nio2Endpoint.java:542)\n        at sun.nio.ch.Invoker.invokeUnchecked(Invoker.java:126)\n        at sun.nio.ch.Invoker$2.run(Invoker.java:218)\n        at sun.nio.ch.AsynchronousChannelGroupImpl$1.run(AsynchronousChannelGroupImpl.java:112)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:748)\n\n\n\n\n\n\nEvent 3 Stack Trace (made changes to the tomcat code to print the stack trace) and is happening on pool-12-thread-1\n\njava.lang.Thread.getStackTrace(Thread.java:1559)\norg.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:175)\norg.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:81)\norg.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:545)\norg.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:411)\norg.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.write(WsRemoteEndpointImplBase.java:881)\norg.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendStringByCompletion(WsRemoteEndpointImplBase.java:216)\norg.apache.tomcat.websocket.WsRemoteEndpointAsync.sendText(WsRemoteEndpointAsync.java:47)\norg.cometd.websocket.server.WebSocketTransport.send(WebSocketTransport.java:118)\norg.cometd.websocket.server.WebSocketTransport.send(WebSocketTransport.java:52)\norg.cometd.websocket.server.common.AbstractWebSocketTransport$AbstractWebSocketScheduler.send(AbstractWebSocketTransport.java:196)\norg.cometd.websocket.server.common.AbstractWebSocketTransport$AbstractWebSocketScheduler$Flusher.process(AbstractWebSocketTransport.java:627)\norg.eclipse.jetty.util.IteratingCallback.processing(IteratingCallback.java:241)\norg.eclipse.jetty.util.IteratingCallback.iterate(IteratingCallback.java:223)\norg.cometd.websocket.server.common.AbstractWebSocketTransport$AbstractWebSocketScheduler.send(AbstractWebSocketTransport.java:420)\norg.cometd.websocket.server.common.AbstractWebSocketTransport$AbstractWebSocketScheduler.send(AbstractWebSocketTransport.java:522)\norg.cometd.websocket.server.common.AbstractWebSocketTransport$AbstractWebSocketScheduler.schedule(AbstractWebSocketTransport.java:500)\norg.cometd.websocket.server.WebSocketTransport$WebSocketScheduler$1.schedule(WebSocketTransport.java:154)\norg.cometd.websocket.server.common.AbstractWebSocketTransport$AbstractWebSocketScheduler$MetaConnectReplyTask.run(AbstractWebSocketTransport.java:548)\njava.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\njava.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)\njava.util.concurrent.FutureTask.run(FutureTask.java)\n\n\n\n\n\nSteps to Reproduce:\n-------------------\nTomcat version:8.5.72\nJava Version: 1.8\n(If I am not wrong this issue will happen on higher java versions and also tomcat versions too)\n\n1. Create a WebSocket Endpoint.\n2. Let the client connect to the server and make the server send messages at a rate of 1 message per 5 seconds, if not able to reproduce it increase the rate.\n3. Either create a GC Pause if that is not possible keep the IDE in debug mode and pause all threads at a breakpoint.\n4. Close the client connection.\n5. Unpause the debug mode.\n6. Take a thread dump.\n\nTo understand the problem at scale, increase the number of connections to 1000 or 5000 and perform the above steps.\n\n\n\n\nI made a change to the following line. If opCode is OPCODE_CLOSE instead of waiting to acquire semaphore with time out, just do a tryAcquire.\nThis fixes the issue. But not sure what are the implications of this change. Ideally, we need to find out why pool-12-thread-1 (listed above)  flow is not releasing the lock when the socket is closed at the client or not even failing to write and release the semaphore.\n\nhttps://github.com/apache/tomcat/blob/8.5.x/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java#L299\n\n\n            if (opCode == Constants.OPCODE_CLOSE)  {\n                if (!messagePartInProgress.tryAcquire()) {\n                    String msg = sm.getString(\"wsRemoteEndpoint.acquireTimeout\");\n                    wsSession.doClose(new CloseReason(CloseCodes.GOING_AWAY, msg),\n                        new CloseReason(CloseCodes.CLOSED_ABNORMALLY, msg), true);\n                    throw new SocketTimeoutException(msg);\n                }\n            } else if (!messagePartInProgress.tryAcquire(timeout, TimeUnit.MILLISECONDS)) {\n                String msg = sm.getString(\"wsRemoteEndpoint.acquireTimeout\");\n                wsSession.doClose(new CloseReason(CloseCodes.GOING_AWAY, msg),\n                        new CloseReason(CloseCodes.CLOSED_ABNORMALLY, msg), true);\n                throw new SocketTimeoutException(msg);\n            }\n\n\n\nLet me know if you have any questions.\n\nThank you.",
    "comments": [
      "In my below issue description, I mentioned the test environment java version is 1.8. The issue is reproducible with Java 11.\n\nBased on my reading and analysis of the issue, any time a socket is closed at the client and a thread at the server to send a message on that socket happens before the socket close is processed can trigger this issue.\n\nWith GC Pause this issue is reproduced consistently.\n\nThanks.",
      "Correct version field to match text report.",
      "Thanks for the steps to reproduce.\n\nI'll note for the record that you also need to be using the NIO2 connector.\n\nI can see what the root cause is. The write in \"Event 3\" fails and isn't cleaned up properly which then blocks the close message. I am currently exploring options for fixing this.",
      "Fixed in:\n- 11.0.x for 11.0.0-M5 onwards\n- 10.1.x for 10.1.8 onwards\n-  9.0.x for  9.0.74 onwards\n-  8.5.x for  8.5.88 onwards\n\nIf you'd like to test a dev build before the next release, let me know.",
      "(In reply to Mark Thomas from comment #3)\n> Thanks for the steps to reproduce.\n> \n> I'll note for the record that you also need to be using the NIO2 connector.\n> \n> I can see what the root cause is. The write in \"Event 3\" fails and isn't\n> cleaned up properly which then blocks the close message. I am currently\n> exploring options for fixing this.\n\nThank you for working on the issue.\nI am using the NI02 connector.",
      "(In reply to Mark Thomas from comment #4)\n> Fixed in:\n> - 11.0.x for 11.0.0-M5 onwards\n> - 10.1.x for 10.1.8 onwards\n> -  9.0.x for  9.0.74 onwards\n> -  8.5.x for  8.5.88 onwards\n> \n> If you'd like to test a dev build before the next release, let me know.\n\nYes. Let me work on setting this up in my environment and will post you my results here.\n\nThanks a lot for fixing the issue.",
      "If it helps, dev build with the fix is available from:\n\nhttps://people.apache.org/~markt/dev/v9.0.74-dev/\n\nNote:\n- this is not an official release\n- use it at your own risk",
      "I tested with the changes made and the issue is still happening.\n\nEvent 3 thread that is trying to write on a socket that was asked to close by the client as the server didn't respond (Event 1) is failing due to a broken pipe (IO Exception). As it is using nonblocking write, the exception is not happening on the Event 3 thread, happening on the NIO2 thread (example thread name: http-nio2-8082-exec-2). \n\n\njava.io.IOException: Broken pipe\n\tat sun.nio.ch.FileDispatcherImpl.write0(Native Method)\n\tat sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)\n\tat sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n\tat sun.nio.ch.IOUtil.write(IOUtil.java:65)\n\tat sun.nio.ch.UnixAsynchronousSocketChannelImpl.implWrite(UnixAsynchronousSocketChannelImpl.java:694)\n\tat sun.nio.ch.AsynchronousSocketChannelImpl.write(AsynchronousSocketChannelImpl.java:383)\n\tat sun.nio.ch.AsynchronousSocketChannelImpl.write(AsynchronousSocketChannelImpl.java:400)\n\tat org.apache.tomcat.util.net.Nio2Channel.write(Nio2Channel.java:183)\n\tat org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.flushNonBlockingInternal(Nio2Endpoint.java:1285)\n\tat org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.writeNonBlockingInternal(Nio2Endpoint.java:1187)\n\tat org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.writeNonBlocking(Nio2Endpoint.java:1150)\n\tat org.apache.tomcat.util.net.SocketWrapperBase.write(SocketWrapperBase.java:486)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:148)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:83)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:556)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:422)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.write(WsRemoteEndpointImplBase.java:892)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendStringByCompletion(WsRemoteEndpointImplBase.java:216)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointAsync.sendText(WsRemoteEndpointAsync.java:47)\n\tat org.cometd.websocket.server.WebSocketTransport.send(WebSocketTransport.java:118)\n\tat org.cometd.websocket.server.WebSocketTransport.send(WebSocketTransport.java:52)\n\tat org.cometd.websocket.server.common.AbstractWebSocketTransport$AbstractWebSocketScheduler.send(AbstractWebSocketTransport.java:196)\n\tat org.cometd.websocket.server.common.AbstractWebSocketTransport$AbstractWebSocketScheduler$Flusher.process(AbstractWebSocketTransport.java:627)\n\tat org.eclipse.jetty.util.IteratingCallback.processing(IteratingCallback.java:241)\n\tat org.eclipse.jetty.util.IteratingCallback.iterate(IteratingCallback.java:223)\n\tat org.cometd.websocket.server.common.AbstractWebSocketTransport$AbstractWebSocketScheduler.send(AbstractWebSocketTransport.java:420)\n\tat org.cometd.websocket.server.common.AbstractWebSocketTransport$AbstractWebSocketScheduler.send(AbstractWebSocketTransport.java:522)\n\tat org.cometd.websocket.server.common.AbstractWebSocketTransport$AbstractWebSocketScheduler.schedule(AbstractWebSocketTransport.java:500)\n\tat org.cometd.websocket.server.WebSocketTransport$WebSocketScheduler$1.schedule(WebSocketTransport.java:154)\n\tat org.cometd.websocket.server.common.AbstractWebSocketTransport$AbstractWebSocketScheduler$MetaConnectReplyTask.run(AbstractWebSocketTransport.java:548)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n\n\n\n\n\nWhen this exception is thrown, Nio2Endpoint.writeCompletionHanlder.onFailed method is called (https://github.com/apache/tomcat/blob/8.5.x/java/org/apache/tomcat/util/net/Nio2Endpoint.java#L707). It is releasing writePending lock and is trying to send SocketEvent.ERROR. \n\nendpoint.processSocket(Nio2SocketWrapper.this, SocketEvent.ERROR, true);\n\n\nBy sending the above event, I am guessing it is expecting to release the messagePartInProgress semaphore waiting to acquire by the Event 1 thread (the thread trying to consume the close message sent by the client).\n\nhttps://github.com/apache/tomcat/blob/8.5.x/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java#L292\n\n\nIn my observation below, the call is returning true, so it is not calling the close method.\n\nhttps://github.com/apache/tomcat/blob/main/java/org/apache/tomcat/util/net/Nio2Endpoint.java#L702\n\nThe above call spins off another thread to fire a socket event.\n\nhttps://github.com/apache/tomcat/blob/8.5.x/java/org/apache/tomcat/util/net/SocketProcessorBase.java#L46\n\nIn my observation, after 20 seconds (the same time the Event 1 thread waiting to acquire the semaphore) the thread is entering inside SocketProcessorBase.run method's synchronized block, and the socketWrapper.isClosed() is true and is returning, without running doRun method.\n\n\nDue to asynchronous write by the Event 3 thread, even if it gets an IO Exception (Broken Pipe) it is not releasing the messagePartInProgress semaphore because the thread that acquired the lock and the thread that is executing the write is different. Even when the writer encounters a broken pipe it is not closing socketWrapper.\n\nIn my observation, the Event 3 thread is hitting the below line, as the write is not complete it does not call any handlers to release messagePartInProgress semaphore.\n\nhttps://github.com/apache/tomcat/blob/8.5.x/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java#L204\n\nPlease let me know if any details are needed.\n\n\nThank you",
      "When a nonblocking write is failing, the writeCompletionHandler.failed inside Nio2Endpointis getting called, but it is unable to trigger a code path to clear the handler on WsRemoteEndpointImplServer.",
      "There's some bad analysis in the comment: processSocket is not supposed to return false (it does only when the executor refuses to run the task), the close() is simply there to handle this unlikely (and random) scenario.",
      "Can you add your connector configuration to the BZ ?",
      "OK. I can recreate this.\n\nThe sequence is:\n- Thread 1: Executor or similar calls Session.getAsyncRemote().sendText()\n- Thread 1: Acquires messagePartInProgress semaphore\n- Thread 1: Gets as far as the call to OperateState.start()\n\n- Client closes the connection. This triggers:\n  - The poller to fire a SocketEvent.ERROR\n  - The in-process write to fail\n\n- Thread 2: Starts to process SocketEvent.ERROR\n- Thread 2: is holding the SocketWrapper lock\n- Thread 2: Thread 2 gets as far as sending the close message but has to wait for the messagePartInProgress semaphore\n\n- Thread 3: Starts to process the failure of the in-process write\n- Thread 3: failed() method called for write completion handler\n- Thread 3: SocketEvent.ERROR task send to executor\n\n- Thread 4: Executor starts to process SocketEvent.ERROR task send by thread 3\n- Thread 4: Blocked waiting to acquire the SocketWrapper lock\n\n\nOn one level, the issue is that the processing of SocketEvent.ERROR expects any in-progress (and failed) message to have released the messagePartInProgress semaphore. But that doesn't happen.\n\nLooking more broadly, one could question if there is any benefit at all in attempting to send a WebSocket close message after any form of IOException rather than just closing the TCP connection.\n\nNote, the previous fix addressed a similar issue where Thread 1 was sending a message in response to a received message.\n\nI intend to try and fix this in the SocketEvent.ERROR handling. The higher level discussion is something probably better suited to the dev@ list. If I can't fix this in SocketEvent.ERROR then we may need to return to the high level discussion.",
      "I fixed the other code path that could trigger this issue and have uploaded 8.5.x and 9.0.x builds for testing:\n\nhttps://people.apache.org/~markt/dev/",
      "Hi Mark Thomas,\n\nI am still able to reproduce the issue with the latest changes.\nMy understanding is the recent changes help only when the writeCompletionHandler failed method in Nio2Endpoint fires the SocketEvent.ERROR.\n\n                    if (!endpoint.processSocket(Nio2SocketWrapper.this, SocketEvent.ERROR, true))\n                        close();\n\n\nFiring this event is not happening as the thread that is executing to fire is not entering the synchronized block on socketWrapper. (https://github.com/apache/tomcat/blob/8.5.x/java/org/apache/tomcat/util/net/SocketProcessorBase.java#L40)\n\n    public final void run() {\n        synchronized (socketWrapper) {\n\n\nThe socketWrapper is hold by the Event 1 thread (in below logs it is http-10). Please find below the timings of each thread in play to give you a better picture of the issue.\n\n\n\n2023-03-16 21:25:19 (353) pool-12-thread-1 startMessage - Acquired messagePartInProgress semaphore lock : Session ID : 0\n\n\n2023-03-16 21:25:19 (360) http-10 sendMessageBlock before acquiring messagePartInProgress tryAcquire - Session ID : 0\n\n\n2023-03-16 21:25:19 (369) http-11 writeCompletionHandler.failed called : java.io.IOException: Broken Pipe\n\n\n2023-03-16 21:25:39 (361) http-10 sendMessageBlock could not acquire messagePartInProgress.tryAcquire. Closing socket. - SessionID : 0\n\njava.net.SocketTimeoutException: The current message was not fully sent within the specified timeout\n\n\n2023-03-16 21:25:39 (362) Inside the synchronized block of SocketProcessorBase.run method, Thread Name: http-nio2-8082-exec-15\n\n2023-03-16 21:25:39 (362) Inside the synchronized block of SocketProcessorBase.run -- socketWrapper.isClosed: true. Not running doRun method. Thread Name : http-nio2-8082-exec-15\n\n\n\n\n\nIf you notice there are three are four threads in play.\nAt the start, there are two threads.\n\npool-12-thread-1 (a thread on the server) trying to write a message on the Session ID 0.\n\nhttp-10 thread received a message from client with close code 1000 and a reason.\nOur client is a javascript and is using the below API to send a close message with code 1000 and a reason.\nwebSocket.close(code, reason);\n\nhttp-10 thread to process the received message should have acquired the lock on socketWrapper. As this thread could not acquire the messagePartInProgress semaphore as it is already acquired by pool-12-thread-1, it will be waiting for 20 seconds (configured time out) and then though a socket time out exception. In above logs you can see a difference of 20 seconds from the time the log printed before calling \n!messagePartInProgress.tryAcquire(timeout, TimeUnit.MILLISECONDS)\n\n(https://github.com/apache/tomcat/blob/8.5.x/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java#L292)\n\n\npool-12-thread-1 is failing to write and writeCompletionHandler.failed method is called. In my test it is by thread http-11.\n\nhttps://github.com/apache/tomcat/blob/8.5.x/java/org/apache/tomcat/util/net/Nio2Endpoint.java#L707\n\nhttp-11 thread is trying to fire SocketEvent.ERROR, but it is not getting processed as http-nio2-8082-exec-15 is unable to enter synchronization block as the socketWrapper is hold by http-10 thread. \n\n\nLet me know if you have any questions.\n\nI am thinking adding below code before https://github.com/apache/tomcat/blob/8.5.x/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java#L292 may address the issue. If the opcode is close, instead of doing a tryAcquire with time out, simply doing a tryAcquire may be nonproblematic.\n\nif (opCode == Constants.OPCODE_CLOSE)  {\n                if (!messagePartInProgress.tryAcquire()) {\n                    String msg = sm.getString(\"wsRemoteEndpoint.acquireTimeout\");\n                    wsSession.doClose(new CloseReason(CloseCodes.GOING_AWAY, msg),\n                        new CloseReason(CloseCodes.CLOSED_ABNORMALLY, msg), true);\n                    throw new SocketTimeoutException(msg);\n                }\n            }\n\n\nThanks.",
      "Please provide full thread stacks for each of the four threads.\n\nAlso, R\u00e9my's request for the full Connector configuration is still outstanding.",
      "Short term, any combination of NIO/NIO2 and useAsyncIO that is NOT NIO2 + useAsyncIO=\"false\" should work. Performance differences should be minimal between all of those combinations.\n\nMedium term, this issue is one symptom of a deeper problem. It is going to take a little longer to explore the options for fixing it.",
      "Excuse me for the delayed response. Please find below our connector configuration:\n\nprotocol=org.apache.coyote.http11.Http11Nio2Protocol\ntomcat.connector.all.enableLookups=false\ntomcat.connector.all.URIEncoding=ISO-8859-1\ntomcat.connector.all.connectionTimeout=20000\ntomcat.connector.all.disableUploadTimeout=true\ntomcat.connector.main.redirectPort=8443\ntomcat.connector.main.maxThreads=50\ntomcat.connector.main.minSpareThreads=50\ntomcat.connector.main.acceptCount=500\ntomcat.connector.main.maxConnections=10000\ntomcat.connector.main.relaxedQueryChars=\"<>[\\]^{|}\ntomcat.connector.main.relaxedPathChars=\"<>[\\\\]^{|}\ntomcat.connector.secure.port=8443\ntomcat.connector.secure.scheme=https\ntomcat.connector.secure.secure=true\ntomcat.connector.secure.SSLEnabled=true\ntomcat.connector.secure.clientAuth=want\ntomcat.connector.secure.sslProtocol=TLS\ntomcat.connector.secure.algorithm=X509\norg.apache.catalina.connector.CoyoteAdapter.ALLOW_BACKSLASH=true\norg.apache.catalina.connector.RECYCLE_FACADES=true\n\n\n\nI am still working on sharing the stack trace that matches the source code of the publicly available tomcat version. I added a lot of log statements to get a better idea of the issue due to this the line numbers I see on my internal version may not match with the public version.\n\n\nThanks.",
      "Thanks for the Connector settings. The stack traces will definitely be useful as it looks as if you are using useAsyncIO=\"true\". If correct, I definitely want to see how this is being triggered.\n\nAs an alternative, I'm happy to look at the stack traces for the modified Tomcat source if you can also provide the modified source.",
      "I've applied a further fix for this.\n\nI've also updated the dev build at:\nhttps://people.apache.org/~markt/dev/v9.0.74-dev/\n\nSame caveats apply:\n- this is not an official release\n- use it at your own risk",
      "Given the lack of response, I am assuming that this is now fixed.",
      "Excuse me for the delayed response.\n\nI tested the fix by simulating the GC pause by pausing the JVM (running in debug mode) and it worked. \n\nMy team is working on running this at a higher load with actual user loads to confirm that we are not seeing any other side effects/issues. I was waiting for those results before confirming the fix is working without any issues.\n\nRecently I got to know about https://bz.apache.org/bugzilla/show_bug.cgi?id=66574\nand the creator of the bug stated that this seems to be a regression introduced in 9.0.74. \n\nIn the past, after upgrading CometD from 3 to 5 with Tomcat version 9.0.63 we noticed all the HTTP-nio2 threads blocked without making progress. We raised the issue with CometD https://github.com/cometd/cometd/issues/1328\nand Tomcat https://bz.apache.org/bugzilla/show_bug.cgi?id=66531.\n\nWe fixed it on our side by not using CompletableFuture in org.cometd.server.websocket.javax.WebSocketEndPoint.onMessage method. This has been done to unblock ourselves. \n\nWe are not sure whether 9.0.75 change is needed as we no longer use CompletableFuture in WebSocketEndPoint. Any guidance on this is highly appreciated.\n\nOnce again sorry for the delayed response. We were waiting to run this at a higher load with different scenarios to make sure there is no other issues.\n\n\nThank you once again for all the help.\n\n\n\n-----------------------------------------\nStack trace for https://bz.apache.org/bugzilla/show_bug.cgi?id=66531\n\n\"http-nio2-8082-exec-1\" #82 daemon prio=5 os_prio=31 cpu=460.02ms elapsed=2578.35s tid=0x00007facbee28800 nid=0xde03 waiting on condition  [0x000070001173d000]\n   java.lang.Thread.State: WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@11.0.17/Native Method)\n\t- parking to wait for  <0x00000007b5100478> (a java.util.concurrent.CompletableFuture$Signaller)\n\tat java.util.concurrent.locks.LockSupport.park(java.base@11.0.17/LockSupport.java:194)\n\tat java.util.concurrent.CompletableFuture$Signaller.block(java.base@11.0.17/CompletableFuture.java:1796)\n\tat java.util.concurrent.ForkJoinPool.managedBlock(java.base@11.0.17/ForkJoinPool.java:3128)\n\tat java.util.concurrent.CompletableFuture.waitingGet(java.base@11.0.17/CompletableFuture.java:1823)\n\tat java.util.concurrent.CompletableFuture.get(java.base@11.0.17/CompletableFuture.java:1998)\n\tat org.cometd.server.websocket.javax.WebSocketEndPoint.onMessage(WebSocketEndPoint.java:61)\n\tat org.cometd.server.websocket.javax.WebSocketEndPoint.onMessage(WebSocketEndPoint.java:35)\n\tat org.apache.tomcat.websocket.WsFrameBase.sendMessageText(WsFrameBase.java:415)\n\tat org.apache.tomcat.websocket.server.WsFrameServer.sendMessageText(WsFrameServer.java:129)\n\tat org.apache.tomcat.websocket.WsFrameBase.processDataText(WsFrameBase.java:515)\n\tat org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:301)\n\tat org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:133)\n\tat org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:85)\n\tat org.apache.tomcat.websocket.server.WsFrameServer.doOnDataAvailable(WsFrameServer.java:183)\n\tat org.apache.tomcat.websocket.server.WsFrameServer.notifyDataAvailable(WsFrameServer.java:162)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.upgradeDispatch(WsHttpUpgradeHandler.java:157)\n\tat org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:60)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:59)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)\n\tat org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.doRun(Nio2Endpoint.java:1701)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\t- locked <0x00000007b51005d8> (a org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper)\n\tat org.apache.tomcat.util.net.AbstractEndpoint.processSocket(AbstractEndpoint.java:1190)\n\tat org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2.completed(Nio2Endpoint.java:633)\n\tat org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2.completed(Nio2Endpoint.java:611)\n\tat sun.nio.ch.Invoker.invokeUnchecked(java.base@11.0.17/Invoker.java:127)\n\tat sun.nio.ch.Invoker$2.run(java.base@11.0.17/Invoker.java:219)\n\tat sun.nio.ch.AsynchronousChannelGroupImpl$1.run(java.base@11.0.17/AsynchronousChannelGroupImpl.java:112)\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(java.base@11.0.17/Thread.java:829)",
      "Thanks for confirming the fix.\n\nGenerally, if applications simulate blocking using non-blocking I/O that will be problematic.\n\nIf there is a way to reduce the locking in Tomcat (and hence reduce the chances of simulated blocking causing issues) we will always look at it as reducing blocking is generally a good thing but we won't normally treat deadlocks caused by simulated blocking as bugs."
    ],
    "creation_ts": "2023-03-04T01:58:54Z",
    "fixes": [
      66508
    ]
  },
  {
    "id": 66574,
    "summary": "Deadlock in websocket code",
    "description": "I believe this is a regression from 9.0.73 - that is, I never encountered that issue with 9.0.73 (which of course doesn't say that it wasn't there but with 9.0.74 it happens very often so...).\n\nI think it's closely related to (or the same as) these:\n\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=63191\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=66531\n\nThe first issue I opened a few years ago. Then, around Tomcat 9.0.71 it stopped appearing and all was fine. 9.0.72 seemed fine as well as 9.0.73. But now 9.0.74 seems to have introduced it again (or something new). Here are the relevant stack traces:\n\n-----------------\n\n\"thread name\" #615 [2030] daemon prio=5 os_prio=0 cpu=667.09ms elapsed=57804.86s tid=0x00007fc189c87000 nid=2030 waiting on condition  [0x00007fc0bb57c000]\n   java.lang.Thread.State: WAITING (parking)\n        at jdk.internal.misc.Unsafe.park(java.base@19.0.2/Native Method)\n        - parking to wait for  <0x0000000743e004f8> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(java.base@19.0.2/LockSupport.java:221)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(java.base@19.0.2/AbstractQueuedSynchronizer.java:715)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(java.base@19.0.2/AbstractQueuedSynchronizer.java:938)\n        at java.util.concurrent.locks.ReentrantLock$Sync.lock(java.base@19.0.2/ReentrantLock.java:153)\n        at java.util.concurrent.locks.ReentrantLock.lock(java.base@19.0.2/ReentrantLock.java:322)\n        at org.apache.tomcat.websocket.WsSession.doClose(WsSession.java:654)\n        at org.apache.tomcat.websocket.WsSession.doClose(WsSession.java:636)\n        at org.apache.tomcat.websocket.WsSession.close(WsSession.java:624)\n        at org.cometd.server.websocket.javax.WebSocketEndPoint$Delegate.close(WebSocketEndPoint.java:119)\n        at org.cometd.server.websocket.common.AbstractWebSocketEndPoint.lambda$onMessage$0(AbstractWebSocketEndPoint.java:70)\n        at org.cometd.server.websocket.common.AbstractWebSocketEndPoint$$Lambda$1929/0x00000007c10e7078.accept(Unknown Source)\n        at org.cometd.bayeux.Promise$2.fail(Promise.java:108)\n        at org.cometd.server.websocket.common.AbstractWebSocketEndPoint$$Lambda$1953/0x00000007c111c440.accept(Unknown Source)\n        at org.cometd.bayeux.Promise$2.fail(Promise.java:108)\n        at org.cometd.server.websocket.common.AbstractWebSocketEndPoint$Entry.fail(AbstractWebSocketEndPoint.java:645)\n        at org.cometd.server.websocket.common.AbstractWebSocketEndPoint$Flusher.lambda$onCompleteFailure$0(AbstractWebSocketEndPoint.java:612)\n        at org.cometd.server.websocket.common.AbstractWebSocketEndPoint$Flusher$$Lambda$2642/0x00000007c13f9800.accept(Unknown Source)\n        at java.util.ArrayList.forEach(java.base@19.0.2/ArrayList.java:1511)\n        at org.cometd.server.websocket.common.AbstractWebSocketEndPoint$Flusher.onCompleteFailure(AbstractWebSocketEndPoint.java:612)\n        at org.eclipse.jetty.util.IteratingCallback.failed(IteratingCallback.java:417)\n        at org.cometd.server.websocket.javax.WebSocketEndPoint$Delegate.lambda$send$0(WebSocketEndPoint.java:106)\n        at org.cometd.server.websocket.javax.WebSocketEndPoint$Delegate$$Lambda$1954/0x00000007c111d438.onResult(Unknown Source)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.onResult(WsRemoteEndpointImplBase.java:846)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.endMessage(WsRemoteEndpointImplBase.java:442)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$EndMessageHandler.onResult(WsRemoteEndpointImplBase.java:563)\n        at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer$OnResultRunnable.run(WsRemoteEndpointImplServer.java:395)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(java.base@19.0.2/Thread.java:1589)\n\n   Locked ownable synchronizers:\n        - <0x00000006cf2712d8> (a org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker)\n\n-----------------\n\n\"other thread name\" #713 [2702] daemon prio=5 os_prio=0 cpu=523.94ms elapsed=53545.41s tid=0x00007fc187e92000 nid=2702 waiting on condition  [0x00007fc0c107c000]\n   java.lang.Thread.State: WAITING (parking)\n        at jdk.internal.misc.Unsafe.park(java.base@19.0.2/Native Method)\n        - parking to wait for  <0x0000000743e008a8> (a java.util.concurrent.CompletableFuture$Signaller)\n        at java.util.concurrent.locks.LockSupport.park(java.base@19.0.2/LockSupport.java:221)\n        at java.util.concurrent.CompletableFuture$Signaller.block(java.base@19.0.2/CompletableFuture.java:1864)\n        at java.util.concurrent.ForkJoinPool.unmanagedBlock(java.base@19.0.2/ForkJoinPool.java:3745)\n        at java.util.concurrent.ForkJoinPool.managedBlock(java.base@19.0.2/ForkJoinPool.java:3690)\n        at java.util.concurrent.CompletableFuture.waitingGet(java.base@19.0.2/CompletableFuture.java:1898)\n        at java.util.concurrent.CompletableFuture.get(java.base@19.0.2/CompletableFuture.java:2072)\n        at org.cometd.server.websocket.javax.WebSocketEndPoint.onMessage(WebSocketEndPoint.java:60)\n        at org.cometd.server.websocket.javax.WebSocketEndPoint.onMessage(WebSocketEndPoint.java:35)\n        at org.apache.tomcat.websocket.WsFrameBase.sendMessageText(WsFrameBase.java:390)\n        at org.apache.tomcat.websocket.server.WsFrameServer.sendMessageText(WsFrameServer.java:129)\n        at org.apache.tomcat.websocket.WsFrameBase.processDataText(WsFrameBase.java:484)\n        at org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:284)\n        at org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:130)\n        at org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:84)\n        at org.apache.tomcat.websocket.server.WsFrameServer.doOnDataAvailable(WsFrameServer.java:183)\n        at org.apache.tomcat.websocket.server.WsFrameServer.notifyDataAvailable(WsFrameServer.java:163)\n        at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.upgradeDispatch(WsHttpUpgradeHandler.java:152)\n        at org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:60)\n        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:57)\n        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(java.base@19.0.2/Thread.java:1589)\n\n   Locked ownable synchronizers:\n        - <0x000000070362a330> (a org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker)\n        - <0x0000000743e004f8> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)\n\n-----------------\n\nNot sure how to help more but I'm reverting to 7.0.73 for now. Let me know what I can do.",
    "comments": [
      "I want to mention something that I'm noticing which might not be true but so far that's always been the case. Whenever this deadlock happens, there's only ONE such pair of threads with the stacktraces I posted. Before when I had the similar problems (in the other issue I linked) this wasn't so - there were many, many blocked threads. Now it seems there's only one pair. Again, not sure this is true but seems so from a few hours of testing. Hopefully that could help with debugging.",
      "I don't see deadlock, here.\n\nThread 615 is waiting for 0x0000000743e004f8 and owns a lock on 0x00000006cf2712d8.\nThread 713 is waiting for 0x0000000743e008a8 and owns locks for 0x000000070362a330 and 0x0000000743e004f8\n\nThus, thread 713 is waiting on Thread 615, but Thread 615 isn't waiting on Thread 713.\n\nUnless there are more threads participating, here, then this is not a deadlock.",
      "I used the word \"deadlock\" a bit loosely, yes, sorry. It's not exactly a deadlock between these two threads but rather an issue that these two threads are blocked and not continuing. Probably the same reason as the two linked issues - `sendText` doesn't call the callback.\n\nIs there really nothing in the changelog from 9.0.73 to 9.0.74 that could possibly explain this change? As I said, it *never* happened on 73, on 74 it happens often.\n\nI've also attached a full threaddump. You can probably ignore the JRuby stuff - that's what I run my tests with. Yesterday, when I also saw the issue in production, there was no JRuby there. If a thread dump without JRuby is needed, I could try to provide one.",
      "Created attachment 38543\nThread dump",
      "Well, it seems like it is triggered by your code.\n\"thread\" #824 decides to wait in your code, blocking inside the main Servlet request processing (so it is still holding the socket wrapper lock).\n\"thread\" #1 is simply doing Tomcat shutdown, closing the websocket sessions in the process.",
      "This is related to one of the fixes for bug 66508. Specifically this change:\nhttps://github.com/apache/tomcat/commit/dccc2644ce701e88b152563473a350ec33a29a81\n\nIn short, the above change replaced the internal session state lock with the SocketWrapper lock. This removed the possibility of a deadlock caused by container and non-container threads obtaining the locks in different orders. \n\nThread #824 is simulating blocking by calling Future.get() immediately after initiating the async action that created the Future. This thread is holding the SocketWrapper lock because it is a container thread responding to the receipt of a WebSocket message.\n\nThread #844 is processing the async action initiated by thread #824. It is trying to close the WebSocket session. To do this it needs the SocketWrapper lock which is held by #824.\n\nHence threads #824 and #844 are deadlocked.\n\nI have observed that simulating blocking often triggers deadlocks with Tomcat. This appears to be another instance of that but one where the locks participating in the deadlock are split across Tomcat and the application.\n\nI'm going to spend some time between now and the next round of releases looking at the way Tomcat uses locks - particularly in WebSocket - with a view to seeing if there is a different approach that is less susceptible to deadlock issues.",
      "I have a patch that addresses this issue by refactoring the session state so it uses an AtomicReference (with a couple of extra states) rather than a lock.\n\nInitial testing is positive but I am currently running a fuller set of tests including the Autobahn test suite. Assuming that all goes well, are you able to test a build of Tomcat with the changes included if I post a link to the dev build here? I assume you'd want a Tomcat 9.0.x build to test.",
      "Great, thanks a lot for the quick fix! I'll try to test with whatever you give me, yes. 9.0.x, correct. Thanks!",
      "Great. 9.0.75-dev build that includes the proposed fix for this deadlock is available at:\nhttps://people.apache.org/~markt/dev/v9.0.75-dev/\n\nUsual caveats apply. This is not an official release. It is only intended to test the fix for this issue. Use at your own risk.",
      "I tested for some time and all seems fine. 9.0.74 blocked often but with this build it didn't happen so it looks good.",
      "Thanks for the testing and confirmation.\n\nFixed in:\n- 11.0.x for 11.0.0-M6 onwards\n- 10.1.x for 10.1.9 onwards\n-  9.0.x for  9.0.75 onwards\n-  8.5.x for  8.5.89 onwards"
    ],
    "creation_ts": "2023-04-20T06:47:19Z",
    "fixes": [
      66574
    ]
  },
  {
    "id": 33356,
    "summary": "Incorrect parsing of tag attributes",
    "description": "I get a org.apache.jasper.JasperException: with the error: \"The function string \nmust be used with a prefix when a default namespace is not specified\" when \ntrying to compile the following within a JSP page:\n\n<foo:set var=\"bar\" value=\"this $ is a { silly string (\"/>\n\n\"foo\" is our own tablib, it seems that Jasper seems to think that the string \nprovided to the value attribute contains some JSP/EL which it does not.\n\nIf I change the page to be:\n\n<c:set var=\"bar\" value=\"this $ is a { silly string (\"/>\n\nThen I do not get this error. However I need to use my own taglib.\nIn the foo.tld file, the \"value\" attribute of \"set\" has rtexprvalue=true.\nIf I set this to false then the problem goes away. However I noticed that c.tld \nin standard.jar also has rtexprvalue=true for the \"value\" attribute of \"set\". \nWhy the difference in behaviour ? We also wish to have rtexprvalue=true.",
    "comments": [
      "This bug is becoming a problem for us, since our query language uses \"{\" to \nexpress OR, and identifiers of the form foo:bar occur quite often. Users really \nhave to go through some ugly workarounds to deal with this problem, and since \nthe bug is in Jasper we can't do much to help them.",
      "Is this still in issue in Tomcat 5.5?",
      "This has been fixed in svn and will be included in 5.5.20 onwards"
    ],
    "creation_ts": "2005-02-02T14:55:18Z",
    "fixes": [
      33356
    ]
  },
  {
    "id": 56401,
    "summary": "Log version information on startup",
    "description": "Create a new \"startup\" logger and emit some good information to it such as version, etc.",
    "comments": [
      "Fixed in 8.0.x and will be included in 8.0.13 onwards.",
      "Several comments, from testing this and adding i18n in r1623804\n\n1. It is good that this does not affect embedded Tomcat.\nThere are no changes in the information logged by unit tests.\n\n2. The Catalina.logInfo() method is called from Catalina class constructor. As such, it performs logging on shutdown.bat.\nI think it should not perform logging on shutdown. As such, I am REOPENing this.\n\nAn alternative implementation could be a <Listener> in server.xml that prints such information.",
      "Additional concern:\n3. It may be better to log all information in one single log.info() statement. E.g. \"Initializing\\n {0}\\n {1}\\n {2} ...\".  The current log format implicitly relies on use of org.apache.juli.OneLineFormatter.\n\nIf you backport it to Tomcat 7 that uses SimpleFormatter, or if you run Tomcat 8 from within Eclipse IDE (that does not have logging configured by default == uses JRE default configuration == uses SimpleFormatter), it looks rather odd.\n\n\nReverted the code in r1627247 due to item #2 that I raised in Comment #2.",
      "Re-impemented as a LifecycleListener",
      "Re: r1627296\n\nCould the logging be moved from constructor to Lifecycle.BEFORE_INIT_EVENT, like activities performed by AprLifecycleListener?\n\n\nReason: Doing logging in VersionLoggerListener constructor interferes with storeconfig feature. IIRC, it instantiates classes to look for their default properties to omit writing them out.\n\nSteps to reproduce with Tomcat 8.0.14 release candidate and JDK 7u67:\n\n1. Add the following listener to conf/server.xml\n  <Listener className=\"org.apache.catalina.storeconfig.StoreConfigLifecycleListener\"/>\n\n2. Start Tomcat\n\n3. Connect with jconsole, open mbean Catalina/StoreConfig and invoke \"storeConfig()\" operation.\n\n4. The following messages are logged for this operation:\n\n[[[\n25-Sep-2014 16:38:24.694 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.startup.VersionLoggerListener.log Server version: Apache Tomcat/8.0.14\n25-Sep-2014 16:38:24.697 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.startup.VersionLoggerListener.log Server built:   Sep 24 2014 09:01:51\n25-Sep-2014 16:38:24.699 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.startup.VersionLoggerListener.log Server number:  8.0.14.0\n25-Sep-2014 16:38:24.700 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.startup.VersionLoggerListener.log OS Name:        Windows 7\n25-Sep-2014 16:38:24.702 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.startup.VersionLoggerListener.log OS Version:     6.1\n25-Sep-2014 16:38:24.703 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.startup.VersionLoggerListener.log Architecture:   x86\n25-Sep-2014 16:38:24.704 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:    1.7.0_67-b01\n25-Sep-2014 16:38:24.705 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:     Oracle Corporation\n25-Sep-2014 16:38:24.796 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.storeconfig.StandardContextSF.storeWithBackup Store Context  separate with backup (at file <CATALINA_BASE>\\conf\\Catalina\\localhost\\ROOT.xml.2014-09-25.16-38-24 )\n25-Sep-2014 16:38:24.829 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.storeconfig.StandardContextSF.storeWithBackup Store Context /manager separate with backup (at file <CATALINA_BASE>\\webapps\\manager\\META-INF\\context.xml.2014-09-25.16-38-24 )\n25-Sep-2014 16:38:24.847 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.storeconfig.StandardContextSF.storeWithBackup Store Context /docs separate with backup (at file <CATALINA_BASE>\\conf\\Catalina\\localhost\\docs.xml.2014-09-25.16-38-24 )\n25-Sep-2014 16:38:24.865 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.storeconfig.StandardContextSF.storeWithBackup Store Context /examples separate with backup (at file <CATALINA_BASE>\\conf\\Catalina\\localhost\\examples.xml.2014-09-25.16-38-24 )\n25-Sep-2014 16:38:24.889 INFO [RMI TCP Connection(1)-<IPADDRESS>] org.apache.catalina.storeconfig.StandardContextSF.storeWithBackup Store Context /host-manager separate with backup (at file <CATALINA_BASE>\\webapps\\host-manager\\META-INF\\context.xml.2014-09-25.16-38-24 )\n]]]",
      "(In reply to Konstantin Kolinko from comment #5)\n> Re: r1627296\n> \n> Could the logging be moved from constructor to Lifecycle.BEFORE_INIT_EVENT,\n> like activities performed by AprLifecycleListener?\n\nThey could, but then you have the problem that the AprLifecycleListener triggers logging in its constructor and I think that version info logging should appear before any other logging.\n\nI took a quick look at refactoring the AprLifecycleListener but that is tied up with the Connector constructors and would be hard to untangle.\n\nI'm happy to look at this some more but if anyone has a bright idea on how to solve this...",
      "> I took a quick look at refactoring the AprLifecycleListener but that\n> is tied up with the Connector constructors and would be hard to untangle.\n\nAck. Agreed.\n\n\nFor a record, the call chain to AprLifecycleListener.init() is the following.\n\n[[[\nat org.apache.catalina.core.AprLifecycleListener.init(AprLifecycleListener.java:181)\nat org.apache.catalina.core.AprLifecycleListener.isAprAvailable(AprLifecycleListener.java:96)\nat org.apache.catalina.connector.Connector.setProtocol(Connector.java:564)\nat org.apache.catalina.connector.Connector.<init>(Connector.java:66)\nat org.apache.catalina.startup.ConnectorCreateRule.begin(ConnectorCreateRule.java:62)\n]]]\n\nWhen parsing server.xml one needs to set properties on a Connector. Majority of those properties are propagated further to a ProtocolHandler class. Configuring a ProtocolHandler by default auto-selects between APR and non-APR implementation. That auto-selection relies on response from AprLifecycleListener.isAprAvailable(). Thus init() method is triggered.\n\nSo I agree that it is difficult to untangle it.",
      "The best I can come up with is to write all the info logging during AprLifecycleListener.init() to a buffer and then write that out during Lifecycle.BEFORE_INIT_EVENT. Then move the VersionLogging messages to Lifecycle.BEFORE_INIT_EVENT as well.\n\nErrors and warnings would still appear before the version information but I could live with that.\n\nI'll take a look at at patch to do this shortly.",
      "Imporved fix applied to 8.0.x for 8.0.15 onwards.",
      "This is back-ported in 7.0.x and will be available in 7.0.57 onwards."
    ],
    "creation_ts": "2014-04-11T20:05:07Z",
    "fixes": [
      56401
    ]
  },
  {
    "id": 55470,
    "summary": "Help users for ClassNotFoundExceptions during startup [PATCH]",
    "description": "Created attachment 30754\na patch that would help anybody with classpath problem save a lot of time\n\njava.lang.ClassNotFoundException: com.my.any.MyClass\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:366)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:355)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:354)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\tat org.apache.tomcat.util.digester.ObjectCreateRule.begin(ObjectCreateRule.java:150)\n\tat org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1276)\n\tat com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:506)\n\tat com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:182)\n\tat com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1303)\n\tat com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2717)\n\tat com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:607)\n\tat com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:489)\n\tat com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:835)\n\tat com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:764)\n\tat com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:123)\n\tat com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1210)\n\tat com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:568)\n\tat org.apache.tomcat.util.digester.Digester.parse(Digester.java:1537)\n\tat org.apache.catalina.startup.Catalina.load(Catalina.java:617)\n\tat org.apache.catalina.startup.Catalina.load(Catalina.java:665)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:281)\n\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:455)",
    "comments": [
      "Some comments on the patch:\n- indents should be correct and use 4 spaces rather than tabs\n- output should be to a logger, not to stderr",
      "Created attachment 30755\nObjectCreateRulePatch2.txt\n\nHopefully, Mark's feedbacks are fixed.\n\nFound a 2n place where it is useful: org.apache.catalina.loader.WebappClassLoader.loadClass()",
      "With Tomcat 7 reaching EOL, move the remaining open enhancement requests to Tomcat 8.",
      "Tomcat 8 has reached End Of Life. Moving this bug to Tomcat 9.",
      "After far too long...\n\nFixed in:\n- 11.0.x for 11.0.1 onwards\n- 10.1.x for 10.1.32 onwards\n-  9.0.x for  9.0.97 onwards\n\nI made various adjustments:\n- log at debug level\n- addressed Java 9 onwards changes to class loaders"
    ],
    "creation_ts": "2013-08-23T11:56:24Z",
    "fixes": [
      55470
    ]
  },
  {
    "id": 62755,
    "summary": "Add a Setter to Tomcat class to Allow Opting Out of Default Web Xml Config",
    "description": "org.apache.catalina.startup.Tomcat.addWebapp() always adds the default web.xml config settings, e.g. the default servlet and the JSP servlet.  Calling addWebapp() is a very common method to embed Tomcat in other systems, but it is those systems where the default config is many times not required or not desired. \n\nAdding a setter to the Tomcat class to allow the user to opt-out of adding the defaults will allow users to configure the system according to their needs, either by adding the required configurations programmatically, or by using web.xml deployment descriptors.\n\nSee also discussion at https://www.mail-archive.com/users@tomcat.apache.org/msg130097.html\n\nI plan to add this myself.",
    "comments": [
      "Added in git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1841692 13f79535-47bb-0310-9956-ffa450edef68"
    ],
    "creation_ts": "2018-09-22T16:50:32Z",
    "fixes": [
      62755
    ]
  },
  {
    "id": 68119,
    "summary": "Significant overhead in javax.el.CompositeELResolver.convertToType",
    "description": "A high-volume, latency-sensitive application shows that approximately 0.8% of cpu is spent executing javax.el.CompositeELResolver.convertToType.  Of this, > 95% is spent locally within the method, and the remainder is spent within javax.el.ELResolver.convertToType.\n\nThe source code for CompositeELResolver.convertToType is:\n\n\n    @Override\n    public Object convertToType(ELContext context, Object obj, Class<?> type) {\n        context.setPropertyResolved(false);\n        int sz = this.size;\n        for (int i = 0; i < sz; i++) {\n            Object result = this.resolvers[i].convertToType(context, obj, type);\n            if (context.isPropertyResolved()) {\n                return result;\n            }\n        }\n        return null;\n    }\n\nThe source code for ELResolver.convertToType is:\n\n    public final Object convertToType(ELContext context, Object obj, Class<?> type) {\n        context.setPropertyResolved(false);\n        return null;\n    }\n\nThe high cost of CompositeELResolver.convertToType is because the loop uses vtable lookup for method invocations (INVOKEVIRTUAL); the calls cannot be inlined because ELResolver.convertToType can be overridden by any of approximately 15 implementations.\n\nHowever, within the Tomcat codebase, the only implementation that actually DOES anything is this CompositeELResolver.  In effect, we're paying method invocation overhead that is guaranteed to do nothing except, perhaps, recursively do more nothing.\n\nRecognizing the potential need for custom implementations of ELResolvert.convertToType, we may want to maintain the current method but strip out the \"known\" implementations, such as those defined in ELContextImpl.getDefaultResolver().  This would allow the JIT compiler to optimize away loops over arrays of length zero, one, or two while still accommodating applications that directly call CompositeResolver.add().  \n\nNote that the array CompositeELResolver.resolvers is also used in other methods (for better reasons) and this may require a distinct array for convertToType.\n\n\nELResolver.convertToType is relatively cheap, but is called so often that the aggregate is detectable by our tools.  While the task of setting false to false is truly redundant, the changes suggested above are sufficient to eliminate the penalty with no further effort.\n\nPerformance tests with a zero-length array show a 95% reduction in runtime; removing the code completely shows a 100% reduction in runtime.",
    "comments": [
      "Fixed in:\n- 11.0.x for 11.0.0-M15 onwards\n- 10.1.x for 10.1.17 onwards\n-  9.0.x for  9.0.84 onwards\n-  8.5.x for  8.5.97 onwards\n\nSome simple tests show similar (~20x) improvement but any additional feedback (it would mean building from source) would be welcome.\n\nI'm assuming you are comfortable building from source but if there are any difficulties, let me know and I can provide a binary for testing.",
      "Thanks, I was indeed able to build from source, and 9.84 shows a *dramatic* decrease in latency under high cpu.  The data is from a low-quality test in the development environment but I'm quite happy.  Will update with prod data when we get it deployed, probably in January.\n\nHeap dump confirms that the array size is zero.",
      "This optimization was effective in production and reduced the method cost by approximately 2/3rds, saving more than 0.5% of cpu.\n\nThe remaining time comes from another invokevirtual in the method which I overlooked.  I've opened a separate issue to address that.  https://bz.apache.org/bugzilla/show_bug.cgi?id=68596"
    ],
    "creation_ts": "2023-11-09T18:20:59Z",
    "fixes": [
      68119
    ]
  },
  {
    "id": 65454,
    "summary": "Race condition with idle thread removal results in request being improperly enqueued by default ThreadPoolExecutor",
    "description": "Created attachment 37959\nReproducer byteman rule and test app\n\nI've found a race condition that can play out like below any time a non-core thread above minSpareThreads is idling out.  This can result in a request to be improperly enqueued like so:\n\n1. The thread pool has 11 total threads, 10 threads are busy and 1 idle.  After the idle timeout (default 60 seconds), the idle thread pool member ends its ThreadPoolExecutor.getTask()/workQueue.poll() wait on the task queue.  It hasn't yet called ThreadPoolExecutor.compareAndDecrementWorkerCount()/ThreadPoolExecutor.processWorkerExit() to decrement the worker count and remove itself from the executor worker map.\n\n2. A new connection comes in and is handed off to the executor, which calls TaskQueue.offer.  Since the idle thread hasn't removed itself from the map, parent.getPoolSize() still returns 11.  Thus, it passes this if check and so it is enqueued:\n\nhttps://github.com/apache/tomcat/blob/9.0.x/java/org/apache/tomcat/util/threads/TaskQueue.java#L87\n\n3. The idle thread then finishes exiting and removes itself from the executor.  The executor does not inherently replace that thread under this condition.  So there are now 10 busy threads in the pool and no idle thread available to process the new enqueued request so it sits in the queue until one of the other threads becomes idle.  This could then typically be a small imperceptible delay by the time another thread is created or returns idle.  But worst case, a very large unexpected delay is induced on the new request depending upon the run time of the current 10 busy tasks.\n\n\nThis can be hard to trigger or notice the effects of if triggered in most typical operations, but I was able to reproduce deterministically with some help from byteman.  To use byteman and reproduce:\n\n1. Download the byteman 4.0.13 from https://downloads.jboss.org/byteman/4.0.13/byteman-download-4.0.13-bin.zip\n2. Unzip byteman into install directory <mypath>.\n3. Use the Byteman rules file DecrementWorkerSleep.btm from WorkerQueueRaceCondition.zip\n4. Enable the Byteman instrumentation by adding the following to your JVM options:\n\n-javaagent:<mypath>/lib/byteman.jar=script:<mypath>/DecrementWorkerSleep.btm,boot:<mypath>/lib/byteman.jar -Dorg.jboss.byteman.transform.all=true\n\n5. Add the helloworld from WorkerQueueRaceCondition.zip to webapps for a simple slow jsp that can be easily used to trigger long requests\n7. Start Tomcat\n8. Make 10 slow requests (/helloworld/hi.jsp?sleep=true), resulting in usage of the 10 core threads\n9. Make an 11th normal request (/helloworld/hi.jsp), resulting in the creation of the 11th non-core thread\n10. Wait ~60 seconds after that to result in the idle timeout of that 11th thread.  With the extra byteman delay induced in that operation, you can watch for a message like this:\n\n--------------------------->ThreadPoolExecutor.compareAndDecrementWorkerCount http-nio-8080-exec-11 sleeping...\n\n11. Upon seeing that message, issue another normal quick request like in step 9 within the next 30 seconds and note it is not getting a response.  And without any other activity on the server, the request is never processed until one of the 10 core threads may become available.  A heap dump at that time and inspecting the executor/taskQueue confirms only the 10 busy threads in the pool with slow requests while the expected quick request is sitting in the queue doing nothing.",
    "comments": [
      "Fortunately for an easy workaround, you can set minSpareThreads equal to maxThreads to avoid any idle thread removal that may allow for that condition.",
      "Thanks for reporting this.\n\nI'm currently looking at options that don't involved completely re-implementing LinkedBlockingQueue and/or ThreadPoolExecutor.\n\nI'm not hopeful of finding such an option at this point. We may need to do something similar to Commons Pool and take a copy of LinkedBlockingQueue and adapt it to our needs.",
      "Thanks, Mark.  I also wasn't coming up with a proper fix in the current implementation.  The best thing I saw here was to adjust https://github.com/apache/tomcat/blob/9.0.x/java/org/apache/tomcat/util/threads/TaskQueue.java#L87 to the following to ensure at least an extra idle thread if enqueuing:\n\n        if (parent.getSubmittedCount()<(parent.getPoolSize())) {\n\n\nBut that'd only reduce chance and wouldn't be foolproof as we could still potentially end up with both idle threads timing out in the same problem timing.  Otherwise, it was looking like re-implementing was required to fix :(",
      "Agreed. I found a whole bunch of ways to do something similar but they all just narrowed the timing window.\n\nBefore I do too much work on LinkedBlockingQueue, there is some handling around RejectedExecutionException and the additional force methods I want to look at. I'm not currently convinced that handling is necessary. The more of that we can clean up, the simpler the changes to the copy of LinkedBlockingQueue will be.",
      "I see why the force handling is needed. It is to address the case where there are maxThreads-1 current threads, two new connections are received, both try to create a new thread, one gets created and the other gets rejected. The rejected one needs to be put on the queue.\n\nThere is a balance to strike here between reducing complexity (and opportunities for bugs) by re-using existing classes and the additional complexity created by re-use because of having to work around not having access to all of the internals we really need.\n\nI'm still trying to figure out the best way forward.",
      "Just a quick update. I am currently looking at a solution along the following lines:\n- import latest ThreadPoolExecutor from JSR 166 repo\n- Fix any CheckStyle etc issues\n- Merge in the changes from o.a.t.util.ThreadPoolexecutor\n- Fix this issue by checking the queue size after stopping a worker thread and adding a new thread to the pool if the queue size is not zero.",
      "While importing ThreadPoolExecutor added 2k+ lines of code, the actual fix was only a few lines of code. We'll need to check for updates to ThreadPoolExecutor from time to time but I'd be surprised if there are still bugs in the parts we are using.\n\nFixed in:\n- 10.1.x for 10.1.0-M3 onwards\n- 10.0.x for 10.0.9 onwards\n- 9.0.x for 9.0.51 onwards\n- 8.5.x for 8.5.70 onwards",
      "I believe this causes an issue in https://github.com/apache/tomcat/blob/9.0.x/java/org/apache/tomcat/util/net/AbstractEndpoint.java#L753 where the executor is checked if it is an instance of java.util.concurrent.ThreadPoolExecutor\n\nCalling setMaxThreads on the Endpoint no longer changes the max pool size in the executor."
    ],
    "creation_ts": "2021-07-16T20:59:48Z",
    "fixes": [
      65454
    ]
  },
  {
    "id": 61101,
    "summary": "CorsFilter should add Vary header to response",
    "description": "The Tomcat CorsFilter does not add a Vary header to the response to indicate that the response can vary for different values of the Origin header in the request. This poses problems for caches, as they can yield cached Tomcat responses where they shouldn't because they don't know that a different Origin value may yield a different response.\n\nThe filter should add the Origin value to the Vary header of the response.\n\nPer the CORS standard (https://www.w3.org/TR/cors/#resource-implementation):\n\"Resources that wish to enable themselves to be shared with multiple Origins but do not respond uniformly with \"*\" must in practice generate the Access-Control-Allow-Origin header dynamically in response to every request they wish to allow. As a consequence, authors of such resources should send a Vary: Origin HTTP header or provide other appropriate control directives to prevent caching of such responses, which may be inaccurate if re-used across-origins.\"\n\nFound this on multiple versions of the Tomcat CorsFilter (7, 8.0 and 8.5). A quick code inspection shows that this isn't present in /trunk either.\n\nFound with multiple Java versions, at least including Oracle JDK 8u131 64-bit on Windows 10 64-bit. Seems to be unrelated to the connectors (found on the HTTP NIO and BIO connectors)\n\nTo reproduce, enable the CorsFilter in Tomcat's web.xml, and send an HTTP request that includes both a Host and an Origin header, where the Origin should be different than the Host, and should be a value that is configured to be allowed by the CorsFilter. Inspect the response headers. A 'Vary: Origin' header should be in the response, but isn't.",
    "comments": [
      "This issue will be fixed in 9.0.0.M22, 8.5.16, 8.0.45 and 7.0.79. Thanks.",
      "This is CVE-2017-7674"
    ],
    "creation_ts": "2017-05-16T14:45:09Z",
    "fixes": [
      61101
    ]
  },
  {
    "id": 48616,
    "summary": "Struts 1.2 and bean:define tag throws jsp 1.1 regression exception",
    "description": "I'm using Struts 1.2.\nI've upgrade from tomcat 6.0.20 to 6.0.24 and nothing works.\n\nThe jsp compilation throws many error (i use the tag bean:define with same variable many times in jsp):\n\nDuring jsp precompilation:\n\n\"my_variable\" is already defined in _jspService(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)\n\nand at runtime:\n\n26-gen-2010 10.16.43 org.apache.catalina.core.ApplicationDispatcher invoke\nGRAVE: Servlet.service() for servlet jsp threw exception\norg.apache.jasper.JasperException: Unable to compile class for JSP: \n\nAn error occurred at line: 459 in the generated java file\nDuplicate local variable configurationExists\n\nAn error occurred at line: 576 in the generated java file\nDuplicate local variable configurationExists\n\nAn error occurred at line: 693 in the generated java file\nDuplicate local variable configurationExists\n\nAn error occurred at line: 810 in the generated java file\nDuplicate local variable configurationExists\n\nAn error occurred at line: 927 in the generated java file\nDuplicate local variable configurationExists\n\nAn error occurred at line: 1.045 in the generated java file\nDuplicate local variable configurationExists\n\nAn error occurred at line: 1.162 in the generated java file\nDuplicate local variable configurationExists\n\nAn error occurred at line: 1.279 in the generated java file\nDuplicate local variable configurationExists\n\nAn error occurred at line: 1.396 in the generated java file\nDuplicate local variable configurationExists\n\nAn error occurred at line: 1.531 in the generated java file\nDuplicate local variable patientsExists\n\nAn error occurred at line: 1.660 in the generated java file\nDuplicate local variable patientsExists\n\nAn error occurred at line: 1.777 in the generated java file\nDuplicate local variable patientsExists\n\nAn error occurred at line: 1.897 in the generated java file\nDuplicate local variable multiportionExists\n\nAn error occurred at line: 2.014 in the generated java file\nDuplicate local variable multiportionExists\n\nAn error occurred at line: 2.131 in the generated java file\nDuplicate local variable multiportionExists\n\nAn error occurred at line: 2.251 in the generated java file\nDuplicate local variable generalExists\n\nAn error occurred at line: 2.368 in the generated java file\nDuplicate local variable generalExists\n\nAn error occurred at line: 2.485 in the generated java file\nDuplicate local variable generalExists\n\nAn error occurred at line: 2.605 in the generated java file\nDuplicate local variable messagesExists\n\nAn error occurred at line: 2.722 in the generated java file\nDuplicate local variable messagesExists\n\nAn error occurred at line: 2.842 in the generated java file\nDuplicate local variable printFindExists\n\nAn error occurred at line: 2.959 in the generated java file\nDuplicate local variable printFindExists\n\nStacktrace:\n        at org.apache.jasper.compiler.DefaultErrorHandler.javacError(DefaultErrorHandler.java:92)\n        at org.apache.jasper.compiler.ErrorDispatcher.javacError(ErrorDispatcher.java:330)\n        at org.apache.jasper.compiler.JDTCompiler.generateClass(JDTCompiler.java:439)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:334)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:312)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:299)\n        at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:589)\n        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:317)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646)\n        at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:551)\n        at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:488)\n        at org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:968)\n        at org.apache.jsp.WEB_002dINF.pages.login.mainPage_jsp._jspService(mainPage_jsp.java:206)\n        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:377)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646)\n        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:436)\n        at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:374)\n        at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:302)\n        at org.apache.struts.action.RequestProcessor.doForward(RequestProcessor.java:1062)\n        at org.apache.struts.action.RequestProcessor.processForwardConfig(RequestProcessor.java:386)\n        at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:229)\n        at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1196)\n        at org.apache.struts.action.ActionServlet.doPost(ActionServlet.java:432)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646)\n        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:436)\n        at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:374)\n        at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:302)\n        at org.apache.struts.action.RequestProcessor.doForward(RequestProcessor.java:1062)\n        at org.apache.struts.action.RequestProcessor.processForwardConfig(RequestProcessor.java:386)\n        at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:229)\n        at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1196)\n        at org.apache.struts.action.ActionServlet.doPost(ActionServlet.java:432)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at org.displaytag.filter.ResponseOverrideFilter.doFilter(ResponseOverrideFilter.java:125)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:558)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:852)\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n        at java.lang.Thread.run(Thread.java:619)\n\n\n\nBefore upgrading to 6.0.24 all works fine.\n\nReading the documentation of bean:define in struts javadoc i see this message:\n\nUSAGE NOTE - There is a restriction in the JSP 1.1 Specification that disallows using the same value for an id attribute more than once in a single JSP page. Therefore, you will not be able to use <bean:define> for the same bean name more than once in a single page. \n\nBut i've not specify any jsp version.\n\nSo, is this a tomcat 6.0.24 regression bug? \n\nI've not particular compilation type/version specified in my app.",
    "comments": [
      "If you could attach the simplest possible JSP that demonstrated this issue that would be very helpful.\n\nAs a work-around, try using the following in your web.xml:\n\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\n   version=\"2.5\">\n...\n</webapp>",
      "Hi Mr,\nThanks for reply,\nMy web.xml is alredy 2.5 version...i've try your code with no results.\n\nI have an application with only struts (1.2.8).\n\nI have a welcome page.\n\n<%@ taglib uri=\"http://struts.apache.org/tags-bean\"  prefix=\"bean\" %>\n\n<bean:define id=\"configurationExists\" toScope=\"request\" value=\"0\"/>\n\n//some code,\n\n<bean:define id=\"configurationExists\" toScope=\"request\" value=\"1\"/>\n\n//other code, not necessary\n\n<bean:define id=\"configurationExists\" toScope=\"request\" value=\"3\"/>\n\n\nThis page will not be compiled (during build or runtime).\n\nI'll try to create and send a simple app later.\n\nThanks in advidce,\n\nAgharta",
      "See this.\n\nhttp://struts.apache.org/1.2.8/userGuide/struts-bean.html#define",
      "Created attachment 24890\nthe test case PART 1",
      "Created attachment 24891\ntest case part 2",
      "The file is a zip splitted in 2 parts",
      "Created attachment 24892\nPART1",
      "Created attachment 24893\nPART2",
      "Please see the file pages/Welcome.jsp for error simulation.\n\n\nThanks,\n\nAghart",
      "We are also seeing the issue with our code running on Windows XP SP 2, 32bit OS using struts version 1.3.10.",
      "Thanks for the test case. I can now reproduce this error. Looking at it now...",
      "The regression is caused by the fix for bug42390. I'll put together a test case that covers both and then see what can be done to find a fix that allows both to work correctly.",
      "Thanks for the test case. It speed up the process of fixing this considerably.\n\nThe regression has been fixed in trunk and proposed for 6.0.x.",
      "(In reply to comment #13)\n> Thanks for the test case. It speed up the process of fixing this considerably.\n> \n> The regression has been fixed in trunk and proposed for 6.0.x.\n\nFantastic!\nI'll wait next version with enthusiasm!\n\nMany thanks for your work!\n\nRegards,\n\nAgharta",
      "Reviewing the fix to this issue,\nI cannot find any provision in the JSP specification to support the requested behaviour.\n\nThe question is, when we are requested to declare a Java variable whether we should try to reuse existing declaration, or we should always declare it anew.\n\nI cannot find anything in the spec that says about reusing existing declaration. The only place relevant is chapter JSP.9.4.4 \"Actions\", and it says that when we do a custom action, it is translated into Java code as\n\ndeclare AT_BEGIN variables\n{\n  declare NESTED variables\n  transformation of foo\n}\ndeclare AT_END variables\n\nIt just says \"declare\".\n\n\nLooking at the example provided in Comment 2:\n\nIn struts 1.2.8 the bean:define tag is a BodyTag, which in its *Tei class declares a variable with the scope of VariableInfo.AT_END\n\nSee\nhttp://svn.apache.org/viewvc/struts/struts1/tags/STRUTS_1_2_8/src/share/org/apache/struts/taglib/bean/DefineTag.java?view=markup\n\nhttp://svn.apache.org/viewvc/struts/struts1/tags/STRUTS_1_2_8/src/share/org/apache/struts/taglib/bean/DefineTei.java?view=markup\n\n\nThe OP's problem is that such a tag defines both a scoped variable and a Java variable (\"scripting variable\"). It is OK to put a value into pageContext under the same name, but duplicate Java variables are not allowed.\n\nTo be able to implement behaviour, requested in Comment 2, Tomcat would have to track which Java variables were declared. So, to not define a variable when it is created by the second time. But, consider the following example of mixing scriptlets and those tags:\n\n<% { %>\n\n<bean:define id=\"configurationExists\" toScope=\"request\" value=\"0\"/>\n\n<% } { %>\n\n<bean:define id=\"configurationExists\" toScope=\"request\" value=\"1\"/>\n\n<% } %>\n\nThere is no way to reliably tell the difference between the above example and the one in Comment 2.\n\n\nTo conclude, I would recommend the OP to use the following construct (using the JSTL tag library). I think, that it should be safe:\n\n<c:if test=\"${true}\">\n<bean:define id=\"configurationExists\" toScope=\"request\" value=\"0\"/>\n</c:if>\n<c:if test=\"${true}\">\n<bean:define id=\"configurationExists\" toScope=\"request\" value=\"1\"/>\n</c:if>\n\nOr, use <c:set /> from the same JSTL library.\n\n\nThus, I think that this issue should be closed either as WONTFIX, or as INVALID.",
      "The page mentioned contridicts itself:\nhttp://struts.apache.org/1.2.8/userGuide/struts-bean.html#define\n\n*.  Unconditionally creates (or replaces) a bean under the specified identifier\nand\n*.  USAGE NOTE - There is a restriction in the JSP 1.1 Specification that disallows using the same value for an id  attribute more than once in a single JSP page. Therefore, you will not be able to use <bean:define> for the same bean name more than once in a single page\n\nI think if you are no longer going to allow a variable to be overwritten, then add a environment variable so we can turn the old behaviour on.\n\nFor us there is to many pages to change and would make the page hard to code using dozens of variables...\n\nThe comment about checking am not quite getting as one variable defined you can't use again:\n<c:if test=\"${true}\">\n   <bean:define id=\"configurationExists\" toScope=\"request\" value=\"0\"/>\n</c:if>\n<c:if test=\"${true}\">\n   <bean:define id=\"configurationExists\" toScope=\"request\" value=\"1\"/>\n</c:if>\n\nMy personal view is you should be able to overwrite a variable.  You could then mention scope, but thats the whole page, not block of code.",
      "(In reply to comment #15)\n> Reviewing the fix to this issue,\n> I cannot find any provision in the JSP specification to support the requested\n> behaviour.\n> \n> The question is, when we are requested to declare a Java variable whether we\n> should try to reuse existing declaration, or we should always declare it anew.\n> \n> I cannot find anything in the spec that says about reusing existing\n> declaration. The only place relevant is chapter JSP.9.4.4 \"Actions\", and it\n> says that when we do a custom action, it is translated into Java code as\n> \n> declare AT_BEGIN variables\n> {\n>   declare NESTED variables\n>   transformation of foo\n> }\n> declare AT_END variables\n> \n> It just says \"declare\".\n> \n> \n> Looking at the example provided in Comment 2:\n> \n> In struts 1.2.8 the bean:define tag is a BodyTag, which in its *Tei class\n> declares a variable with the scope of VariableInfo.AT_END\n> \n> See\n> http://svn.apache.org/viewvc/struts/struts1/tags/STRUTS_1_2_8/src/share/org/apache/struts/taglib/bean/DefineTag.java?view=markup\n> \n> http://svn.apache.org/viewvc/struts/struts1/tags/STRUTS_1_2_8/src/share/org/apache/struts/taglib/bean/DefineTei.java?view=markup\n> \n> \n> The OP's problem is that such a tag defines both a scoped variable and a Java\n> variable (\"scripting variable\"). It is OK to put a value into pageContext under\n> the same name, but duplicate Java variables are not allowed.\n> \n> To be able to implement behaviour, requested in Comment 2, Tomcat would have to\n> track which Java variables were declared. So, to not define a variable when it\n> is created by the second time. But, consider the following example of mixing\n> scriptlets and those tags:\n> \n> <% { %>\n> \n> <bean:define id=\"configurationExists\" toScope=\"request\" value=\"0\"/>\n> \n> <% } { %>\n> \n> <bean:define id=\"configurationExists\" toScope=\"request\" value=\"1\"/>\n> \n> <% } %>\n> \n> There is no way to reliably tell the difference between the above example and\n> the one in Comment 2.\n> \n> \n> To conclude, I would recommend the OP to use the following construct (using the\n> JSTL tag library). I think, that it should be safe:\n> \n> <c:if test=\"${true}\">\n> <bean:define id=\"configurationExists\" toScope=\"request\" value=\"0\"/>\n> </c:if>\n> <c:if test=\"${true}\">\n> <bean:define id=\"configurationExists\" toScope=\"request\" value=\"1\"/>\n> </c:if>\n> \n> Or, use <c:set /> from the same JSTL library.\n> \n> \n> Thus, I think that this issue should be closed either as WONTFIX, or as\n> INVALID.\n\n\n\n\nHi Mr,\nThanks for reply,\nSorry, but i'm not right with you (IMHO, i'm an end user of tomcat).\nFirst, why previous versions of tomcat works right (6.0.20 and prior)?\nSecond, i don't use JSTL, i use the <logic:notEmpty> and <logic:notEqual> strut's tags.....and your solution (transated in struts) does not work.\n\n//example using notEmpty tag\n\n<logic:notEmpty name=\"myVar\" scope=\"request\">\n    <bean:define id=\"configurationExists\" toScope=\"request\" value=\"0\"/>\n</logic:notEmpty>\n\n<logic:notEmpty name=\"myVar\" scope=\"request\">\n    <bean:define id=\"configurationExists\" toScope=\"request\" value=\"1\"/>\n</logic:notEmpty>\n\n<logic:notEmpty name=\"myVar\" scope=\"request\">\n    <bean:define id=\"configurationExists\" toScope=\"request\" value=\"2\"/>\n</logic:notEmpty>\n\nTo confirm it, please download and run the attached example, it contains this code (in pages/Welcome.jsp) as the test case (it uses notEqual tag):\n\n<%-- HERE THE INCRIMINATED CODE --%>\n\n<bean:define id=\"configurationExists\" toScope=\"request\" value=\"0\"/>\n\n<logic:notEqual name=\"configurationExists\" value=\"1\">\n    <bean:define id=\"configurationExists\" toScope=\"request\" value=\"1\"/>\n</logic:notEqual>\n<logic:notEqual name=\"configurationExists\" value=\"2\">\n    <bean:define id=\"configurationExists\" toScope=\"request\" value=\"2\"/>\n</logic:notEqual>\n\n<%-- END --%>\n\nI think that this code could appear in many projects.\n\n......i think that exists many other projects that still using stuts 1.2.x.\n\nThis is only my opinion, in my world and in my case. \n\nPlease correct me if i am wrong.\n\nRegards,\n\nAgharta",
      "The fix/workaround mentioned in this ticket does not work.  My last reply was replying to the comment before that doing checks would be a nightmare (to many code changes/testing) and that solution still has the same problem.  The problem is redeclaring a bean with the same ID.  The page I mention seems to contradict itself.\n\nAlthough now fixed in trunk which I haven't tested, someone else mentioned they think the new behaviour that a define can only be used once on a pge is correct.  If that is the rulling we need a backward compatible param for people like you and I.  My personal view is the variable is for the whole page, so you should be able to replace its value.",
      "(In reply to comment #18)\n> The fix/workaround mentioned in this ticket does not work.  My last reply was\n> replying to the comment before that doing checks would be a nightmare (to many\n> code changes/testing) and that solution still has the same problem.  The\n> problem is redeclaring a bean with the same ID.  The page I mention seems to\n> contradict itself.\n> \n> Although now fixed in trunk which I haven't tested, someone else mentioned they\n> think the new behaviour that a define can only be used once on a pge is\n> correct.  If that is the rulling we need a backward compatible param for people\n> like you and I.  My personal view is the variable is for the whole page, so you\n> should be able to replace its value.\n\n\nHi,\nYou are right (i've don't read your post, sorry, my mistake. And, sorry Mr Konstantin Kolinko), but i hope that the patch provided by Mr Mark Thomas works better than your solution (i hope that no code will be rewrited by end users).\n\nWhen patch will be freezed in new version i'll test it.\n\nThanks again.\n\nAgharta",
      "Created attachment 24991\n2010-02-16_tc7_bug42390_bug48616.patch\n\nPatch for trunk that\n- reverts r905145,\n- provides an alternative fix for bug 48616 and bug 42390,\n- replaces Vector -> List, Hashtable -> HashMap in the affected API.\n\nThe essence of this fix is that all those java variable declarations are not needed when we are inside a JspFragment, because it is scriptless.\n\nThat simplifies a lot and fixes bug 42390 and bug 48616 along the way.\n\nScriptingVariabler provides a list of Java variables to be declared,\nfiltering out those names that are already declared in the parent scopes (because those are still visible). That logic does not work when we enter a JspFragment, because a fragment is implemented in the generated servlet as a method, and does not see those variables in the calling scope.\n\nInstead of trying to fix ScriptingVariabler to detect being in those fragments and provide better lists, I make observation that in those fragments the Java variables can be not used at all.  Thus, we can ignore ScriptingVariabler exactly in those cases when it is wrong.\n\n\nFuture optimization might be to change ScriptingVariabler#ScriptingVariableVisitor and Generator#declareTemporaryScriptingVars#ScriptingVarVisitor to do not descend into fragments, as what they do will be ignored, but that will require to reimplement all code paths how Generator#GenerateVisitor#generateJspFragment() is called. I see 3 such code paths, and while they are not too complicated, they are not too trivial either, and I am afraid to introduce bugs when implementing them.",
      "Created attachment 24992\n2010-02-16_tc6_bug42390_bug48616.patch\n\nPatch for Tomcat 6.0",
      "Created attachment 24993\n2010-02-16_tc55_bug42390_bug48616.patch\n\nPatch for Tomcat 5.5",
      "Trunk patch looks good to me. Feel free to apply it (reverting my previous fix).",
      "Applied to trunk (r910792), proposed for 6.0 and 5.5.",
      "This has been fixed in trunk and applied to 6.0.x. It will be included in 6.0.25 onwards.",
      "Re-open to track to 5.5.x",
      "*** Bug 48879 has been marked as a duplicate of this bug. ***",
      "This patch was applied to 5.5.x in r935941 and will be in 5.5.30 onwards.",
      "*** Bug 49434 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2010-01-26T01:22:58Z",
    "fixes": [
      48616
    ]
  },
  {
    "id": 63684,
    "summary": "Wrapper never passed to RealmBase#hasRole() for given security constraints",
    "description": "In the advent of BZ 63636 it turned out that role mappings aren't accessible to a realm via a wrapper because they are never passed in RealmBase#hasResourcePermission(). Moreover, security references aren't available either.\n\nA PR is in preparation.",
    "comments": [
      "Fixed in:\n- master for 9.0.25 onwards\n- 8.5.x for 8.5.46 onwards\n- 7.0.x for 7.0.97 onwards"
    ],
    "creation_ts": "2019-08-22T12:21:56Z",
    "fixes": [
      63684
    ]
  },
  {
    "id": 65763,
    "summary": "WsRemoteEndpointImplBase#sendMessageBlock cannot close session properly when have TimeoutException",
    "description": "Firstly, I found this exception:   \n####\njava.io.IOException: java.util.concurrent.TimeoutException\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:324)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:259)\n\tat \n####\n\nIt happens in org.apache.tomcat.websocket.WsRemoteEndpointImplBase#sendMessageBlock(byte, java.nio.ByteBuffer, boolean, long):\n###java\n            if (!bsh.getSendResult().isOK()) {\n                messagePartInProgress.release();\n                Throwable t = bsh.getSendResult().getException();\n                wsSession.doClose(new CloseReason(CloseCodes.GOING_AWAY, t.getMessage()),\n                        new CloseReason(CloseCodes.CLOSED_ABNORMALLY, t.getMessage()), true);\n                throw new IOException (t);\n            }\n###\n \nActually, it is caused by org.apache.tomcat.websocket.WsRemoteEndpointImplClient#doWrite which has a LongToIntegerFuture.get timeout exception: \n###java\n            try {\n                channel.write(byteBuffer).get(timeout, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException | ExecutionException | TimeoutException e) {\n                handler.onResult(new SendResult(e));\n                return;\n            }\n###\n\nBut \"writing\" value is not set to \"false\" which has been set \"true\" in org.apache.tomcat.websocket.AsyncChannelWrapperSecure#write(java.nio.ByteBuffer). Only in org.apache.tomcat.websocket.AsyncChannelWrapperSecure.WriteTask, \"writing\" will be reset to \"false\", but WriteTask may not finish when LongToIntegerFuture.get timeout happens. This problem may like https://bz.apache.org/bugzilla/show_bug.cgi?id=61003, but writing.set(false) doesn't work in this timeout situation.  \n\nWhen WsRemoteEndpointImplBase#sendMessageBlock get TimeoutException, it will try to close session, see \"wsSession.doClose(new CloseReason(CloseCodes.GOING_AWAY, t.getMessage())\". \n\nThis method \"wsSession.doClose\" will set state = State.OUTPUT_CLOSED and send a close message (org.apache.tomcat.websocket.WsSession#sendCloseMessage). But it will case exception, because \"writing\" value is still \"true\":  \n###\n    Caused by: java.lang.IllegalStateException: Concurrent write operations are not permitted\n\tat org.apache.tomcat.websocket.AsyncChannelWrapperSecure.write(AsyncChannelWrapperSecure.java:117)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplClient.doWrite(WsRemoteEndpointImplClient.java:62)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase$OutputBufferSendHandler.write(WsRemoteEndpointImplBase.java:893)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:506)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:311)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:259)\n\tat org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:613)\n\tat org.apache.tomcat.websocket.WsSession.doClose(WsSession.java:498)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:322)\n###\n\nIn org.apache.tomcat.websocket.WsSession#sendCloseMessage, it doesn't catch IllegalStateException and close websocket channel: \n###java\n        try {\n            wsRemoteEndpoint.sendMessageBlock(Constants.OPCODE_CLOSE, msg, true);\n        } catch (IOException | WritePendingException e) {\n            // Failed to send close message. Close the socket and let the caller\n            // deal with the Exception\n            if (log.isDebugEnabled()) {\n                log.debug(sm.getString(\"wsSession.sendCloseFail\", id), e);\n            }\n            wsRemoteEndpoint.close();\n###\n\nAnd this session may cannot be closed again because state has been set to \"OUTPUT_CLOSED\".\n\nI think IllegalStateException should be caught in org.apache.tomcat.websocket.WsSession#sendCloseMessage or a better way to close session when timeout happens.",
    "comments": [
      "Created attachment 38141\nCaused by: java.lang.IllegalStateException: Concurrent write",
      "Comment on attachment 38141\nCaused by: java.lang.IllegalStateException: Concurrent write\n\n>\n>    Caused by: java.lang.IllegalStateException: Concurrent write operations are not permitted\n>\tat org.apache.tomcat.websocket.AsyncChannelWrapperSecure.write(AsyncChannelWrapperSecure.java:117)\n>\tat org.apache.tomcat.websocket.WsRemoteEndpointImplClient.doWrite(WsRemoteEndpointImplClient.java:62)\n>\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase$OutputBufferSendHandler.write(WsRemoteEndpointImplBase.java:893)\n>\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:506)\n>\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:311)\n>\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:259)\n>\tat org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:613)\n>\tat org.apache.tomcat.websocket.WsSession.doClose(WsSession.java:498)\n>\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:322)\n>\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendMessageBlock(WsRemoteEndpointImplBase.java:251)\n>\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendPartialString(WsRemoteEndpointImplBase.java:224)\n>\tat org.apache.tomcat.websocket.WsRemoteEndpointBasic.sendText(WsRemoteEndpointBasic.java:49)\n>\tat org.springframework.web.socket.adapter.standard.StandardWebSocketSession.sendTextMessage(StandardWebSocketSession.java:215)\n>\tat org.springframework.web.socket.adapter.AbstractWebSocketSession.sendMessage(AbstractWebSocketSession.java:106)\n>\tat org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession.sendInternal(WebSocketClientSockJsSession.java:121)\n>\tat org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.sendMessage(AbstractClientSockJsSession.java:162)",
      "Thanks for the report and the analysis.\n\nAfter reviewing the code, I think catching IllegalStateException is the way to handle this.\n\nFixed in:\n- 10.1.x for 10.1.0-M9 onwards\n- 10.0.x for 10.0.15 onwards\n- 9.0.x for 9.0.57 onwards\n- 8.5.x for 8.5.74 onwards",
      "(In reply to Mark Thomas from comment #3)\n> Thanks for the report and the analysis.\n> \n> After reviewing the code, I think catching IllegalStateException is the way\n> to handle this.\n> \n> Fixed in:\n> - 10.1.x for 10.1.0-M9 onwards\n> - 10.0.x for 10.0.15 onwards\n> - 9.0.x for 9.0.57 onwards\n> - 8.5.x for 8.5.74 onwards\n\nYes, I agree with you."
    ],
    "creation_ts": "2021-12-23T08:51:03Z",
    "fixes": [
      65763
    ]
  },
  {
    "id": 57252,
    "summary": "Custom error page is not used for an error that occurs asynchronously",
    "description": "Created attachment 32224\nSmall app to reproduce the problem\n\nIf an error is sent as part of some asynchronous processing, for example:\n\n@WebServlet(value = \"/async\", asyncSupported=true)\npublic class AsyncServlet extends HttpServlet {\n       \n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tfinal AsyncContext context = request.startAsync();\n\t\tcontext.start(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tresponse.sendError(500);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t}\n\t\t\t\tcontext.complete();\n\t\t\t}\n\t\t});\n\t}\n}\n\nTomcat 7.0.57 renders its default error page rather than the configured custom error page. The same behaviour is also exhibited in recent 8.0.x releases. It's perhaps worth noting that Tomcat 7.0.55 renders an entirely blank page in this scenario.\n\nMy expectation is that the custom error page is used and, FWIW, this is what Jetty does.\n\nI have attached a war that can be used to reproduce the problem. /sync can be used to confirm that the custom error page is working. /async will reproduce the problem described above.",
    "comments": [
      "FYI. I am currently working on this but my test cases have identified a further concurrency issue with the error handling that I am going to have to fix first.",
      "Proposed fix:\nhttps://github.com/markt-asf/tomcat/commit/5e195b2f06dba1be3f90b0a9d1f67604af905e47\n\nI'll commit this once the svn server returns to read/write",
      "Test case created and fix applied to trunk, 8.0.x (for 8.0.16) and 7.0.x for (7.0.58)."
    ],
    "creation_ts": "2014-11-24T15:00:26Z",
    "fixes": [
      57252
    ]
  },
  {
    "id": 69600,
    "summary": "Add ipv6 link-local and unique local addresses to the default internalProxies",
    "description": "The RemoteIpFilter and RemoteIpValve support plenty of local addresses for IPv4 by default but for IPv6 only the localhost ::1 address is supported.\n\n1. Per rfc4193 Unique Local IPv6 Unicast Adresses and\n2. per rfc4291 section 2.5.6 Link-Local IPv6 Unicast Addresses, \n\nthe IPv6 address spaces \n1. \"fe80::/10\" and \n2. \"fc00::/7\" \n\nshould be added to the default internal proxies.",
    "comments": [
      "Fixed in:\n- 11.0.x for 11.0.6 onwards\n- 10.1.x for 10.1.40 onwards\n-  9.0.x for  9.0.103 onwards"
    ],
    "creation_ts": "2025-02-27T17:01:11Z",
    "fixes": [
      69600
    ]
  },
  {
    "id": 65131,
    "summary": "OpenSSLEngine errors on a connection affect other connections",
    "description": "This issue was previously reported in https://bz.apache.org/bugzilla/show_bug.cgi?id=62054 but was discarded because it was not reproducible. However, I have been able to reproduce it.\n\nThe setup is:\ntomcat 9.0.34\nHTTPNIO connector, with OpenSSLEngine implementation\nopenssl 1.0.2u\n\nTo reproduce, configure a secure connector with a self-signed certificate.\n\nThen, in a loop, access the secure connector using curl, but ignore the self-signed certificate errors (-k), like this:\nfor i in {1..1000} ; do curl -q -k https://hostname >/dev/null 2>&1; echo $?; done\n\nThe exit code should always be zero if the connection is successful.\n\nWhile the test is running, access the same interface, but let curl fail the connection by letting it verify the certificate:\ncurl https://hostname\ncurl: (60) Peer's certificate issuer has been marked as not trusted by the user.\n\nThe test will start reporting connection errors (exit code 52). Run both in a tight loop to get many errors.\n\nThe following stack trace is visible in tomcat logs:\n\nFINE: OpenSSL error: [336462231] message: [error:140E0197:SSL routines:SSL_shutdown:shutdown while in init]\nFeb 08, 2021 11:41:19 AM org.apache.coyote.http11.Http11Processor service\nFINE: Error parsing HTTP request header\njavax.net.ssl.SSLException: error:140E0197:SSL routines:SSL_shutdown:shutdown while in init\n        at org.apache.tomcat.util.net.openssl.OpenSSLEngine.checkLastError(OpenSSLEngine.java:946)\n        at org.apache.tomcat.util.net.openssl.OpenSSLEngine.pendingReadableBytesInSSL(OpenSSLEngine.java:631)\n        at org.apache.tomcat.util.net.openssl.OpenSSLEngine.unwrap(OpenSSLEngine.java:558)\n        at javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:629)\n        at org.apache.tomcat.util.net.SecureNioChannel.read(SecureNioChannel.java:617)\n        at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.fillReadBuffer(NioEndpoint.java:1229)\n        at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.read(NioEndpoint.java:1141)\n        at org.apache.coyote.http11.Http11InputBuffer.fill(Http11InputBuffer.java:761)\n        at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:356)\n        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:260)\n        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n        at com.broadsoft.xsp.platform.InstrumentedExecutor$Tracker.run(InstrumentedExecutor.java:413)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n        at java.lang.Thread.run(Thread.java:748)\n\n\nMy feeling is that this is related to the same problem that led to this fix: https://github.com/apache/tomcat/commit/ebab25a3576a315ca676db7ce2366e53f9dcf311\nIt looks like, in this case, there are multiple errors waiting in the openssl error queue, and just reading one error is not sufficient to clear the queue.\nTherefore, SSL errors on a connection are permitted to propagate to other connections as long as they are processed on the same thread.\n\n\nAs an aside, I also noticed the following NPE stacktrace in the logs, but I'm not sure if it's related. It may be a different scenario that caused it. I think it's related to SecureNioChannel.processSNI returning/throwing before creating the SSLEngine.\n\nFeb 08, 2021 11:48:00 AM org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper doClose\nSEVERE: Failed to close channel\njava.lang.NullPointerException\n        at org.apache.tomcat.util.net.SecureNioChannel.close(SecureNioChannel.java:534)\n        at org.apache.tomcat.util.net.SecureNioChannel.close(SecureNioChannel.java:560)\n        at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doClose(NioEndpoint.java:1172)\n        at org.apache.tomcat.util.net.SocketWrapperBase.close(SocketWrapperBase.java:396)\n        at org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(NioEndpoint.java:684)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n        at com.broadsoft.xsp.platform.InstrumentedExecutor$Tracker.run(InstrumentedExecutor.java:413)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n        at java.lang.Thread.run(Thread.java:748)",
    "comments": [
      "Ok, I can see the error check could still be a bit shaky, a loop could possibly be used in clearLastError (documentation of the OpenSSL API is here: https://www.openssl.org/docs/manmaster/man3/ERR_get_error.html ). Not sure why clearLastError is called in unwrap however, maybe Mark can comment on that one. The TODO is accurate: ideally every SSL call should check the error.\n\nBTW, I doubt this reproduces anything, ab works just fine, so curl isn't going to be doing anything special beyond that.\n\nThe NPE in SecureNioChannel.close is possible, it would be a cosmetic error but the code could be more defensive.",
      "I cannot reproduce the issue, please test with the most recent 9.0 release.\n\nSince this better matches the OpenSSL documentation, I am ok conceptually to modify clearLastError to do:\nwhile (SSL.getLastErrorNumber() != SSL.SSL_ERROR_NONE);",
      "I have reproduced the problem with tomcat version 9.0.43:\n\n\nFeb 11, 2021 11:49:43 AM org.apache.catalina.core.AprLifecycleListener lifecycleEvent\nINFO: Loaded Apache Tomcat Native library [1.2.26] using APR version [1.4.8].\nFeb 11, 2021 11:49:43 AM org.apache.catalina.core.AprLifecycleListener lifecycleEvent\nINFO: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].\nFeb 11, 2021 11:49:43 AM org.apache.catalina.core.AprLifecycleListener lifecycleEvent\nINFO: APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]\nFeb 11, 2021 11:49:43 AM org.apache.catalina.core.AprLifecycleListener initializeSSL\nINFO: OpenSSL successfully initialized [OpenSSL 1.0.2u  20 Dec 2019]\n\n....\n\n\nFeb 11, 2021 12:05:01 PM org.apache.tomcat.util.net.openssl.OpenSSLEngine checkLastError\nFINE: OpenSSL error: [336462231] message: [error:140E0197:SSL routines:SSL_shutdown:shutdown while in init]\nFeb 11, 2021 12:05:01 PM org.apache.coyote.http11.Http11Processor service\nFINE: Error parsing HTTP request header\njavax.net.ssl.SSLException: error:140E0197:SSL routines:SSL_shutdown:shutdown while in init\n        at org.apache.tomcat.util.net.openssl.OpenSSLEngine.checkLastError(OpenSSLEngine.java:951)\n        at org.apache.tomcat.util.net.openssl.OpenSSLEngine.pendingReadableBytesInSSL(OpenSSLEngine.java:636)\n        at org.apache.tomcat.util.net.openssl.OpenSSLEngine.unwrap(OpenSSLEngine.java:558)\n        at javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:629)\n        at org.apache.tomcat.util.net.SecureNioChannel.read(SecureNioChannel.java:637)\n        at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.fillReadBuffer(NioEndpoint.java:1320)\n        at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.read(NioEndpoint.java:1232)\n        at org.apache.coyote.http11.Http11InputBuffer.fill(Http11InputBuffer.java:791)\n        at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:359)\n        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:261)\n        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:887)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1684)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n        at com.broadsoft.xsp.platform.InstrumentedExecutor$Tracker.run(InstrumentedExecutor.java:413)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n        at java.lang.Thread.run(Thread.java:748)",
      "I can't recreate this using the provided test case, Tomcat Native 1.2.26 and the latest OpenSSL 1.1.1 source code.\n\nI'll note that Tomcat 1.2.26 won't compile with OpenSSL 1.0.2 so I do wonder exactly what versions were in used in the tests described here.\n\nI'll also note that OpenSSL 1.0.2 is no longer supported.\n\nPlease retest with the latest OpenSSL 1.1.1 release.",
      "(In reply to Mark Thomas from comment #4)\n> I can't recreate this using the provided test case, Tomcat Native 1.2.26 and\n> the latest OpenSSL 1.1.1 source code.\n> \n> I'll note that Tomcat 1.2.26 won't compile with OpenSSL 1.0.2 so I do wonder\n> exactly what versions were in used in the tests described here.\n> \n> I'll also note that OpenSSL 1.0.2 is no longer supported.\n> \n> Please retest with the latest OpenSSL 1.1.1 release.\n\nShould I still replace clearLastError with this ?\n\n    private static void clearLastError() {\n        while (SSL.getLastErrorNumber() != SSL.SSL_ERROR_NONE);\n    }\n\nThis does not seem unreasonable given the docs ...",
      "Yes, the OP is correct that the clearLastError call in unwrap is there is part of this fix:\nhttps://github.com/apache/tomcat/commit/ebab25\n\nI agree that using a loop looks to be the right approach here.",
      "Ok, so clearLastError will now align with the OpenSSL documentation using the loop. The change will be in 10.0.3, 9.0.44 and 8.5.64 [along with the NPE fix]. We could not reproduce, so you will have to verify this is fixed.",
      "Thanks, Remy. I'll update this bug report when I get the chance to test the latest tomcat version."
    ],
    "creation_ts": "2021-02-08T17:29:16Z",
    "fixes": [
      65131
    ]
  },
  {
    "id": 58660,
    "summary": "Different redirect behaviour when accessing path without a /",
    "description": "Hi,\n\nTomcat 8.0.29 changes the behaviour of requests for paths without a trailing slash. It seems to be limited to context roots, e.g. /examples instead of /examples/servlets.\n\nWhen calling /examples on 8.0.28 it responds with a 302 redirecting to /examples/, but 8.0.29 responds with a 200.\n\nI would say that people should be more careful with their URL:s, but this change in default behaviour is probably going to cause problems. It is probably not correct to respond with /examples/index.html, when accessing /examples. This changes any relative paths on a website, since there will be a / missing. This may indeed be verified by clicking any of the links in the 8.0.29 /examples response HTML. Clicking them causes the browser to fetch e.g. /servlets instead of /examples/servlets.\n\nAccessing /examples/servlets however causes a 302 to /examples/servlets/, just like 8.0.28.\n\n\nTo reproduce:\n\n1. Download Tomcat 8.0.28 and 8.0.29\n\n% wget http://archive.apache.org/dist/tomcat/tomcat-8/v8.0.28/bin/apache-tomcat-8.0.28.zip\n% wget http://apache.mirrors.spacedump.net/tomcat/tomcat-8/v8.0.29/bin/apache-tomcat-8.0.29.zip\n\nUnzip the two archives.\n\n2. Access /examples for Tomcat 8.0.28\n\n% curl -vso /dev/null http://localhost:8080/examples\n* STATE: INIT => CONNECT handle 0x6000572f0; line 1090 (connection #-5000)\n* Added connection 0. The cache now contains 1 members\n*   Trying ::1...\n* STATE: CONNECT => WAITCONNECT handle 0x6000572f0; line 1143 (connection #0)\n* Connected to localhost (::1) port 8080 (#0)\n* STATE: WAITCONNECT => SENDPROTOCONNECT handle 0x6000572f0; line 1240 (connection #0)\n* STATE: SENDPROTOCONNECT => DO handle 0x6000572f0; line 1258 (connection #0)\n> GET /examples HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.45.0\n> Accept: */*\n>\n* STATE: DO => DO_DONE handle 0x6000572f0; line 1337 (connection #0)\n* STATE: DO_DONE => WAITPERFORM handle 0x6000572f0; line 1464 (connection #0)\n* STATE: WAITPERFORM => PERFORM handle 0x6000572f0; line 1474 (connection #0)\n* HTTP 1.1 or later with persistent connection, pipelining supported\n< HTTP/1.1 302 Found\n* Server Apache-Coyote/1.1 is not blacklisted\n< Server: Apache-Coyote/1.1\n< Location: http://localhost:8080/examples/\n< Transfer-Encoding: chunked\n< Date: Fri, 27 Nov 2015 08:36:11 GMT\n<\n{ [5 bytes data]\n* STATE: PERFORM => DONE handle 0x6000572f0; line 1632 (connection #0)\n* Curl_done\n* Connection #0 to host localhost left intact\n* Expire cleared\n\n\n3. Access /examples for Tomcat 8.0.29\n\n* STATE: INIT => CONNECT handle 0x6000572f0; line 1090 (connection #-5000)\n* Added connection 0. The cache now contains 1 members\n*   Trying ::1...\n* STATE: CONNECT => WAITCONNECT handle 0x6000572f0; line 1143 (connection #0)\n* Connected to localhost (::1) port 8080 (#0)\n* STATE: WAITCONNECT => SENDPROTOCONNECT handle 0x6000572f0; line 1240 (connection #0)\n* STATE: SENDPROTOCONNECT => DO handle 0x6000572f0; line 1258 (connection #0)\n> GET /examples HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.45.0\n> Accept: */*\n>\n* STATE: DO => DO_DONE handle 0x6000572f0; line 1337 (connection #0)\n* STATE: DO_DONE => WAITPERFORM handle 0x6000572f0; line 1464 (connection #0)\n* STATE: WAITPERFORM => PERFORM handle 0x6000572f0; line 1474 (connection #0)\n* HTTP 1.1 or later with persistent connection, pipelining supported\n< HTTP/1.1 200 OK\n* Server Apache-Coyote/1.1 is not blacklisted\n< Server: Apache-Coyote/1.1\n< Accept-Ranges: bytes\n< ETag: W/\"1156-1448007578000\"\n< Last-Modified: Fri, 20 Nov 2015 08:19:38 GMT\n< Content-Type: text/html\n< Content-Length: 1156\n< Date: Fri, 27 Nov 2015 08:36:38 GMT\n<\n{ [1156 bytes data]\n* STATE: PERFORM => DONE handle 0x6000572f0; line 1632 (connection #0)\n* Curl_done\n* Connection #0 to host localhost left intact\n\nCheers, \nPer Lewau",
    "comments": [
      "Read the change log.",
      "The change in where processing takes place is intentional but the end result should have been the same. Need to look at what is going on for the context root.",
      "This is reproducible in Tomcat 7.0.66 (release candidate) as well.",
      "Tomcat 8.0.29 - Workaround:\nIn conf/context.xml set the following attribute:\n<Context mapperContextRootRedirectEnabled=\"true\">\n\n\nTomcat 7.0.66 (release candidate) - The workaround does not work.\n\nThe cause is that MapperListener calls wrong (deprecated) version of mapper.addContextVersion() method and does not pass the flags to the Mapper.",
      "Specifically for the context root, the default behavior could be to redirect in the mapper (mapperContextRootRedirectEnabled could be true).",
      "I'm neutral on the default behaviour for context root redirects but either way the current issue needs to be fixed. I'm currently working on this.",
      "Well, I messed up as well, since I was certain this was fine (the code change in the default servlet should have redirected the root path as far as I am concerned), although my own patch never removed the \"\" -> \"/\" redirect in the mapper of course.",
      "One more place that fails - a FormAuthenticator if it is configured to a web application as a whole and if its authentication form uses a relative URL to j_security_check, like the examples app does.\n\n8.0.29\n1. In webapps/examples/WEB-INF/web.xml\nIn <security-constraint> elements (there are 2 of them) replace \n         <url-pattern>/jsp/security/protected/*</url-pattern>\nwith\n         <url-pattern>/*</url-pattern>\n\n2. In conf/tomcat-users.xml uncomment test users.\n\n3. Start Tomcat\n\n4. Go to http://localhost:8080/examples\n\nA login form is displayed.\n\n5. Type in user name and password (as configured in conf/tomcat-users.xml)\n\n6. The login form sends POST request to\nhttp://localhost:8080/j_security_check;jsessionid=<...>\n\nThis fails with 404, because request goes to a wrong web application (ROOT, not examples).\n\n\nOne more area of concern: anything that sets a cookie before a redirect happens. See \"sessionCookiePathUsesTrailingSlash\" option on Context. \n\n(FormAuthenticator is an example here as well, but as I wrote above there is a more serious issue with it.)",
      "Well, since we think everything else works, then the easiest/safest is to unconditionally add back the root path redirect in the mapper.",
      "You say that just as I think I have put together a fix. Happy to change the default but I'd like to keep the option of having the Default Servlet do the redirect",
      "The issue is probably that the mapper rewrites (for mapping purposes I think) a \"no servlet path\" as \"/\", and the default servlet has no way to know this happened. If I remove this rewrite code, it doesn't work any better though.\n\nIf you make the root path redirection in default servlet completely functional, then I'd say it's fine to keep the option (even enabled by default), but otherwise ...\n\nIf it is acked avoiding the root path redirect in the mapper is not something mandatory, it should be possible to add it back and remove the configuration option for now to resolve the regression, and work on it for the next release.",
      "That is exactly the issue I have been working through. I think I have it solved for the Default Servlet. I'm currently working on issue with FORM login at the context root that Konstantin highlighted.",
      "I've committed my first pass at a fix for this to 9.0.x. Please test and I'll work on a 8.0.x release as soon as we are happy with this.\n\nAt this point I'm still neutral on what the default should be for mapperContextRootRedirectEnabled. I think Remy is in favor of it being true. Any other views?",
      "Testing looks ok (but I probably tested the same things you did). I would have preferred not adding the root path redirect flag though.",
      "I think there are valid use cases for the flag so I'd like to keep it but I'd be happy to change the default.\n\nI found a few issues with my first pass which I have now fixed. I'm currently thinking more testing now and over the weekend with a back-port to 8.0.x towards the end of the weekend and tag on Monday.",
      "*** Bug 58665 has been marked as a duplicate of this bug. ***",
      "Fixed in 9.0.x (for 9.0.0.M2 onwards), 8.0.x (for 8.0.30 onwards), 7.0.x (for 7.0.67 onwards) and 6.0.x (for 6.0.45 onwards).",
      "Hi, this defect is still reproducible in 8.0.30. Is it really fixed or should I use mapperContextRootRedirectEnabled parameter? It is unclear from dev discussion about solution.",
      "This issue is fixed in 8.0.30\n\nBugzilla is not a support. If you have questions, please use the users' mailing list. If that discussion identifies a further regression then this can be re-opened.",
      "I've just reproduced following case in 8.0.30 (8.0.28 is ok):\n\nSteps:\n1. Download Tomcat installation\n2. Open webapps/examples/WEB-INF/web.xml folder\n3. Change lines:\n\t<servlet-mapping>\n        <servlet-name>ChatServlet</servlet-name>\n        <url-pattern>/servlets/chat/chat</url-pattern>\n    </servlet-mapping>\n\t\n\tto\n\t\n\t<servlet-mapping>\n        <servlet-name>ChatServlet</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n5. Open http://localhost:8080/examples?key=param \n\nExpected result:\nServer returns response with status 302 to redirect user to http://localhost:8080/examples/?key=param and then to http://localhost:8080/examples/login.jsp\n\nActual result:\nServer returns response with status 302 to redirect user to http://localhost:8080/login.jsp",
      "That behaviour is expected in 8.0.30. The ChatServlet isn't written to handle reuqests to the root of the context that don't have a trailing slash. Whether it should or not is open to debate.\n\nThe default for mapperContextRootRedirectEnabled has changed for back to the pre 8.0.29 behaviour for 8.0.31 onward.",
      "(In reply to Mark Thomas from comment #21)\n> That behaviour is expected in 8.0.30. The ChatServlet isn't written to\n> handle reuqests to the root of the context that don't have a trailing slash.\n> Whether it should or not is open to debate.\n> \n> The default for mapperContextRootRedirectEnabled has changed for back to the\n> pre 8.0.29 behaviour for 8.0.31 onward.\n\nOk, so I'll just set to \"true\" mapperContextRootRedirectEnabled and mapperDirectoryRedirectEnabled, to restore old behavior and not bother about default values.\n\nBTW, in changelog (https://tomcat.apache.org/tomcat-8.0-doc/changelog.html) it's said:\n\"Move the functionality that provides redirects for context roots and directories where a trailing / is added from the Mapper to the DefaultServlet.\"\n\nAnd in \"context config\" (https://tomcat.apache.org/tomcat-8.0-doc/config/context.html) the description of mapperContextRootRedirectEnabled is following:\n\"If enabled, requests for a web application context root will be redirected (adding a trailing slash) if necessary by the Mapper rather than the default Servlet.\".\n\nI suppose, you need to update \"context config\" given that redirect functionality is now only in DefaultServlet.",
      "Hi I saw the issue is marked as fixed in 7.0.67/8.0.30 changelog. However as I tried to set mapperContextRootRedirectEnabled=true (in the latest version 7, 8.0.73) to restore the behavior in the previous releases, the url without a trailing slash still doesn't work (404). So I would like to check if anyone find the parameter mapperContextRootRedirectEnabled really works."
    ],
    "creation_ts": "2015-11-27T09:02:31Z",
    "fixes": [
      58660
    ]
  },
  {
    "id": 49657,
    "summary": "In CGI Mode, \"executable\" full path with spaces does not work",
    "description": "In CGI mode, if you specify a full path for a command, containing blank, \nit does not work\n\nexample :\n       <init-param>\n            <param-name>executable</param-name>\n            <param-value>c:\\Tools\\mycommand</param-value>\n        </init-param>\nis OK but\n\n       <init-param>\n            <param-name>executable</param-name>\n            <param-value>c:\\Program Files\\mycommand</param-value>\n          </init-param>\ndoes not work well with error like\n\n\n7 juil. 2010 15:51:52 org.apache.catalina.core.ApplicationContext log\nINFO: cgi: runCGI (stderr):'C:\\Program' is not recognized as an internal or external command,\n\nNeed probably to add \" in for cgiExcecutable in CGIServlet.java,  like it is done\nfor CmdAndArgs",
    "comments": [
      "Fixed in trunk and will be included in 7.0.3 onwards.\n\nIt has also been proposed for backport to 6.0.x",
      "This has been fixed in 6.0.x and will be included in 6.0.30 onwards."
    ],
    "creation_ts": "2010-07-28T03:45:08Z",
    "fixes": [
      49657
    ]
  },
  {
    "id": 55331,
    "summary": "Dispatch after async timeout fails",
    "description": "With Tomcat 7.0.42 and the NIO connector, calling AsyncContext.dispatch() from an onTimeout() handler fails with this error message:\n\njul 31, 2013 1:40:30 PM org.apache.coyote.AbstractProtocol$AbstractConnectionHandler process\nSEVERE: Error reading request, ignored\njava.lang.IllegalStateException: Calling [asyncPostProcess()] is not valid for a request with Async state [STARTED]\n        at org.apache.coyote.AsyncStateMachine.asyncPostProcess(AsyncStateMachine.java:204)\n        at org.apache.coyote.AbstractProcessor.asyncPostProcess(AbstractProcessor.java:116)\n        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:593)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1690)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:724)\n\n\nTest code:\n\npublic class AsyncServlet extends HttpServlet {\n\n  protected void doGet(final HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    if (request.isAsyncStarted()) {\n      response.getWriter().write(\"asyncResult=\" + request.getAttribute(\"asyncResult\"));\n    }\n    else {\n      final AsyncContext asyncContext = request.startAsync(request, response);\n\n      asyncContext.addListener(new AsyncListener() {\n        public void onTimeout(AsyncEvent event) throws IOException {\n            request.setAttribute(\"asyncResult\", \"timeout\\n\");\n            asyncContext.dispatch();\n        }\n        public void onStartAsync(AsyncEvent event) throws IOException {}\n        public void onError(AsyncEvent event) throws IOException {}\n        public void onComplete(AsyncEvent event) throws IOException {}\n      });\n\n      asyncContext.setTimeout(5000L);\n    }\n  }\n\n}\n\n\nThis seems somewhat similar to the (ancient) report #50308.",
    "comments": [
      "Thanks for the report. This has been fixed in trunk and 7.0.x and will be included in 7.0.43 onwards.\n\nNote that the example servlet provided above will trigger an infinite loop as once the dispatch occurs, request.isAsyncStarted() will return false."
    ],
    "creation_ts": "2013-07-31T11:50:09Z",
    "fixes": [
      55331
    ]
  },
  {
    "id": 65940,
    "summary": "DefaultInstanceManager.destroyInstance can lead to a NullPointerException",
    "description": "On our Tomcat instance, we noticed the following stack trace:\n\n\n\n19:46:49.556 [Catalina-utility-12] [ - ] ERROR o.a.catalina.core.StandardWrapper - InstanceManager.destroy() pour le Servlet [AtmosphereServlet] a renvoy\u00e9 une exception\njava.lang.NullPointerException: null\n        at org.apache.catalina.core.DefaultInstanceManager.destroyInstance(DefaultInstanceManager.java:196)\n        at org.apache.catalina.core.StandardWrapper.unload(StandardWrapper.java:1343)\n        at org.apache.catalina.core.StandardWrapper.stopInternal(StandardWrapper.java:1627)\n        at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:257)\n        at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5465)\n        at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:257)\n        at org.apache.catalina.core.StandardContext.reload(StandardContext.java:3811)\n        at org.apache.catalina.startup.HostConfig.reload(HostConfig.java:1443)\n        at org.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1415)\n        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1654)\n        at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:315)\n        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\n        at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1162)\n        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1365)\n        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1369)\n        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1347)\n        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n        at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)\n        at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)\n        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.base/java.lang.Thread.run(Thread.java:829)\n\n\nhttps://github.com/apache/tomcat/blob/662cc9171c22ac790532d38a2b59990faaa7b971/java/org/apache/catalina/core/DefaultInstanceManager.java#L196 gives this :\n\n    @Override\n    public void destroyInstance(Object instance) throws IllegalAccessException,\n            InvocationTargetException {\n        if (!ignoreAnnotations) {\n            preDestroy(instance, instance.getClass()); // NPE on this line\n        }\n    }\n\nSo I guess parameter \"instance\" is null here.",
    "comments": [
      "Thanks for the report.\n\nFixed in:\n- 10.1.x for 10.1.0-M12 onwards\n- 10.0.x for 10.0.18 onwards\n- 9.0.x for 9.0.60 onwards\n- 8.5.x for 8.5.77 onwards",
      "Thank you !"
    ],
    "creation_ts": "2022-03-07T21:32:53Z",
    "fixes": [
      65940
    ]
  },
  {
    "id": 52405,
    "summary": "Update to Servlet 3.0 Rev A",
    "description": "The list of changes is here:\nhttp://jcp.org/aboutJava/communityprocess/maintenance/jsr315/servlet3-mr-reva.html\nThere are 20 changes that need to be checked / made.",
    "comments": [
      "No changes required for items:\n1, 4, 16-19\n\nChanges required and applied to trunk and 7.0.x for:\n2, 3\n\nNot yet assessed\n5-15, 20.",
      "Changes required for and applied to trunk and 7.0.x for item 5.\n\nItems 6-15, 20 still be to assessed.",
      "Item 6 does not appear to have resulted in a change to section 8.2.2 so no changes required.\n\nItem 7. Tomcat 7 already processes annotations prior to merging web-fragments so no changes required.\n\nItems 8 & 9. Tomcat 7 already merges fragments and and main web.xml this way so no changes required.\n\nItem 10. Tomcat 7 already merges servlet mappings this way so no changes required.\n\nItem 11. Tomcat 7 already merges filter mappings this way so no changes required.\n\nNot yet assessed:\n12-15, 20",
      "Changes required and applied to trunk and 7.0.x for item 12.\n\nItems 13-15, 20 still to be assessed.",
      "Changes required and applied to trunk and 7.0.x for item 12.\n\nItems 14-15, 20 still to be assessed.",
      "Items 14 and 15: no changes required.\n\nOnly item 20 left to check.",
      "Changes made for item 20.\n\nAll items now reviewed and changes made were required."
    ],
    "creation_ts": "2011-12-31T14:20:25Z",
    "fixes": [
      52405
    ]
  },
  {
    "id": 66535,
    "summary": "FarmWarDeployer will fail to deploy a WAR file when maxvalidtime is less than the time it takes to transfer",
    "description": "We have been tracking down an issue where a cluster using FarmWebDeployer would only deploy to some nodes, and on others the war file would be written to the tempdir, but would fail to deploy. \n\nThe destination tempdir war file would eventually become 0 bytes on the failed nodes, with no log entries to explain why. \n\nAfter extensive testing, it was determined that maxValidTime is not a setting relevant to idle time or files left open but not being written to, but is actually a time limit on the amount of time a FileMessageFactory file can be open at all.\n\nThe file will be immediately unlinked and appear as 0 bytes in the tempdir location as soon as the maxvalidtime has run out, regardless of the fact that the deployer is actively writing to it.",
    "comments": [
      "Although this may be 'intended' behavior, the code would lead me to believe that the developers intended this to be a check on whether the file was 'valid' and whether it had been 'idle' for some time.\n\nI assume this because of the terminology used in the code, which uses a function of isValid to call the check and even includes a reference to timeIdle. Although as far as I can see there is nothing actually considered to be 'idle' here. This is called by the main background process thread in its loop. \n\n    public boolean isValid() {\n        if (maxValidTime > 0) {\n            long timeNow = System.currentTimeMillis();\n            int timeIdle = (int) ((timeNow - creationTime) / 1000L);\n            if (timeIdle > maxValidTime) {\n                cleanup();\n                if (file.exists() && !file.delete()) {\n                    log.warn(sm.getString(\"fileMessageFactory.deleteFail\", file));\n                }\n                return false;\n            }\n        }\n        return true;\n    }\n\nwhich is called by\n\n    protected void removeInvalidFileFactories() {\n        String[] fileNames = fileFactories.keySet().toArray(new String[0]);\n        for (String fileName : fileNames) {\n            FileMessageFactory factory = fileFactories.get(fileName);\n            if (!factory.isValid()) {\n                fileFactories.remove(fileName);\n            }\n        }\n    }\n\nwhich is called by\n\n    public void backgroundProcess() {\n        if (started) {\n            if (watchEnabled) {\n                count = (count + 1) % processDeployFrequency;\n                if (count == 0) {\n                    watcher.check();\n                }\n            }\n            removeInvalidFileFactories();\n        }\n\n    }",
      "If this is intended behavior, the documentation should be updated to explain that the configuration setting has a bearing on the amount of time it may take to transfer WAR files over a slow network, or many nodes, etc. That it is NOT an idle timeout but a time limit on how long the temporary war file can exist, even while being written to.",
      "This is the commit that introduced maxValidTime\n\nhttps://github.com/apache/tomcat/commit/4364cbc8d1f5cc6dbe9be0132d92e593ef67346c\n\nHaving looked at the commit, I think the intention could be taken to be either possibility. On balance, it does seem odd to remove the FileMessageFactory while messages are still being written. Therefore, I intend to look at the possibility of making this truly an idle time with the code and documentation updated/clarified accordingly.",
      "Fixed in:\n- 11.0.x for 11.0.0-M5 onwards\n- 10.1.x for 10.1.8 onwards\n-  9.0.x for  9.0.74 onwards\n-  8.5.x for  8.5.88 onwards"
    ],
    "creation_ts": "2023-03-20T17:03:44Z",
    "fixes": [
      66535
    ]
  },
  {
    "id": 67667,
    "summary": "TLSCertificateReloadListener prints unreadable rendering of X509Certificate#getNotAfter()",
    "description": "Output: 10-Oct-2023 19:52:21.881 WARNUNG [Catalina-utility-2] org.apache.catalina.security.TLSCertificateReloadListener.checkCertificatesForRenewal [Connector[\"https-openssl-apr-30002\"]], TLS virtual host [_default_] with name [CN=localhost,OU=IN IT IN,O=Siemens,L=Berlin,ST=Berlin,C=DE] that expires on [10/15/23 7:20 PM] is overdue for renewal\n\nThis date isn't readable for international audience and an insult to the developer's/admin's eye.\n\nThe easiest solution is to do \"expiringCertificate.getNotAfter().toInstant()\", but Tomcat 8.5 runs on 7 only, alternatively, we use SimpleDateFormat/ConcurrentDateFormat with \"yyyy-MM-dd'T'HH:mm:ssXXX\".\n\nReadable output:\n10-Oct-2023 20:45:01.472 WARNUNG [Catalina-utility-1] org.apache.catalina.security.TLSCertificateReloadListener.checkCertificatesForRenewal [Connector[\"https-openssl-apr-30002\"]], TLS virtual host [_default_] with name [CN=localhost, OU=IN IT IN, O=Siemens, L=Berlin, ST=Berlin, C=DE] that expires on [2023-10-15T17:20:55Z] is overdue for renewal\n\nIf no one objects, I'd commit and push the SDF to all branches.",
    "comments": [
      "Fixed in:\n- main for 11.0.0-M13 and onwards\n- 10.1.x for 10.1.16 and onwards\n- 9.0.x  for 9.0.83 and onwards\n- 8.5.x for 8.5.96 and onwards"
    ],
    "creation_ts": "2023-10-10T18:48:17Z",
    "fixes": [
      67667
    ]
  },
  {
    "id": 53257,
    "summary": "getLastModified() of compilation context returns negative number",
    "description": "Created attachment 28802\nfull stacktrace\n\nJasper Compiler has an issue on compiling JSPs if they are contained in a folder like the following example: /a+b/test.jsp. The plus charachter seems to break \n the org.apache.jasper.JspCompilationContext#getLastModified() method, because it returns -1 every time:\n\njava.lang.IllegalArgumentException: Negative time\n\tjava.io.File.setLastModified(File.java:1258)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:376)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:353)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:340)\n\torg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:644)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:358)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:389)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:333)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n\t*******************************************************\n\t*******************************************************\n\tnet.sf.ehcache.constructs.web.filter.GzipFilter.doFilter(GzipFilter.java:81)\n\tnet.sf.ehcache.constructs.web.filter.Filter.doFilter(Filter.java:92)\n\torg.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)\n\torg.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)\n\nSome details:\n - First I suspected URIEncoding=\"utf-8\" in the Connector, but removing the configuration didn't fix the bug\n - The same bug occurs on my developing machine (Windows 7, NTFS, Apache Tomcat 7.0.22)\n - On a other customer machine the same example as above worked fine! (Any Linux Distribution, Apache Tomcat 7.0.19)\n - By the way I also tried the right URI-Encoding: http://.../a%2Bb/test.jsp\n\nPlease find attached the full stack trace\n\nBest Regards\nA. Etzlstorfer",
    "comments": [
      "Confirmed, with 7.0.x built 2012-05-13.\n\nE.g. in examples webapp rename\nwebapps\\examples\\jsp\\jsp2\\el\\basic-arithmetic.jsp \ninto\nwebapps\\examples\\jsp\\jsp2\\el\\basic+arithmetic.jsp \n\nTrying to access it fails\nhttp://localhost:8080/examples/jsp/jsp2/el/basic+arithmetic.jsp\n[[[\njava.lang.IllegalArgumentException: Negative time\n\tjava.io.File.setLastModified(File.java:1258)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:376)\n]]]",
      "To determine the file date Compiler class calls JspCompilationContext#getLastModified(String resource)\nwhere in my example the resource value is\n'/jsp/jsp2/el/basic+arithmetic.jsp'\n\nIt calls some method that converts it into URL,\n'jndi:/localhost/examples/jsp/jsp2/el/basic+arithmetic.jsp'\n\nIt opens url connection from this URL (implemented by DirContextUrlConnection), then calls methods on it, which result in calling DirContextUrlConnection#connect().\n\n\nThe problem is in the following line in o.a.naming.resource.DirContextUrlConnection#connect():\n\n160        path = URLDecoder.decode(path, \"UTF-8\");\n\nThis call was added in r1152593 to address bug 51584.\n\nThere are two problems with the line 160 here.\n1) The JRE method called here decodes '+' as ' '. That would be correct in a query string or in POST body, but here (in a path) it is not correct.\n\n2) The decode call itself here is wrong. To demonstrate, create one more copy of that sample jsp under the following name: \"basic%abarithmetic.jsp\"\n\nNow let's try accessing\nhttp://localhost:8080/examples/jsp/jsp2/el/basic%2Barithmetic.jsp\nhttp://localhost:8080/examples/jsp/jsp2/el/basic%25abarithmetic.jsp\n\nIn JspContext#getLastModified(String resource) the value of resource argument will be\n'/jsp/jsp2/el/basic+arithmetic.jsp'\n'/jsp/jsp2/el/basic%abarithmetic.jsp'\n\nThe URLDecoder.decode() call will decode the above paths one more time, which is wrong.",
      "Conversion of string -> URL is performed via a call to ServletContext.getResource(path).\n\nI have some trouble understanding whether ServletContext API operates on urlencoded on non-urlencoded paths.\n\nMy point of view is that argument of ServletContext.getResource() and the paths returned by ServletContext.getResourcePaths() are just file system paths and they should not be urlencoded.\n\n\nFrom the above it follows that method\no.a.catalina.core.ApplicationContext#getResource(String) that returns\n\n                return new URL\n                    (\"jndi\", \"\", 0, getJNDIUri(hostName, fullPath),\n                     new DirContextURLStreamHandler(resources));\n\nis responsible to perform urlencoding of the path. The docs for java.net.URL say that \"The URL class does not itself encode or decode any URL components according to the escaping mechanism defined in RFC2396.\" So it should urlencode the path before constructing the URL. \nMaybe use new URI(.,.,.,.,.,.,).toURL(); here, as URI class handles encoding.\n\n\nI think that JspCompilationContext methods such as #getResource(String), #getLastModified(String) should also operate on non-urlencoded strings, like ServletContext does. (That is what they already do today. I am just clarifying my point of view).\n\n\nThere is method DirContextURLConnection#list(). I do not see it called anywhere besides o.a.c.startup.ContextConfig#processAnnotationsJndi(), so it is like our internal API. It returns url-encoded paths (as modified by 1152593). It looks OK with the only place where it is used (and this API is not related to ServletContext.getResourcePaths()), but needs to be documented.\n\n\n(- BTW, in JspContext#getResource(String) there is\n306   result = context.getResource(canonicalURI(res));\n\nThe \"canonicalURI(res)\" call does not hurt, but it seems excessive because ApplicationContext#getResource(String) will call RequestUtil.normalize() on its argument, which does effectively the same.\n)",
      "(In reply to comment #3)\n> Conversion of string -> URL is performed via a call to\n> ServletContext.getResource(path).\n> \n> I have some trouble understanding whether ServletContext API operates on\n> urlencoded on non-urlencoded paths.\n> \n> My point of view is that argument of ServletContext.getResource() and the\n> paths returned by ServletContext.getResourcePaths() are just file system\n> paths and they should not be urlencoded.\n\nHaving looked at the Javadoc for ServletContext.getResource() I have the opposite view. Since the URL returned is meant to be independent of where the resource is located, then it can't be a file system path. It is a URL and as such needs to be encoded. It could easily be using the http scheme. I haven't yet checked the rest of the spec for language that supports or undermines that view. That job is next.\n\n> From the above it follows that method\n> o.a.catalina.core.ApplicationContext#getResource(String) that returns\n> \n>                 return new URL\n>                     (\"jndi\", \"\", 0, getJNDIUri(hostName, fullPath),\n>                      new DirContextURLStreamHandler(resources));\n> \n> is responsible to perform urlencoding of the path. The docs for java.net.URL\n> say that \"The URL class does not itself encode or decode any URL components\n> according to the escaping mechanism defined in RFC2396.\" So it should\n> urlencode the path before constructing the URL. \n> Maybe use new URI(.,.,.,.,.,.,).toURL(); here, as URI class handles encoding.\n\nThat I do agree with, although I worry about what it might break.\n\n> I think that JspCompilationContext methods such as #getResource(String),\n> #getLastModified(String) should also operate on non-urlencoded strings, like\n> ServletContext does. (That is what they already do today. I am just\n> clarifying my point of view).\n\nNot sure on this one. I suspect that these may also need to be encoded to handle all the edge cases.\n\n> There is method DirContextURLConnection#list(). I do not see it called\n> anywhere besides o.a.c.startup.ContextConfig#processAnnotationsJndi(), so it\n> is like our internal API. It returns url-encoded paths (as modified by\n> 1152593). It looks OK with the only place where it is used (and this API is\n> not related to ServletContext.getResourcePaths()), but needs to be\n> documented.\n\nWhatever is decided, more documentation is almost certain to be helpful to those looking at this code in a few years time.\n\n> (- BTW, in JspContext#getResource(String) there is\n> 306   result = context.getResource(canonicalURI(res));\n> \n> The \"canonicalURI(res)\" call does not hurt, but it seems excessive because\n> ApplicationContext#getResource(String) will call RequestUtil.normalize() on\n> its argument, which does effectively the same.\n> )\n\nThen lets remove that bit.",
      "The original fix for bug 51584 has been reverted and a new fix applied that fixes that issue and some additional issues new unit tests created for this bug identified.\n\nThe fix has been applied to trunk and 7.0.x and will be included in 7.0.28 onwards."
    ],
    "creation_ts": "2012-05-18T06:24:44Z",
    "fixes": [
      53257
    ]
  },
  {
    "id": 49883,
    "summary": "java.lang.UnsupportedOperationException: The getName() method should never be called",
    "description": "Hi, I am running Tomcat trunk (revision 992708, 2010-09-03). I added this line to conf/logging.properties:\n\norg.apache.catalina.level=FINEST\n\nThe server fails to start with:\n\nThrowable occurred: java.lang.UnsupportedOperationException: The getName() method should never be called\n\tat org.apache.catalina.realm.CombinedRealm.getName(CombinedRealm.java:268)\n\tat org.apache.catalina.realm.RealmBase.toString(RealmBase.java:1015)\n\tat java.text.MessageFormat.subformat(MessageFormat.java:1258)\n\tat java.text.MessageFormat.format(MessageFormat.java:807)\n\tat org.apache.tomcat.util.res.StringManager.getString(StringManager.java:152)\n\tat org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:320)\n\tat org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:305)\n\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:98)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:131)\n\tat org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1020)\n\tat org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:276)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)\n\tat org.apache.catalina.core.StandardService.startInternal(StandardService.java:429)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)\n\tat org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:649)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:584)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:600)\n\tat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289)\n\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:416)\njava.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:600)\n\tat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289)\n\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:416)\nCaused by: java.lang.UnsupportedOperationException: The getName() method should never be called\n\tat org.apache.catalina.realm.CombinedRealm.getName(CombinedRealm.java:268)\n\tat org.apache.catalina.realm.RealmBase.toString(RealmBase.java:1015)\n\tat java.text.MessageFormat.subformat(MessageFormat.java:1258)\n\tat java.text.MessageFormat.format(MessageFormat.java:807)\n\tat org.apache.tomcat.util.res.StringManager.getString(StringManager.java:152)\n\tat org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:320)\n\tat org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:305)\n\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:98)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:131)\n\tat org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1020)\n\tat org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:276)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)\n\tat org.apache.catalina.core.StandardService.startInternal(StandardService.java:429)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)\n\tat org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:649)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:584)\n\t... 6 more\n\n\nIf I comment out that line in logging.properties, the server starts fine. Looking at the code in LifecycleBase line 320, it is a log.debug call:\n\n        if (log.isDebugEnabled()) {\n            log.debug(sm.getString(\"lifecycleBase.setState\", this, state));\n        }",
    "comments": [
      "Thanks for the report.\n\nThis has been fixed in trunk and will be included in 7.0.3 onwards."
    ],
    "creation_ts": "2010-09-04T22:58:52Z",
    "fixes": [
      49883
    ]
  },
  {
    "id": 65317,
    "summary": "PerMessageDeflate getMoreData doesn't return correct TransformationResult if the payload is inflated to exact 8192 bytes",
    "description": "Created attachment 37868\nA probable fix for the issue. Needs confirmation though.\n\nIf the compression is enabled and inflated size is exactly 8192, then tomcat closes the websocket connection with Close code 1009 below message:\n\nNo async message support and buffer too small. Buffer size: [8,192], Message size: [1,202]] \n\n\nRoot cause:\n\nPerMessageDeflate.getMoreData() finds that there's no space in the buffer but doesn't check if at that time, the complete message is written or not. \n\nAnd thus, instead of returning the END_OF_FRAME it returns OVERFLOW.\nIt causes to close the connection with a message that doesn't make much sense (buffer size 8192 is small for message size 1202).\n\nWith the attached file containing the changes, I was able to get around the problem and my connection was stable, but not sure if this is the most elegant way to do it as there's already some complicated logic to find the TransformationResut.",
    "comments": [
      "Do you have a test case that reproduces this?",
      "No need for a test case. I've been able to build a unit test that demonstrates this.",
      "Test case now passes with the proposed patch applied.\n\nThere are a lot of edge cases here so I want to run the Autobahn test suite before committing this.",
      "All looks good. Thanks for the report and the patch.\n\nFixed in:\n- 10.0.x for 10.0.7 onwards\n- 9.0.x for 9.0.47 onwards\n- 8.5.x for 8.5.67 onwards",
      "Thanks a lot for taking quick action on this."
    ],
    "creation_ts": "2021-05-19T15:08:55Z",
    "fixes": [
      65317
    ]
  },
  {
    "id": 34956,
    "summary": "Tomcat should enforce the requirements from servlet 2.4 specification SRV.8.2",
    "description": "Tomcat should enforce the requirements from servlet 2.4 specification SRV.8.2\n\nSRV.8.2 Using a Request Dispatcher\n\n\"To use a request dispatcher, a servlet calls either the include method or\nforward method of the RequestDispatcher interface. The parameters to these\nmethods can be either the request and response arguments that were passed in via\nthe service method of the Servlet interface, or instances of subclasses of the\nrequest and response wrapper classes that have been introduced for version 2.3\nof the specification. In the latter case, the wrapper instances must wrap the\nrequest or response objects that the container passed into the service method.\nThe Container Provider must ensure that the dispatch of the request to a target\nservlet occurs in the same thread of the same VM as the original request\"\n\nJustification:\n==============\nThe absense of this enforcement leads to software beeing developed not following\nthe specification. The software cannot be deployed later on a container which\nconforms to the above paragraph and hence must be changed before deployment.\nThis somehow contradicts the idea of having a standards based infrastructure.",
    "comments": [
      "How does Tomcat not enforce this?  Please provide a test case or steps to\nreproduce the bug.",
      "I've also noticed this issue specifically with the implementation of\nthe RequestDispatcher forward and handling a ServletRequestWrapper.\nSeems to modify the value of the javax.servlet.forward.request_uri\nrequest attribute incorrectly, according to servlet spec SRV.8.4.2.\n\nHere are some specifics, at least with version 5.0.28.\n\nStepping through the Tomcat source in the debugger, it\nappears that the request's requestURI field gets stomped\non in the forward method of the RequestDispatcher\n(ApplicationDispatcher). I'm not sure Tomcat is handling\na ServletRequestWrapper correctly.\n\nI gather the servlet spec says that users may wrap the\nrequest/response objects with their own implementation.\n\nTomcat's ApplicationDispatcher gets the request from\nthe outer request (the ServletRequestWrapper), trying to\nkeep track of the previous wrapper and current wrapper\n(or request) as it loops through to get the real request.\nWith a single wrapper, the value of \"previous\" is the\nsame as the original outer request. Then Tomcat calls...\n\n((ServletRequestWrapper) previous).setRequest(wrapper);\n\nwhich is the same as calling setRequest(wrapper) on the\nincoming request. Tomcat does not get and save the value\nof the original request URI. It calls setRequestURI(path)\non the wrapper, effectively changing the request URI of the\noriginal incoming request to the path of the forward.\n\nThen Tomcat sets the javax.servlet.forward.request_uri\nattribute by calling getRequestURI() from the original\nrequest... but that just got modified. Implying the\njavax.servlet.forward.request_uri attribute is going to\nget the value of the path for the forward.\n\nYou can test this on Tomcat by using a couple JSP to. Use\na HttpServletRequestWrapper in one JSP for the forward.\n\nFirst create \"result.jsp\" to display the desired request attribute...\n\n<%@ page language=\"java\" contentType=\"text/html;charset=UTF-8\"%>\n<html>\n    <head>\n        <title>RequestDispatcher Test</title>\n    </head>\n    <body>\n        <h1>Forward Request URI</h1>\n        javax.servlet.forward.request_uri =\n        <%= request.getAttribute(\"javax.servlet.forward.request_uri\") %>\n    </body>\n</html>\n\nCreate a JSP to forward without using a wrapper, \"forward.jsp\"...\n\n<%\n    javax.servlet.RequestDispatcher rd =\n        request.getRequestDispatcher(\"result.jsp\");\n    rd.forward(request, response);\n%>\n\nand a second forward using HttpServletRequestWrapper, \"wrapperforward.jsp\"...\n\n<%\n    HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request);\n    javax.servlet.RequestDispatcher rd =\n        wrapper.getRequestDispatcher(\"result.jsp\");\n    rd.forward(wrapper, response);\n%>\n\nWhen you hit forward.jsp, the result page displays \"/some-context/forward.jsp\"\nfor the javax.servlet.forward.request_uri request attribute.\nHowever, hit wrapperforward.jsp and the result page displays\n\"/some-context/result.jsp\". From looking at the spec, I'd expect this \nshould be \"/some-context/wrapperforward.jsp\".\n\nI could probably create a patch for this specific case if you'd like.\nLet me know.",
      "Try to write less headache inducing comments in the future, as I didn't make it\nto the end.\n\nWhat I see is that: we wrap, we call wrequest.setRequestURI(requestURI) on *our*\nApplicationHttpRequest, and then after processing we discard that wrapper. What\nyou wrote does not make sense to me.",
      "I'm experiencing the same problem that Carlin describes on Tomcat 5.0.28 as \nwell.  The javax.servlet.forward.request_uri attribute is definitely NOT being \nset correctly when forwarding with a wrapped request.  Carlin's test case \ndemonstrates the problem pretty clearly.",
      "I would say what Carlin describes is a different bug and is not what the\noriginal request is about. I propose to open a new bug for this. \n\nHere a clarification what this bug is about:\n\nTomcat allows to do sth like that:\n\na)  create a own implementaion of javax.servlet.http.HttpServletRequest\npublic class MyRequestImpl implements javax.servlet.http.HttpServletRequest {\n....\n}\n\nb) use that request objectt in a forward call\n    javax.servlet.RequestDispatcher rd =\n        wrapper.getRequestDispatcher(\"somepage.jsp\");\n    \n    MyRequestImpl myRequest=new MyRequestImpl();\n    rd.forward(myRequest, response);\n\nThis is against the spec, which clearly says either the original request or\nHttpServletRequestWrapper has to be used.\n\nYou can find a real live example for this in the cocoon code. Sepcifically in\norg.apache.cocoon.components.jsp.JSPEngineImplNamedDispatcherInclude from cocoon\n 2.0.4.\n\nThanks",
      "Christian, thanks for the clarification. My apologies for causing any\nconfusion here. I've opened a new Tomcat bug, 35270, for my specific\nissue with regards to servlet spec SRV.8.4.2. Please disregard my\nearlier comment in this bug.",
      "Still confused. Marking as NEEDINFO. Requesting a war file to demonstrate the\nbug if there still is one after wading through the converstation. (since a new\nbug seemed to be open)",
      "The quote from the spec is:\n<quote>\nThe parameters to these methods can be either...\n</quote>\n\nCan is not the same as must. The language as currently written does not mean\nthat the only permitted parameters are the original request/response or the\nwrapped request/response. The example given in comment 5 is perfectly valid for\nthe current spec language.",
      "(In reply to comment #8)\n> The quote from the spec is:\n> <quote>\n> The parameters to these methods can be either...\n> </quote>\n> Can is not the same as must. The language as currently written does not mean\n> that the only permitted parameters are the original request/response or the\n> wrapped request/response. The example given in comment 5 is perfectly valid \nfor\n> the current spec language.\n\nYou are so wrong here:\n<spec-quote version=\"2.4\" section=\"14.2.5.1\">\nThe request and response parameters must be either the same objects as were\npassed to the calling servlet\u2019s service method or be subclasses of the\nServletRequestWrapper or ServletResponseWrapper classes that wrap\nthem.\n</spec-quote>\n\nThat means you can use the Request/Response that Tomcat passes in, or a \nHttpServletRequest/ResponseWrapper that wraps the Request/Response that Tomcat \npasses in. And that is it.  The example in #5 isn't valid wrt the spec.",
      "The spec is inconsistent. I was reading section 8.4.2 which uses \"can\", rather\nthan 14.2.5.1 which uses \"must\". I'll send an e-mail to the spec team.\n\nIn the meantime which do we apply? My guess is that 14.2.5.1 was the real\nintention. Thoughts?",
      "(In reply to comment #10)\n> The spec is inconsistent. I was reading section 8.4.2 which uses \"can\", rather\n> than 14.2.5.1 which uses \"must\". I'll send an e-mail to the spec team.\n> \n> In the meantime which do we apply? My guess is that 14.2.5.1 was the real\n> intention. Thoughts?\n\nSorry, that should have be 8.2 not 8.4.2",
      "If you add support for this \"feature\", don't forget to use\nGlobals.STRICT_SERVLET_COMPLIANCE, because besides annoying some people, this\nwon't have any real value.",
      "This has been fixed in SVN for 5.5.x and will be included in 5.5.21 onwards.\nWhen ported to 6.0.x this code will be wrapped in a check for\nGlobals.STRICT_SERVLET_COMPLIANCE==true",
      "It's likely more risky to put it in enabled by default in 5.5, so I think it\nwould be a good idea to add a flag there too, right ?"
    ],
    "creation_ts": "2005-05-18T14:47:46Z",
    "fixes": [
      34956
    ]
  },
  {
    "id": 54707,
    "summary": "Buggy Perl http clients cause tomcat digest auth to fail due to quoted nc values (e.g. nc=\"00000001\")",
    "description": "This problem was discovered while trying to make the Perl LWP library work with tomcat where a path was being protected with digest authentication. \n\nUltimately, this is a bug with Perl (see https://rt.cpan.org/Public/Bug/Display.html?id=43354), and it has been possibly fixed. \nHOWEVER, this requires users to update their perl libraries etc (a big pain for our customers and for us).\n\nA simple fix to tomcat would solve this problem for us and make life good again.\n\nA typical digest response header from perl looks like:\n\nAuthorization: Digest username=\"joe\", realm=\"ACME\", qop=\"auth\", algorithm=\"MD5\", uri=\"/my/protected/path\", nonce=\"1363130363664:71e75a43d7fdbfff8c54bece373058b8\", nc=\"00000001\", cnonce=\"513fb7fb\", response=\"baeeff0b6b9b7e74e769630160d3725b\", message-digest=\"d41d8cd98f00b204e9800998ecf8427e\", opaque=\"9C2C62C52D30A7D5707F75F5A813F113\"\n\nThe entry nc=\"00000001\" causes tomcat to reject the request.  It should be nc=00000001 (the perl client's mistake)\n\nThe following perl script demonstrates the problem:\n\n#!/usr/bin/perl\nuse strict;\nuse LWP;\n\n&doGet(\"myname\", \"mypassword\", \"myrealmname\", \"myhost\", \"8080\", \"/my/protected/path\");\n\nsub doGet\n{\n    my ($username, $password, $realm, $host, $port, $uri) = @_;\n    my $url = \"http://\".$host.\":\".$port.$uri;\n\n    print \"GET: $url\\n\";\n\n    my $browser = LWP::UserAgent->new;\n\n    $browser->agent('Debug Digest Problem');\n    $browser->credentials($host.\":\".$port,$realm,$username=>$password);\n\n    my $response=$browser->get($url);\n\n    print \"HTTP STATUS:\".$response->status_line.\"\\n\";\n    print $response->content;\n}\n\nThe fix should be in org.apache.tomcat.util.http.parser.HttpParser.java\n\nLooking at build 7.0.37 code:\n\nAround line 147:\n                case 3:\n                    // FIELD_TYPE_LHEX\n                    value = readLhex(input);\n                    break;\n\nThis switch is hit when the field is 'nc' (due to line 72 fieldTypes.put(\"nc\", FIELD_TYPE_LHEX); ]\n\nThe method readLhex() does not tolerant quotes. (see line 434 and below).\n\nA similar tomcat issue was fixed a while back for the quoted qop field. (the qop response field should also not be quoted, but tomcat handles this).\n\nAlso see line 375\n     * This is not defined in any RFC. It is a special case to handle data from\n     * buggy clients (known buggy clients include Microsoft IE 8 & 9, Apple\n     * Safari for OSX and iOS) that add quotes to values that should be tokens.\n\nServer software which tolerates this mistake in the perl client includes Apache and Spring's security filter \n(org.springframework.security.web.authentication.www.DigestAuthenticationFilter).",
    "comments": [
      "Created attachment 30055\nPossible change to HttpParser.readLhex and HttpParser.readQuotedLhex\n\nTo fix the problem, readLhex() must be changed. \n\nThe existing readQuotedLhex() calls readLhex(), therefore it must also be changed. \n\nThis fix places the old readLhex() code inside of readQuotedLhex() so that it \ndoes not call readLhex(). \n\nThe new readLhex() can tolerate an optional starting quote. \n\nIf there's  a starting quote, but no ending quote, readLhex() returns null.\n\nEasy as Pi.",
      "Why isn't the fix just:\n\nIndex: java/org/apache/tomcat/util/http/parser/HttpParser.java\n===================================================================\n--- java/org/apache/tomcat/util/http/parser/HttpParser.java\t(revision 1456972)\n+++ java/org/apache/tomcat/util/http/parser/HttpParser.java\t(working copy)\n@@ -68,7 +68,7 @@\n         fieldTypes.put(\"cnonce\", FIELD_TYPE_QUOTED_STRING);\n         fieldTypes.put(\"opaque\", FIELD_TYPE_QUOTED_STRING);\n         fieldTypes.put(\"qop\", FIELD_TYPE_QUOTED_TOKEN);\n-        fieldTypes.put(\"nc\", FIELD_TYPE_LHEX);\n+        fieldTypes.put(\"nc\", FIELD_TYPE_QUOTED_LHEX);\n \n         // Setup the flag arrays\n         for (int i = 0; i < 128; i++) {",
      "I believe this will make Perl work and everything else fail!. Another alternative would be to make quotes optional all the way round, but I'm not sure that's good idea? Maybe it is, I don't know.",
      "This doesn't really cause a problem since there's a fall through that catches\nthe mistake... \n\nBut at line 66 you'll see:\nfieldTypes.put(\"digest-uri\", FIELD_TYPE_QUOTED_STRING);\n\nI believe that's a typo. Should read:\nfieldTypes.put(\"uri\", FIELD_TYPE_QUOTED_STRING);\n\nSee: http://tools.ietf.org/html/rfc2617 \n3.2.2 The Authorization Request Header\n\n       digest-uri       = \"uri\" \"=\" digest-uri-value\n       digest-uri-value = request-uri   ; As specified by HTTP/1.1\n\nThe RFC's are hard to read!",
      "(In reply to comment #3)\n> I believe this will make Perl work and everything else fail!\n\nYou are correct. That is what I get for trying to add something to a bug report when I should be sleeping.\n\n> Another alternative would be to make quotes optional all the way round, but I'm\n> not sure that's good idea? Maybe it is, I don't know.\n\nRFC2616 encourages servers to be tolerant of buggy input where they can do so unambiguously. I'll take a more general look at the parser and see what can be done. Either way, this particular issue will be fixed.",
      "Fixed in trunk and 7.0.x and will be included in 7.0.39 onwards."
    ],
    "creation_ts": "2013-03-15T17:41:24Z",
    "fixes": [
      54707
    ]
  },
  {
    "id": 69633,
    "summary": "Filters mapped to \"\" are not applied to empty string (\"\") special URL pattern",
    "description": "I try to make Pax Web 10 based on Tomcat 11 (and Jetty 12 and Undertow 2.3) compliant with OSGi CMPN TCK.\n\nOne of the failing tests is about applying filters mapped to \"\" when requesting \"root context\" URI (like http://localhost:8080/).\n\nhttps://jakarta.ee/specifications/servlet/6.1/jakarta-servlet-spec-6.1#specification-of-mappings mentions this \"special\" pattern:\n\n> The empty string (\"\") is a special URL\n> pattern that exactly maps to the application\u2019s\n> context root, i.e., requests of the form\n> http://host:port/<context-root> or\n> http://host:port/<context-root>/. \n> In this case the path info is \"/\" and the servlet\n> path is empty string (\"\").\n\nNowhere in the Servlet API specification is stated that this mapping doesn't related to Filter mappings too.\n\nHowever in Tomcat `org.apache.catalina.util.FilterUtil#matchFiltersURL(java.lang.String, java.lang.String)`\n\nwe have:\n\n// Case 4 - \"Default\" Match\nreturn false; // NOTE - Not relevant for selecting filters\n\nfor testPath=\"\" and requestPath=\"/\"\n\nI think this special condition should be added...",
    "comments": [
      "Please provide the filter definition in web.xml, as well as the exact URLs that you think should match it.",
      "I use Tomcat embedded without using `web.xml`.\n\nBut internally I extend `org.apache.tomcat.util.descriptor.web.FilterMap` and the object looks like this:\n\nresult = {org.ops4j.pax.web.service.tomcat.internal.PaxWebFilterMap@5099} \"FilterMap[filterName=a, urlPattern=]\"\n charset: java.nio.charset.Charset  = {sun.nio.cs.UTF_8@5115} \"UTF-8\"\n dispatcherMapping: int  = 8\n filterModel: org.ops4j.pax.web.service.spi.model.elements.FilterModel  = {org.ops4j.pax.web.service.spi.model.elements.FilterModel@5112} \"FilterModel{id=FilterModel-7,name='a',urlPatterns=[],contexts=[{WB,OCM-1,default,/}]}\"\n filterName: java.lang.String  = {@5113} \"a\"\n initialFilter: boolean  = false\n matchAllServletNames: boolean  = false\n matchAllUrlPatterns: boolean  = false\n servletNames: java.lang.String[]  = {java.lang.String[0]@5114} []\n urlPatterns: java.lang.String[]  = {java.lang.String[1]@5100} [\"\"]\n  0 = {@5076} \"\"\n\nand this filterMap is passed together with requestPath=\"/\" to:\n\norg.apache.catalina.util.FilterUtil#matchFiltersURL(org.apache.tomcat.util.descriptor.web.FilterMap, java.lang.String)",
      "This is context root mapping not default mapping and I agree that context root mapping support is (partially) missing for Filters. It will work for requests to http://<host:port>/<context-root> if you disable mapperContextRootRedirectEnabled on the Context.\n\nI have a fix for this that I have been testing with a simple web application but I want to turn that into a standard test case before I commit anything.",
      "Fixed in:\n- 11.0.x for 11.0.7 onwards\n- 10.1.x for 10.1.41 onwards\n-  9.0.x for  9.0.105 onwards",
      "Thanks\n\nabout `org.apache.catalina.core.StandardContext#setMapperContextRootRedirectEnabled` - it's `true` by default and that's how I use embedded Tomcat in Pax Web.\nSimilar to Jetty's `org.eclipse.jetty.server.handler.ContextHandler#setAllowNullPathInContext` - it's `false` by default (which means the same - redirect).\n\nI agree that redirect should be the default, because Servlet API docs mention:\n\n> http://host:port/<context-root> or http://host:port/<context-root>/\n\nwhich kind of makes these cases equivalent."
    ],
    "creation_ts": "2025-03-28T12:01:48Z",
    "fixes": [
      69633
    ]
  },
  {
    "id": 41869,
    "summary": "Should EL (Expression Language) expressions result in the TagData.REQUEST_TIME_VALUE object?",
    "description": "I have a custom tag with attributes defined in the TLD file as allowing run-\ntime expression values, meaning:\n\n  <rtexprvalue>true</rtexprvalue>\n\n\nI also have a TagExtraInfo class that I am using to validate the values \nprovided.\n\nInside my TagExtraInfo sub-class I have code such as this:\n\n   Object attr = data.getAttribute(\"groupSize\");\n \n   if ( attr != null &&\n        !attr.equals(TagData.REQUEST_TIME_VALUE)\n   {\n \nand so on.   When, in my JSP, I provide attribute values such as \"<%= 10 * 14 \n%\" (JSP scriplet) I do indeed get the TagData.REQUEST_TIME_VALUE object back \non this call.\n\nHowever, when I instead have an EL value, something like \"${groupSizeValue}\", \nI do not received the REQUEST_TIME_VALUE distinguished object back.  I receive \na String object, containing the text \"${groupSizeValue}\".  Is this the correct \nbehavior?  Everything I have read (books, Google searches, etc.) seems to \npoint me in the thinking that this is a bug.\n\n\nFrom looking at the tomcat 5.5.20 and 5.5.23 source code, I see where the \nJspAttribute (nested class of Node) is created.  In the Validator class, line \n1117, is the creation for this object passing the constant \"false\" for \nthe \"expr\" argument (5th argument to the 1st ctor of this class).  I believe \nit is line 1117 that would be getting executed since the if statement \npreceding this is:\n\n   if (el.containsEL() && !pageInfo.isELIgnored()) {\n \n \nSo, my question is, why would an EL expression when EL is not being ignored be \nconsidered not an expression?",
    "comments": [
      "This is indeed a bug. JSP.13.9.9.3 of the JSP spec is the definitive reference.\n\nI have applied the fix to svn and it will be included in 5.5.24 and 6.0.12\n\nThanks for the report."
    ],
    "creation_ts": "2007-03-16T12:43:38Z",
    "fixes": [
      41869
    ]
  },
  {
    "id": 66330,
    "summary": "StandardContext.skipMemoryLeakChecksOnJvmShutdown has no effect",
    "description": "If the StandardContext property 'skipMemoryLeakChecksOnJvmShutdown' is set to true, one expects, that the memory leak check done by 'WebappClassLoaderBase. clearReferences' will be skipped. This ist not the case.\n\nThe cause seems to be the missing mapping of the 'skipMemoryLeakChecksOnJvmShutdown' property from the context to the classLoader ( StandardContext.startInternal()).",
    "comments": [
      "Thanks for the report.\n\nThe root cause analysis looks right to me. I have the patch ready to commit to fix this. I just want to double check the archives to make sure there isn't a good reason for the current behaviour.",
      "Confirmed this behaviour is a bug.\n\nOriginal feature added for bug 50175\nhttp://svn.apache.org/viewvc?rev=1831618&view=rev\n\nFeature broken by accident when implementing bug 62897\nhttp://svn.apache.org/viewvc?rev=1846236&view=rev",
      "Fixed in:\n- 10.1.x for 10.1.2 onwards\n- 9.0.x for 9.0.69 onwards\n- 8.5.x for 8.5.84 onwards"
    ],
    "creation_ts": "2022-11-01T11:18:22Z",
    "fixes": [
      66330
    ]
  },
  {
    "id": 39813,
    "summary": "JMX proxy servlet newline escaping is incorrect",
    "description": "JMXProxyServlet.java at revision 411724.\n\nUsing MBean qry operation, if an attribute returns a String containing a\nnewline, the character before the newline is removed by the escape method (uses\nidx-1 instead of idx on line 204).\ne.g. PermGenStatus: Perm Gen : 19.93% (26739168/134217728\\n\n\nFurthermore, the end int is not checked to be > 0 in the appendHead method - so\nanything starting with a newline would end up being a substring(0,-1) call (line\n223) - resulting in an StringIndexOutOfBoundsException(\"String index out of\nrange: -1\") which would then drop into \"} catch (Exception e) {} // Ignore\" in\nlistBeans causing any further attributes to not be printed out. \n\nFinally, the get operation does not use the escape method in getAttribute (line\n114) so will print newlines. Guess this contravenes the JMX spec 1.2 - whose\nchanges log says \"...the newline character ('\\n') is forbidden everywhere. This\nrule is new with 1.2.\"",
    "comments": [
      "Patches would be great ;)",
      "Created attachment 18476\nPatch for newline escaping\n\nHere you go! \nTested with a Spring MBean exported POJO returning strings containing newlines\nand starting with a newline.",
      "Patch applied.\n\nMany thanks."
    ],
    "creation_ts": "2006-06-14T16:26:33Z",
    "fixes": [
      39813
    ]
  },
  {
    "id": 65563,
    "summary": "DefaultServlet's doPut returns HTTP code 400 when using Content-Range",
    "description": "Context:\nwe have some integration tests for our WebDAV client that use Tomcat-Embedded as the WebDAV server (using org.apache.catalina.servlets.WebdavServlet). I'm in the process of migrating tomcat-embedded from 7.0.x to 9.0.x, and one of the tests is about resume support, i.e. uploads the same file multiple times, with each time the file growing in size. For this the client uses the Content-Range header.\nThis test fails with all supported versions of Tomcat (8.5.x, 9.0.x and 10.0.x) because of a regression introduced during a refactoring (commit d1f58003a97af79df452cdbe5e94052acc4b7188 on the 9.0.x branch on GitHub).\n\nThe Content-Range parser fails to parse headers of the form\nContent-Range: bytes 42-1233/1234\nand so the org.apache.catalina.servlets.DefaultServlet.parseContentRange(HttpServletRequest, HttpServletResponse) method send a code 400 as response.\nLooking at the ContentRange.java code, it expects the following form:\nbytes=42-1233/1234  (note the \"=\")\nAt first I thought that this might be a change in the Content-Range specification or some ambiguity in the specification (as our client code has successfully submitted such requests for a long time to Apache Web server's WebDAV module).\n\nHowever, the two RFCs where I found references to the Content-Range header both state  that the correct form doesn't have an equal sign : \nhttps://datatracker.ietf.org/doc/html/rfc7233#page-12\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html",
    "comments": [
      "Pull request for the main branch: https://github.com/apache/tomcat/pull/449\nThis fixes the problem on my tests (tested on the 9.0.x branch, which is the one I use in my project). \nShould I create a pull request for each branch ?",
      "No need for multiple PRs. If the PR is accepted, it will be merged to whichever branch and then cherry-picked to the other branches.",
      "Thanks for the report, PR and analysis. Good quality bug reports like this are always appreciated.\n\nFixed in:\n- 10.1.x for 10.1.0-M6 onwards\n- 10.0.x for 10.0.12 onwards\n- 9.0.x for 9.0.54 onwards\n- 8.5.x for 8.5.71 onwards"
    ],
    "creation_ts": "2021-09-09T05:21:38Z",
    "fixes": [
      65563
    ]
  },
  {
    "id": 40524,
    "summary": "request.getAuthType() returns different string from HttpServletRequest.CLIENT_CERT_AUTH",
    "description": "using inspect:\n\nrequest.getAuthType()\n  (java.lang.String) CLIENT-CERT\n\t \nHttpServletRequest.CLIENT_CERT_AUTH\n   (java.lang.String) CLIENT_CERT\n\napi says they should be the same object (== should work)",
    "comments": [
      "Created attachment 19396\nFix for CLIENT_CERT/CLIENT-CERT mismatch\n\nThe auth-methodType value 'CLIENT-CERT' is defined in the web-app DTDs and\nXSDs, but HttpServletRequest.java uses 'CLIENT_CERT'.  The Tomcat internal\nRequest class correctly uses 'CLIENT-CERT'.  This patch fixes\nHttpServletRequest to match the descriptor definition.",
      "-1 for this patch.\n\nAs per the spec:\nCLIENT-CERT is for use in web.xml\nCLIENT_CERT is the value of HttpServletRequest.CLIENT_CERT_AUTH and should be\nreturned by HttpServletRequest.getAuthType()\n\nThe bug that needs to be fixed is that HttpServletRequest.getAuthType() should\nreturn CLIENT_CERT rather than CLIENT-CERT",
      "I have committed an alternative fix. It will be in 5.5.21 onwards."
    ],
    "creation_ts": "2006-09-16T01:49:08Z",
    "fixes": [
      40524
    ]
  },
  {
    "id": 57157,
    "summary": "out.setWriteListener in runnable of AsyncContext.start(runnable) cause response failed",
    "description": "Created attachment 32157\nrelated java code files\n\nstack trace:\n28-Oct-2014 11:56:26.891 SEVERE [http-nio-8080-exec-5] org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun \n java.lang.NullPointerException\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1538)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1523)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:744)\n\nrelated code:\nTextReadListener\n\tpublic synchronized void onAllDataRead() throws IOException {\n\t\tlogger.debug(\"onAllDataRead\", new Exception(\"onAllDataRead\"));\n\t\tfinal String text = (buf != null ? buf.toString(\"UTF-8\") : \"\");\n\t\tlogger.debug(\"onAllDataRead> text={}\", text);\n\t\tHttpServletRequest req = (HttpServletRequest) asyncCtx.getRequest();\n\t\tlogger.debug(\"onAllDataRead> uri={}, User-Agent={}, params={}\", req.getRequestURI(),\n\t\t\t\treq.getHeader(\"User-Agent\"), req.getParameterMap());\n\t\tfinal ServletOutputStream out = asyncCtx.getResponse().getOutputStream();\n\t\tasyncCtx.start(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tlogger.debug(\"start sleep\");\n\t\t\t\t\tTimeUnit.SECONDS.sleep(1);\n\t\t\t\t\tlogger.debug(\"sleep finished, start writing\");\n\t\t\t\t\tWriteListener writeListener = new TextWriteListener((\"test\" + text).getBytes(\"UTF-8\"), asyncCtx,\n\t\t\t\t\t\t\tout);\n\t\t\t\t\tout.setWriteListener(writeListener);\n\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\tlogger.error(\"impossible ex\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\nIf I just invoke out.setWriteListener in onAllDataRead method (not in asyncCtx.start), then that's ok.\n\nDetailed java code is in attachment",
    "comments": [
      "Thanks for the report.\n\nThe NPE was triggered by some faulty error handling which has been fixed in 8.0.x for 8.0.15 onwards.\n\nWith the error handling fixed it was clear that Tomcat was not allowing calls to AsyncContext.start(Runnable) during non-blocking reads and writes. I can see no reason for that restriction - it looks like an oversight when the non-blocking IO support was added - so I have removed it. This fix has also been made in 8.0.x and will be in 8.0.15 onwards."
    ],
    "creation_ts": "2014-10-28T09:24:23Z",
    "fixes": [
      57157
    ]
  },
  {
    "id": 68054,
    "summary": "DirResourcesSet: getCanonicalPath is very slow in windows",
    "description": "Noticed in windows, with tomee and jsf in DEVELOPMENT stage.\n\nWhen JSF is in DEVELOPMENT mode, every facelet file is refreshed on every access. This is very slow in windows, as you can see in this thread: https://www.mail-archive.com/users@tomee.apache.org/msg17957.html . (we had the same problem but never reported)\n\nThe problem is that DirResourcesSet is checking constantly this canonicalPath. The problem is solved by setting allowLinking=true in context.xml.\n\nOne obvious workaround is to avoid checking two times the same getCanonicalPath in:\n\n                                if (entry.getCanonicalPath().length() >= f.getCanonicalPath().length()) {\n                                    canPath = entry.getCanonicalPath().substring(f.getCanonicalPath().length());\n\nThis way time would be halved.\n\n\nAnother option is maybe to document the problem or produce a log warning if windows, jsf in development mode and allowLinking=false?\n\n\nI'm unable to provide a simple reproducer as it requires tomcat with jsf and a xhtml with some includes/custom components/tag handlers.",
    "comments": [
      "I'm the one initially started the thread in the tomee mailing list. Just some additional infos from me:\n\nTo see some benchmark figures of how big the impact can be on a windows system, please take a look into this mail from the mentioned thread:\nhttps://www.mail-archive.com/users@tomee.apache.org/msg17986.html\n\nThe impact is really that bad, that it renders the JSF DEVELOPMENT mode unusable, at least with big views.\n\nIf there are no other options to solve this issue, at least a warning somewhere would be really beneficial, because it is hard for a user to understand why it is so slow and that it can be worked around with allowLinking=\"true\"\n\nI've checked many revisions of tomee and found out that this behaviour was starting with the change from tomcat 9.0.48 to 9.0.50",
      "These checks are needed, feel free to post on the user mailing list for further help.\nOk for optimizing https://github.com/apache/tomcat/commit/de69069ae4c847165a9f68754faf02dbc106b21d but it is a very recent commit.",
      "The optimization will be in 11.0.0-M14, 10.1.16, 9.0.83 and 8.5.96."
    ],
    "creation_ts": "2023-11-02T12:49:27Z",
    "fixes": [
      68054
    ]
  },
  {
    "id": 63859,
    "summary": "AJP cping/cpong mode failing on Tomcat 9.x",
    "description": "Hello,\n\nWe have a common infratructure for all our Tomcat instances (7,8&9) based on httpd + mod_jk / ajp.\n\nWe implemented a while ago cping/pong om httpd with mode A, and it works perfectly with Tomcat 7&8.\n\n[info] ajp_handle_cping_cpong::jk_ajp_common.c (976): (tomcat9) timeout in reply cpong after 10000 ms. Socket = 31 (event=110)\n[info] ajp_maintain::jk_ajp_common.c (3464): (tomcat9) failed sending request, socket -1 keepalive cping/cpong failure (errno=110)\nLeading progressively to\n[info] ajp_service::jk_ajp_common.c (2775): (tomcat9) sending request to tomcat failed (recoverable), because of error during request sending (attempt=2)\n[error] ajp_service::jk_ajp_common.c (2796): (tomcat9) connecting to tomcat failed (rc=-3, errors=1, client_errors=0).\n[info] service::jk_lb_worker.c (1601): service failed, worker tomcat9 is in error state\n\nWe use the latest mod_jk (mod_jk/1.2.46)\n\nI tried using Tomcat native protocol (which we never used so far), same error.\n\nI tried to look into tomcat 9 logs, nothing shows, and Tomcat is still up and running (Inspecction via JMX shows everything ok, Probe console and manager console shows no limit...).\nI even tried to run a massload using Jmeter on AJP port while the error was showing in httpd logs : no error, all the GET ends in success. But httpd still sees a cping/cpong error.\n\nIn the end I may have fixed the issue by changing the mod_jk parameter and disabling the \"cping cpong\" mode :\nworker.tomcat9.ping_mode=C\ninstead of previously worker.tomcat9.ping_mode=A\n(which does the cping/cpong on a regular basis)\n\n=> Since I changed this I don't have any errors in httpd.\n\nSo I suspect a regression in Tomcat 9 somewhere with AJP protocol, even though I couldn't find any error in Tomcat logs ...\n\nNot sure if I can help more, just wanted to highlight this issue but if you need more detail or debug log don't hesitate.\n\nThe settings of my connectors (7 8 & 9 ) are the same :\n<Connector port=\"xxxx\" protocol=\"AJP/1.3\" maxThreads=\"400\" connectionTimeout=\"600000\"/>",
    "comments": [
      "I missed a sentence...\n\nWe implemented a while ago cping/pong om httpd with mode A, and it works perfectly with Tomcat 7&8.\n+\"But with Tomcat 9 we inconsistently have those errors of cping/cpong in logs\"\n\nAnd then the logs...",
      "Any info on usage characteristics during times this happens? High load (how many requests per second), with or without load balancing, workers.properties config etc.?\n\nHow frequently does it happen (always, sporadicaly for NNN % of requests, in spikes, ...)?\n\nCan you easily reproduce?\n\nDo you have root privileges, so could you sniff network traffic to the AJP port? Are Apache and Tomcat on diferent machines? Any active components (Firewalls, routers) in between?\n\nThanks and regards,\n\nRainer",
      "Hi Rainer,\n\nAny info on usage characteristics during times this happens? High load (how many requests per second), with or without load balancing, workers.properties config etc.?\n\n=> There is no \"rule\", it even happen with only a few users on my test instance.\nWorkers.properties is the same than for my tomcat 7&8 instances, e.g. I use a servertemplate which I apply to node and a lbtemplate too.\n\nHere is an extract :\n#Create one common template for all workers nodes\nworker.servertemplate.type=ajp13\n# factor of each worker is the same\nworker.servertemplate.lbfactor=1\n# ping_mode A is the most complete\nworker.servertemplate.ping_mode=C\n# socket_timeout in seconds\nworker.servertemplate.socket_timeout=30\n# connection_pool_timeout in seconds\nworker.servertemplate.connection_pool_timeout=600\n# reply_timeout in milliseconds : 10 min\nworker.servertemplate.reply_timeout=600000\n# recovery_options : 3 : don't retry on error after request was sent\nworker.servertemplate.recovery_options=3\n\n# Create one common template for all LB nodes\nworker.balancertemplate.type=lb\n# If we have 10 replies timing out in the same minute => worker goes in error state\nworker.balancertemplate.max_reply_timeouts=10\n\nThen based on this I apply those settings to nodes / clusters.\n\nHow frequently does it happen (always, sporadicaly for NNN % of requests, in spikes, ...)?\n\n=> I couldn't find any \"rule\" sorry.... but it happened at least 10 times / day and since I changed the cping cpong to C it doesn't show anymore in the logs even though I have activity\n\nCan you easily reproduce?\n\n=> Yes, I have a test environment which is in use and if I push back cping/cpong mode to A I'm sure the error will show up again.\n\nDo you have root privileges, so could you sniff network traffic to the AJP port? Are Apache and Tomcat on diferent machines? Any active components (Firewalls, routers) in between?\n\n=> I'm not root unfortunately, but my config is that I run 2 linux servers, which both hosts httpd and tomcat instances (both servers runs same versions of httpd, tomcat), and it works fine with the ajp port of tomcat 7&8.\n.\nThere is no firewall between them (hard or soft), and the error occurs even when the httpd is connecting to \"himself\" (even though I don't use \"localhost\" but the hostname)\n\nI've ran this setup for more than a year on Tomcat 7&8 (even with upgrades), and only met the issue with 9. It failes with 9.0.20 so I tried to upgrade last week to 9.0.26 but still here. \nSince yesterday and switching the ping_mode to \"C\" it stopped failing, so for now I will go like that in production but might be good to investigate.\n\nLet me know if I can be of any help.\n\nFYI I tried :\n- putting mod_jk in debug => way to verbose (I run 9 instances of tomcat in the end on the same server), but at the beginning the behaviour looks correct (I saw the ping pong working with my tomcat 9 instances every minute)\n- adding debug in tomcat \"AJP\" : couldn't find exactly what I could put in debug... if I put the full org.apache logger in DEBUG it's nightmare :)\n\nLet me know if I can help, and thanks for replying so quickly",
      "Also I even checked while the error was showing the \"total connections\" from my httpd to tomcat 9 ajp port (netstat) : it was less than 10.\nAnd when I stress test the ajp port, it worked. I'm lost :D",
      "(In reply to Aurelien Pernoud from comment #3)\n> Tomcat 7&8\n\nIs this Tomcat 8.0.x or Tomcat 8.5.x?",
      "Tomcat 8.0.x",
      "I know it is verbose but what we really need is the mod_jk debug log from when this error occurs. Based on the information provided, that looks like the best option for further investigation.",
      "Hi Mark,\n\nI have the debug but can't attach it due to limit of 1MB :-(\n\nI managed to reproduce the issue, I have 2 httpd with the exact same configuration, pointing to same tomcat.\n\nIn the logs of \"http node 1\" I see for ex :\n\n[Mon Nov 04 09:15:03 2019] [13694:140683904751360] [info] ajp_handle_cping_cpong::jk_ajp_common.c (976): (tom_tst01_srv09) timeout in reply cpong after 10000 ms. Socket = 25 (event=110)\n[Mon Nov 04 09:15:13 2019] [13694:140683904751360] [info] ajp_handle_cping_cpong::jk_ajp_common.c (976): (tom_tst01_srv09) timeout in reply cpong after 10000 ms. Socket = 14 (event=110)\n[Mon Nov 04 09:15:24 2019] [13694:140683904751360] [info] ajp_handle_cping_cpong::jk_ajp_common.c (976): (tom_tst01_srv09) timeout in reply cpong after 10000 ms. Socket = 14 (event=110)\n\nleading progressively to :\n\n[Mon Nov 04 09:15:24 2019] [13694:140683904751360] [error] ajp_send_request::jk_ajp_common.c (1725): (tom_tst01_srv09) connecting to backend failed. Tomcat is probably not started or is listening on the wrong port (errno=110)\n\n(Here I only searched for the error)\n\nIn the logs of \"http node 2\", at the same timing, the same server replies correctly to ping (at least that's how I interpret the below lines) :\n\n[Mon Nov 04 09:14:52 2019] [25023:139691817195264] [debug] ajp_maintain::jk_ajp_common.c (3441): (tom_tst01_srv09) reached pool min size 13 from 25 cache slots\n[Mon Nov 04 09:14:52 2019] [25023:139691817195264] [debug] ajp_maintain::jk_ajp_common.c (3493): (tom_tst01_srv09) pinged 1 and recycled 0 sockets in 0 seconds from 25 pool slots\n[Mon Nov 04 09:15:32 2019] [25022:139691817195264] [debug] ajp_maintain::jk_ajp_common.c (3441): (tom_tst01_srv09) reached pool min size 13 from 25 cache slots\n[Mon Nov 04 09:15:32 2019] [25022:139691817195264] [debug] ajp_maintain::jk_ajp_common.c (3493): (tom_tst01_srv09) pinged 1 and recycled 0 sockets in 0 seconds from 25 pool slots\n[Mon Nov 04 09:15:32 2019] [25024:139691817195264] [debug] ajp_maintain::jk_ajp_common.c (3441): (tom_tst01_srv09) reached pool min size 13 from 25 cache slots\n[Mon Nov 04 09:15:32 2019] [25024:139691817195264] [debug] ajp_maintain::jk_ajp_common.c (3493): (tom_tst01_srv09) pinged 2 and recycled 0 sockets in 0 seconds from 25 pool slots\n[Mon Nov 04 09:15:50 2019] [26242:139691817195264] [debug] ajp_maintain::jk_ajp_common.c (3441): (tom_tst01_srv09) reached pool min size 13 from 25 cache slots\n[Mon Nov 04 09:15:50 2019] [26242:139691817195264] [debug] ajp_maintain::jk_ajp_common.c (3493): (tom_tst01_srv09) pinged 2 and recycled 0 sockets in 0 seconds from 25 pool slots\n\nBoth server times are synecd of course.\n\nI can send the logs, once zipped both nodes we are talking about a file of 30MB, let me know how ?",
      "I also collected tomcat logs even though I can't find anything in it, except that \"luckily\" I also see for ex that our monitoring tool \"pinged\" (using HTTP protocol) the server at  [04/Nov/2019:09:15:02 +0000] using \"Probe PSI quickcheck\", and this call worked like a charm...\nThere was very limited activity too according to access_log.\nI can also provide this if needed.\n\nI don't know if I can provide any more details, let me know, for now I'm switching back to mode C to avoid this error, I just double checked again my production environment which has much more activity and I don't have this \"timeout in reply cpong after 10000 ms\" showing at all.",
      "I'll send you a Google Drive link privately where you can upload the files.\n\nPlease upload the mod_jk debug logs, the Tomcat logs, the access log, the mod_jk configuration files and the server.xml from the Tomcat instances (with any passwords replaced by ***).\n\nThanks.",
      "Thanks Mark, just uploaded everything.\n\nin \"logs\" : mod_jk debug log from both httpd instances limited to the period where the error occured\ntom_tst01_srv09 is the full tomcat log\n\nin \"conf\" : server.xml anonymized, I also provide the setenv as I use environment variables as you will see\nworkers.properties also provided, except of course that here I switched it back to \"C\" mode, the error showed only with \"A\" mode.",
      "Thanks. I can't see anything obviously wrong in those files. The CPING is sent and the CPONG is never seen.\n\nIf any Tomcat committer wants access to the logs, let me know and I'll send you a link.\n\nDebug logging on the Tomcat side might be useful. Adding the following to logging.properties:\norg.apache.coyote.ajp.level = FINE\norg.apache.tomcat.util.net.level = FINE\n\nIf that generates too much data, try starting with just the first of the two lines.\n\nMeanwhile, I am going to try and reproduce this.",
      "Thanks Mark,\n\nappreciate all the time spent, I also agree this looks a complex one.\n\nReading mod_jk logs it seems the cping / cpong is not coming back but as you also see the second httpd pointing to the same tomcat gets replies...\n\nSo to me the issue is definitely in the cping cpong (mode A), but why does it fail sometimes, no idea ... Also as you can see in the logs the only server failing is the one running tomcat 9, all the others works fine, so to me the bug is on tomcat too.",
      "I am unable to reproduce this.\n\nCPing/CPong mode \"A\" is equivalent to mode \"CPI\". Clearly, mode \"C\" is not an issue but it would be useful to know if it is enabling P or I that triggers the issue. You can use mode \"CP\" and \"CI\" to test this.\n\nI've been looking through the mod_jk logs in more detail and it is a P test that fails and takes Tomcat off-line but I see \"I\" test failures as well.\n\nIt is interesting that - in the logs we have - it is only srv09 that is seeing these errors. Is there something about those two instances that is unique?\n\nI have also been looking at the Tomcat code. I do see something that isn't quite right (after a CPing/CPong Tomcat always does a blocking read) but I don't see how that could be triggering the error you see. I'll fix this anyway for 9.0.x and 8.5.x.\n\nThe debug logging (as previously mentioned for Tomcat) may help. If not, we'll need to ad more logging on the Tomcat side to try and get to the bottom of this.",
      "Hi Mark,\n\nthanks for all the testing.\n\n\"It is interesting that - in the logs we have - it is only srv09 that is seeing these errors. Is there something about those two instances that is unique?\"\n\n=> Yes, it's the only instance runnning Tomcat 9.0.x. Others (srv01->srv08) are running Tomcat 7.0.x and 8.0.x.\nI have no 8.5.x instances, so if the \"bug\" you found is due to a change in Tomca > 8.5.x it might be it :)\n\nAnyway, I'll make tests with : CI / CP only (see which one triggers the rror) and also activate debug on Tomcat 9 as required and will try to provide everything back when possible.\n\nAppreciate your help !",
      "Small update : I've been running for a week with CP, no error in the logs.\nWill wait until next week and switch to CI see if it triggers the error or not.",
      "Hi,\n\nI've reproduced the bug with mode CI after one day... do definitely related to CI I think :)\n\nI uploaded a new zip in your dropboy with :\n\nmod_jk.log.20191119 from both nodes\nYou0'll see both of them have some \"(tom_tst01_srv09) timeout in reply cpong after 10000 ms.\", not at the same timing.\n\n(I limited this log to the timing of the errors between 9 and 11 UTC) to avoid sending a huge file)\n\n\ncatalina logs in FINE mode \n(org.apache.coyote.ajp.level = FINE\norg.apache.tomcat.util.net.level = FINE)\n\nSince startup and for the day.\n\nLet me know if I can help in any way",
      "Of course I didn't mention that but the catalina logs is the one from tom_tst01_srv09 !",
      "Thanks for those logs. The Tomcat debug logs were useful. I'm now reasonably sure Tomcat is closing the connection because of an IOException. However, the logs don't show the exception. I have extended the debug logging to include this exception in 8.5.x and 9.0.x.\n\nTo save you building from source (I wasn't sure whether you were set up for that) I've uploaded the latest build here:\nhttp://people.apache.org/~markt/dev/apache-tomcat-9.0.30-dev.tar.gz\n\nUsual caveats apply. This isn't an official release. Use it at your own risk and if your server catches fire it isn't our fault ;)\n\nI really do appreciate your willingness to help track this down. Thanks again.",
      "Hi Mark,\n\nI deployed your version with FINE debug as before, so far the server didn't catch fire which is pretty cool, as soon as I have the error (kept only CI mode) I will provide you the logs.\n\nDefinitely appreciate your help on this one.",
      "Hi Mark,\n\nthe error is not showing for 4 days. Is it possible that you or someone actually fixed something in this patch too from version 9.0.26 ?? Or Should I just wait a bit more...",
      "The only thing that has changed as far as I know is Tomcat no longer always does a blocking read after the CPing/CPong.\n\nI still don't see how that could have caused the error though...\n\nCould we give it until after the weekend to see? I'll be tagging the next set of releases then. Meanwhile, I'll see if I can see how the blocking read could trigger this.",
      "There is absolutely no hurry !\nI've been working for a week almost now and no errors...\nI'll leave it like that in our environment for the full month, I will even try to reactivate the full mode \"A\" in our test environment, and if it doesn't happen anymore then I'll consider it fix ;)\nThanks",
      "2 weeks now, no error anymore.\nI reactivated also mode \"A\" for 4 days now, still no error.\nI will wait more as I'm not in hurry but honestly I think we can consider you fixed it !",
      "FYI I disabled the mod_jk debug to avoid having to clean it on a daily basis, I will continue to monitor with mode \"A\" if the issue eventually comes back but to me I would consider this one fix now ;)\n\nMany thanks Mark",
      "OK. Thanks for all you help on this. I'm marking this as resolved but do feel free to re-open if the issue re-surfaces.",
      "Dear all, \n\nIn our production environment, we did see mod_jk log print log. \nFri Mar 05 10:00:14.906 2021] [17221:139662211758208] [info] ajp_handle_cping_cpong::jk_ajp_common.c (979): (worker3) timeout in reply cpong after 10000 ms. Socket = 13 (event=110)\n[Fri Mar 05 10:00:14.951 2021] [27663:139662211758208] [info] ajp_handle_cping_cpong::jk_ajp_common.c (979): (worker3) timeout in reply cpong after 10000 ms. Socket = 13 (event=110)\n[Fri Mar 05 10:00:14.971 2021] [3615:139662211758208] [error] uri_worker_map_update::jk_uri_worker_map.c (1320): Unable to stat the /etc/httpd/conf/uriworkermap.properties (errno=13)\n[Fri Mar 05 10:00:14.990 2021] [3617:139662211758208] [error] uri_worker_map_update::jk_uri_worker_map.c (1320): Unable to stat the /etc/httpd/conf/uriworkermap.properties (errno=13)\n[Fri Mar 05 10:00:14.996 2021] [3616:139662211758208] [error] uri_worker_map_update::jk_uri_worker_map.c (1320): Unable to stat the /etc/httpd/conf/uriworkermap.properties (errno=13)\n[Fri Mar 05 10:00:15.006 2021] [17221:139662211758208] [info] ajp_send_request::jk_ajp_common.c (1654): (worker3) failed sending request, socket -1 prepost cping/cpong failure (errno=110)\n[Fri Mar 05 10:00:15.006 2021] [17221:139662211758208] [info] ajp_send_request::jk_ajp_common.c (1712): (worker3) no usable connection found, will create a new one, detected by connect check (0), cping (1), send (0).\n[Fri Mar 05 10:00:15.026 2021] [16683:139662211758208] [info] ajp_handle_cping_cpong::jk_ajp_common.c (979): (worker3) timeout in reply cpong after 10000 ms. Socket = 15 (event=110)\n[Fri Mar 05 10:00:15.051 2021] [27663:139662211758208] [info] ajp_send_request::jk_ajp_common.c (1654): (worker3) failed sending request, socket -1 prepost cping/cpong failure (errno=110)\n[Fri Mar 05 10:00:15.051 2021] [27663:139662211758208] [info] ajp_send_request::jk_ajp_common.c (1712): (worker3) no usable connection found, will create a new one, detected by connect check (0), cping (1), send (0).\n[Fri Mar 05 10:00:15.126 2021] [16683:139662211758208] [info] ajp_send_request::jk_ajp_common.c (1654): (worker3) failed sending request, socket -1 prepost cping/cpong failure (errno=110)\n[Fri Mar 05 10:00:15.126 2021] [16683:139662211758208] [info] ajp_send_request::jk_ajp_common.c (1712): (worker3) no usable connection found, will create a new one, detected by connect check (0), cping (1), send (0).\n[Fri Mar 05 10:00:15.667 2021] [18182:139662211758208] [info] ajp_handle_cping_cpong::jk_ajp_common.c (979): (worker3) timeout in reply cpong after 10000 ms. Socket = 13 (event=110)\n\n\nthe configuration is as below: \n/etc/httpd/conf/workers.properties\n#Set properties for template\nworker.template.type=ajp13\nworker.template.host=localhost\nworker.template.ping_timeout=10000\nworker.template.ping_mode=A\n\nfrom the tomcat official doc - https://tomcat.apache.org/tomcat-8.5-doc/changelog.html\n\nthis bug has been fixed in Tomcat 8.5.48 (markt)\n 63859: Do not perform a blocking read after a CPING message is received by the AJP connector because, if the JK Connector is configured with ping_mode=\"I\", the CPING message will not always be followed by the start of a request. (markt)\n\nmy tomcat version is 8.5.55. it should be fixed already in 8.5.55. \n\nWhen we see this error log, does it means this issue was not completely fixed in some case, or maybe, because the tomcat server is too busy, and did not respond timely? \n\nit impacts production stability, is it making sense to change the ping_mode=A to ping_mode=C to eliminate this issue? \nGiven we cannot reproduce the issue in the lab, not sure if it is good to change to ping_mode=C, if change to ping_mode=c, is there any possible negative impact?\n\nany feedback would be much appreciated?"
    ],
    "creation_ts": "2019-10-17T11:59:49Z",
    "fixes": [
      63859
    ]
  },
  {
    "id": 43343,
    "summary": "Loss of data and concurrency issue with Catalina session persistent storage",
    "description": "A user was asking questions on the tomcat users mailing list about TC and how it\nhandled concurrency in sessions and session passivation/object caching of\nsessions when they are inactive etc. I thought, surely this is using locks etc,\nso had responded as such. Then I got curious. I started looking in the code and\nfound that indeed TC has a concurrency issue when the session is to pushed to\ndisk if it is inactive or the max number of live sessions is too high.\n\nThe problem is a user could have a session getting ready to become inactive. The\nserver is beginning to write the session out to disk. The user then comes in on\na request and gets the current session. They set an attribute. The web\napplication and the user think all is OK. But in reality the data they just put\ninto the session will be lost. The server just dumped their session to disk\ncontaining the old data as they updated the copy. So, the next time they come in\nthe session will be pulled from disk with the old values and anything they put\ninto it will have been lost. Depending on the application this could be very bad.\n\nTo see the issue go to the file:\njava/org/apache/catalina/session/PersistentManagerBase.java\n\nmethods:\nswapIn\nswapOut\nwriteSession\nfindSession\n(other related)\nthen the different stores load and save methods. There is nothing keeping this\nfrom happening.\n\nIf a lock is on a per session level this should keep it snappy for all other\nrequests etc. Either the session could be used as the lock or an object instance\nvariable on the session instance.\n\nI noticed there is a comment in the source code for\nPersistentManagerBase.processMaxIdleSwaps which reads:\n// Swap out all sessions idle longer than maxIdleSwap\n// FIXME: What's preventing us from mangling a session during\n// a request?\n\nSo, apparently someone thought of this. Nothing is keeping it from mangling a\nsession currently.\n\nWhat might be a fix is a session is given an instance variable which can be used\nfor a synchronization lock at the session level. In\nPersistentManagerBase.findSession, this lock would be used before the session\ncan be returned. After the session map is accessed it should then return null if\nthe session had been passivating before it was asked to be found. The session\nwould then be loaded from storage again before it was ever given back to be\naccessed had it been passivating. It would also be used in\nPersistentManagerBase.* which call swapOut.\n\nThe code would look like this (might explain it better):\n\nStandardSession:\n\n/**\n Used for locking the session during persistence operations.\n**/\nInteger persistence_locker = new Integer(0);\n\nPersistentManagerBase:\n\n    /**\n     * Return the active Session, associated with this Manager, with the\n     * specified session id (if any); otherwise return <code>null</code>.\n     * This method checks the persistence store if persistence is enabled,\n     * otherwise just uses the functionality from ManagerBase.\n     *\n     * @param id The session id for the session to be returned\n     *\n     * @exception IllegalStateException if a new session cannot be\n     *  instantiated for any reason\n     * @exception IOException if an input/output error occurs while\n     *  processing this request\n     */\n    public Session findSession(String id) throws IOException {\n\n        Session session = super.findSession(id);\n        //OK, at this point, we're not sure if another thread is trying to\n        //remove the session or not so the only way around this is to lock\n        //it (or attempt to) and then try to get it by this session id again.\n        //If the other code ran swapOut, then we should get a null back during\n        //this run, and if not, then by doing this we lock it out and then can\n        //access the session safely and will call access on it to update the\n        //access time and hopefully keep the processes from running swapOut\n        //so, we're adding two accesses to the hashmap instead of one for\n        //each request. But, we know we get the session or null back after\n        //the other process has had a chance to remove it or not.\n        if(session!=null{\n\t        synchronized(session.persistence_locker){\n\t\t\t\tsession = super.findSession(session.getIdInternal());\n\t\t\t\tif(session!=null){\n\t\t\t\t   //we need to do this here\n\t\t\t\t   //to keep any external calling code from messing up the\n\t\t\t\t   //concurrency.\n\t\t\t\t   session.access();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        if (session != null)\n            return (session);\n\n        // See if the Session is in the Store\n        session = swapIn(id);\n        return (session);\n\n    }\n\n    /**\n     * Swap idle sessions out to Store if they are idle too long.\n     */\n    protected void processMaxIdleSwaps() {\n\n        if (!isStarted() || maxIdleSwap < 0)\n            return;\n\n        Session sessions[] = findSessions();\n        long timeNow = System.currentTimeMillis();\n\n        // Swap out all sessions idle longer than maxIdleSwap\n        // FIXME: What's preventing us from mangling a session during\n        // a request?\n        if (maxIdleSwap >= 0) {\n            for (int i = 0; i < sessions.length; i++) {\n                StandardSession session = (StandardSession) sessions[i];\n                synchronized(session.persistence_locker){\n            \t    if (!session.isValid())\n            \t        continue;\n            \t    int timeIdle = // Truncate, do not round up\n            \t        (int) ((timeNow - session.getLastAccessedTime()) / 1000L);\n            \t    if (timeIdle > maxIdleSwap && timeIdle > minIdleSwap) {\n            \t        if (log.isDebugEnabled())\n            \t            log.debug(sm.getString\n            \t                (\"persistentManager.swapMaxIdle\",\n            \t                 session.getIdInternal(), new Integer(timeIdle)));\n            \t        try {\n            \t            swapOut(session);\n            \t        } catch (IOException e) {\n            \t            ;   // This is logged in writeSession()\n            \t        }\n            \t    }\n\t\t\t\t}\n            }\n        }\n\n    }\n\n\n    /**\n     * Swap idle sessions out to Store if too many are active\n     */\n    protected void processMaxActiveSwaps() {\n\n        if (!isStarted() || getMaxActiveSessions() < 0)\n            return;\n\n        Session sessions[] = findSessions();\n\n        // FIXME: Smarter algorithm (LRU)\n        if (getMaxActiveSessions() >= sessions.length)\n            return;\n\n        if(log.isDebugEnabled())\n            log.debug(sm.getString\n                (\"persistentManager.tooManyActive\",\n                 new Integer(sessions.length)));\n\n        int toswap = sessions.length - getMaxActiveSessions();\n        long timeNow = System.currentTimeMillis();\n\n        for (int i = 0; i < sessions.length && toswap > 0; i++) {\n\t\tsynchronized(sessions[i].persistence_locker){\n                    int timeIdle = // Truncate, do not round up\n            \t    (int) ((timeNow - sessions[i].getLastAccessedTime()) / 1000L);\n\t            if (timeIdle > minIdleSwap) {\n\t                if(log.isDebugEnabled())\n\t                    log.debug(sm.getString\n\t                        (\"persistentManager.swapTooManyActive\",\n\t                         sessions[i].getIdInternal(), new Integer(timeIdle)));\n\t                try {\n\t                    swapOut(sessions[i]);\n\t                } catch (IOException e) {\n\t                    ;   // This is logged in writeSession()\n\t                }\n\t                toswap--;\n\t            }\n\t\t\t}\n        }\n\n    }\n\n\n    /**\n     * Back up idle sessions.\n     */\n    protected void processMaxIdleBackups() {\n\n        if (!isStarted() || maxIdleBackup < 0)\n            return;\n\n        Session sessions[] = findSessions();\n        long timeNow = System.currentTimeMillis();\n\n        // Back up all sessions idle longer than maxIdleBackup\n        if (maxIdleBackup >= 0) {\n            for (int i = 0; i < sessions.length; i++) {\n                StandardSession session = (StandardSession) sessions[i];\n                synchronized(session.persistence_locker){\n                    if (!session.isValid())\n                \t    continue;\n                \tint timeIdle = // Truncate, do not round up\n                    \t(int) ((timeNow - session.getLastAccessedTime()) / 1000L);\n                \tif (timeIdle > maxIdleBackup) {\n                    \tif (log.isDebugEnabled())\n                    \t    log.debug(sm.getString\n                    \t        (\"persistentManager.backupMaxIdle\",\n                    \t        session.getIdInternal(), new Integer(timeIdle)));\n\n                    \ttry {\n                        \twriteSession(session);\n                    \t} catch (IOException e) {\n                        \t;   // This is logged in writeSession()\n                    \t}\n                \t}\n            \t}\n        \t}\n\t    }\n\n    }\n\n\n\nSo, currently one could very easily have a session and have some issues. Your\nuser would have a time when they thought they set something or your code could\nthink this then immediately the changes are lost. Anyways, that is what looks to\nbe the issue and a workable fix. The only place I saw other issues was inside of:\njava/org/apache/catalina/valves/PersistentValve.java\n\nwhere it incorrectly grabs the store from the PersistentManager and uses it\ndirectly instead of using the manager API. To me this is bad in that the manager\nis not able to be the manager and this other logic is accessing the store\ndirectly and should never happen...unless it is used only in test cases etc.\n\nThe only way you could possibly *sort of* workaround this issue would be to use\na HttpSessionActivationListener, but even then it would be hard to code up a\n100% reliable solution. You can see how this would *sort of* be a way to work\naround the issue by looking at the class StandardSession method passivate , and\nsee the events will be thrown to alert code the session will passivate, but it\nwould be pretty complicated and ugly to protect the session completely.",
    "comments": [
      "I thought about marking this as a P1 as it could cause some very hard to track\ndown data loss in a web application. What is the difference between P1 and P2\nfor the Tomcat project?",
      "Using a plain Object to synchronize on rather than an Integer(0) would be very\nslightly more efficient.",
      "Any reason not to use the Session object itself as the monitor?",
      "No real reason I can find. We might want to use an instance variable as the lock\njust in case there are ever any other synchronized methods or sections added to\nthe session where the entire session is locked. That would help if those\nsynchronized session methods would need to be used by other threads and could be\naccessed even during passivation. I only find one place where the session itself\nis locked and that is in the expires method where a synchronized (this) is used.\n So, using the session itself would be OK for now, and it may logically work out\nto be the case that no other action should ever be able to actually be made or\never wanted on the session while it is being cached/passivated. I mentioned it\ncould be used as the lock in the my description some where. So, at least for\nnow, or always if deemed to always be wanted, I don't see any reason why it\nitself can not be the lock.",
      "I have applied a patch to trunk based on the discussion here and proposed it for 6.0.x.",
      "The patch has been applied to 6.0.x and will be in 6.0.17 onwards.\n\nThanks for the suggested patch.",
      "Created attachment 23592\nReproducer, part 1: web application\n\nWeb application for TC 5.5, 6.0 to reproduce the issue",
      "Created attachment 23593\n Reproducer, part 2: client\n\nHTTPClient.\ncommons-httpclient-3.1.jar and its dependencies are not included.\n\nTo run:\n1. Deploy bug43343.war on a web server\n2. Unpack this bug43343_client.zip and put the following libraries into lib subfolder:\ncommons-httpclient-3.1.jar\ncommons-codec-1.3.jar\ncommons-logging-1.1.1.jar\n3. Run client.bat if you are on Windows\n\nThe client creates several (100) instances of HttpClient that connect to \n http://localhost:8080/bug43343/index.jsp?number=nn&loop=ll\n\nEach HttpClient remembers its cookies, and thus connects to a separate session.\nThe number parameter in URL is unique for each HttpClient instance, and loop starts with 0 and increments by 1 for each request from the same client.\n\nThe context.xml file of the web application configures PersistentManager with some low values, to that this issue is more visible.\n\nThe requests are being sent serially, with an interval of at least 4 seconds between request of the same client.\n\nThe client prints out the response of web application, and terminates if status code 500 is received.\n\nExpected result:\nSuccessful run of the client. That is, 150 loops, which needs about 10 minutes to complete.",
      "I am reopening this issue, because:\n1. The fix was not applied to TC 5.5, and the issue can be reproduced with TC 5.5.27.\n2. The fix [1], as applied to 6.0 is not complete, though one may argue.\n\nI am reducing severity to \"normal\".\nThe issue does not apply to the default configuration, where StandardManager is used.\n\n[1] http://svn.apache.org/viewvc?rev=656751&view=rev\n\nOn the issue:\nWhen PersistentManagerBase swaps out a session it performs two actions (see its implementation of swapOut()):\n1. writing session data out\n2. calling session.recycle() which invalidates the session\n\nWhen session that is being used by an active request is being swapped out at the same time (and what is the need for doing that? - you will not be able to free the memory, because there is a reference), two races can occur:\n\nCase A: request writes data to session at the same time as it is being written out and before the recycle() call.\nResult: the update is lost, next request will see the old values.\nThis is the case that is fixed by PersistentManagerBase patch in rev=656751 [1].\n\n\nCase B: request accesses session after session.recycle(), e.g. after swapOut() completes.\nResult: java.lang.IllegalStateException: setAttribute: Session already invalidated,\nthough the session was not invalidated, but just swapped out.\n\n\n---------------------------------------------\nSample output from the client when Case A is observed (with TC 5.5.27):\n\nMethod failed: HTTP/1.1 500 Internal Server Error\n\nError (number=-1509748992, loop=140):\njava.lang.IllegalStateException: Attribute loop is not equal to the expected val\nue.\nExpected: 139\nActual: 138\n\n---------------------------------------------\n\nCase B can be reproduced more easily if you replace\ns/ if (false) { / if (true) { /\non line 57 in file index.jsp of the web application.\n\nSample output from the client when Case B is observed (current tc6.0.x, with the mentioned change of line 57):\n\nMethod failed: HTTP/1.1 500 Internal Server Error\n\nError (number=-1309785265, loop=0):\njava.lang.IllegalStateException: setAttribute: Session already invalidated\n\n\nI have also seen the following NullPointerException when running against TC 5.5.27, and I think that it is the Case B:\n\nThe server encountered an internal error () that prevented it from fulfilling this request.\nexception:\n   org.apache.jasper.JasperException\n        org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServle\ntWrapper.java:460)\n        org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.ja\nva:373)\n        org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:329)\n        org.apache.jasper.servlet.JspServlet.service(JspServlet.java:265)\n        javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\nroot cause:\n   java.lang.NullPointerException\n        org.apache.catalina.session.StandardSession.setAttribute(StandardSession\n.java:1309)\n        org.apache.catalina.session.StandardSession.setAttribute(StandardSession\n.java:1248)\n        org.apache.catalina.session.StandardSessionFacade.setAttribute(StandardS\nessionFacade.java:130)\n        org.apache.jsp.index_jsp._jspService(index_jsp.java:88)\n        org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:98)\n        javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\n        org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.ja\nva:331)\n        org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:329)\n        org.apache.jasper.servlet.JspServlet.service(JspServlet.java:265)\n        javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\n---------------------------------------------\n\nCase B can be solved by avoiding swapping out sessions that are owned by a request. Synchronizing on a session is not sufficient.\n\nA workaround is to avoid enabling IdleSwap in the configuration (it is disabled by default).",
      "Case B fixed in trunk and proposed for 6.0.x\nComplete fix proposed for 5.5.x.",
      "This has been fixed for 6.0.x and will be included in 6.0.21 onwards.\n\nTransferring to TC5 so it can be used to track the fix there.",
      "This has been fixed in 5.5.x and will be included in 5.5.28 onwards."
    ],
    "creation_ts": "2007-09-10T10:54:45Z",
    "fixes": [
      43343
    ]
  },
  {
    "id": 62023,
    "summary": "Tomcat crashes when SSLprotocol value is defined",
    "description": "Created attachment 35687\nJava error log file\n\nTomcat 8.5.23 with Oracle jdk 1.8.0_152 with tomcat native library 1.2.16, openssl 1.0.2l running on RHEL7.3\n\nAny attempt to define a value for SSLProtocol causes crash on startup.\n\n\nUsing CATALINA_BASE:   /home/tomcat\nUsing CATALINA_HOME:   /home/tomcat\nUsing CATALINA_TMPDIR: /home/tomcat/temp\nUsing JRE_HOME:        /usr/java/latest\nUsing CLASSPATH:       /home/tomcat/bin/bootstrap.jar:/home/tomcat/bin/tomcat-juli.jar\n#\n# A fatal error has been detected by the Java Runtime Environment:\n#\n#  SIGSEGV (0xb) at pc=0x00007f164d78977a, pid=16600, tid=0x00007f166c39c700\n#\n# JRE version: Java(TM) SE Runtime Environment (8.0_152-b16) (build 1.8.0_152-b16)\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.152-b16 mixed mode linux-amd64 compressed oops)\n# Problematic frame:\n# C  [libtcnative-1.so.0.2.16+0x1d77a]  Java_org_apache_tomcat_jni_SSLContext_free+0xa\n#\n# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try \"ulimit -c unlimited\" before starting Java again\n#\n# An error report file with more information is saved as:\n# /home/apache-tomcat-8.5.23/conf/hs_err_pid16600.log\n#\n# If you would like to submit a bug report, please visit:\n#   http://bugreport.java.com/bugreport/crash.jsp\n# The crash happened outside the Java Virtual Machine in native code.\n# See problematic frame for where to report the bug.\n#\n/home/tomcat/conf/../bin/catalina.sh: line 572: 16600 Aborted                 (core dumped) \"/usr/java/latest/bin/java\" -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -classpath \"/home/tomcat/bin/bootstrap.jar:/home/tomcat/bin/tomcat-juli.jar\" -Dcatalina.base=\"/home/tomcat\" -Dcatalina.home=\"/home/tomcat\" -Djava.io.tmpdir=\"/home/tomcat/temp\" org.apache.catalina.startup.Bootstrap configtest\n\n\nConfig file stanza reads thus:\n\n  <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n                maxThreads=\"150\"\n                scheme=\"https\"\n                secure=\"true\"\n                SSLEnabled=\"true\"\n                SSLProtocol=\"+TLSv1\"\n                >\n\nAny variation of the SSLProtocol definition produces the same result. Remove it and the instance starts without issue.\n\nSort of reminiscent of 52714. hs_err output file attached.",
    "comments": [
      "I have no idea why it crashes, so maybe this can stay open for now, but:\n- Please read the documentation on SSL config\n- The SSLProtocol attribute is a JSSE attribute and it doesn't do what you think it does",
      "Tested with latest 8.5.x.\n\nThat config snippet doesn't crash for me. Tomcat won't even start until the closing '>' is changed to '/>'. Then I get the expected warning about missing SSLCertificateFile\n\nIf you can reproduce this with the latest 8.5.x code please feel free to re-open. You'll need to provide the exact steps to reproduce this from a clean install.",
      "The  full connector config block is thus:\n\n    <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n                maxThreads=\"150\"\n                scheme=\"https\"\n                secure=\"true\"\n                SSLEnabled=\"true\"\n                protocols=\"+TLSv1\"\n                >\n        <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n        <SSLHostConfig>\n            <Certificate certificateKeyFile=\"/home/tomcat/conf/certs2/wild.wherever.com.key\"\n                         certificateFile=\"/home/tomcat/conf/certs2/wild.wherever.com.crt\"\n                         certificateChainFile=\"/home/tomcat/conf/certs2/intermediate.crt\"\n                         type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\n\nNote that in this instance I've tried the \"protocols\" attribute since apparently SSLProtocol isn't correct for this style of connector.",
      "@Remy/Mark:\n\nPerhaps this is a documentation issue.\n\nhttps://tomcat.apache.org/tomcat-8.0-doc/config/http.html#SSL_Support\nhttps://tomcat.apache.org/tomcat-8.0-doc/ssl-howto.html\n\nThe ssl-howto doc gives this example.\n\nThe APR connector uses different attributes for many SSL settings, particularly keys and certificates. An example of an APR configuration is:\n\n<!-- Define a SSL Coyote HTTP/1.1 Connector on port 8443 -->\n<Connector\n           protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n           port=\"8443\" maxThreads=\"200\"\n           scheme=\"https\" secure=\"true\" SSLEnabled=\"true\"\n           SSLCertificateFile=\"/usr/local/ssl/server.crt\"\n           SSLCertificateKeyFile=\"/usr/local/ssl/server.pem\"\n           SSLVerifyClient=\"optional\" SSLProtocol=\"TLSv1+TLSv1.1+TLSv1.2\"/>\n\nAs stated, the config works fine provided I remove the SSLProtocol option.",
      "Please do not reopen the report, this works for me too. About the doc, it is correct, I made a mistake about \"The SSLProtocol attribute is a JSSE attribute and it doesn't do what you think it does\", it's actually the \"sslProtocol\" attribute that is JSSE only, not \"SSLProtocol\" and it's confusing (and deprecated).",
      "Re-opening because I can reproduce this locally now the full configuration has been provided. The configuration may be invalid but we really should be displaying a useful error message rather than crashing. I might not get to this until next week.",
      "I can reproduce this by adding any SSLHostConfig attribute to the Connector (namely `SSLVerifyClient=\"optional\"`). The problem here is that when using APR and specifying Connector configuration which creates two '_default_' SSLHostConfig objects, tomcat-native crashes without providing any indication of what happened. That is not a great user experience :( This happens because org.apache.tomcat.util.net.AprEndpoint.releaseSSLContext() tries to release a zero context that tomcat-native asserts is non-zero (see tomcat-native native/src/sslcontext.c:363). After doing some tracing, it looks like AprEndpoint's releaseSSLContext method calls sslHostConfig.getOpenSslContext() and sslHostConfig.getOpenSslConfContext() which always seem to return 0. Is that correct behavior? It seems a bit buggy to me.\n\nI was able to correct this behavior by adding two zero checks to the releaseSSLContext method in AprEndpoint:\n\n 629     @Override\n 630     protected void releaseSSLContext(SSLHostConfig sslHostConfig) {\n 631         Long ctx = sslHostConfig.getOpenSslContext();\n 632         if (ctx != null && ctx != 0) {\n 633             SSLContext.free(ctx.longValue());\n 634             sslHostConfig.setOpenSslContext(null);\n 635         }\n 636         Long cctx = sslHostConfig.getOpenSslConfContext();\n 637         if (cctx != null && cctx != 0) {\n 638             SSLConf.free(cctx.longValue());\n 639             sslHostConfig.setOpenSslConfContext(null);\n 640         }\n 641     }\n\nThis causes the correct behavior to occur (at least it does the same thing as NioEndpoint and prints the endpoint.duplicateSslHostName message). I was going to push this, but given that I'm not sure how this OpenSSLContext stuff is supposed to work and the lack of javadocs in the new classes, I thought it best to get someone's opinion first.",
      "Yes, something is wrong as there are null checks, yet, the sslHostConfig.getOpenSslContext() (same for the conf) return value cannot be null (the default is Long 0). Hummm, I would standardize on null as the new default value, so that if there's a problem it'll likely cause a NPE rather than a crash.",
      "(In reply to Coty Sutherland from comment #7)\n> I can reproduce this by adding any SSLHostConfig attribute to the Connector\n> (namely `SSLVerifyClient=\"optional\"`). The problem here is that when using\n> APR and specifying Connector configuration which creates two '_default_'\n> SSLHostConfig objects, tomcat-native crashes without providing any\n> indication of what happened. That is not a great user experience :( This\n> happens because org.apache.tomcat.util.net.AprEndpoint.releaseSSLContext()\n> tries to release a zero context that tomcat-native asserts is non-zero (see\n> tomcat-native native/src/sslcontext.c:363). After doing some tracing, it\n> looks like AprEndpoint's releaseSSLContext method calls\n> sslHostConfig.getOpenSslContext() and sslHostConfig.getOpenSslConfContext()\n> which always seem to return 0. Is that correct behavior? It seems a bit\n> buggy to me.\n> \n> I was able to correct this behavior by adding two zero checks to the\n> releaseSSLContext method in AprEndpoint:\n> \n>  629     @Override\n>  630     protected void releaseSSLContext(SSLHostConfig sslHostConfig) {\n>  631         Long ctx = sslHostConfig.getOpenSslContext();\n>  632         if (ctx != null && ctx != 0) {\n>  633             SSLContext.free(ctx.longValue());\n>  634             sslHostConfig.setOpenSslContext(null);\n>  635         }\n>  636         Long cctx = sslHostConfig.getOpenSslConfContext();\n>  637         if (cctx != null && cctx != 0) {\n>  638             SSLConf.free(cctx.longValue());\n>  639             sslHostConfig.setOpenSslConfContext(null);\n>  640         }\n>  641     }\n> \n> This causes the correct behavior to occur (at least it does the same thing\n> as NioEndpoint and prints the endpoint.duplicateSslHostName message). I was\n> going to push this, but given that I'm not sure how this OpenSSLContext\n> stuff is supposed to work and the lack of javadocs in the new classes, I\n> thought it best to get someone's opinion first.\n\nYes, the aded check against 0 instead of only checking against null looks OK. The native pointer here is wrapper by a Long and the native null pointer would be a (Long)0.\n\nRegards,\n\nRainer",
      "Might this be in any way related to problems creating a JSSE configuration?\nI ran into what looked like https://bz.apache.org/bugzilla/show_bug.cgi?id=59910 when attempting to use a keystore based on a CA wildcard certificate.\nIt seems to insist on using an alias of \"tomcat\" but even with a single entry in the keystore with that alias it complains there is no valid certificate.",
      "Fixed in:\n- trunk for 9.0.5 onwards\n- 8.5.x for 8.5.28 onwards\n\nThanks for the report!"
    ],
    "creation_ts": "2018-01-19T13:20:36Z",
    "fixes": [
      62023
    ]
  },
  {
    "id": 64974,
    "summary": "Tomcat losing HTTP pipeline requests if asking for available bytes",
    "description": "Created attachment 37599\nJust before the fill will discard requests (in debugger)\n\nStarting from 9.0.39 Tomcat server does lose pipelined HTTP requests.\n\nThe scenario is the following:\n\n1. A client connects and send a single packet of two HTTP requests\n2. The server accepts connection, reads the bytes, parses the first request, does aux tasks, and notifies a servlet by calling the service method. At this point, Http1InputBuffer contains both requests, but the first is processed, so the position points to the beginning of the second request (that is not yet processed/parsed).\n3. The called servlet does start async, start a new thread, and then does setup read listener.\n4. setReadListener function invocation leads to the following call chain: setReadListener -> CoyoteInputStream.setReadListener -> InputBuffer.setReadListener -> InputBuffer.isReady -> Request.action (NB_READ_INTEREST) -> AbstractProcessor.action -> AbstractProcessor.isReadyForRead -> Http11Processor.available -> Http11InputBufer.available -> Http11InputBuffer.fill\n\nThe fill function checks for the \"parsingHeader\" flag and goes to the alternative branch. The byte buffer still contains both requests, and the position is pointing to the beginning of the second request. However, the alternative branch does change both position and limit to the same value losing the right end position. After that, the fill function does several preparation and invokes socket.read that overwrites the second request or read nothing but the second request is lost forever because the end position was lost.\n\nSee the attached screenshot of this moment. \n\nIt looks like the code lading to the issue was there for a long time, but due to some changes in 9.0.39, it started to happen. But for sure, the fill function shouldn't simply discard the limit position but should append bytes after the limit regardless of the \"end\" value that points to the last parsed request that is not correct.",
    "comments": [
      "What is the point trying to find edge cases ? You have no content for these kind of requests, so it is never going to do anything useful.",
      "I don't see the point. \" You have no content for these kind of requests\" - there are two valid requests. Two valid requests should produce two responses. Or we should drop the connection after processing the first of them. Silent discarding any of them leads to breaking HTTP pipeline and all upcoming requests will have wrong responses.",
      "There is no such restriction to send requests separately. A client may send requests at any time and shouldn't wait for responses before sending the next: this is the idea of HTTP pipelining. Also, TCP fragmentation/defragmentation is out of our control. Therefore, two requests in two network packets could be merged into a single one at some point on the way to the server.",
      "I have a test case that replicates this now and some ideas for a potential fix.\n\nCombining async and pipelining does seem an odd thing to do but I don't see any spec language that would prevent it.",
      "(In reply to Mark Thomas from comment #4)\n> I have a test case that replicates this now and some ideas for a potential\n> fix.\n> \n> Combining async and pipelining does seem an odd thing to do but I don't see\n> any spec language that would prevent it.\n\nIt still doesn't make sense to me and I still don't see how it really happens with input that means something and an application that doesn't actively tries to mess up its input.\n\nI think the code in Http11InputBuffer.available(boolean read) could likely use InputFilter.isFinished to avoid the edge case.",
      "Both isFinished() and available() appear to have problems differentiating between current request data and pipelined request data. I thought I had a trivial fix but it is breaking other tests. Still working on it.",
      "Fixed in:\n- 10.0.x for 10.0.1 onwards\n- 9.0.x for 9.0.42 onwards\n- 8.5.x for 8.5.62 onwards"
    ],
    "creation_ts": "2020-12-10T15:41:40Z",
    "fixes": [
      64974
    ]
  },
  {
    "id": 66210,
    "summary": "Some unit tests are failing on a non-English PC",
    "description": "Simliar to https://bz.apache.org/bugzilla/show_bug.cgi?id=66206\n\nI re-ran the tests on a non-English PC and found a total of two unit tests which are failing, because of expected value was hard-coded as en and actual value was not. \n\nBUT `org.apache.coyote.http2.TestHttp2Limits#testSettingsOverheadLimits`,I don't know know how to fix the problem of it.\n\n\nAnother problematic test is following one:\norg.apache.coyote.http2.TestFlowControl#testNotFound\n\nTestcase: testNotFound[0: loop [0], useAsyncIO[false]] took 0.462 sec\n\tFAILED\nexpected:<...ontent-language]-[zh[]]\n3-Header-[content-...> but was:<...ontent-language]-[zh[-CN]]\n3-Header-[content-...>\njunit.framework.AssertionFailedError: expected:<...ontent-language]-[zh[]]\n3-Header-[content-...> but was:<...ontent-language]-[zh[-CN]]\n3-Header-[content-...>\n\nThe reason for this is that we should get the default local through StringManager, not directly through Locale.getDefault(), and the toLanguageTag method is used when setting the local of request, so we should be consistent here as well.",
    "comments": [
      "(In reply to HanLi from comment #0)\n\n> The reason for this is that we should get the default local through\n> StringManager, not directly through Locale.getDefault(), and the\n> toLanguageTag method is used when setting the local of request, so we should\n> be consistent here as well.\nSorry, there is a mistake here, set the local of the response, not the local of the request",
      "(In reply to HanLi from comment #0)\n\n> BUT `org.apache.coyote.http2.TestHttp2Limits#testSettingsOverheadLimits`,I\n> don't know know how to fix the problem of it.\n\nAha! I found that Mark had solved a similar problem before, so I referenced his implementation. ;)",
      "I think we have a number of options here:\n\n1. (Similar to my previous 'fixes') reduce the text tested to that which doesn't change depending on locale.\n\n2. Force the unit tests to run under en-US.\n\n3. Use StringManager to retrieve the expected txt in the current locale and then compare the actual output to the locale specific expected text.\n\n\nMy concern with 1 is that sometimes we may skip testing parts of the output that are relevant and miss bugs as a result.\n\nOption 2 is sufficient to test the functionality primarily being tested whereas option 3 (sort of) tests some of the i18n as well.\n\nI'm leaning towards option 3 as it doesn't look too challenging to implement for the small number of test cases where this is an issue. We do need to make sure we distinguish between the system locale and the locale we expected to be used for the response.\n\nThoughts?",
      "(In reply to Mark Thomas from comment #3)\n\n> Option 2 is sufficient to test the functionality primarily being tested\n> whereas option 3 (sort of) tests some of the i18n as well.\nAgreed! I also think that option 3 is the best solution.\n\n\n> I'm leaning towards option 3 as it doesn't look too challenging to implement for > the small number of test cases where this is an issue. \nIt's not too difficult to implement, and i found that the only trouble is that we may need to process the parameters in the text via regular expressions (we may not get the parameters, e.g. connectionId).\n\nSo i will refix the problematic unit tests (include previous PR) according to option 3, is that OK?\n\n\nHan",
      "Sounds great. Thanks.",
      "PR: https://github.com/apache/tomcat/pull/542"
    ],
    "creation_ts": "2022-08-12T06:30:45Z",
    "fixes": [
      66210
    ]
  },
  {
    "id": 52724,
    "summary": "An incomplete fix for the resource leak bugs in Catalina.java",
    "description": "The fix revision 730178 was aimed to remove an resource leak bug on the  FileInputStream object \"fis\" (created line 458), the Socket \"socket\" (created at line 477), \n\nthe OutputStream object \"stream\", and the FileInputStream object \"inputStream\" in the file \"/tomcat/tc7.0.x/trunk/java/org/apache/catalina/startup/Catalina.java\" , but \n\nit is incomplete. \n\nThere are some problems: \n1. the InputSource object \"is\" created at line 452 is not closed. \n2. when the statements at lines 455-457 throw some exception, the \"fis\" can not be closed as expected. \n3. when the statements at lines 480-483 throw some exception, the \"socket\" and the \"stream\" can not be closed as expected. \n4. when the statements at lines 574-576 throw some exception, the \"inputStream\" can not be closed as expected. \n\nThe best way to close such resource objects is putting such close operations in the finaly block of a try-catch-finally structure.",
    "comments": [
      "(In reply to comment #0)\nFor all of the cases raised (at least those that are valid) the JVM is about 10 lines away from shutting down which makes any possible resource leak pretty much irrelevant. This demonstrates the necessity of understanding the code before claiming that a critical bug exists.\n\nI was tempted to resolve this bug as INVALID but it is true that the code could be cleaner and that would prevent someone creating a duplicate (and similarly pointless) issue in the future.\n\nI have therefore changed this bug to an enhancement and cleaned up the code.\n\nResponding to the specific points:\n\n> 1. the InputSource object \"is\" created at line 452 is not closed. \n\nIt is an InputSource not an InputStream. There is no close() method.\n\n> 2. when the statements at lines 455-457 throw some exception, the \"fis\" can not\n> be closed as expected.\n\nAnd less than a second later the JVM shuts down. Not an issue. Cleaned up anyway.\n \n> 3. when the statements at lines 480-483 throw some exception, the \"socket\" and\n> the \"stream\" can not be closed as expected.\n\nNon-issue for the same reason as 2.\n \n> 4. when the statements at lines 574-576 throw some exception, the \"inputStream\"\n> can not be closed as expected.\n\nNon-issue for the same reason as 2.\n\nBefore raising a bug, especially a critical one, it is important to do sufficient research to be very sure of your ground. If someone can't be bothered to do the research to ensure a bug is valid, don't expect the Tomcat committers to bother to explain why they have closed a bug as INVALID."
    ],
    "creation_ts": "2012-02-21T10:35:32Z",
    "fixes": [
      52724
    ]
  },
  {
    "id": 56320,
    "summary": "DefaultServlet leaks file handles",
    "description": "While running ab test against tomcat 8 I have the following failure:\n+++\n44714 27-Mar-2014 04:41:00.605 SEVERE [http-bio-8001-Acceptor-0] org.apache.tomcat.util.net.JIoEndpoint$Acceptor.run Socket accept failed\n244715  java.net.SocketException: Too many open files\n244716         at java.net.PlainSocketImpl.socketAccept(Native Method)\n244717         at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:398)\n244718         at java.net.ServerSocket.implAccept(ServerSocket.java:530)\n+++\nThat doesn't depend on the connector.\n\nAnd lsof says:\n+++\n[hudson@messaging-09 tc8]$ lsof | grep ROOT | wc -l\n32667\n[hudson@messaging-09 tc8]$ lsof | grep ROOT | grep 64KiB.bin | wc -l\n32667\n+++\n\n64KiB.bin is the file I am requesting in ab.",
    "comments": [
      "In fact it seems it is linked with sendfile.",
      "Thanks for the report. I've fixed this in trunk and it will be included in 8.0.6 onwards."
    ],
    "creation_ts": "2014-03-27T08:44:50Z",
    "fixes": [
      56320
    ]
  },
  {
    "id": 66183,
    "summary": "AccessLogValve - %{xxx}c should output the value of all cookies with the same name",
    "description": "According to RFC 6265, the server should be able to process cookies with the same name, and tomcat has implemented this functionality. So when using %{xxx}c in accesslog, we should alse output the values of all cookies with same name. Currently only the first value is output and the other values are ignored.",
    "comments": [
      "If it's confirmed that a fix is needed, I'd be happy to provide pr, and I'd probably splice multiple values with commas, just like this: value1,value2,value3",
      "I agree that this needs to be fixed. Your plan sounds reasonable to me.",
      "(In reply to Mark Thomas from comment #2)\n> I agree that this needs to be fixed. Your plan sounds reasonable to me.\nOk, I'll go ahead and fix this bug today.\n\nThanks Mark!\n\nHan",
      "There is also this problem in Extended Access Log Valve.",
      "PR: https://github.com/apache/tomcat/pull/541",
      "Thanks for the report and the PR.\n\nFixed in:\n- 10.1.x for 10.1.0-M18 onwards\n- 10.0.x for 10.0.24 onwards\n-  9.0.x for  9.0.66 onwards\n-  8.5.x for  8.5.83 onwards"
    ],
    "creation_ts": "2022-07-28T14:51:12Z",
    "fixes": [
      66183
    ]
  },
  {
    "id": 64784,
    "summary": "Add option to remove date from generated Java header comment",
    "description": "Currently, org.apache.jasper.compiler.Generator#generateCommentHeader writes the current timestamp using `new Date()` into the comment header, which makes builds keeping sources non-reproducible, because the timestamp changes with each precompile.\n\nThere should be an option to disable or override this timestamp or maybe it can be removed completely?",
    "comments": [
      "I would favor to remove it completely. It adds zero benefit.",
      "The date was added to the .java file to aid trouble shooting JSP compilation issues and remind system admins that the last modified time of the file will reflect the last modified time of the JSP source rather than the time the file was generated.\n\nAs far as I recall this wasn't requested by users but was something we added proactively when we started changing the last modified time although it would be worth a trawl through the archives to confirm my recollection.\n\nI'm not against removing it entirely. I've done a fair amount of debugging of JSP generation and I don't recall using it. If we wanted to be cautious we could probably remove it when precompiling but leave it when compiling on demand.",
      "+1 to at least removing it from a precompile.",
      "Fixed in:\n- 10.0.x for 10.0.0-M10 onwards\n- 9.0.x for 9.0.40 onwards\n\nDisabled for pre-compiled files. Retained for on-the-fly compilation."
    ],
    "creation_ts": "2020-10-02T08:57:20Z",
    "fixes": [
      64784
    ]
  },
  {
    "id": 65177,
    "summary": "org.apache.tomcat.util.net.TestSsl fails with OutOfMemoryError on 32-bit JVM",
    "description": "Testing 8.5.64 release candidate, one unit test fails with OutOfMemoryError when running with a 32-bit JVM. It completes successfully with a 64-bit one.\n\nThe failing test:\norg.apache.tomcat.util.net.TestSsl\n\nTestcase: testPost took 12,641 sec\n\u00a0 \u00a0 FAILED\nexpected:<0> but was:<2>\njunit.framework.AssertionFailedError: expected:<0> but was:<2>\n\u00a0 \u00a0 at org.apache.tomcat.util.net.TestSsl.testPost(TestSsl.java:160)\n\nIt fails in the same way with all 3 connectors. Here is an output from running with NIO connector and Java 7u80 (Oracle):\n\n[[[\n09-Mar-2021 08:42:25.819 INFO [main] org.apache.catalina.startup.LoggingBaseTest.setUp Starting test case [testPost]\n09-Mar-2021 08:42:25.824 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"https-jsse-nio-127.0.0.1-auto-3\"]\n09-Mar-2021 08:42:25.826 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\n09-Mar-2021 08:42:25.827 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service [Tomcat]\n09-Mar-2021 08:42:25.827 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.64\n09-Mar-2021 08:42:25.842 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"https-jsse-nio-127.0.0.1-auto-3-59015\"]\n09-Mar-2021 08:42:26.475 SEVERE [https-jsse-nio-127.0.0.1-auto-3-exec-5] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Failed to complete processing of a request\n    java.lang.OutOfMemoryError: Java heap space\n        at java.io.ByteArrayOutputStream.<init>(ByteArrayOutputStream.java:77)\n        at org.apache.tomcat.util.net.TestSsl$SimplePostServlet.doPost(TestSsl.java:300)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:544)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:364)\n        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:616)\n        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:831)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1629)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:745)\n09-Mar-2021 08:42:26.555 SEVERE [https-jsse-nio-127.0.0.1-auto-3-exec-6] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Failed to complete processing of a request\n    java.lang.OutOfMemoryError: Java heap space\n        at java.io.ByteArrayOutputStream.<init>(ByteArrayOutputStream.java:77)\n        at org.apache.tomcat.util.net.TestSsl$SimplePostServlet.doPost(TestSsl.java:300)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:544)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:364)\n        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:616)\n        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:831)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1629)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:745)\njava.net.SocketException: Connection reset by peer: socket write error\n    at java.net.SocketOutputStream.socketWrite0(Native Method)\n    at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:113)\n    at java.net.SocketOutputStream.write(SocketOutputStream.java:159)\n    at sun.security.ssl.OutputRecord.writeBuffer(OutputRecord.java:377)\n    at sun.security.ssl.OutputRecord.write(OutputRecord.java:363)\n    at sun.security.ssl.SSLSocketImpl.writeRecordInternal(SSLSocketImpl.java:837)\n    at sun.security.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:808)\n    at sun.security.ssl.AppOutputStream.write(AppOutputStream.java:122)\n    at org.apache.tomcat.util.net.TestSsl$1.run(TestSsl.java:117)\njava.net.SocketException: Connection reset by peer: socket write error\n    at java.net.SocketOutputStream.socketWrite0(Native Method)\n    at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:113)\n    at java.net.SocketOutputStream.write(SocketOutputStream.java:159)\n    at sun.security.ssl.OutputRecord.writeBuffer(OutputRecord.java:377)\n    at sun.security.ssl.OutputRecord.write(OutputRecord.java:363)\n    at sun.security.ssl.SSLSocketImpl.writeRecordInternal(SSLSocketImpl.java:837)\n    at sun.security.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:808)\n    at sun.security.ssl.AppOutputStream.write(AppOutputStream.java:122)\n    at org.apache.tomcat.util.net.TestSsl$1.run(TestSsl.java:117)\n09-Mar-2021 08:42:38.441 INFO [main] org.apache.coyote.AbstractProtocol.pause Pausing ProtocolHandler [\"https-jsse-nio-127.0.0.1-auto-3-59015\"]\n09-Mar-2021 08:42:38.448 INFO [main] org.apache.catalina.core.StandardService.stopInternal Stopping service [Tomcat]\n09-Mar-2021 08:42:38.451 INFO [main] org.apache.coyote.AbstractProtocol.stop Stopping ProtocolHandler [\"https-jsse-nio-127.0.0.1-auto-3-59015\"]\n09-Mar-2021 08:42:38.456 INFO [main] org.apache.coyote.AbstractProtocol.destroy Destroying ProtocolHandler [\"https-jsse-nio-127.0.0.1-auto-3-59015\"]\n]]]\n\nThe failing line (TestSsl.java:300) does\n\n>300: ByteArrayOutputStream baos = new ByteArrayOutputStream(POST_DATA_SIZE);\n\nwhere POST_DATA_SIZE = 16 * 1024 * 1024, i.e. 16 Mb.\n\nThe test runs 8 threads (iterations = 8), and each of them allocates 16 Mb on the sending side:\n\n>96:  int iterations = 8;\n\n>109: byte[] bytes = new byte[POST_DATA_SIZE]; // 16MB\n\nand 16 Mb on the receiving side (the ByteArrayOutputStream above created in a servlet's method), i.e. 256 Mb total in byte arrays.\n\nThus far I tested the following:\n\n1) Running the test case alone, with the following setting in a build.properties file, fails in the same way:\n\n[[[\ntest.entry=org.apache.tomcat.util.net.TestSsl\ntest.entry.methods=testPost\n]]]\n\n2) The test fails with 32-bit Java 7u80 from Oracle.\n3) The test fails with 32-bit Java 8u202 from Oracle.\n4) The test completes successfully with 64-bit Java 8u282 from AdoptOpenJDK.\n\n5) If I change the ByteArrayOutputStream constructor call above to one without arguments, it fails at a different place - when growing an internal byte array:\n\n[[[\n\u00a0 \u00a0 java.lang.OutOfMemoryError: Java heap space\n\u00a0 \u00a0 \u00a0 \u00a0 at java.util.Arrays.copyOf(Arrays.java:3236)\n\u00a0 \u00a0 \u00a0 \u00a0 at java.io.ByteArrayOutputStream.grow(ByteArrayOutputStream.java:118)\n\u00a0 \u00a0 \u00a0 \u00a0 at java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.java:93)\n\u00a0 \u00a0 \u00a0 \u00a0 at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:153)\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.tomcat.util.net.TestSsl$SimplePostServlet.doPost(TestSsl.java:306)\n]]]\n\n6) If I reduce the count of threads from 8 to 6 (changing 'iterations' on line 96), the test passes successfully.\n\nThus a solution is to reduce the number of threads.\n\nAlternatively, it is possible to reuse the same array on the sending side. Those arrays could contain random data, but as of now they all have the same content:\n\n>110: Arrays.fill(bytes, (byte) 1);",
    "comments": [
      "Fixed in:\n- 10.0.x for 10.0.5 onwards\n- 9.0.x for 9.0.45 onwards\n- 8.5.x for 8.5.65 onwards\n\nI opted for the shared array approach.",
      "Ack.\n\nTesting current 8.5.x with Java 7u80 32-bit (Windows 10), the test now completes successfully.\n\nTestcase: testPost took 14,948 sec"
    ],
    "creation_ts": "2021-03-09T11:41:03Z",
    "fixes": [
      65177
    ]
  },
  {
    "id": 69426,
    "summary": "JCE cannot authenticate the provider BC",
    "description": "Created attachment 39922\nStacktrace\n\nNPE during using BouncycastleProvider to encrypt mail. We migrate to the Oracle Java 21.0.5 and Tomcat 11.0.0 and when we trying to send encrypted message we got a NPE, but it works on Tomcat 10. This is because in Tomcat 11 in the WebappClassLoaderBase while loadClass it pass CodeSource with null for URL parameter because SecurityManager will be removed from Java 21, but it is not completely removed yet and inside javax.crypto.JceSecurity it uses JceSecurity.getCodeBase during verify provider",
    "comments": [
      "This is the second report I've seen of problems when CodeSource is null. I think we need to restore it for 11.0.x. I'll work on a patch.",
      "Fixed in:\n- 11.0.x for 11.0.1 onwards\n\n10.1.x and earlier were not affected",
      "When can we expect this version to be released?",
      "We have a history of approximately one release per branch per month, but we offer no actual promises. Further questions should be directed to the users' mailing list."
    ],
    "creation_ts": "2024-11-01T17:49:56Z",
    "fixes": [
      69426
    ]
  },
  {
    "id": 42937,
    "summary": "The loop of LazyReplicatedMap.publishEntryInfo doesn't end.",
    "description": "The loop of LazyReplicatedMap.publishEntryInfo doesn't end.\n\nReproduction condition\n Tomcat6.0.13\n Three cluster configurations or more(tomcat1\u0081Atomcat2\u0081Atomcat3..).\n Use BackupManager.\n \norg.apache.catalina.tribes.tipis.LazyReplicatedMap.publishEntryInfo has \ndo-while loop.\nThe end condition of this loop is \"success==true\" or \"firstIdx==nextIdx\".\n\nIn the 157th line\n(UniqueId id = getChannel().send(backup, msg, getChannelSendOptions())),\nIf ChannelException is thrown (For instance, Tomcat of the destination is \nstopped), success keeps false.\nTherefore, it tries to send MapMessage to the next backup node. \nHowever, The 157th line is Member next = members[firstIdx].\nBecause firstIdx is immutable, MapMessage is send to The same node last time.\nAs a result, ChannelException is thrown again. \nIn this case, success keeps false forever.\n\nIn addition,\nfirstIdx==nextIdx never consists. \nBecause firstIdx is immutable, and nextIdx is either 0 or firstIdx + 1. \n(Both firstIdx and nextIdx never become 0 \n in three cluster configurations or more(tomcat1\u0081Atomcat2\u0081Atomcat3..).)\n\nThus, \nWhen ChannelException is thrown once, \nsuccess keeps false and firstIdx==nextIdx never consists.\nAs a result, \nThe do-while loop of LazyReplicatedMap.publishEntryInfo doesn't end.\n\nThe following messages are repeatedly output. \n***\nJul 19, 2007 4:23:05 PM org.apache.catalina.tribes.tipis.LazyReplicatedMap \npublishEntryInfo\nSEVERE: Unable to replicate backup \nkey:C46A261B805660196F84A9832F6DFC8B.tomcat1 to \nbackup:org.apache.catalina.tribes.membership.MemberImpl\n[tcp://XXXXXXXX:14001,XXXXXXXX,14001, alive=2735,id={-83 97 -47 -57 117 -79 \n76 -12 -97 -115 19 -40 -88 -34 -12 -92 }, payload={}, command={}, domain=\n{}, ]. Reason:Send failed, attempt:2 max:1; Faulty \nmembers:tcp://XXXXXXXX:14001; \norg.apache.catalina.tribes.ChannelException: Send failed, attempt:2 max:1; \nFaulty members:tcp://XXXXXXXX:14001; \n\n        ...omits\n\n\tat org.apache.catalina.tribes.group.GroupChannel.send\n(GroupChannel.java:175)\n\tat org.apache.catalina.tribes.tipis.LazyReplicatedMap.publishEntryInfo\n(LazyReplicatedMap.java:157)\n\tat org.apache.catalina.tribes.tipis.AbstractReplicatedMap.put\n(AbstractReplicatedMap.java:878)\n\tat org.apache.catalina.tribes.tipis.AbstractReplicatedMap.put\n(AbstractReplicatedMap.java:864)\n\tat org.apache.catalina.session.ManagerBase.add(ManagerBase.java:740)\n\tat org.apache.catalina.session.StandardSession.setId\n(StandardSession.java:368)\n\tat org.apache.catalina.ha.session.DeltaSession.setId\n(DeltaSession.java:243)\n\tat org.apache.catalina.session.ManagerBase.createSession\n(ManagerBase.java:829)\n\tat org.apache.catalina.session.StandardManager.createSession\n(StandardManager.java:291)\n\n\t...omits\n\nCaused by: java.net.ConnectException: Connection refused: no further \ninformation\n\tat sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\n\tat sun.nio.ch.SocketChannelImpl.finishConnect\n(SocketChannelImpl.java:527)\n\tat org.apache.catalina.tribes.transport.nio.NioSender.process\n(NioSender.java:87)\n\tat org.apache.catalina.tribes.transport.nio.ParallelNioSender.doLoop\n(ParallelNioSender.java:130)\n        ... 42 more\n***",
    "comments": [
      "Thanks for the report, the correct index nextIdx is now used in the algorithm",
      "Thanks for these revision.\n http://svn.apache.org/viewvc?view=rev&rev=557635 \n http://svn.apache.org/viewvc?view=rev&rev=557638\n\nbut, I think this revision is not enough.\n\nnextIdx is still immutable.\nI think following correction is needed.\n\n //nextIdx = firstIdx + 1; \n nextIdx++;",
      "absolutely correct, thanks for helping out"
    ],
    "creation_ts": "2007-07-19T02:35:43Z",
    "fixes": [
      42937
    ]
  },
  {
    "id": 65001,
    "summary": "HTTPNIO non-blocking IO servlet 3.1 API may fail to alert webapp that a request is complete",
    "description": "Created attachment 37624\nTest servlet\n\nUnder certain IO error conditions, tomcat will fail to alert that an asynchronous request is completed and destroyed.\nBoth the AsyncListener's onComplete method and ServletRequestListener's requestDestroyed method are not called.\nThis may cause a webapp to believe that a request is still valid while tomcat has already recycled the objects.\n\nI was able to reproduce this issue using a WriteListener (non-blocking IO servlet API 3.1) with the httpnio connector on the latest tomcat release (9.0.41).\nThis appears to be caused when an IOException is raised while attempting to write to the ServletOutputChannel during the WriteListener's onWritePossible callback.\n\nIt also seems possible to trigger this issue by manually throwing an exception in the onWritePossible callback.\n\nThe following exception can also be seen in the logs:\njava.lang.IllegalStateException: Calling [asyncPostProcess()] is not valid for a request with Async state [ERROR]\n\nI've attached a test servlet that demonstrates this issue.\nTo simulate IO errors, an http request is aborted before the full response body is read. The servlet then records various async callbacks it receives and it can be seen that some callbacks are not always called, i.e. the AsyncListener's onComplete callback and ServletRequestListener's requestDestroyed callback.\nThe servlet compares synchronous requests, asynchronous requests, and asynchronous requests with non-blocking IO.",
    "comments": [
      "Thanks for the really good test case. I've found a (hopefully the) bug. I'm currently working on a fix.",
      "Thanks again for the test case. A good test case really does make a huge difference to how easily we can fix a bug.\n\nFixed in:\n- 10.0.x for 10.0.1 onwards\n- 9.0.x for 9.0.42 onwards\n- 8.5.x for 8.5.62 onwards"
    ],
    "creation_ts": "2020-12-17T15:38:53Z",
    "fixes": [
      65001
    ]
  },
  {
    "id": 65684,
    "summary": "NullPointerException in Tomcat's ClassLoaderLogManager when logging.properties is empty",
    "description": "Created attachment 38092\nServlet to test the issue.\n\nI am using Tomcat 8.5.71 in a docker container.\n\nI followed the instructions from https://logging.apache.org/log4j/2.x/log4j-appserver/index.html in order to setup log4j2 logging configuration.\n\nAdditionally, I removed every entry from file conf/loggging.properties and added a comment \"# see: log4j2/conf/log4j2-tomcat.xml\" to guide other maintainer to the log4j2 xml.\n\nIn one webapp some business logic is done in a separate thread by using the join-fork-threadpool. At some point, jdbc comes into play and the mssql.jdbc:8.4.1 driver asks for a logging property.\n\n\n    static boolean isActivityTraceOn() {\n        LogManager lm = LogManager.getLogManager();\n        String activityTrace = lm.getProperty(\"com.microsoft.sqlserver.jdbc.traceactivity\");\n        return \"on\".equalsIgnoreCase(activityTrace);\n    }\n\nBut a NPE is thrown in ClassLoaderLogManager.\n\n2021-11-04T11:08:27,233 ERROR [ForkJoinPool.commonPool-worker-0] \njava.lang.NullPointerException: null\n\tat org.apache.juli.ClassLoaderLogManager.findProperty(ClassLoaderLogManager.java:311) ~[tomcat-juli.jar:8.5.71]\n\tat org.apache.juli.ClassLoaderLogManager.getProperty(ClassLoaderLogManager.java:291) ~[tomcat-juli.jar:8.5.71]\n\tat com.microsoft.sqlserver.jdbc.Util.isActivityTraceOn(Util.java:778) ~[mssql-jdbc-8.4.1.jre8.jar:?]\n\n\nI debugged into the method org.apache.juli.ClassLoaderLogManager#findProperty.\nIn my case, the ContextClassLoader is null and info.props.isEmpty() yields true. \n\nI would suggest to check if classLoader is null in the if condition in line 310 to avoid the NPE.\n\nMy workaround at the moment is to remove the conf/loggging.properties entirely. Then everything works as expected.\n\nI attached a servlet to test the issue.",
    "comments": [
      "Thanks for the report.\n\nThis has been fixed and the fix will be included in:\n- 10.1.x for 10.1.0-M8 onwards\n- 10.0.x for 10.0.14 onwards\n- 9.0.x for 9.0.56 onwards\n- 8.5.x for 8.5.74 onwards"
    ],
    "creation_ts": "2021-11-16T11:13:21Z",
    "fixes": [
      65684
    ]
  },
  {
    "id": 69429,
    "summary": "Memory optimization to AstMethodParameters.getParameters()",
    "description": "Created attachment 39925\nPatch\n\nTestELParserPerformance.testExpressions() reveals an optimization to AstMethodParameters.getParameters(), source code below:\n\n    public Object[] getParameters(EvaluationContext ctx) {\n        List<Object> params = new ArrayList<>();\n        for (int i = 0; i < this.jjtGetNumChildren(); i++) {\n            params.add(this.jjtGetChild(i).getValue(ctx));\n        }\n        return params.toArray(new Object[0]);\n    }\n\nReflective EL expressions with no parameters have this.jjtGetNumChildren == 0, which is only tested after a new ArrayList<> has been allocated.  An additional Object[0] is allocated for return.\n\nAn early check of this.jjtGetNumChildren will eliminate these allocations for reflective expressions with zero parameters.  This behavior is similar to the fast path implemented on https://bz.apache.org/bugzilla/show_bug.cgi?id=69381.\n\nPatch file attached.",
    "comments": [
      "Fixed in:\n- 11.0.x for 11.0.1 onwards\n- 10.1.x for 10.1.32 onwards\n-  9.0.x for  9.0.97 onwards",
      "At this point, why not optimize everything?\n\n\npublic Object[] getParameters(EvaluationContext ctx) {\n  int numChildren = this.jjtGetNumChildren();\n  if (numChildren == 0) {\n    return EMPTY_PARAMS;\n  }\n  Object[] params = new Object[numChildren];\n\n  for (int i = 0; i < numChildren; i++) {\n    params[i] = this.jjtGetChild(i).getValue(ctx);\n  }\n  return params;\n}",
      "Good point. Done.",
      "thanks!\n\nwaiting for the new tomcat 10.1 release!"
    ],
    "creation_ts": "2024-11-04T14:43:01Z",
    "fixes": [
      69429
    ]
  },
  {
    "id": 69662,
    "summary": "NamingContext does not include name when throwing NamingException",
    "description": "Tomcat threw an exception attempting to look up a JNDI name but did not include the name it couldn't find:\n\n[SEVERE] 2025-04-29 19:56:41.886 [org.apache.catalina.mbeans.GlobalResourcesLifecycleListener] Exception processing global JNDI Resources\njavax.naming.NamingException: Unexpected exception resolving reference\n\u2003\u2003at org.apache.naming.NamingContext.lookup(NamingContext.java:567)\n\u2003\u2003at org.apache.naming.NamingContext.lookup(NamingContext.java:148)\n\u2003\u2003at org.apache.naming.NamingContextBindingsEnumeration.nextElementInternal(NamingContextBindingsEnumeration.java:106)\n\u2003\u2003at org.apache.naming.NamingContextBindingsEnumeration.next(NamingContextBindingsEnumeration.java:66)\n\u2003\u2003at org.apache.naming.NamingContextBindingsEnumeration.next(NamingContextBindingsEnumeration.java:32)\n\u2003\u2003at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:130)\n\u2003\u2003at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:137)\n\u2003\u2003at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:106)\n\u2003\u2003at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.lifecycleEvent(GlobalResourcesLifecycleListener.java:81)\n\u2003\u2003at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:109)\n\u2003\u2003at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:389)\n\u2003\u2003at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:336)\n\u2003\u2003at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:858)\n\u2003\u2003at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)\n\u2003\u2003at org.apache.catalina.startup.Catalina.start(Catalina.java:761)\n\u2003\u2003at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\u2003\u2003at java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\u2003\u2003at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:345)\n\u2003\u2003at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:473)\n\nIt would be very helpful to have the name that couldn't be found in the exception message, so the problem could be investigated.",
    "comments": [
      "This will be fixed in 11.0.7, 10.1.41 and 9.0.105. Thanks."
    ],
    "creation_ts": "2025-04-29T20:48:07Z",
    "fixes": [
      69662
    ]
  },
  {
    "id": 66511,
    "summary": "GZipOutputFilter overwrites chunk instead of reading it",
    "description": "In GzipOutputFilter::doWrite, if the given ByteBuffer is not backed by an array, it gets overwritten with empty data. \n\nSee https://github.com/apache/tomcat/blob/main/java/org/apache/coyote/http11/filters/GzipOutputFilter.java#L73\n\nSuggested solution:\n\nReplace ByteBuffer::put with ByteBuffer::get.",
    "comments": [
      "Thanks for reporting this.\n\nFixed in:\n- 11.0.x for 11.0.0-M5 onwards\n- 10.1.x for 10.1.8 onwards\n-  9.0.x for  9.0.74 onwards\n-  8.5.x for  8.5.88 onwards"
    ],
    "creation_ts": "2023-03-06T11:26:17Z",
    "fixes": [
      66511
    ]
  },
  {
    "id": 66543,
    "summary": "Misleading error log in fireRequestDestroyEvent",
    "description": "In the method fireRequestDestroyEvent of the StandardContext class, there is an error log of key \"standardContext.requestListener.requestInit\", in case of exception.\n\nLogging about a request initialized event instead of a request destroyed event is a bit misleading.\n\nAn appropriate log key and an appropriate log message in LocalStrings*.properties would be better.",
    "comments": [
      "I have created a PR (https://github.com/apache/tomcat/pull/604) and will merge it, if no comments on the PR suggest otherwise.",
      "Fixed with Felix's PR in:\n- 11.0.x for 11.0.0-M5 onwards\n- 10.1.x for 10.1.8 onwards\n-  9.0.x for  9.0.74 onwards\n-  8.5.x for  8.5.88 onwards"
    ],
    "creation_ts": "2023-03-24T21:57:19Z",
    "fixes": [
      66543
    ]
  },
  {
    "id": 43453,
    "summary": "ClassCastException at org.apache.catalina.core.StandardContext.findStatusPage(int)",
    "description": "StandardContext.java reads\n\n    public String findStatusPage(int status) {\n        return ((String) statusPages.get(new Integer(status)));\n    }\n\nThis is wrong and it should be\n\n    public String findStatusPage(int status) {\n        return ((ErrorPage) statusPages.get(new Integer(status))).getLocation();\n    }\n\nRegards,\n  lg",
    "comments": [
      "Ironically the suggested fix also yeilds a ClassCastException ( but would have \nbeen caught at compile time)\n\nFixed with alternative patch.",
      "Sorry that the patch was not 100% correct, and thanks for fixing it."
    ],
    "creation_ts": "2007-09-23T13:50:20Z",
    "fixes": [
      43453
    ]
  },
  {
    "id": 65203,
    "summary": "Coyote Request not properly recycled after asynchronous error.",
    "description": "Created attachment 37785\nTomcat output with issue replicated. First request behavior is expected and 2nd show the issue with the request not being recycled.\n\nWhen an exception is thrown during the execution of an asynchronous request, all subsequent request that are processed in a ReadListener fail with\nthe following exception:\n\nCaused by: java.io.EOFException: Unexpected EOF read on the socket\n\tat org.apache.coyote.http11.Http11InputBuffer.fill(Http11InputBuffer.java:813)\n\tat org.apache.coyote.http11.Http11InputBuffer.access$300(Http11InputBuffer.java:42)\n\tat org.apache.coyote.http11.Http11InputBuffer$SocketInputBuffer.doRead(Http11InputBuffer.java:1158)\n\tat org.apache.coyote.http11.filters.IdentityInputFilter.doRead(IdentityInputFilter.java:102)\n\tat org.apache.coyote.http11.Http11InputBuffer.doRead(Http11InputBuffer.java:248)\n\tat org.apache.coyote.Request.doRead(Request.java:565)\n\tat org.apache.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:336)\n\t... 16 more\n\nThis is caused by the errorException object not being recycled in the org.apache.coyote.Request class.",
    "comments": [
      "Fixed in:\n- 10.0.x for 10.0.5 onwards\n- 9.0.x for 9.0.45 onwards\n- 8.5.x for 8.5.65 onwards"
    ],
    "creation_ts": "2021-03-24T12:32:07Z",
    "fixes": [
      65203
    ]
  },
  {
    "id": 68348,
    "summary": "Support for Partitioned cookie attribute",
    "description": "It would be helpful if there is a container-wide solution to add the \"Partitioned\" attribute to the JSESSIONID cookie.\n\nThis is relevant for webapps embedded in IFrames across domains, typically those which already have CookieProcessor configured for the \"SameSite=None\" cookie attribute: starting 2024, Google/Chrome will start phasing out third-party cookies, see https://developers.google.com/privacy-sandbox/3pcd\n\nSee also https://lists.apache.org/thread/f98hm3z7h9z69210zkn6cyg0c9vwjm1s\n\nSupport for \"Partitioned\" could take the form of a new CookieProcessor attribute, e.g.:\n\n<Context>\n   <CookieProcessor sameSiteCookies=\"None\" partitioned=\"true\" />\n</Context>\n\nAttribute \"partitioned\" enables setting the Partitioned attribute:\n - if value is false then the Partitioned attribute won't be set. This is the default value\n - if value is true then the Partitioned attribute will be set",
    "comments": [
      "I'd be a lot happier adding this if this work was included in the current RFC6265bis work rather than having been deferred until after RFC6265. My concern is primarily that the current approach may change between now and whichever RFC it appears in.\n\nUnfortunately, with the CHIPS trial due to start this month, I don't think it is realistic to wait for an agreed RFC before implementing this feature in Tomcat.\n\nMy intention is to add this feature but with a note in the Javadoc and the configuration docs that it is not final and there may be breaking changes once the feature is finalised in an RFC.",
      "(In reply to Mark Thomas from comment #1)\n> My intention is to add this feature but with a note in the Javadoc and the\n> configuration docs that it is not final and there may be breaking changes\n> once the feature is finalised in an RFC.\n\n+1",
      "Fixed in:\n- 11.0.x for 11.0.0-M16 onwards\n- 10.1.x for 10.1.18 onwards\n-  9.0.x for  9.0.85 onwards\n-  8.5.x for  8.5.98 onwards\n\nNote that for 10.1.x onwards use of the partitioned attribute is separately configurable for session cookies. For 9.0.x and earlier, there is just the web application wide setting on the cookie processor.",
      "I tested in both tomcat 8 and 9 latest versions, but still the cookies are not coming as partitioned even though I have provided the below setting in conf/context.xml. anything I am missing here ?\n\n    <CookieProcessor  partitioned=\"true\" sameSiteCookies=\"none\" />",
      "Look at the version numbers. The fixed versions haven't been released yet.",
      "(In reply to Mark Thomas from comment #5)\n> Look at the version numbers. The fixed versions haven't been released yet.\n\n??\n\nAll versions mentioned in comment #3 have been released.",
      "Sorry, you're right. I thought partitioned support was going to be in the Feb releases.\n\nThe OP needs to follow this up on the users list.",
      "(In reply to notify.bharani from comment #4)\n> I tested in both tomcat 8 and 9 latest versions, but still the cookies are\n> not coming as partitioned even though I have provided the below setting in\n> conf/context.xml. anything I am missing here ?\n> \n>     <CookieProcessor  partitioned=\"true\" sameSiteCookies=\"none\" />\n\nThere is likely something wrong on your end. As Mark mentioned in of the other comments, you are recommended to raise this on the Tomcat users list if this is still a problem for you.\n\nI just tested it once more using 9.0.85 and I can confirm that the \"Partitioned\" flag is added once CookieProcessor is configured like you mention."
    ],
    "creation_ts": "2023-12-16T14:20:40Z",
    "fixes": [
      68348
    ]
  },
  {
    "id": 47950,
    "summary": "No case insensitivity handling for OLE2 entry names",
    "description": "I created some test cases to test case sensitivity in OLE2 files.\n\n    @Test\n    public void testPoiCaseInsensitivityInMemory() throws Exception\n    {\n        POIFSFileSystem fs = new POIFSFileSystem();\n        DirectoryEntry dir = fs.getRoot().createDirectory(\"A\");\n        dir.createDocument(\"B\", new ByteArrayInputStream(new byte[] { 0, 1, 2, 3, 4, 5 }));\n\n        DirectoryEntry dir2 = (DirectoryEntry) fs.getRoot().getEntry(\"a\");\n        DocumentEntry doc2 = (DocumentEntry) dir2.getEntry(\"b\");\n        assertArrayEquals(\"Wrong data read back\", new byte[] { 0, 1, 2, 3, 4, 5 },\n                          IOUtils.toByteArray(new DocumentInputStream(doc2)));\n    }\n    \n    @Test\n    public void testPoiCaseInsensitivityAfterReadingFromStorage() throws Exception\n    {\n        POIFSFileSystem fs = new POIFSFileSystem();\n        DirectoryEntry dir = fs.getRoot().createDirectory(\"A\");\n        dir.createDocument(\"B\", new ByteArrayInputStream(new byte[] { 0, 1, 2, 3, 4, 5 }));\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        fs.writeFilesystem(baos);\n\n        POIFSFileSystem fs2 = new POIFSFileSystem(new ByteArrayInputStream(baos.toByteArray()));\n        DirectoryEntry dir2 = (DirectoryEntry) fs2.getRoot().getEntry(\"a\");\n        DocumentEntry doc2 = (DocumentEntry) dir2.getEntry(\"b\");\n        assertArrayEquals(\"Wrong data read back\", new byte[] { 0, 1, 2, 3, 4, 5 },\n                          IOUtils.toByteArray(new DocumentInputStream(doc2)));\n    }\n\nBoth of these fail looking up \"a\" as it doesn't exist, but the comparison is supposed to be case insensitive according to available documentation.\n\nSpecifically, [MS-CFB] has the following to say about how entries in an OLE2 directory should be compared:\n\n(2.6.1 pg 23)\n\nWhen locating an object in the compound file except for the root storage, the directory entry name is compared using a special case-insensitive upper-case mapping, described in Red-Black Tree.\n\n(2.6.4 \"Red-Black Tree\" pg 26)\n\n  * For each UTF-16 code point, convert to upper-case with the Unicode Default Case Conversion\n    Algorithm, simple case conversion variant (simple case foldings), with the following notes.<2> \n\n  *  Unicode surrogate characters are never upper-cased, since they are represented by two UTF-16\n     code points, while the sorting relationship upper-cases a single UTF-16 code point at a time.\n\n  * Lowercase characters defined in a newer, later version of the Unicode standard can be upper-\n    cased by an implementation that conforms to that later Unicode standard.\n\nNote <2> goes into further detail on which version of Unicode is used to perform the folding:\n\n(pg 39)\n\nFor Windows XP and Windows Server 2003: The compound file implementation conforms to the Unicode 3.0.1 Default Case Conversion Algorithm, simple case folding (http://www.unicode.org/Public/3.1-Update1/CaseFolding-4.txt) with the following exceptions.\n(table omitted for now)\nFor Windows Vista and Windows Server 2008: The compound files implementation conforms to the Unicode 5.0 Default Case Conversion Algorithm, simple case folding (http://www.unicode.org/Public/5.0.0/ucd/CaseFolding.txt) with the following exceptions.\n(table omitted for now)\n\n\nReferences:\n\n[MS-CFB]: Compound File Binary File Format, Revision 0.01 (Wednesday, June 18, 2008)",
    "comments": [
      "Created attachment 33042\nInitial work on changes for this bug, not fully done, some tests are now failing\n\nI tried to work on this a bit, but could not get it fully done yet, attached is the intermediate set of changes that i came up with.",
      "Hi, please use toUpperCase(Locale.ROOT) instead of just toUpperCase()!\n\nThe problem is otheriwse that it would fail in e.g. Turkish Locale, too. This applies to the whole POI base, but here it is explicit -> especially through its defined how the whole stuff needs to be uppercases. Unfortunately the unicode version used is depending on the JDK.",
      "toUpperCase() is the devil... along with every other method in the JRE which has an overload where you can omit the locale, the file encoding, the time zone, etc. :(\n\nI also wish it were possible in Java to do Unicode operations against a specific version. This is something I encountered very early on when I wanted to make a Lucene tokeniser for grapheme clusters and realised that Java was going to screw me on backwards compatibility so I had to archive off my own copy of the table for all that data.\n\nI guess the same tactic could work here - save a copy of the uppercasing table. Microsoft even said there are special cases, so it is probably the easiest way to know it's correct. Depending on how you store it, the storage cost might not even be terribly bad. ICU uses some kind of trie encoding to store this sort of thing.",
      "I would as a first step enable forbidden-api checks on POI, too (see https://github.com/policeman-tools/forbidden-apis). In Lucene/Solr/Elasticsearch and also TIKA this is the default since long time. This checker forbids all those methods which depend on local configuration.\n\nTrekjaz: Exactly I would wish that you could give unicode version, too. In ICU you can do this somehow (just don't remember how). We had an issue in Solr already: One test had a list of whitespace chars and that list changed in Unicode 7, as used by coming Java 9! Result was a failing test with preview builds, because we had a character which was no longer treated as whitespace in Java 9.",
      "Forbidden APIs check now available on trunk, just run \"ant forbidden-apis-check\"\n\nI've also updated the dist task to run this and the rat check automatically\n\nQuite a lot of places we fail the forbidden APIs check though! Patches / fixes very much welcomed :)",
      "Thanks, quite a lot of violations! Maybe to start with remove the deprecated violations (they are not so urgent). We may also turn on the \"jdk-system-out\", because a library like POI should never print anything to System.out/err (POI's own logger framework may need to be supressed). This also complains if you have e.printStackTrace() as generated by Eclipse!",
      "(In reply to Uwe Schindler (ASF) from comment #6)\n> We may also turn on the \"jdk-system-out\", because a library like POI\n> should never print anything to System.out/err\n\nWe do ship a number of runnable debug / dev / information tools in the jars, so that's not quite universally true. They're all in specific packages though, so we could look at enabling it except for those?",
      "There are several possibilities: You can change the inner fileset of forbiddenapis to exclude some files, yes.\n\nIn Lucene we use an Annotation. An example is given in the forbiddenapis JAR file, but you dont want to depend on it in the code. So we defined our own @SuppressForbidden annotation in our own source code. The Ant config just gest the class name.\n\nhttp://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/SuppressForbidden.java\n\nAnd here it is enabled:\n\n  <!-- applies to both source and test code -->\n  <target name=\"-check-forbidden-all\" depends=\"-init-forbidden-apis,compile-core,compile-test\">\n    <forbidden-apis internalRuntimeForbidden=\"true\" suppressAnnotation=\"**.SuppressForbidden\" classpathref=\"forbidden-apis.allclasses.classpath\">\n      <bundledSignatures name=\"jdk-unsafe-${javac.target}\"/>\n      <bundledSignatures name=\"jdk-deprecated-${javac.target}\"/>\n      <signaturesFileSet dir=\"${common.dir}/tools/forbiddenApis\">\n        <include name=\"base.txt\"/>\n        <include name=\"lucene.txt\" if=\"forbidden-isLucene\"/>\n      </signaturesFileSet>\n      <fileset dir=\"${build.dir}/classes/java\" excludes=\"${forbidden-base-excludes}\"/>\n      <fileset dir=\"${build.dir}/classes/test\" excludes=\"${forbidden-tests-excludes}\" erroronmissingdir=\"false\"/>\n    </forbidden-apis>\n  </target>",
      "Note: Comment 2 - 8 are about forbidden api usage and not this bug per-se... Forbidden-API check is now fully implemented in POI as of 3.13.",
      "Ross Spencer recently raised an issue on Tika on this topic: https://issues.apache.org/jira/browse/TIKA-4091\n\nI might take a look.",
      "I opened: https://github.com/apache/poi/pull/477\n\nThe one challenge is that we do rely on case sensitivity for \"Book\" vs \"BOOK\".  We use the former as an indicator of the old excel format, and the latter can occur in some regular xls Crystal reports... So there are some less than great workaround to get everything to work.\n\nIf there's a simpler way of doing this and/or of identifying the old excel formats, that'd be great.",
      "Ugh, ugh, ugh.  Ross Johnson.  Please forgive me.",
      "Committed the patch to fix this. Will be available with the 5.2.4 release.\n\nThank you, Ross, PJ and Dominik!"
    ],
    "creation_ts": "2009-10-06T15:48:49Z",
    "fixes": [
      47950
    ]
  },
  {
    "id": 55143,
    "summary": "Unable to add programmatic message handler to an endpoint with custom decoder",
    "description": "Created attachment 30483\nWsSession patch\n\nCurrent implementation in WsSession skips checks for custom decoders when addMessageHandler is called for a programmatic endpoint. The same checks are performed for annotated pojos. Here I attach a sample (as there are multiple way of implementing this) and would like to hear your opinion. \n\ncheers\nniki",
    "comments": [
      "The specification is not particularly clear on this but the discussion in the EG was explicit.\n\nThe only permitted values of T in MessageHandler are those the WsSession implementation checks for. Developers are responsible for any decoding.\n\nThis restriction may be relaxed in a later version of the specification but reviewing the discussion any such relaxation is very likely to create lots of  nasty edge cases. Any such relaxation is going to have to be very carefully thought through.",
      "Thanks Mark. From the spec text this is not obvious at all. May I ask if such discussion exists and respective decision is made to be added to the next revision of the spec? May be we can improve the error of the exception as well.",
      "Please close it again if you find it as inpropriate. I'd like to continue the discussion on this topic (just to keep everything on same place):\nHere I attach a sample war file (decoder.war) that when deployed on WebSocket RI (glassfish4) handles endpoint just fine:\nOutput\tGlassfish4 \n\nsystem:\tconnection established, ws://localhost:8181/decoder/pep\ncommand:\t/binary test\nsent:\t<4B of binary data>           74 65 73 74                                        |test            |\n\nreceived:\t<4B of binary data>   74 65 73 74                                        |test            |\n\nOn Tomcat 8 sample example produces\nSEVERE: Error reading request, ignored\njava.lang.IllegalArgumentException: Unable to add the message handler [pd.mh.AppMessageHandler@2cb5e028] as it was for the unrecognised type [class pd.bean.StringBean]\n\tat org.apache.tomcat.websocket.WsSession.addMessageHandler(WsSession.java:182)\n\nThe RI is normative and if the spec text is unclear then the implementation should be correct. If that is not the case here then  RI and the spec should be changed IMHO, otherwise we should implement the same behaviour in Tomcat 8.\nOpinions ?",
      "Created attachment 30484\ndecoder.war",
      "The spec is defined by the doc plus Javadoc. Anything else (TCK, RI, EG lists) merely provides indications of how the spec has been interpreted by others and/or what was intended but ultimately, only the spec counts.\n\nI've had a quick scan though the archives and I can't find the discussion I'm sure I had with the EG lead on this. I've found some related discussions. I'll spend some more time digging.",
      "Bingo! Found it and it is my memory that is at fault. The Javadoc for MessageHandler Whole<T> and Partial<T> have explicit lists of the values that are permitted for T.\n\nLooking at the code again, there appear to be several issues including the one raised here.",
      "The WAR is helpful, but any chance you could convert your WAR to Tomcat unit test? The more cases the unit test or tests can cover the better.\n\nThe ideal would be once that includes cover for the following:\nCircle extends Shape\nSquare extends Shape\n\nProgrammatic endpoint with MessageHandler<Shape>, Decoder.Text<Circle> and Decoder.Binary<Square>\n\nand a similar annotated endpoint.\n\nI'm sure there are other 'interesting' edge cases along similar themes. Any additional cases you can include in the test case would be incredibly helpful.",
      "yep I'll prepare a change",
      "Thanks. Current trunk should have fixed this now. I'll leave the issue open until your test case is complete.",
      "Here is an extension of my favourite TestEncodingDecoding which validates the original case. Mark if you want we can close this issue. \nHowever I will continue on this topic in two directions:\n1. I spotted an issue when switched to MsgBytes instead of MsgString and will look further.\n\nThe scenario you describe with message handler for a given user class and decoder/encoders dedicated to subclasses kind of fail on the RI as well. But will check it carefully. The javadoc is a bit unclear on the matter. It just refers to a type without further explanation. May we can support this case if we revert the isAssignable check when we do the iterations over the decoders. I'll look into this as well.",
      "Created attachment 30491\nTestEncodingDecoding patch",
      "Thanks for the patch.\n\nThe code has been a bit of a moving target over that last few days. You might want to make sure you have the latest version.\n\nIf you do find any more issues, please do open a new bug report.\n\nCheers,\n\nMark"
    ],
    "creation_ts": "2013-06-25T12:48:34Z",
    "fixes": [
      55143
    ]
  },
  {
    "id": 66281,
    "summary": "NIO2 breaks HTTP2 responses after 5 seconds",
    "description": "NIO2 connector with HTTP2 and JSSE.\n\nClient is (recent) curl or recent Firefox or Chrome.\n\nIf I call a JSP, that sleeps for eg. 8 seconds before responding, then the client gets after 5 seconds:\n\ncurl: (92) HTTP/2 stream 1 was not closed cleanly before end of the underlying stream\n\nBrowser communication ends as well before the response is generated and received.\n\nThe example JSP is:\n\n\nBegin Sleeping ...\n<%\nThread.sleep(8000);\n%>\nDone\n\nTurning on debug logging I see:\n\n28-Sep-2022 11:11:11.408 FINE [https-jsse-nio2-8444-exec-5] org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler.failed Connection [0], Stream [0], Frame type [null], Error\n        java.net.SocketTimeoutException\n                at org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler.failed(SocketWrapperBase.java:1124)\n                at org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler.failed(SocketWrapperBase.java:1066)\n                at org.apache.tomcat.util.net.SecureNio2Channel$2.failed(SecureNio2Channel.java:1158)\n                at java.base/sun.nio.ch.Invoker.invokeUnchecked(Invoker.java:129)\n                at java.base/sun.nio.ch.Invoker$2.run(Invoker.java:219)\n                at java.base/sun.nio.ch.AsynchronousChannelGroupImpl$1.run(AsynchronousChannelGroupImpl.java:112)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                at java.base/java.lang.Thread.run(Thread.java:829)\n\n\nThe request actually finished in Tomvcat, but when it tries to start back the response it gets another exception because of the closed stream\n\n\n28-Sep-2022 11:11:14.809 FINE [https-jsse-nio2-8444-exec-4] org.apache.coyote.AbstractProcessor.setErrorState Error state [CLOSE_NOW] reported while processing request\n        org.apache.coyote.CloseNowException: Connection [0], Stream [1], This stream is not writable\n                at org.apache.coyote.http2.Stream.doStreamCancel(Stream.java:269)\n                at org.apache.coyote.http2.Http2UpgradeHandler.reserveWindowSize(Http2UpgradeHandler.java:939)\n...\n\n\nThis only happens for NIO2, not NIO.\n\nIt happens for 10.1.0, 10.0.26, 9.0.67 but also for the older e.g. 10.0.10, 10.0.0 and 9.0.60.\n\nConnector config I use:\n\n    <Connector port=\"8444\" protocol=\"org.apache.coyote.http11.Http11Nio2Protocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\">\n        <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n        <SSLHostConfig certificateVerification=\"false\">\n            <Certificate certificateKeystoreFile=\"${catalina.base}/conf/keystore/keystore.jks\"\n                         certificateKeystorePassword=\"mypass\" />\n        </SSLHostConfig>\n    </Connector>\n\nand for comparison with the working NIO(1):\n\n    <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\">\n        <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n        <SSLHostConfig certificateVerification=\"false\">\n            <Certificate certificateKeystoreFile=\"${catalina.base}/conf/keystore/keystore.jks\"\n                         certificateKeystorePassword=\"mypass\" />\n        </SSLHostConfig>\n    </Connector>\n\nRegards,\n\nRainer",
    "comments": [
      "Fixed in:\n- 10.1.x for 10.1.1 onwards\n- 10.0.x for 10.0.27 onwards\n-  9.0.x for  9.0.68 onwards\n-  8.5.x for  8.5.83 onwards"
    ],
    "creation_ts": "2022-09-28T12:51:41Z",
    "fixes": [
      66281
    ]
  },
  {
    "id": 41089,
    "summary": "JspFactoryImpl has SPEC_VERSION = \"2.0\"",
    "description": "org.apache.jasper.runtime.JspFactoryImpl has \n\nprivate static final String SPEC_VERSION = \"2.0\";\n\nShould be:\n\nprivate static final String SPEC_VERSION = \"2.1\";",
    "comments": [
      "Also, in org.apache.jasper.Compiler this line:\n\nout.printil(\"response.addHeader(\\\"X-Powered-By\\\", \\\"JSP/2.0\\\");\");\n\nShould be:\n\nout.printil(\"response.addHeader(\\\"X-Powered-By\\\", \\\"JSP/2.1\\\");\");",
      "I have a patch but tabs and trailing spaces killed my diff so I can't commit today:\n\nAffected files were:\njava/org/apache/jasper/compiler/Generator.java\njava/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java\njava/org/apache/jasper/compiler/PageDataImpl.java\njava/org/apache/jasper/compiler/Validator.java\njava/org/apache/jasper/resources/LocalStrings.properties\njava/org/apache/jasper/resources/LocalStrings_es.properties\njava/org/apache/jasper/runtime/JspFactoryImpl.java\n\nPosting the files affected in case anyone is more eager.",
      "Ok, so it's fixed."
    ],
    "creation_ts": "2006-11-30T10:12:31Z",
    "fixes": [
      41089
    ]
  },
  {
    "id": 49159,
    "summary": "Improve ThreadLocal memory leak clean-up",
    "description": "Doing this in a thread-safe way means performing the clean-up in the thread where the ThreadLocal exists. A likely point is just before the Thread gets returned to the pool.",
    "comments": [
      "I did experiment with cleaning the threadlocals from their owning thread by doing it in org.apache.tomcat.util.threads.ThreadPoolExecutor.afterExecute(Runnable, Throwable)\n\nIt does work (i.e. it improves leak protection for the http://wiki.apache.org/tomcat/MemoryLeakProtection#webappClassInstanceAsThreadLocalIndirectValue case ), but since it clear all thread locals after each request, it breaks some optimizations that are done by some frameworks, applications or even tomcat itself.\n\nI'm experimenting with the approach of recreating the thread pool, it seems cleaner and more efficient.",
      "It shouldn't clean all thread locals after each request, it should clean all thread locals loaded by a web application.\n\nIf the cleaning breaks apps or frameworks then those apps/frameworks are broken since they are leaking memory and should be fixed. One option to reduce side-effects would be only to clean the thread locals if the WebAppClassloader is stopped. The downside is that memory leaks won't be fixed immediately.\n\nThe ThreadLocals created by Tomcat will be loaded by the common class loader. Those shouldn't be causing any memory leaks, even in the embedded case since Tomcat will stop all the threads it created.",
      "Created attachment 25411\nPatch for tomcat 7 to renew threads\n\nHere is finally my proposition of patch for tomcat 7 to recreate the ThreadPoolExecutor of each Executor when a Context is stopped.\n\nI also removed the clearReferencesThreadLocals property on WebApp[Class]Loader since my patch makes it useless and I think this feature is too unsafe.\n\nI'm working on another patch for tomcat 6. There's a little more work to do because of the old WorkerThread stuff that has been replace by ThreadPoolExecutor in trunk.",
      "*** Bug 49668 has been marked as a duplicate of this bug. ***",
      "Created attachment 26068\nAlternative approach to renewing threads\n\nInstead of completely renewing the entire thread pool, it's possible to do it incrementally, which might be less invasive, in the event of a large number of applications being updated at the same time.\n\nThis patch adds a TaskThread class and modifies the StandardContextValve. The goal is to terminate a class after it's used, when it's discovered to be older than the Context which it last serviced.\n\nThis approach wouldn't be as comprehensive as replacing the entire pool, but should cause the pool to refresh incrementally over time. Further enhancement could include self-cleaning of thread locals etc.",
      "Pid, I applied your patch but it does not work.\nActually when the thread calls join(0) on itself it just leads to a deadlock : the Thread will remain forever in the join method unless it is interrupted.\n\nFurthermore your idea works only if a new context is started. If a context is stopped and no other context is started, Threads won't be renewed.",
      "(In reply to comment #6)\n> Pid, I applied your patch but it does not work.\n> Actually when the thread calls join(0) on itself it just leads to a deadlock :\n> the Thread will remain forever in the join method unless it is interrupted.\n\nIt's experimental admittedly. I'll clean up my SVN repo & retry it, thought it was working...\nIf it won't work at all, then the idea is dead, but there must be a way to terminate an individual thread & remove it from the pool.\n\n> Furthermore your idea works only if a new context is started. \n\nOr an existing one is restarted, the point is that it's a compromise.\nThe idea was to have a lower impact than restarting the whole thread pool.\n\n> If a context is stopped and no other context is started, Threads won't be renewed.\n\nIf a context is stopped and no other context is started, how will the server work?",
      "Created attachment 26074\nproposed patch to renew threads one by one with a delay\n\nI explored your idea and managed to force threads to \"kill themselves\" after a context is stopped.\nHere are the main points of my new patch :\n\n- I save the last time a context is stopped in a static variable of StandardContext (this could be improved to record it somewhere at the Service or Engine level, in a instance variable)\n- The \"suicide\" is done in ThreadPoolExecutor.afterExecute(), in case the thread was created before the last context was stopped.\n- the rate at which threads are renewed is throttled to avoid renewing all threads at the same time (otherwise it would have been the same as my initial proposal to renew the whole pool).\n- I had to make TaskQueue extend ArrayBlockingQueue instead of LinkedBlockingQueue because the latter does not propose to have a \"fair\" policy. Fairness is required so that every thread of the pool is given the opportunity to be killed.\n- Unlike LinkedBlockingQueue, ArrayBlockingQueue requires a reasonable size (not Integer.MAX_VALUE). I set it to 100 by default (configurable with the maxQueueSize property at the Connector or Executor level)\n\nI'm quite happy with this patch except the fairness requirement :\n- The javadocs of ArrayBlockingQueue say that it may decrease performance, but I don't how much\n- Since each thread of the pool is used in turn, we might lose some caching effects\n- and it also prevents the size of the pool to be decreased in case of low activity : without fairness, some Thread could timeout waiting for an element from the queue while other threads could serve new requests. Eventually the pool could decide to decrease it size.\n\nWhat do you think ? If we don't use a fair queue, we do not have a deterministic behavior and some thread might still trigger a memory leak...",
      "> What do you think ? If we don't use a fair queue, we do not have a\n> deterministic behavior and some thread might still trigger a memory leak...\n\nUnless we have minSpareThreads=0. This way even threads that are no longer used will eventually be stopped (the timeout is 60s by default, maxIdleTime in StandardThreadExecutor and hardcoded in AbstractEndpoint.createExecutor() )",
      "Created attachment 26097\nPatch for tomcat 7 to renew threads one by one with a delay without requiring a fair queue\n\nI worked a little more on my patch to avoid requiring a fair queue. I actually reused part of my very first patch (the Listener). Basically here is what is done :\n\n- idle threads are stopped all at once, even core pool threads. This is done by ThreadLocalLeakPreventionListener\n- like my previous patch, active threads are stopped one by one with a delay.\n\nAll in all, this avoids performance impacts under load since only idle threads will be stopped as a whole, and other threads will be renewed slowly.\n\nThis memory leak protection is not 100% deterministic since one could think of scenarios where the load decreases just after a leaking context is stopped, so that some (core pool) threads are no longer used but still present in the pool and thus triggering the memory leak...\nBut it's a compromise between performance impacts and the duration of the memory leak.\n\nI'd be glad to have some feedback on this patch!",
      "Created attachment 26108\ntc7 renew threads one by one in a bounded time\n\nNew patch with further improvements : now the behavior is more deterministic, with an upper bound to the time necessary to renew all the threads of the pool. The upper bound is something like N*max(threadKeepAliveTimeout, longestRequest + threadRenewalDelay). Where N is the number of threads in the pool and longestRequest is the maximum time a request takes to be processed (of course it depends on the application).\nThis is really a worst case scenario and it should be much quicker in usual cases, something closer to max(threadKeepAliveTimeout, longestRequest).\n\nI still have to make the threadRenewalDelay configurable (hardcoded to 1s for now) and to propose some cleanups in WebAppClassLoader since this patch makes the unsafe-and-disabled-by-default ThreadLocal cleaning obsolete. (it's still interesting to introspect the ThreadLocals to detect potential leaks and warn the user, it will help to improve libraries and applications...).\n\nAny volunteer for a review before I continue finalizing this patch ?",
      "Created attachment 26150\npatch tc7 renew threads RC1\n\nHere is my proposed \"RC1\" patch for tc7.\n\n- new property threadRenewalDelay on StandardThreadExecutor (default is 1000ms)\n- new property renewThreadsWhenStoppingContext on StandardContext (default is true)\n- removed property clearReferencesThreadLocals on StandardContext\n- Transformed the clearReferencesThreadLocals behavior of WebappClassLoader into a checkThreadLocalsForLeaks behavior\n- updated documentation\n- successfully performed some tests with JMeter\n\nI'll try to propose an equivalent patch for tomcat 6 in a few days...",
      "Created attachment 26156\npatch tc7 renew threads RC2\n\npatch \"RC2\" for tomcat 7 : using ProtocolHandler.getExecutor() instead of testing each possible implementation (the method was not present on ProtocolHandler a couple of weeks ago).",
      "Created attachment 26157\npatch tc6 renewThreads 2010-10-11\n\nPatch for tomcat 6.\n\nIt is essentially the same behavior as for tomcat 7, excepted that it requires that (at least) one Executor be configured and the Connectors be configured to use that(these) Executor(s).\nSo, the memory leak protection is not enabled by default, unlike for tomcat 7 which always uses an Executor.",
      "Though my proposed patch renews threads in the pool, there are actually 2 other types of threads that can prevent an application from being garbage collected if it has ThreadLocal-related leaks : \n- the \"main\" thread (the one when starting up tomcat)\n- the ContainerBackgroundProcessor thread\n(- the shutdown hook thread too, but since the JVM is shutting down it does not really matter)\n- in an embedded scenario, the thread of the \"containing\" application\n\nCurrently when a webapp is started or stopped, the lifecycle callbacks into the webapp (context listener, filters, servlet) are executed by one of those threads.\n\nI'm working on a patch where I spawn a thread that runs just during those callbacks then shuts down, and so far it prevents such leaks.",
      "Applied the patch to renew threads of the pool on trunk, will be available for 7.0.6.",
      "rev 1044145 : committed some more enhancements in case a web application creates some ThreadLocals that it does not clean during its startup or shutdown phases (calls to Listeners, Filters and Servlets). A dedicated thread is used in these phases.\n\nWill be available for 7.0.6",
      "marking issue as resolved as of 7.0.6.",
      "Does the tomcat6 patch getting applied to any 6.x version? Or is this one only there in 7.0.6+?",
      "No. This enhancement is too intrusive to be backported.",
      "(In reply to Sylvain Laurent from comment #11)\n> Created attachment 26108 [details]\n> tc7 renew threads one by one in a bounded time\n> \n> New patch with further improvements : now the behavior is more\n> deterministic, with an upper bound to the time necessary to renew all the\n> threads of the pool. The upper bound is something like\n> N*max(threadKeepAliveTimeout, longestRequest + threadRenewalDelay). Where N\n> is the number of threads in the pool and longestRequest is the maximum time\n> a request takes to be processed (of course it depends on the application).\n> This is really a worst case scenario and it should be much quicker in usual\n> cases, something closer to max(threadKeepAliveTimeout, longestRequest).\n> \n> I still have to make the threadRenewalDelay configurable (hardcoded to 1s\n> for now) and to propose some cleanups in WebAppClassLoader since this patch\n> makes the unsafe-and-disabled-by-default ThreadLocal cleaning obsolete.\n> (it's still interesting to introspect the ThreadLocals to detect potential\n> leaks and warn the user, it will help to improve libraries and\n> applications...).\n> \n> Any volunteer for a review before I continue finalizing this patch ?\n\nnow the behavior is more\n> deterministic  so does the 'more' means 100%(In reply to Sylvain Laurent from comment #11)\n> Created attachment 26108 [details]\n> tc7 renew threads one by one in a bounded time\n> \n> New patch with further improvements : now the behavior is more\n> deterministic, with an upper bound to the time necessary to renew all the\n> threads of the pool. The upper bound is something like\n> N*max(threadKeepAliveTimeout, longestRequest + threadRenewalDelay). Where N\n> is the number of threads in the pool and longestRequest is the maximum time\n> a request takes to be processed (of course it depends on the application).\n> This is really a worst case scenario and it should be much quicker in usual\n> cases, something closer to max(threadKeepAliveTimeout, longestRequest).\n> \n> I still have to make the threadRenewalDelay configurable (hardcoded to 1s\n> for now) and to propose some cleanups in WebAppClassLoader since this patch\n> makes the unsafe-and-disabled-by-default ThreadLocal cleaning obsolete.\n> (it's still interesting to introspect the ThreadLocals to detect potential\n> leaks and warn the user, it will help to improve libraries and\n> applications...).\n> \n> Any volunteer for a review before I continue finalizing this patch ?\n\n(In reply to Sylvain Laurent from comment #11)\n> Created attachment 26108 [details]\n> tc7 renew threads one by one in a bounded time\n> \n> New patch with further improvements : now the behavior is more\n> deterministic, with an upper bound to the time necessary to renew all the\n> threads of the pool. The upper bound is something like\n> N*max(threadKeepAliveTimeout, longestRequest + threadRenewalDelay). Where N\n> is the number of threads in the pool and longestRequest is the maximum time\n> a request takes to be processed (of course it depends on the application).\n> This is really a worst case scenario and it should be much quicker in usual\n> cases, something closer to max(threadKeepAliveTimeout, longestRequest).\n> \n> I still have to make the threadRenewalDelay configurable (hardcoded to 1s\n> for now) and to propose some cleanups in WebAppClassLoader since this patch\n> makes the unsafe-and-disabled-by-default ThreadLocal cleaning obsolete.\n> (it's still interesting to introspect the ThreadLocals to detect potential\n> leaks and warn the user, it will help to improve libraries and\n> applications...).\n> \n> Any volunteer for a review before I continue finalizing this patch ?\n\n'now the behavior is more deterministic'  ,does this 'more' means 100% ?"
    ],
    "creation_ts": "2010-04-20T13:33:43Z",
    "fixes": [
      49159
    ]
  },
  {
    "id": 66206,
    "summary": "TestErrorReportValve test is failing on a non-English PC",
    "description": "org.apache.catalina.valves.TestErrorReportValve#testBug53071\n\n```\nAssert.assertTrue(res.toString().contains(\"<p><b>Message</b> \" +\n                ErrorServlet.ERROR_TEXT + \"</p>\"));\n```\norg.apache.catalina.valves.ErrorReportValve#report\n```\nsb.append(\"<p><b>\");\nsb.append(smClient.getString(\"errorReportValve.message\"));\nsb.append(\"</b> \");\n```\nSince the local of my OS is zh-CN, the response contains `<p><b>\u4fe1\u606f</b> .... ` instead of `<p><b>Message</b>.... ', so this test would fail.\n\n\nSimilar to https://bz.apache.org/bugzilla/show_bug.cgi?id=63403",
    "comments": [
      "- 10.1.x for 10.1.0-M18 onwards\n- 10.0.x for 10.0.24 onwards\n-  9.0.x for  9.0.66 onwards\n-  8.5.x for  8.5.83 onwards\n\nThanks for the report and the PR."
    ],
    "creation_ts": "2022-08-11T14:44:41Z",
    "fixes": [
      66206
    ]
  },
  {
    "id": 62731,
    "summary": "HandshakeRequest has a relative URL",
    "description": "I opened an issue in CometD about a NPE in their code:\n\nhttps://github.com/cometd/cometd/issues/791\n\nAccording to the supporter of CometD, this is actually an issue with Tomcat:\n\nhttps://github.com/cometd/cometd/issues/791#issuecomment-422322833\n\nHe's saying that \"request.getRequestURI()\" should return an absolute URI in order to be able to get the schema as there is no other API for that. Please check the link for his exact words.\n\nI could probably come up with a reproduction project if one is needed.",
    "comments": [
      "Similar to https://github.com/eclipse-ee4j/websocket-api/issues/228\n\nOn balance the full, undecoded, unnormalized URI including query string looks to the the right thing to return.",
      "But then actually using this sort of input is highly risky :(",
      "Indeed. However, it isn't that different from the current behaviour which only differs in that the scheme, host and port aren't present. The risky part (the undecoded, unnormalized path) is the same.",
      "Fixed in:\n9.0.x for 9.0.13 onwards\n8.5.x for 8.5.35 onwards\n7.0.x for 7.0.92 onwards"
    ],
    "creation_ts": "2018-09-18T09:50:36Z",
    "fixes": [
      62731
    ]
  },
  {
    "id": 49555,
    "summary": "Custom Taglibs should support all parameters",
    "description": "I added two method <function>s with the same name but with an addition parameters.  I get this error:\n\norg.apache.jasper.JasperException: Duplicate function name list in tag library /WEB-INF/dataStore.tld\n\nCrap!  It is not even looking at the parameters.  Ok, Java matches on method names and method parameters.  It is commonly called a method signature. \n\nWell, Jasper is in the Google SDK, so it could perhaps be smarter than I am -- so maybe I overlooked something.  Is that the case?\n\nWhy can't the Jasper compiler match on parameters like Java?  This is after all Java.  I'm only using TLDs because they are cleaner then escaping Java code in JSP.  I have already wrote a considerable amount of TLD code and it does not easily mix with the expression language.  This is the reason why it is so important to have this implementation work as expected.\n\nPlease let me know how I can help.  Lets get this fixed.\n\n-Jimmy\n\nAppEngine SDK 1.3.2 (sorry, I don't know the embedded Jasper version)",
    "comments": [
      "I have an architecture that uses static inner classes.  After about an hour of trial and error and internet searches, I discovered that I can not use a Static inner class as a method parameters in my TDL file.  This is the error:\n\norg.apache.jasper.JasperException: /WEB-INF/jsp/page.jsp(19,2) The function listElement cannot be located with the specified prefix\n\nNo, it is there.  It can't find the parameter: \n  com.example.MyClass.MyInnerStaticClass\n\nIt simply can not find my method.  I know I have it correct because I can replace the static inner class parameter with a top-level class (MyClass).  I can then call my static function.\n\nThe more important part of my program relies on static inner classes.  There are a number of them.  I did this by design to represent a simple structure that is best coded in a single file.  I'm not changing this part of the program.  Unfortunately, escaping Java code in JSP pages does not mix well with JSP expression language.  Also, I have a decent amount of expression language code.  So, I really need the jasper compiler have basic support for Java constructs.  Can you help please?\n\nI'm using the Google AppEngine SDK 1.3.2.  I'm sorry, I do not see the Jasper version.  I only see the apache jasper package name in my exception.\n\nPlease let me know if I can help. \n\nThank,\nJimmy",
      "It is likely to be Tomcat 6 that is being used rather than Tomcat 7 but any fix in Tomcat 7 will get back-ported to Tomcat 6 so lets not worry too much about that.\n\nI think I understand the problem you are seeing but it would help if you could attach the source for the simplest possible test case that demonstrates the issue (I'd expect 1*JSP, 1*TLD, 1*Java class & 1* web.xml)\n\nI do wonder if this is an issue between com.example.MyClass.MyInnerStaticClass\n and com.example.MyClass$MyInnerStaticClass? There was a similar issue (bug 35351) some time ago.",
      "No response in 2 days. Can't be that critical. Reduce severity to normal.\n\nSince the OP hasn't provided a test case, I'll see about creating one based on what I think the issue is.",
      "Confirmed.\n\nFixed in 7.0.x and will be in 7.0.1 onwards.\n\nProposed for 6.0.x",
      "This has been fixed in 6.0.x and will be included in 6.0.30 onwards.",
      "(In reply to comment #5)\n> This has been fixed in 6.0.x and will be included in 6.0.30 onwards.\n\nFix for this bug seems to have removed the ability to use EL functions in classes which are not accessible to Catalina's class loader, i.e. ELFunctionMapper now calls something like...\n\ntccl = Thread.currentThread().getContextClassLoader();\nclazz = Class.forName(className, true, tccl);\n\nIn our app we have custom loader that provides classes from plugins for the application. Previously these plugins were able to provide their own EL functions but that broke in 6.0.30",
      "The EL implementation assumes that the tccl will be the web application class loader and that all classes used by the web applciation will be visible to that class loader. Depending on why you need a custom class loader then there are a couple of options available including a custom loader and the VirtualWebappLoader. The users list is the place to get help on which is best for your use case."
    ],
    "creation_ts": "2010-07-05T18:13:53Z",
    "fixes": [
      49555
    ]
  },
  {
    "id": 42314,
    "summary": "Jasper output no details with compilation error in specific case.",
    "description": "Jasper output no details when Jasper cannot find\nmappings between generated servlet code (with mistakes)\nand former JSP.\nOne example JSP is the following. \n(The imported class in the JSP is not found.)\n---\n<%@\n  page import = \"not.exist.class\"\n%>\n---",
    "comments": [
      "Created attachment 20085\nPatch for Jasper to output details of the compile error.",
      "The patch corrects Jasper to output error details.\nAnd it also fixes a bug that the InputStream was not closed.",
      "Created attachment 20140\nfix previous patch's bug\n\nThe following problem of the previous patch were corrected:\nWhen the exception is generated when calling the jsp servlet after the\ncompilation of JSP succeeds, details (information of the JSP source) become\nnull.",
      "*** Bug 42435 has been marked as a duplicate of this bug. ***",
      "Thanks for the report. This was already fixed in TC6 with an alternative patch\nso I ported the TC6 fix to TC5.\n\nI also added the code to close the input streams to TC5 and TC6."
    ],
    "creation_ts": "2007-05-02T01:13:16Z",
    "fixes": [
      42314
    ]
  },
  {
    "id": 50019,
    "summary": "Adding JNDI \"lookup-name\" support In XML and Resource Annotations",
    "description": "Created attachment 26095\nPatch that provides lookup functionality and resolves explained issue\n\n1* Support for \n\n@Resource(\"lookup\")\n@EJB(lookup)\n@WebServiceRef(\"lookup\")\n\nand via XML\n....\n<lookup-name>\n\n2* Currently DefaultInstanceManager looks for <injection-target> element's <injection-target-class> name for getting injections from web.xml. But it must also look at class hierarchy. This patch also resolves this issue.",
    "comments": [
      "Created attachment 26096\nTest for the lookup",
      "There is a commit on the 7.0 branch that says it's related to this bug entry:\n\nhttp://svn.apache.org/viewvc?view=revision&revision=1826828\n\nThis commit changes the default factory from dbcp to dbcp2, but since dbcp2 support isn't present until version 8, I don't think this is a correct change.\n\nA quick glance at the other changes in the commit looks like they're just whitespace changes.",
      "(In reply to Shawn Heisey from comment #2)\n> There is a commit on the 7.0 branch that says it's related to this bug entry:\n> \n> http://svn.apache.org/viewvc?view=revision&revision=1826828\n> \n> This commit changes the default factory from dbcp to dbcp2, but since dbcp2\n> support isn't present until version 8, I don't think this is a correct\n> change.\n> \n> A quick glance at the other changes in the commit looks like they're just\n> whitespace changes.\n\nI filed bug 62316 for this issue.",
      "Apologies for the long delay in applying this.\n\nThanks for the patch.\n\nFixed in:\n- trunk for 9.0.9 onwards\n- 8.5.x for 8.5.32 onwards\n- 8.0.x for 8.0.53 onwards\n- 7.0.x for 7.0.89 onwards"
    ],
    "creation_ts": "2010-09-28T10:38:17Z",
    "fixes": [
      50019
    ]
  },
  {
    "id": 69694,
    "summary": "Manager Deploy does not check return value of war copy",
    "description": "ManagerServlet.deploy does not check the return value of ExpandWar.copy which returns false on Exception.\n\nThe return value from manager\\text\\deploy indicates that the deploy succeeded which is not the case.\n\nI checked the code in the Tomcat 9 branch and it's not fixed yet.\n\nHere's the stack trace which is only logged.\n\n14-May-2025 12:15:09.053 INFO [ajp-nio-127.0.0.1-8009-exec-8] org.apache.catalina.core.ApplicationContext.log Manager: Uploading WAR file to D:\\Tomcat\\work\\manager\\20250514_1445\\ROOT.war\n14-May-2025 12:15:13.375 SEVERE [ajp-nio-127.0.0.1-8009-exec-8] org.apache.catalina.startup.ExpandWar.copy Error copying [D:\\Tomcat\\work\\manager\\20250514_1445\\ROOT.war] to [D:\\Tomcat\\webapps\\ROOT.war]\n\tjava.io.FileNotFoundException: D:\\Tomcat\\webapps\\ROOT.war (Access denied)\n\t\tat java.base/java.io.FileOutputStream.open0(Native Method)\n\t\tat java.base/java.io.FileOutputStream.open(FileOutputStream.java:289)\n\t\tat java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:230)\n\t\tat java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:179)\n\t\tat org.apache.catalina.startup.ExpandWar.copy(ExpandWar.java:256)\n\t\tat org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:763)\n\t\tat org.apache.catalina.manager.ManagerServlet.doPut(ManagerServlet.java:398)\n\t\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:558)\n\t\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:623)\n\t\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:199)\n\t\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\n\t\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\n\t\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:168)\n\t\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\n\t\tat org.apache.catalina.filters.HttpHeaderSecurityFilter.doFilter(HttpHeaderSecurityFilter.java:129)\n\t\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:168)\n\t\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\n\t\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)\n\t\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\n\t\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:597)\n\t\tat org.apache.catalina.valves.RequestFilterValve.process(RequestFilterValve.java:355)\n\t\tat org.apache.catalina.valves.RemoteAddrValve.invoke(RemoteAddrValve.java:54)\n\t\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)\n\t\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\n\t\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:660)\n\t\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n\t\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)\n\t\tat org.apache.coyote.ajp.AjpProcessor.service(AjpProcessor.java:424)\n\t\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\n\t\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:937)\n\t\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1793)\n\t\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\n\t\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\n\t\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n\t\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\n\t\tat java.base/java.lang.Thread.run(Thread.java:1583)",
    "comments": [
      "Good idea. The fix will be in 11.0.8, 10.1.42 and 9.0.106."
    ],
    "creation_ts": "2025-05-19T10:16:19Z",
    "fixes": [
      69694
    ]
  },
  {
    "id": 51910,
    "summary": "NPE in comet processing when shutting down Tomcat",
    "description": "I've hit it when testing 7.0.22 RC.\n\n1. Configure Tomcat with NIO connector\n2. Start Tomcat and open Comet chat example\nhttp://localhost:8080/examples/jsp/chat/index.jsp\n3. Type some Nickname and press button to start chat\nThe chat log will be in the second frame at the lower half of the page.\n4. While chat log is active (Browser shows page as being loaded),\nshut down Tomcat.\n5. Observe NPE in the logs:\n\n28.09.2011 15:55:32 org.apache.coyote.AbstractProtocol stop\nINFO: Stopping ProtocolHandler [\"http-nio-8080\"]\n28.09.2011 15:55:33 org.apache.catalina.connector.CoyoteAdapter event\nSEVERE: null\njava.lang.NullPointerException\n        at org.apache.catalina.core.StandardWrapperValve.event(StandardWrapperValve.java:354)\n        at org.apache.catalina.core.StandardContextValve.event(StandardContextValve.java:192)\n        at org.apache.catalina.valves.ValveBase.event(ValveBase.java:226)\n        at org.apache.catalina.core.StandardHostValve.event(StandardHostValve.java:245)\n        at org.apache.catalina.valves.ValveBase.event(ValveBase.java:226)\n        at org.apache.catalina.valves.ValveBase.event(ValveBase.java:226)\n        at org.apache.catalina.core.StandardEngineValve.event(StandardEngineValve.java:138)\n        at org.apache.catalina.connector.CoyoteAdapter.event(CoyoteAdapter.java:211)\n        at org.apache.coyote.http11.Http11NioProcessor.event(Http11NioProcessor.java:131)\n        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.>\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1554)\n        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:717)\n        at org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(NioEndpoint.java:1026)\n        at org.apache.tomcat.util.net.NioEndpoint$Poller.processKey(NioEndpoint.java:1169)\n        at org.apache.tomcat.util.net.NioEndpoint$Poller.timeout(NioEndpoint.java:1352)\n        at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1085)\n        at java.lang.Thread.run(Thread.java:662)\n28.09.2011 15:55:33 org.apache.coyote.AbstractProtocol stop\nINFO: Stopping ProtocolHandler [\"ajp-bio-8009\"]",
    "comments": [
      "It is reproducible with APR connector as well.\n\n===================\nINFO: Stopping ProtocolHandler [\"http-apr-8080\"]\n28.09.2011 18:31:25 org.apache.catalina.connector.CoyoteAdapter event\nSEVERE: null\njava.lang.NullPointerException\n\tat org.apache.catalina.core.StandardWrapperValve.event(StandardWrapperValve.java:354)\n\tat org.apache.catalina.core.StandardContextValve.event(StandardContextValve.java:192)\n\tat org.apache.catalina.valves.ValveBase.event(ValveBase.java:226)\n\tat org.apache.catalina.core.StandardHostValve.event(StandardHostValve.java:245)\n\tat org.apache.catalina.valves.ValveBase.event(ValveBase.java:226)\n\tat org.apache.catalina.valves.ValveBase.event(ValveBase.java:226)\n\tat org.apache.catalina.core.StandardEngineValve.event(StandardEngineValve.java:138)\n\tat org.apache.catalina.connector.CoyoteAdapter.event(CoyoteAdapter.java:211)\n\tat org.apache.coyote.http11.Http11AprProcessor.event(Http11AprProcessor.java:133)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:513)\n\tat org.apache.tomcat.util.net.AprEndpoint$SocketEventProcessor.run(AprEndpoint.java:1869)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n\tat java.lang.Thread.run(Thread.java:662)\n28.09.2011 18:31:25 org.apache.coyote.AbstractProtocol stop\nINFO: Stopping ProtocolHandler [\"ajp-apr-8009\"]\n===================",
      "Fixed in trunk and 7.0.x and will be included in 7.0.23 onwards."
    ],
    "creation_ts": "2011-09-28T12:05:19Z",
    "fixes": [
      51910
    ]
  },
  {
    "id": 58157,
    "summary": "RecycleRequiredException and missing AsyncListener.onTimeout call",
    "description": "Created attachment 32916\nServlet which starts asynchronous processing and intentionally waits for a timeout before dispatching to a static HTML file.\n\nOverview:\nWhen repeatedly polling an asynchronous servlet which (intentionally) times out, I occasionally see the following exception in the console:\n\nJul 20, 2015 8:58:45 AM org.apache.catalina.connector.CoyoteAdapter checkRecycled\nINFO: Encountered a non-recycled request and recycled it forcedly.\norg.apache.catalina.connector.CoyoteAdapter$RecycleRequiredException\n\tat org.apache.catalina.connector.CoyoteAdapter.checkRecycled(CoyoteAdapter.java:590)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.recycle(AbstractHttp11Processor.java:1809)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.release(Http11NioProtocol.java:199)\n\tat org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(NioEndpoint.java:1100)\n\tat org.apache.tomcat.util.net.NioEndpoint$Poller.timeout(NioEndpoint.java:1466)\n\tat org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1234)\n\tat java.lang.Thread.run(Thread.java:745)\n\nThis coincides with a request not receiving any response.\n\nThe majority of times the servlet is called, the correct response is returned as expected once the request times out, however on occasion (sometimes within 1 min, sometimes not until 30 mins of successful requests have passed) I see this exception and AsyncListener.onTimeout() is never called to produce the response.\n\nSteps to reproduce:\n0) Configure Tomcat to use the NIO connector\n1) Deploy the attached TimeoutServlet (note: add a static HTML page 'timeout.html' to the root of the web application to serve as the timeout response).\n2) Using a tool of your choice (I used JMeter), repeatedly send a request to the servlet and wait for the timeout response before sending the next request.\n\nActual Results:\nEventually, one of the requests will receive no response and the above exception will be written to the console.\n\nExpected Results:\nEvery request should receive the timeout response (timeout.html) after 1 second and no exception should appear in the console.\n\nAdditional Information:\nAppears to be very similar to https://bz.apache.org/bugzilla/show_bug.cgi?id=57011.",
    "comments": [
      "Just to add: have also seen this issue in 7.0.63.",
      "Something that may take 30 minutes to reproduce is going to be pretty much impossible to debug. It looks like a rare timing problem. We can try and find it by code inspection but anything you can do to provide an easier to reproduce test case would be appreciated.",
      "I think what you are seeing is a symptom of bug 57943 where the same socket ends up in the Poller twice. That would explain the stack trace you see.\n\nAre you able to build Tomcat 7.0.x from svn and test it? If not, you'll need to wait for the next 7.0.x release.\n\nI'm leaving this as NEEDINFO for now as we need to know if this issue is still reproducible with the current 7.0.x trunk.",
      "Tried the test servlet on the latest Tomcat 7.0.x trunk build and still seeing the checkRecycled exceptions in the Tomcat console.",
      "Created attachment 32978\nJMeter script that continuously does a GET on the test servlet and verifies the response is 200.",
      "For info - the checkRecycled exception was, on average, being generated within 1 minute of the JMeter script being run.",
      "Hi. Could you give 7.0.x trunk another try please. I've fixed an issue that might be the cause of this bug. I don't think it is but it is worth checking and I haven't been able to reproduce this yet.",
      "Hi, built the latest 7.0.x trunk and tried it today. Still seeing the checkRecycled exception - first one 4 minutes after starting the JMeter script.\nI will upload the Tomcat logs if they help at all - I ran the JMeter script against the test servlet for an hour.",
      "Created attachment 32988\nZip containing Tomcat 7.0.x logs after running JMeter script for an hour.",
      "Created attachment 32989\nWAR file for servlet used to recreate this bug.\n\nAttaching the WAR file I have been running the JMeter script against.",
      "Another thing to note is that it takes much longer to reproduce this exception using a JavaScript client versus using JMeter (where it can be seen within a few minutes).\nThanks!",
      "Thanks for testing. I'll be taking another look at this over the next few days.",
      "Good news. I think I have managed to track down the root cause of this. It is a race condition between the Poller timing out the socket and new data arriving. I haven't - yet - figured out how to fix it.\n\nThe test case only triggered one failure in a hour for me but this is going to be *very* sensitive to timing so that isn't a surprise. I think I can trigger the correct execution sequence in a debugger so - assuming that is the case - I'll be able to confirm any fix fairly easily.",
      "I've found and fixed a couple of concurrency issues that could have contributed to this but I'm still seeing the occassional failure.\n\nI haven't yet managed to reproduce the same exception with a debugger.\n\nInvestigations continue.",
      "Hi Mark, just thought I'd try out your latest update - still seeing the exception (as you have stated above). Thanks.",
      "A quick update before the weekend.\n\nI have better grip on what is going wrong. The issue is that async dispatches are being processed multiple times. Depending on the timing, this can go wrong.\n\nThe fix (for 7.0.x at least) is non-trivial. I've tried various small patches but all introduce a different problem. At this point, I think a reafctoring of the async dispatch handling will be required.\n\nI haven't looked at 9.0.x or 8.0.x as yet. The refactoring that has already taken place in those versions may have already addressed this. Or not.\n\nI'll continue to look at this next week.",
      "I've spent some more time looking at this and - having found the 'right' place to fix this - the patch was actually fairly small.\n\nI have fixed the issue in 9.0.x, 8.0.x (for 8.0.25 onwards) and 7.0.x (for 7.0.64 onwards).",
      "We have built the trunk and we can confirm that we haven't seen the bug appearing during our tests with the minimal servlet, and also with our full application.\n\nWe'll continue testing for more time but it's looking really good.\n\nThanks a lot for your help Thomas! Really appreciated!",
      "Sorry!. I meant to say Mark... or Mr.Thomas.... as you prefer :)",
      "I answer to most names - as long as they are polite ;)\n\nI did some local testing before committing this patch with the simple test case and didn't see any issues for over 15 hours so I'm reasonably confident that this issue is fixed. If your testing shows otherwise just re-open this issue."
    ],
    "creation_ts": "2015-07-20T13:32:13Z",
    "fixes": [
      58157
    ]
  },
  {
    "id": 65586,
    "summary": "JarContents#mightContainResource doesn't return true when finding directory in jar file by using bloom filter",
    "description": "Dear all\n\nWhen using a bloom filter to speed up archive lookups (useBloomFilterForArchives = \"true\" in context.xml) in Tomcat9, tomcat will fail to get resources from jar file in some special condition.\n\nFor example , when we want to find a directory resource in xxx.jar by using a bloom filter,\n\nif we use \" cl.getResouce(\"/org/apache/coyote\", \"/WEB-INF/classes\") \" to get resources , noting will be returned,  \n(By the way\uff0c\nwe find the same way to be used to get resources in the xmlbeans-4.0.0.jar org.apache.xmlbeans.impl.schema.SchemaTypeLoaderImpl#isPath30)\n\nbut if we use cl.getResouce(\"/org/apache/coyote/\", \"/WEB-INF/classes\") , it will return the resources we want successfully.\n\nif we do not use bloomFilter , both ways will return resources successfully. \n\nIt is cause by org.apache.catalina.webresources.JarContents#JarContents who create hashCode of JarEntry.getName(), if JarEntry is directory, its name contain\n\n\"/\" at the last of string. \n\nSo when you use param didn't contain \"/\" at last, org.apache.catalina.webresources.JarContents#mightContainResource will return false.\n\nFor example:\n\n        JarFile jarFile = new JarFile(\"D:\\\\tomcat-coyote.jar\");\n\n        JarContents jarContents  = new JarContents(jarFile);\n\n        // false\n     System.out.println(jarContents.mightContainResource(\"/org/apache/catalina\", \"/WEB-INF/classes\"));\n\n        // true\n    System.out.println(jarContents.mightContainResource(\"/org/apache/catalina/\", \"/WEB-INF/classes\"));\n \nSo I suggest changing JarContents#hashcode like this to ignore end slash of path\n\n    private int hashcode(String content, int startPos, int hashPrime) {\n        int h = hashPrime/2;\n        int contentLength = content.length();\n\t\t\n        if (contentLength > 1 && content.charAt(contentLength - 1) == '/') {\n            // ignore end slash\n            contentLength--;\n        }\n\t\t\n        for (int i = startPos; i < contentLength; i++) {\n            h = hashPrime * h + content.charAt(i);\n        }\n\n        if (h < 0) {\n            h = h * -1;\n        }\n        return h;\n    }\n\n\t\n\t\nsorry ,I am not native speaker , hope that I made it clear\uff01",
    "comments": [
      "That is a very clear description. Thank you. I am working on a fix now.",
      "Fixed in:\n- 10.1.x for 10.1.0-M6 onwards\n- 10.0.x for 10.0.12 onwards\n- 9.0.x for 9.0.54 onwards"
    ],
    "creation_ts": "2021-09-22T02:17:12Z",
    "fixes": [
      65586
    ]
  },
  {
    "id": 56739,
    "summary": "Error response body generated only occasionally",
    "description": "When using the following approach in an asynchronous servlet for reporting an error condition, an error response body is generated only occasionally:\n\n((HttpServletResponse) asyncContext.getResponse()).sendError(statusCode, message);\nasyncContext.complete()\n\nBased on a discussion on tomcat-users this should be a valid approach:\n\nhttp://mail-archives.apache.org/mod_mbox/tomcat-users/201407.mbox/%3c53BD085C.7010205@apache.org%3e\n(subject: \"Servlet 3.1 asynchronous processing API\")\n\nHere's how to reproduce the issue:\n\nmarko@ubuntu:~$ ab -v 2 -l -n 100 'http://localhost:8080/servlet3-async/error1?fail=true' |grep ^Content-Length| sort | uniq -c\n     95 Content-Length: 0\n      5 Content-Length: 1082\n\nThe code and more information about the test can be found here:\nhttps://github.com/marko-asplund/servlet3-async\n\nVerified on:\nUbuntu 14.04 / OpenJDK 1.7.0_55\nMac OS X 10.8.5 / Oracle Java 1.7.0_55\n\nThe same thing occurs with Tomcat 7.0.54.",
    "comments": [
      "The good news is that I now know what is going on here.\n\nWhen the request is received it is process on container Thread C. By the time the thread reaches the Servlet, it has passed through Tomcat's request processing pipeline including the ErrorReportValve. If the Servlet's doGet() method, an application thread A is created just before the end of doGet(). Thread C then starts to exit Tomcat's request processing pipeline.\n\nThread A calls sendError() and complete().\n\nIf thread C exits the ErrorReportValve before thread A calls sendError() then no response body will be generated.\n\nIf thread A calls sendError() before thread C exits the ErrorReportValve then a response body will be generated.\n\nIn short, this comes down to a timing issue between the container and the application thread and the way that Tomcat reports unhandled errors with the ErrorReportValve. It would also be the case the a custom error page (handled by the StandardHostValve) is unlikely to be called in this case.\n\nThe bad news is that I don't see an obvious fix. It looks like the error page handling is going to need some refactoring but doing that without breaking the existing API (particularly for the ErrorReportVlave) is going to be tricky.",
      "Thanks for the update and investigating this issue!\n\nWhat's the Tomcat dev team's policy to fixing issues like this?\nIs it something that can be addressed in a TC 7.0 / 8.0 maintenance releases?",
      "Generally we like to close every open bug (not enahncement request) for a branch (e.g. 8.0.x) before we do the next 8.0.x release.\n\nThe excpetion is API breaking changes. Tomcat doesn't have a black and white view of what is the public API and what isn't. It is very much a judgement call based on how likely we think it is that someone will have written a custom component that is using the API that needs to change. How we handle these sorts of changes depends on the severity of the bug, the scale of the API change and what those API changes are.\n\nFor this particular bug I think I can see a solution but I'm not there yet. There are API changes but they aren't in an area where I'd expect folks to be writing custom components (I don't think I'll need to change the ErrorReportValve for example) so - assuming my solution works - this should be in the next 8.0.x release. It should also make it into the next 7.0.x release.",
      "This has been fixed in 8.0.x for 8.0.11 onwards.\n\nI'm going to leave it a little while to give folks a chance to review the changes before back-porting it to 7.0.x.",
      "That's great news, thanks!\n\nAlmost forgot: do you think the \"java.lang.IllegalStateException: Calling [asyncTimeout()] is not valid \u2026\" issue with TC 8 described on https://github.com/marko-asplund/servlet3-async is related to this?\nOr should I report it as a separate issue?",
      "(In reply to marko asplund from comment #5)\n> That's great news, thanks!\n> \n> Almost forgot: do you think the \"java.lang.IllegalStateException: Calling\n> [asyncTimeout()] is not valid \u2026\" issue with TC 8 described on\n> https://github.com/marko-asplund/servlet3-async is related to this?\n> Or should I report it as a separate issue?\n\nDidn't you already report that as Bug 56736 ?",
      "yeah, so it seems :-) sorry about the confusion.",
      "This has been back-ported in 7.0.x for 7.0.56 onwards."
    ],
    "creation_ts": "2014-07-17T21:02:14Z",
    "fixes": [
      56739
    ]
  },
  {
    "id": 66441,
    "summary": "Static field import failed on Expression Language lookup",
    "description": "Hello! Working with JSP pages and static imports using Tomcat's EL Jasper implementation, I found that importing a static field with EL lookup did not resolve to the correct value. Tried the following jsp\n\n<%@ page import = \"static myapp.Example.STATIC_VAR, static myapp.Example.STATIC_METHOD\" %>\n<html>\n   <head>\n      <title>Import Static</title>\n   </head>\n   \n   <body>\n      EL expressions: <br/>\n      ${STATIC_VAR}\n      ${STATIC_METHOD()}\n\n      <br/>\n      <br/>\n      \n      JSP expressions: <br/>\n      <%=STATIC_VAR%>\n      <%=STATIC_METHOD()%>\n   </body>\n</html>\n\n\nThe JSP expressions resolve as expected but of the EL expressions, only STATIC_METHOD() works. After some investigation we narrowed down that the problem may potentially be here https://github.com/apache/tomcat/blob/10.1.x/java/org/apache/el/parser/AstIdentifier.java#L101-L103 where the variable is resolved by the NotFoundELResolver and the import block to resolveStatic is not reached here https://github.com/apache/tomcat/blob/10.1.x/java/org/apache/el/parser/AstIdentifier.java#L105-L110. \n\n\nWe are using the API from JakartaEE and not the API from Tomcat for Pages. If we change to Tomcat's API then it does behave as expected. This is because the ImportELResolver from Tomcat does a static lookup in its resolver here https://github.com/apache/tomcat/blob/10.1.x/java/jakarta/servlet/jsp/el/ImportELResolver.java#L85-L92 whereas the Jakarta API does not cover it here https://github.com/jakartaee/pages/blob/master/api/src/main/java/jakarta/servlet/jsp/el/ImportELResolver.java#L63-L71. Not sure if this should be fixed in the implementation of Tomcat or if it's something that should be address in the Jakarta Pages API. Any help is appreciated, thanks in advance!!",
    "comments": [
      "Here are a few clarifications for this issue,\n\n1) This is for EE10 specifically, as we've tried to update our Open Liberty Pages Implementation to support static imports into the Expression Language environment. Before EE10, only JSP expressions could be used for this type of imports.\n\n2) This scenario occurs with a mix up between Tomcat's EL API/Impl mixed with Jakarta Pages' 3.1 API.\n\n3) Perhaps the Jakarta EE Pages API is more at fault and should be updated to look at static variables (via importHandler.resolveStatic), just as Tomcat ImportELResolver does. \n\n@Mark Thomas think you would know more here, any help would be appreciated! Thank you!",
      "This looks like a Jakarta EL API bug to me. I think it needs to handle the static field. It also looks like the EvaluationListener#propertyResolved() events aren't being triggered.",
      "Re-opening this as while Tomcat's pages API may handle this correctly, Jasper (Tomcat's pages implementation) does not.",
      "Fixed in:\n- 11.0.x for 11.0.0-M3 onwards\n- 10.1.x for 10.1.6 onwards\n-  9.0.x for  9.0.72 onwards\n-  8.5.x for  8.5.86 onwards"
    ],
    "creation_ts": "2023-01-24T18:12:47Z",
    "fixes": [
      66441
    ]
  },
  {
    "id": 65853,
    "summary": "[CsrfPreventionFilter] Extract evaluation of skipNonceCheck into overridable method",
    "description": "Currently evaluation of skipNonceCheck is inlined into big doFilter() method. If I want to change behavior of this evaluation (enabling use of wildcards) I have to copy the whole class or at least the whole doFilter() method and reimplement it. If changes are made to the code, I have to reflect these changes in my copy. Bad idea!\n\nI suggest to extract this code into a separate method with at least protected visibility.\n\n####################\nif (Constants.METHOD_GET.equals(req.getMethod())\n                    && entryPoints.contains(getRequestedPath(req))) {\n                if(log.isTraceEnabled()) {\n                    log.trace(\"Skipping CSRF nonce-check for GET request to entry point \" + getRequestedPath(req));\n                }\n\n                skipNonceCheck = true;\n            }\n####################\n\nLike this:\n\n####################\nprotected boolean getSkipNonceCheck(HttpServletRequest request) throws IOException, ServletException {\n    if (!Constants.METHOD_GET.equals(request.getMethod()))\n        return true;\n    \n    if (!entryPoints.contains(getRequestedPath(request)))\n        return false;\n    \n    return true;\n}\n####################\n\n\ndoFilter()\n####################\n...\nif (getSkipNonce(req)) {\n    if(log.isTraceEnabled()) {\n        log.trace(\"Skipping CSRF nonce-check for GET request to entry point \" + getRequestedPath(req));\n    }\n\n    skipNonceCheck = true;\n}\n...\n####################\n\n\nMaybe some other details would deserve to be in their own (overridable) methods as well.",
    "comments": [
      "Sorry, my suggested implementation was a little rushed. Here is a corrected version.\n\n####################\nprotected boolean getSkipNonceCheck(HttpServletRequest request) {\n    if (!Constants.METHOD_GET.equals(request.getMethod()))\n        return false;\n\n    String reqPath = getRequestedPath(request);\n\n    if (!entryPoints.contains(reqPath))\n        return false;\n\n    if (log.isTraceEnabled())\n        log.trace(\"Skipping CSRF nonce-check for GET request to entry point \" + reqPath);\n\n    return true;\n}\n####################\n\ndoFilter()\n####################\nboolean skipNonceCheck = getSkipNonceCheck(req);\n####################",
      "I further suggest to either add HttpServletRequest argument to the generateNonce() method or add another method like getSkipNonceGeneration(HttpServletRequest request) or getGenerateNonce(HttpServletRequest request), what ever you prefer.\n\nBackground is, that you may need to override behavior, when to actually generate a nonce for a given request.\n\nThe call would look like this.\n\n#######################\nString newNonce = generateNonce();\n\nif (newNonce != null) {\n    nonceCache.add(newNonce);\n\n    // Take this request's nonce and put it into the request\n    // attributes so pages can make direct use of it, rather than\n    // requiring the use of response.encodeURL.\n    request.setAttribute(Constants.CSRF_NONCE_REQUEST_ATTR_NAME, newNonce);\n\n    wResponse = new CsrfResponseWrapper(res, nonceRequestParameterName, newNonce);\n} else {\n    wResponse = response;\n}\n#######################",
      "Sorry, of course like this.\n\nString newNonce = generateNonce(req);\n...",
      "I have further suggestions for this Filter. To add a little flexibility for the Nonce cache and for the storage of it I suggest construction methods like this:\n\n#################################\nprotected static interface NonceCache<T> extends Serializable {\n    void add(T nonce);\n\n    boolean contains(T nonce);\n}\n\nprotected static class LruCache<T> implements NonceCache<T> {\n#################################\n\n#################################\nprotected NonceCache<String> getNonceCache(@SuppressWarnings( \"unused\" ) HttpServletRequest request, HttpSession session) {\n    return (NonceCache<String>) session.getAttribute(Constants.CSRF_NONCE_SESSION_ATTR_NAME);\n}\n\nprotected NonceCache<String> newNonceCache(@SuppressWarnings( \"unused\" ) HttpServletRequest request, HttpSession session) {\n        LruCache<String> nonceCache = new LruCache<>(nonceCacheSize);\n    session.setAttribute(Constants.CSRF_NONCE_SESSION_ATTR_NAME, nonceCache);\n\n    return nonceCache;\n}\n#################################\n\n\nCalled like this:\n\n#################################\nNonceCache<String> nonceCache = (session == null) ? null : getNonceCache(req, session);\n#################################\n\n#################################\nif (nonceCache == null) {\n    if(log.getLogger().getLevel().isAsVerboseAs(LogLevel.DEBUG)) {\n        log.logDebug(\"Creating new CSRF nonce cache with size=\" + nonceCacheSize + \" for session \" + (null == session ? \"(will create)\" : session.getId()));\n    }\n\n    if (session == null) {\n        if(log.getLogger().getLevel().isAsVerboseAs(LogLevel.DEBUG)) {\n             log.logDebug(\"Creating new session to store CSRF nonce cache\");\n        }\n\n        session = req.getSession(true);\n    }\n\n    nonceCache = newNonceCache(req, session);\n}\n#################################\n\nNone cache creation is moved below session \"creation\" to be able to pass it into the call of newNonceCache(req, session).",
      "Any thoughts here?",
      "How about creating a PR or patch?",
      "Fixed in:\n- 10.1.x for 10.1.0-M15 onwards\n- 10.0.x for 10.0.21 onwards\n- 9.0.x for 9.0.63 onwards\n- 8.5.x for 8.5.79 onwards",
      "This is wonderful. Thank you very much for using my implementation.\n\nI just have a very little annotation. Would you mind, adding a null check for the result of generatNonce(req)? If the value is null, the newNonce must not be added to the cache. With this the class is perfect.",
      "Returning null there feels more like an error rather than something that should effectively be ignored. What is the use case for returning null?",
      "You're right. It's easy to miss a detail in the wood of these extension suggestions. And in our current implementation we even use a base method like this\n\n####################\nprotected boolean getSkipNonceGeneration(@SuppressWarnings( \"unused\" ) HttpServletRequest request) {\n    return false;\n}\n####################\n\nto decide, whether to create and handle a nonce depending on the request.\n\nOur overriding implementation checks, if the current request goes to a page, that we consider an entry point, which must not be part of the nonce chain, well, at least nothing other than the (new) start.\n\nIn the doFilter() method this oule look as follows.\n\n#########################\nif (!getSkipNonceGeneration(req)) {\n    String newNonce = generateNonce();\n\n    nonceCache.add(newNonce);\n\n    // Take this request's nonce and put it into the request\n    // attributes so pages can make direct use of it, rather than\n    // requiring the use of response.encodeURL.\n    request.setAttribute(Constants.CSRF_NONCE_REQUEST_ATTR_NAME, newNonce);\n    //System.out.println( \"new nonce: \" + newNonce );\n\n    wResponse = new CsrfResponseWrapper(res, nonceRequestParameterName, newNonce);\n} else {\n    wResponse = response;\n}\n#########################",
      "Are you asking for an additional extension point, skipNonceGeneration(HttpServletRequest) to be added? That looks reasonable to me.",
      "Exactly.",
      "Done",
      "Wonderful. It is perfect now. Thank you so much!",
      "I have now integrated your new version of CsrfPreventionFilter as base to our filter class. And it tuned out, that there are some minor things missing, that will prevent us from using the class as it is now.\n\nFor one there is no need to call getNonceCache(req), if both skipNonceCheck(req) and skipNonceGeneration(req) return true. For us is is actually malicious, because in these cases a new cache instance is created, that hurts later. I suggest to skip the block 166 to 180, if both extension points return true.\n\nAnd much less minor: If skipNonceGeneration(req) is true, wRequest remains null and is later passed into chain.doFilter(request, wRequest). It must fallback to response in this case.\n\nMaybe it wouldn't hurt to change line 204 like this:\n\nchain.doFilter(request, wResponse != null ? wResponse : response);\n\nOr, if you have some standard ifNull() of ours, use that.\n\nThen of course current 200-201 could be dropped.",
      "(In reply to Marvin Fr\u00f6hlich from comment #15)\n> For one there is no need to call getNonceCache(req), if both\n> skipNonceCheck(req) and skipNonceGeneration(req) return true. For us is is\n> actually malicious, because in these cases a new cache instance is created,\n> that hurts later. I suggest to skip the block 166 to 180, if both extension\n> points return true.\n\nDo you mean there is no need to call createNoneCache() since that is what happens in lines 166-180?\nI think it is sufficient to make the test at line 166\nif (nonceCache == null && !skipNonceGeneration(req))\n\nIf skipNonceCheck(req) is false and nonceCache is null the method will have already exited so there is no need to check it at line 166.\n\n> And much less minor: If skipNonceGeneration(req) is true, wRequest remains\n> null and is later passed into chain.doFilter(request, wRequest). It must\n> fallback to response in this case.\n> \n> Maybe it wouldn't hurt to change line 204 like this:\n> \n> chain.doFilter(request, wResponse != null ? wResponse : response);\n\nDone.",
      "(In reply to Mark Thomas from comment #16)\n> Done.\n\nThanks a lot.\n\n(In reply to Mark Thomas from comment #16)\n> Do you mean there is no need to call createNoneCache() since that is what\n> happens in lines 166-180?\n> I think it is sufficient to make the test at line 166\n> if (nonceCache == null && !skipNonceGeneration(req))\n> \n> If skipNonceCheck(req) is false and nonceCache is null the method will have\n> already exited so there is no need to check it at line 166.\n\nI see, I wasn't clear enough.\n\nI suggest this code for current 123-125:\n##########################\nboolean skipNonceCheck = skipNonceCheck(req);\nboolean skipNonceGeneration = skipNonceGeneration(req);\n\nNonceCache<String> nonceCache = ((session == null) || (skipNonceCheck && skipNonceGeneration)) ? null : getNonceCache(req, session);\n\nif (!skipNonceCheck) {\n##########################\n\nThis way the call to getNonceCache(req, session) is skipped, if both skipNonceCheck and skipNonceGeneration are true (or no session is available) and hence nonce handling is skipped at all for this request.\n\nThis is, what I meant by \"there's no neede to call getNonceCache(req)\".\n\nYou're right with your suggestion about 166.",
      "So in your code the call to getNonceCache() will create a cache instance if none is found? That doesn't seem quite right. I'd expect that method to return null if the cache doesn't exist rather than the create a new instance.\n\nI've refactored things a bit more so getNonceCache() is only called when necessary. Let me know what you think.",
      "(In reply to Mark Thomas from comment #18)\n> So in your code the call to getNonceCache() will create a cache instance if\n> none is found? That doesn't seem quite right. I'd expect that method to\n> return null if the cache doesn't exist rather than the create a new instance.\n\nWell, the reason for many of the extensions is, that we need to distinguish between window contexts. The session is the same, but the request might come from another window (popup). Without this distinction the nonce chain will get broken once a popup is opened for a session. And this needs special treatment (separate nonce caches). Actually I think, this feature is missing in your implementation.\n\n(In reply to Mark Thomas from comment #18)\n> I've refactored things a bit more so getNonceCache() is only called when\n> necessary. Let me know what you think.\n\nYes, this looks fine. Thanks.",
      "The other reason for extension is to have more flexibility (wildcard support) in entry point handling."
    ],
    "creation_ts": "2022-01-27T16:53:18Z",
    "fixes": [
      65853
    ]
  },
  {
    "id": 56840,
    "summary": "RewriteValve in context.xml throws NullPointerException",
    "description": "I've added a RewriteValve in my context.xml, and have a simple rewrite.config with one line:\n\nRewriteRule ^/(?:[^/]+/)?(resources/.*)$ /SAPUI5/$1\n\n\nWhen requesting a page with the matching URL, a 500 error is returned:\n\njava.lang.NullPointerException\n\torg.apache.catalina.connector.Request.getContextPath(Request.java:1901)\n\torg.apache.catalina.valves.rewrite.RewriteValve.invoke(RewriteValve.java:451)\n[...]\n\nI think the problem lies around line 447 in RewriteValve.java:\n447                    request.getCoyoteRequest().requestURI().setString(null);\n448                    CharChunk chunk = request.getCoyoteRequest().requestURI().getCharChunk();\n449                    chunk.recycle();\n450                    if (context) {\n451                        chunk.append(request.getContextPath());\n452                    }\n\nsetString(null) sets the MessageBytes type to TYPE_NULL, and (context is true in my case) request.getContextPath() tries to access cleared value, which fails.",
    "comments": [
      "The fix will be included in 8.0.11+."
    ],
    "creation_ts": "2014-08-12T13:12:01Z",
    "fixes": [
      56840
    ]
  },
  {
    "id": 43757,
    "summary": "Improper parsing of response.sendRedirect() in JSP source",
    "description": "Tomcat is throwing a java.lang.illegalStateException due to an attempted\nresponse.sendRedirect() after the time for such matters has come and gone...\nBut, this appears to be a symptom of bad .jsp parsing at runtime.\n\n==========================\n\norg.apache.jasper.JasperException: Exception in JSP: /buslog.jsp:42\n\n39: // if (session.getAttribute(\"isAuth\") == null) {\n40: //     session.setAttribute(\"messageToUser\",\"Authentication failed.\");\n41: //        you.shouldNotParseThis();\n42: //     response.sendRedirect(\"./index.jsp\");\n43: // }\n44: \n45: // if (session.getAttribute(\"isAuth\") != null) {\n\n==============================\n\nThese lines are commented out in the source, and should not conceivably cause a\nruntime error. Changing \"response.sendRedirect(...)\" to\n\"response.sendAbendOMG(...)\" suppresses the error. I am willing to provide the\ncomplete source if necessary.\n\nBuild and execution environments are NetBeans 5.5.1 with bundled Tomcat 5.5.17.",
    "comments": [
      "I am tempted to think that the source Tomcat is parsing isn't the source you\nthink it is. I can't reproduce the issue. Can you provide a simple JSP that\nexhibits this problem?",
      "(In reply to comment #1)\n> I am tempted to think that the source Tomcat is parsing isn't the source you\n> think it is. I can't reproduce the issue. Can you provide a simple JSP that\n> exhibits this problem?\n\nGreetings Mark :)\n\nHere is a .jsp that should allow you to reproduce the issue:\n\n=========================\n\n<%@page contentType=\"text/html\"%>\n<%@page pageEncoding=\"UTF-8\"%>\n<%@page import=\"java.util.*\"%>\n<%@page import=\"javax.servlet.*\"%>\n<%\n\n\nServletContext context = this.getServletContext();\n\n\n\n// if (session.getAttribute(\"isAuth\") == null) {\n//     session.setAttribute(\"messageToUser\",\"Authentication failed.\");\n//        you.shouldNotParseThis();\n//     response.sendRedirect(\"./index.jsp\");\n// }\n\n// if (session.getAttribute(\"isAuth\") != null) {\n//     if (!session.getAttribute(\"isAuth\").toString().equals(\"true\")) {\n//        session.setAttribute(\"messageToUser\",\"Authentication failed.\");\n//         response.sendRedirect(\"./index.jsp\");\n//     }\n// }\n\nString state = \"\";\n\nif (request.getParameter(\"state\") != null) {\n    state = request.getParameter(\"state\");\n} else {\n    response.sendRedirect(\"./index.jsp\");\n}\n\n// each state is caught by name, final fall through goes back to index.jsp\nif (state.equals(\"CRInput\")) {\n    response.sendRedirect(\"./crinput.jsp\");\n} else {\n    response.sendRedirect(\"./index.jsp\");\n}\n\n\n%>\n\n==============================\n\nThere is actually a logical flaw with this (possible for two\nresponse.sendRedirect calls), and that is the root cause of the exception... my\nbad! But, the HTTP 500 response incorrectly points to the line number of the\nfirst occurrence of response.sendRedirect, whether it is commented out or not.\nThis makes debugging quite a pain.\n\nWith my recent discovery of the cause of the exception I feel that I set the\nseverity of this a bit high. I was not sure if it was my place to correct it, so\ndemote away if you'd like.\n\nThank you for the swift response!",
      "Look at the generated java a little closer.\n\nYou'll notice after the commented code something like this: \nout.println(\"\\n\")\n\nBecause there is whitespace at the end of the file after the %>\n\nSo if one tried to write AFTER a redirect is done - you get an ISE.\n\nYou need\nif (someCondition) {\n  response.sendRedirect(\"./index.jsp\");\n  return;\n}",
      "(In reply to comment #3)\n> Look at the generated java a little closer.\n> You'll notice after the commented code something like this: \n> out.println(\"\\n\")\n> Because there is whitespace at the end of the file after the %>\n> So if one tried to write AFTER a redirect is done - you get an ISE.\n> You need\n> if (someCondition) {\n>   response.sendRedirect(\"./index.jsp\");\n>   return;\n> }\n\nYou are correct, and I noted the cause (a little less verbosely) in my reply \nto Mark Thomas' response. However, the error generated does not properly \nindicate the line number that generated the error. That is what I'm driving at.",
      "Yep - looks like we aren't counting commented out lines correctly during\ngeneration. Thanks for the test case - I'll take a look.\n\nUpdating properties accordingly.",
      "On inspection this wasn't an SMAP problem with comments but an issue with how we\nwere finding the right JSP line given the Java line.\n\nI have fixed it in trunk and proposed it for backport to 6.0.x and 5.5.x",
      "Fixed in 5.5.x and will be included in 5.5.26 onwards."
    ],
    "creation_ts": "2007-10-31T11:55:53Z",
    "fixes": [
      43757
    ]
  },
  {
    "id": 64745,
    "summary": "BasicDataSource won't load with enabled SecurityManager",
    "description": "The inner class org.apache.tomcat.dbcp.dbcp2.BasicDataSource$PaGetConnection was removed in 9.0.38, but the class is still loaded in the static initialization block when the SecurityManager is activated.\n\nThe problematic code also exists upstream in the Apache Commons DBCP project.\nI haven't reported it there yet.\n\n\nStacktrace:\n\nCaused by: java.lang.IllegalStateException: Unable to pre-load classes\n\tat org.apache.tomcat.dbcp.dbcp2.BasicDataSource.<clinit>(BasicDataSource.java:94) ~[tomcat-dbcp.jar:9.0.38]\n\t... 123 more\nCaused by: java.lang.ClassNotFoundException: org.apache.tomcat.dbcp.dbcp2.BasicDataSource$PaGetConnection\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:471) ~[?:?]\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:589) ~[?:?]\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:522) ~[?:?]\n\tat org.apache.tomcat.dbcp.dbcp2.BasicDataSource.<clinit>(BasicDataSource.java:79) ~[tomcat-dbcp.jar:9.0.38]\n\t... 123 more",
    "comments": [
      "Thanks for the report and the analysis.\n\nFixed in:\n- master for 10.0.0-M9 onwards\n- 9.0.x for 9.0.39 onwards\n- 8.5.x for 8.5.59 onwards"
    ],
    "creation_ts": "2020-09-17T08:16:26Z",
    "fixes": [
      64745
    ]
  },
  {
    "id": 45279,
    "summary": "McastServiceImpl leaks sockets.",
    "description": "McastServiceImpl does not close its socket in stop() as it claims. It merely calls leaveGroup(), which is sufficient to stop receiving messages, but does not close the socket. \n\nThis causes a file descriptor leak each time the service is stopped.\n\nadd;\n\nsocket.close();\n\nafter leaveGroup();",
    "comments": [
      "btw, since it unreferences the socket without closing it, the next start() makes a new socket anyway.\n\nI've hacked around this by using reflection to grab the reference to the multicast socket object before calling stop, then calling stop, then closing the socket myself.",
      "Fix suggested for back port into 6.0 branch",
      "Fixed in 6.0.x branch, will be included in 6.0.17 and forward",
      "Also applied to TC 5.5 as r790337.\nWill be part of 5.5.28."
    ],
    "creation_ts": "2008-06-25T12:21:15Z",
    "fixes": [
      45279
    ]
  },
  {
    "id": 68227,
    "summary": "AsyncListener::onComplete is not called on network error if error listener calls dispatch",
    "description": "In the event of a network error, AsyncListener::onComplete is not called if the preceding call to AsyncListener::onError results in a call to AsyncContext::dispatch.\n\nThis behaviour is observed starting with Tomcat 10.1.12 as well as 10.1.16 (latest as of this writing). This behaviour is not observed in 10.1.11.\n\nI have created two reproducers here: https://gitlab.com/-/snippets/3625015\n\nOne reproducer uses Spring Boot, and closely mirrors our production code. The other reproducer uses plain tomcat-embed, and was used by myself to figure out if this was a bug in Tomcat or in Spring.\n\nThe call to AsyncContext::dispatch is key to triggering this behaviour, without that the call to AsyncListener::onComplete occurs as expected.",
    "comments": [
      "Fixed in:\n- 11.0.x for 11.0.0-M15 onwards\n- 10.1.x for 10.1.17 onwards\n-  9.0.x for  9.0.84 onwards\n-  8.5.x for  8.5.97 onwards\n\nThanks for the test case. I adapted it into a test for the Tomcat test suite.",
      "I want to reopen this bug as this has regressed in Tomcat 10.1.24. The issue does not occur in Tomcat 10.1.23. The same reproducers linked in the initial description apply.",
      "The fix included a test adapted from your reproducer: https://github.com/apache/tomcat/commit/957148db169df9d5340d0499a9d137ebacd46964\nThe test still passes.",
      "Thank you. I can see that there was a recent change to the behaviour of the reproducer test in order to avoid entering a loop: https://github.com/apache/tomcat/commit/534ade17826d8f3e78118df3751b6391f0ec92ca#diff-3bed966a130a45ebeb6ebb462fb99ef584ffdac906ae36a8b982768b2023920b\n\nThis change is currently not reflected in Spring Boot, which is what our production code uses. Is it correct that the desired solution is that Spring (and other users) adapt to this?",
      "TL;DR - yes.\n\nFYI: This change originated from a(n internal) discussion with the Spring team. The expectation from the Spring team (which is consistent with the wording in the specification) was that if dispatch() was called from onError() then the dispatch would be performed.\n\nIf your async error handling calls dispatch then that dispatch is now processed (as it should be). If the target of the dispatch can start async processing then you will need to guard against loops."
    ],
    "creation_ts": "2023-11-26T20:11:56Z",
    "fixes": [
      68227
    ]
  },
  {
    "id": 57215,
    "summary": "Regression in Tomcat 7.0.54 after Bug 56501 with urls starting with //",
    "description": "After upgrading from 7.0.52 of Tomcat to 7.0.54 we found that our application was now returning 404 resource not found errors when the request uri starts with //.\neg. We have an embedded server created and started something like:\n\n org.apache.catalina.startup.Embedded embedded = new Embedded();\n org.apache.catalina.Engine engine engine = embedded.createEngine();\n engine.setName(\"\");\n embedded.setContainer(engine);\n embedded.addEngine(engine);\n\n ...\n\n String startPathContextRoot = \"c:\\website\\data\\startPath\";\n org.apache.catalina.Context startPathContext = embedded.createContext(\"/startPath\",startPathContextRoot);\n\n embedded.start()\n\nThen a request to http://host:port//startPath returns 404.\nWhereas at Tomcat 7.0.52 it returns what we would expect from a request to \nhttp://host:port/startPath.\nThe same behaviour is seen with requests to extended URLs eg:\n  http://host:port//startPath/anotherPath.\nwhere they end up at the servlet as expected with 7.0.53 and not with 7.0.54\n\nDebugging this a bit I found that the problem was introduced at 7.0.53 and by the changes under \nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=56501\nwhich for Tomcat 7 were revision \nhttp://svn.apache.org/viewvc?view=revision&revision=1594028\nIf I run our app without these changes in at 7.0.54 then it works fine.\n\nLooking at the changes in the revision I saw some tests were added and so I tried adding some new tests to tomcat/trunk/test/org/apache/catalina/connector/TestRequest.java which I think example the problem:\n\n    @Test\n    public void testBug56501p() throws Exception {\n        doBug56501(\"/path\", \"//path\", \"/path\");\n    }\n\n    @Test\n    public void testBug56501q() throws Exception {\n        doBug56501(\"/path\", \"//path/\", \"/path\");\n    }\n\n    @Test\n    public void testBug56501r() throws Exception {\n        doBug56501(\"/path\", \"//path/bob\", \"/path\");\n    }\n\n    @Test\n    public void testBug56501s() throws Exception {\n        doBug56501(\"/path\", \"//path/bob/\", \"/path\");\n\nIf I run these at 7.0.53 they pass.\nand running at 7.0.54 they fail with:\n\nTestcase: testBug56501p took 0.307 sec\n\tFAILED\nexpected:</[path]> but was:</[]>\n\nTestcase: testBug56501q took 0.275 sec\n\tFAILED\nexpected:</[path]> but was:</[]>\n\nTestcase: testBug56501r took 0.246 sec\n\tFAILED\nexpected:</[path]> but was:</[]>\n\nTestcase: testBug56501s took 0.32 sec\n\tFAILED\nexpected:</[path]> but was:</[]>\n\n\nI can try and create this with a simple servlet/setup if required if the test additions are not enough.\n\nDavid",
    "comments": [
      "This is going to get messy.\n\nThe Javadoc for HttpServletRequest.getContextPath() says the container should not decode the returned value.\n\nWhere this gets 'interesting' is when the URI is not normalized and is encoded. For example, what gets returned for a request to \"%2Ffoo%2F%2E%2E%2Fpath\"?\n\nIs it:\n\"%2Fpath\" ?\n\"%2Ffoo%2F%2E%2E%2Fpath\" ?\n\nSomething else?\n\nWe know (from the mapper) how many '/' characters to include in the context path. The current approach of simply searching that many '/' characters down the request URI ignores issues of normalization and encoding. Doing that counting in a normalization and encoding aware manner is probably the answer but that is non-trivial to say the least.\n\nFixing this bug might not solve the problem you are seeing - particularly since the unit tests you provided are using the incorrect value for the expected context path. You should probably be using ServletContext.getContextPath().",
      "I have applied a fix to this to Tomcat 9. As I suspected it is a little messy. I'm goign to leave it afew days for folks to review and comment before I back-port it to 8.0.x and 7.0.x.",
      "(In reply to Mark Thomas from comment #1)\n> For example, what gets returned for a request to\n> \"%2Ffoo%2F%2E%2E%2Fpath\"?\n\nRFC7230 2.7.3. \"http and https URI Normalization and Comparison\" says about http and https URIs:\n\n   ...\n   such URIs are normalized and compared according to the\n   algorithm defined in Section 6 of [RFC3986]\n\n\nhttp://tools.ietf.org/html/rfc3986\nRFC3986 2.3. Unreserved Characters [1]\n\n   Characters that are allowed in a URI but do not have a reserved\n   purpose are called unreserved.  These include uppercase and lowercase\n   letters, decimal digits, hyphen, period, underscore, and tilde.\n\n      unreserved  = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n\n   URIs that differ in the replacement of an unreserved character with\n   its corresponding percent-encoded US-ASCII octet are equivalent: they\n   identify the same resource.  However, URI comparison implementations\n   do not always perform normalization prior to comparison (see Section\n   6).  For consistency, percent-encoded octets in the ranges of ALPHA\n   (%41-%5A and %61-%7A), DIGIT (%30-%39), hyphen (%2D), period (%2E),\n   underscore (%5F), or tilde (%7E) should not be created by URI\n   producers and, when found in a URI, should be decoded to their\n   corresponding unreserved characters by URI normalizers.\n\nRFC3986 6.2.2.2. Percent-Encoding Normalization\n\n   The percent-encoding mechanism (Section 2.1) is a frequent source of\n   variance among otherwise identical URIs.  In addition to the case\n   normalization issue noted above, some URI producers percent-encode\n   octets that do not require percent-encoding, resulting in URIs that\n   are equivalent to their non-encoded counterparts.  These URIs should\n   be normalized by decoding any percent-encoded octet that corresponds\n   to an unreserved character, as described in Section 2.3.\n\n\nSo it looks that RFC3986 says to url-decode the above listed \"unreserved\" characters before performing normalization, but only them.\n\n\"%2Ffoo%2F%2E%2E%2Fpath\" becomes \"%2Ffoo%2F..%2Fpath\" but nothing more as %2F is not decoded.\n\nIn regards to r1640083 the \"canonicalContextPath.equals(candidate)\" comparison looks fragile.",
      "Worth noting here that we have the system property org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH\n\nRegarding the fragility of canonicalContextPath.equals(candidate), better suggestions welcome.",
      "(In reply to Mark Thomas from comment #4)\n> \n> Regarding the fragility of canonicalContextPath.equals(candidate), better\n> suggestions welcome.\n\nThe code that was added to Request class is located far from the code that performs decoding and mapping (CoyoteAdapter) and one that performs URL-decoding (UDecoder) and it is hard to compare those and keep in sync.\n\nComparing the code highlighted an issue -> 1.\n\n1. Using UDecoder.URLDecode(candidate) + canonicalContextPath.equals(candidate) is broken, as URLDecode() without second argument uses ISO-8859-1 charset. The equals() may return false.\n\n2. Move the code to CoyoteAdapter.postParseRequest(). Evaluate the value there only once.\n\n3. In unexpected situations, error out (400) instead of falling through.\n\n4. Maybe add an utility methods to UDecoder to search for next decoded '/' in a ByteChunk?\n\n\n5. In CoyoteAdapter.postParseRequest() when decodedURI.getType() is not bytes (e.g. when requestURI is changed by RewriteValve), normalization is skipped. I think that it should not be skipped.",
      "I've fixed the issue identified in 1.\n\nRegarding 2, that would cause the code to be executed for every request when it is only likely to be used for a small percentage.\n\n3 makes sense if we do 2 but I don't think 2 is the way to go.\n\n4 I'm neutral on.\n\n5 I believe that was a deliberate implementaion decision. I don'tthink we need to revisit it as part of this unless suggestion 2 is followed.\n\n\nThe key issue is whether or not to follow suggestion 2. I'm currently leaning towards not because of performance but am prepared to be convinced otherwise.",
      "Any reason not to have code available that does (2) but in a lazy way? That is, a utility method that can do the work to produce the result and also cache the value in the request in case it's requested again? Then, only call that utility method when the value is actually needed?",
      "(In reply to Konstantin Kolinko from comment #5)\n> 5. In CoyoteAdapter.postParseRequest() when decodedURI.getType() is not\n> bytes (e.g. when requestURI is changed by RewriteValve), normalization is\n> skipped. I think that it should not be skipped.\n\nSkipping url-decoding step is also wrong. If RewriteValve provides a non-encoded requestUri, it means that there is a bug in RewriteValve.\n\nWeb Application should assume that requestURI needs url-decoding. It cannot find out that url-decoding shall be skipped. Implementation of Request.getContextPath() in r1640083/r1642766 is an example of a victim of this bug. It always performs url-decoding.\n\n>> 3. In unexpected situations, error out (400) instead of falling through.\n>\n> 3 makes sense if we do 2 but I don't think 2 is the way to go.\n\nI do not like that Request.getContextPath() falls through to returning requestUri. It may result in security issues.",
      "In theory issue 3 should never happen. Therefore, I have changed the code to throw an ISE rather than return the uri.",
      "I've added some unit tests to trunk for 5 and made the necessary fixes so that they pass. I believe these fixes are now ready for back-port.",
      "I have back-ported this fix to 8.0.x (for 8.0.16 onwards) and to 7.0.x (for 7.0.58 onwards)."
    ],
    "creation_ts": "2014-11-14T23:18:32Z",
    "fixes": [
      57215
    ]
  },
  {
    "id": 43468,
    "summary": "HTMLManagerServlet NullPointerException listing context",
    "description": "Obtained the following NullPointerException, stack trace below\n\njava.lang.NullPointerException\n\torg.apache.catalina.manager.HTMLManagerServlet.list(HTMLManagerServlet.java:437)\n\torg.apache.catalina.manager.HTMLManagerServlet.doGet(HTMLManagerServlet.java:136)\n\nCode is:\n\nargs[11] = new Integer(context.getManager().getMaxInactiveInterval()/60);\n\nSeemingly the getManager() is returning null.",
    "comments": [
      "This has been fixed in trunk and proposed for 6.0.x",
      "This has been fixed in svn and will be included in 6.0.16 onwards."
    ],
    "creation_ts": "2007-09-24T18:46:12Z",
    "fixes": [
      43468
    ]
  },
  {
    "id": 56518,
    "summary": "NIO async servlet limit latch leak",
    "description": "Created attachment 31613\nthe sample webapp to reproduce the bug\n\nwe have encouter this bug in a real product webapp.\n\nI have tested this in linux x86, oracle jdk jdk1.7.0_55, tomcat 7.0.53 and tomcat 8.0.5.\n\nCONFIG:\nwe change HTTP Connector to NIO in \"server.xml\", \ne.g. protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n\nWEBAPP LOGIC:\nthe simplified situation:\n1. call \"req.startAsync()\" to start async serlvet, then execute the async logic in our user thread.\n2. sometimes the user thread be interrupted (by some timeout logic of our code).\n3. some user code call \"resp.flushBuffer()\" to send response to client\n\nPROBLEM:\nin the situation descibed above, the \"LimitLatch.countDown()\" is not called.\nwhen the connections limit latch count up to max ( default \"10000\" ),\ntomcat DO not accept any connection, all incoming client hangs.\n\nREPRODUCER:\n\nin a clean tomcat-7.0.53 installation:\n1. change the default \"server.xml\" Connector config.\n(1) change protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n(2) Optional, add maxConnections=\"100\" to reproduce the bug faster.\n2. copy the sample webapp in the attachment to \"webapps/ROOT.war\"\n3. start tomcat.\n4. make plenty request to \"/async.html\", \n\nfor (( i = 0; i < 15000; ++i )) ; do echo $i; curl localhost:8080/async.html; done\n\neach request is likely cause a limit latch leak.\nwhen the requests reaches maxConnections (100 as we set above) or some more,\nthe client ( curl ) hangs.\n\nTECHNIC-DETAILS:\nafter some debug, wo found these:\n\n1. when the thread was interrupted, when the user code call \"resp.flushBuffer()\",\nthe NioChannel was Closed by jdk NIO code, and a ClosedByInterruptException is thrown.\n\n2. when the channel closed, the SelectionKey was removed by Poller thread, \nstack trace:\nDaemon Thread [http-nio-8080-ClientPoller-0] (Suspended)\t\n\towns: Object  (id=3346)\t\n\towns: HashSet<E>  (id=3354)\t\n\towns: EPollSelectorImpl  (id=82)\t\n\towns: Collections$UnmodifiableSet<E>  (id=3355)\t\n\towns: Util$2  (id=3356)\t\n\tSocketChannelImpl(AbstractSelectableChannel).removeKey(SelectionKey) line: 114\t\n\tEPollSelectorImpl(AbstractSelector).deregister(AbstractSelectionKey) line: 168\t\n\tEPollSelectorImpl.implDereg(SelectionKeyImpl) line: 162\t\n\tEPollSelectorImpl(SelectorImpl).processDeregisterQueue() line: 131\t\n\tEPollSelectorImpl.doSelect(long) line: 69\t\n\tEPollSelectorImpl(SelectorImpl).lockAndDoSelect(long) line: 69\t\n\tEPollSelectorImpl(SelectorImpl).select(long) line: 80\t\n\tNioEndpoint$Poller.run() line: 1163\t\n\tThread.run() line: 662\t\n\n3. when we call \"ctx.complete()\", it run to \"org.apache.tomcat.util.net.NioEndpoint.processSocket(NioChannel, SocketStatus, boolean)\", code is below:\n\n    public boolean processSocket(NioChannel socket, SocketStatus status, boolean dispatch) {\n        try {\n            KeyAttachment attachment = (KeyAttachment)socket.getAttachment(false);\n            if (attachment == null) {\n                return false;\n            }\n\nsince the SelectionKey was removed, the \"attachment\" returns null.\nthe logic is break, \"AbstractEndpoint.countDownConnection()\" is not called, a limit latch leak happens.\n\nWORK-AROUND:\nsome work-around:\n1. switch to the stable BIO connector.\n2. avoid call \"resp.flushBuffer()\" in the user thread.",
    "comments": [
      "Created attachment 31614\nsource code of the sample webapp",
      "Thanks for the sample web application. I am able to reproduce this with NIO but not with NIO2 or APR/native so it appears that this issue is specific to NIO.\n\nI have started some refactoring that should make this simpler to fix (in 8.0.x at least) but it doesn't look like there is an easy fix for this.",
      "As luck would have it, the next stage of clean-up / refactoring appears to have fixed this issue. The fix is applied to 8.0.x and the unit tests pass on OSX. I'm just waiting for the results for Linux and Windows before looking at back-porting the fix to 7.0.x.",
      "The fix works on 8.0.x but back-porting the changes to 7.0.x doesn't appear to address the problem on that platform.\n\nFor reasons I don't yet fully understand, 8.0.x appears not to throw the ClosedByInterruptException.",
      "Created attachment 31690\nsample webapp to reproduce the bug in tomcat 8.0.8",
      "Created attachment 31691\nsource code of the sample webapp",
      "we are try to back-porting the fix in tomcat 8 to tomcat 7.\nAfter some debugging, It seems the bug does not fixed in tomcat 8, but make it more difficult to reproduce.\nThe root cause is that the SelectionKey is removed before the count down be executed. \n\nI fixed the sample webapp to set the sleep time a little more than the selectorTimeout, then I can reproduce the bug in tomcat 8.0.8.\n\nI'm use ubuntu 12.04 32bit, oracle jdk 1.7.0_55, tomcat 8.0.8.\n\nIn a tomcat 8.0.8 clean install,\n(1) edit \"server.xml\", in the Connector add maxConnections=\"10\" to reproduce this bug faster.\n(2) remove origin ROOT in webapps, 'rm -rf conf/ROOT', deploy the sample webapp to \"webapps/ROOT.war\".\n(3) start tomcat.\n(4) make plenty request to \"/async.html\", \n\nfor (( i = 0; i < 15000; ++i )) ; do echo $i; curl localhost:8080/async.html; done\n\nwait a minute, then the curl client hangs, the connection limit will count up to the max.",
      "(In reply to hanyong from comment #7)\n> It seems the bug does not fixed in tomcat 8, but make\n> it more difficult to reproduce.\n\nI wondered if that might be the case. I've spent quite a bit of time looking at this and don't see a simple solution at this point.",
      "Created attachment 31698\nfix bug 56518 based on https://svn.apache.org/repos/asf/tomcat/trunk@1595293\n\nHere is my Quick and Dirty patch to fix this at tomcat 8.0.8 , hope it help for a regular solution.\nI also started a PR on github: https://github.com/apache/tomcat/pull/10\n\nIn NioEndpoint, save and retrieve SelectionKey in KeyAttachment.\nWhen the socket is closed by the interrupt,\nthe associated SelectionKey may be removed by the poller thread before async complete.\nThen socket.keyFor() returns null, the connection count would not be reduced.\nSave the key in the attachment could fix this.",
      "Sorry, the patch DOES NOT work well.\n\nI found another problem.\n\nThe aysnc servlet timeout is triggered by the poller thead also, since the SelectionKey was deregistered when the socket be closed, the asyncTimeout will never triggered.\n\nIn this situation, If the user forgot to call \"AsyncContext.complete()\", the limit leak happens always.",
      "One way around that issue would be to move the Async timeout processing to a separate thread - like it is for the other endpoints.",
      "Created attachment 31703\nfix bug 56518 on TOMCAT_7_0_54\n\nClear thread interrupted status before write to NIO socket. i.e. Never interrupt NIO ops.\n\nIt's very rough, but It's the simplest way and works.",
      "Thanks for all your work on this. It is much appreciated.\n\nGiven that it is the application that is triggering the interrupt, shouldn't it be the application's responsibility to clear that interrupt before continuing and flushing the response buffer?\n\nI'm currently thinking of adding a test for the current Thread being interrupted to the NIO write methods along the lines of your proposed patch. I want to test the performance of this first. I'm also leaning towards logging a warning if the thread is interrupted on the basis that the app that generated the interrupt should have cleared it.",
      "I've done some testing and it looks like the call to Thread.currentThread().isInterrupted() is nice and quick. I'm going to go ahead and make some changes here.\n\nI've been thinking about this some more and I am leaning towards closing the connection if Tomcat detects an interrupt since that is what would happen if the thread was allowed to continue. This adds weight to the view that the application should clear the interrupt.",
      "(In reply to Mark Thomas from comment #14)\n> \n> I am leaning towards closing the\n> connection if Tomcat detects an interrupt since that is what would happen if\n> the thread was allowed to continue.\n\n+1.\n\nI have not followed this discussion, but I can add that starting with 8.0.9/7.0.55 an interruption may also be performed by o.a.c.valves.StuckThreadDetectionValve, if it is configured to do so. (r1595331 bug 56526).",
      "I have implemented this for 8.0.x and it will be included in 8.0.9 onwards.\n\nI am now looking at back-porting the fix to 7.0.x.",
      "This has been fixed in 7.0.x for 7.0.55 onwards."
    ],
    "creation_ts": "2014-05-13T10:47:48Z",
    "fixes": [
      56518
    ]
  },
  {
    "id": 61916,
    "summary": "AddDefaultCharsetFilter wouldn't work when setting response header through response.setHeader()",
    "description": "Overview:\nAddDefaultCharsetFilter wouldn't work if one set response header 'content-type' through setHeader() instead of setContentType().\nI tried to debug the webapp by adding a breakpoint in be beginning of method AddDefaultCharsetFilter.ResponseWrapper#setContentType(String), while the CXF framework did't invoke setContentType().\nSo I think that cxf may set response header Content-Type by invoking setHeader() but there is not a overridden method setHeader() in class AddDefaultCharsetFilter.ResponseWrapper\n\nSteps to Reproduce:\n1) Adding a maven dependecy in pom.xml\n<dependency>\n\t<groupId>org.apache.tomcat</groupId>\n\t<artifactId>tomcat-catalina</artifactId>\n\t<version>8.5.23</version>\n\t<scope>provided</scope>\n</dependency>\n2) Adding a filter registeration in web.xml\n<filter>\n\t<filter-name>AddDefaultCharset</filter-name>\n\t<filter-class>org.apache.catalina.filters.AddDefaultCharsetFilter</filter-class>\n\t<init-param>\n\t\t<param-name>encoding</param-name>\n\t\t<param-value>UTF-8</param-value>\n\t</init-param>\n</filter>\n<filter-mapping>\n\t<filter-name>AddDefaultCharset</filter-name>\n\t<servlet-name>cxf</servlet-name>\n</filter-mapping>\n3) Adding a method in cxf jax-rs service bean UserResource.java\n@Path(\"hello\")\n@Produces(MediaType.TEXT_PLAIN)\npublic Response hello(){\n\treturn Response.ok(\"hello\").build();\n}\n4) request the hello service\n\nActual Results:\nContent-Type: text/plain\n\nExpected Results:\nContent-Type: text/plain;charset=UTF-8\n\nBuild Date & Hardware:\n\t\nAdditional Builds and Platforms:\n\nAdditional Information:",
    "comments": [
      "Thanks for the report. I fixed addHeader() as well as setHeader()\n\nFixed in:\n- trunk for 9.0.3 onwards\n- 8.5.x for 8.5.25 onwards\n- 8.0.x for 8.0.49 onwards\n- 7.0.x for 7.0.84 onwards",
      "Implementation of addHeader() in r1820138 is broken: it needs to call super.addHeader().\n\nThis concerns 9.0.3 (currently being voted as a release candidate).\n\n\nA fix is trivial, but maybe it is worth to extend the unit tests that were created for this issue.",
      "Regression fixed in:\n- trunk for 9.0.4 onwards\n- 8.5.x for 8.5.27 onwards\n- 8.0.x for 8.0.49 onwards\n- 7.0.x for 7.0.84 onwards"
    ],
    "creation_ts": "2017-12-19T06:34:20Z",
    "fixes": [
      61916
    ]
  },
  {
    "id": 59203,
    "summary": "Try to call Thread.interrupt before calling Thread.stop in WebappClassLoaderBase#clearReferencesThreads",
    "description": "Current behavior:\nWhen undeploying an web app, tomcat first tries to check whether a container thread is still handling request, if so, it will log a warning message. Furthermore, if clearReferencesStopThreads is configured to be true, tomcat will try to call Thread.stop to stop the thread in order to prevent memory leak.\n\nOur scenario:\nWe found that sometimes, a container thread is actually blocking an operation, e.g. network I/O, but for some reasons, the operation is not returned for quite a long time. I know that the best way should be application code to timeout for such an operation. But I think tomcat can do sth. rather that log a warning message.\n\nProposed behavior:\nIf configured, tomcat will call Thread.interrupt to force the blocking operation return and container thread to proceed. Since application code may continue to block on further operations, we can provide an option to let tomcat call Thread.interrupt for several times. If that sill does not work, the final defense is calling Thread.stop if configured.\n\nAny interest on this proposal? If so, I can provide a patch on this.",
    "comments": [
      "I like the idea in that interrupting a thread is a lot nicer than trying to stop it.",
      "Thanks for showing your interest.\nI will submit a patch later on.",
      "is it still up for grab?",
      "Looks like it's been ignored for 4 years. Go for it!",
      "Thanks for the PR.\n\nFixed in:\n- master for 10.0.0-M5 onwards\n- 9.0.x for 9.0.35 onwards\n- 8.5.x for 8.5.55 onwards\n- 7.0.x for 7.0.104 onwards"
    ],
    "creation_ts": "2016-03-21T02:51:34Z",
    "fixes": [
      59203
    ]
  },
  {
    "id": 50570,
    "summary": "Allow explicit use of FIPS mode in APR lifecycle listener",
    "description": "Both OpenSSL and JSSE allow themselves to be put into FIPS mode, and we should allow SSL connectors to request it (and have them fail if FIPS mode can't be set).\n\nOpenSSL:\nhttp://www.mail-archive.com/openssl-dev@openssl.org/msg20882.html",
    "comments": [
      "It might make more sense to put this into the AprLifecycleListener, as it appears that FIPS mode for OpenSSL is not done on a per-context basis, but per-process.\n\nIt would be nice to enable this for JSSE as well, so where would that go?",
      "Unless its changed since I last looked at it, a FIPS JSSE solution requires a new security provider and all the configuration happens in the JRE. Tomcat configuration does not change.",
      "Changing description to reflect new requirements: NIO/BIO connectors need no such explicit configuration.\n\nIt looks like this can be done by adding a member, accessor, and mutator to AprEndpoint and then in AprEndpoint.bind, call (a new method) SSLContext.setFIPSMode which calls FIPS_mode_set.\n\nOne thing I'm unclear on is how to get the configuration from server.xml's <Connector> all the way down to the AprEndpoint object. What object has setXXX() called on it when configuring a <Connector>?",
      "Created attachment 26582\nSource and properties files to add FIPS initialization call to OpenSSL\n\nThe attached zip file contains source to allow FIPS mode initialization of OpenSSL.",
      "A patch (like diff against the existing code) would be more easy to look to,",
      "(In reply to comment #5)\n> A patch (like diff against the existing code) would be more easy to look to,\n\nThe code is built from a base of Version 6.0.20.  I had assumed that a diff against the (current) 7.x codebase would be nearly worthless.  If a diff from 6.0.20 would be useful I can generate that.",
      "(In reply to comment #6)\n> The code is built from a base of Version 6.0.20.  I had assumed that a diff\n> against the (current) 7.x codebase would be nearly worthless.  If a diff from\n> 6.0.20 would be useful I can generate that.\n\nA diff against 6.0.20 would be better than just a big ZIP file: we'd have to do our own diffs and figure it all out, anyway, so you'd be saving us a big step.\n\nIt might be best to give us two patches: one for the Java code and another for the C code.",
      "(From private email from CHris Beckey):\n\n> I just zip'd together the source and attached it to the bug report.  The changes are in:\n> \n> org.apache.tomcat.core.AprLifecycleListener.java\n> org.apache.tomcat.core.LocalStrings.properties\n> org.apache.tomcat.jni.SSL.java\n> org.apache.tomcat.jni.Library.java\n> \n> and in tomcat native\n> ssl.c\n> \n> I modified the code in Library.java to load each of the (3) required libraries (APR, libtcnative and libeay) explicitly rather than depending on references within the libs.  This was for my debugging and is not required but it does make it explicit if one of them is missing.\n> \n> The listener declaration in server.xml looks like this:\n>   <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" FIPSMode=\"on\" />\n> \n> I was unsure whether to abort startup if FIPS was requested but did not initialize. I think it is valid to refuse to continue in that case but didn't implement it that way.",
      "Updating bug description to match reality: FIPS mode should be set in the APR listener, and not in an individual Connector.",
      "Created attachment 26775\nPatch to implement FIPS mode setting in Tomcat 7 trunk\n\nRequires TC native patch, which has also been attached to bug #50570",
      "Created attachment 26776\npatch to implement FIPS mode setting in tc native \n\nRequires patch to Tomcat, which is attached to bug #05070",
      "(In reply to comment #9)\n> Updating bug description to match reality: FIPS mode should be set in the APR\n> listener, and not in an individual Connector.",
      "The first attachment (named \"Source and properties files to add FIPS ...\") contains source code and properties using TC 6.0.20 as the base.\nThe next two attached files (named \"patch to implement ...\") are patches against the trunk as of the 14th of March 2011, i.e. after version 7.0.11.\nThese were tested against OpenSSL V 0.9.8q with the OpenSSL FIPS module 1.2.2 built and linked in using the directions at \nhttp://www.openssl.org/docs/fips/UserGuide-1.2.pdf",
      "Just a quick update: I'm taking a vacation from $work next week and I hope to work on this feature. Chris, if there are any updates to your patch please post them. Otherwise, I'll use the existing one.",
      "Created attachment 27224\nSomewhat simpler patch for FIPS mode (against TC7 trunk)\n\nI'm not quite done with my adaptation, but I figured I would get some feedback on this one in the meantime.",
      "Created attachment 27225\nA fipsModeSet implementation that is more robust than the original patch\n\n* Provide a fipsModeSet function when OPENSSL is not available.\n* Provide a fipsModeSet implementation that fails gracefully when FIPS is not available.\n* Provide a human-readable error message when failing to enter FIPS mode.",
      "Comment on attachment 26582\nSource and properties files to add FIPS initialization call to OpenSSL\n\nReplaced with non-zipped patches.",
      "(In reply to comment #16)\n\nRegarding attachment 27225 (Java patch) I have two comments:\n\n1) Code formatting.\nWe usually have \"{\" on the same line as previous statement (like in Java coding style).\n\n2) I go not get why there are two methods in SSL.java:\nfipsModeSet(Integer mode) and fipsModeSet(int mode).\n\nIf you need class object of \"int\" to do lookup of the method, it is available as Integer.TYPE.",
      "Thanks for the comments. Very helpful!\n\n(In reply to comment #18)\n> (In reply to comment #16)\n> \n> Regarding attachment 27225 [details] (Java patch) I have two comments:\n> \n> 1) Code formatting.\n> We usually have \"{\" on the same line as previous statement (like in Java coding\n> style).\n\nI'm happy to change the use of whitespace, but \"usually\" is somewhat subjective in the TC code base :)\n\n> 2) I go not get why there are two methods in SSL.java:\n> fipsModeSet(Integer mode) and fipsModeSet(int mode).\n> \n> If you need class object of \"int\" to do lookup of the method, it is available\n> as Integer.TYPE.\n\nI mostly reduced the patch provided by (the other) Chris and I remember thinking about the overloaded methods but can't remember why I decided to leave them there. Certainly the rest of the code does not require both methods.\n\nCome to think of it, I'm not sure why the method call needs to be done using reflection at all... both AprLifecycleListener.java and SSL.java are in the Tomcat project (as opposed to tcnative) and thus should never be out of sync.\n\nThe only potential problem is if the native call fails because of a mismatched tcnative library, but that would fail in a way that reflection wouldn't solve, anyway.\n\nI'll update the patch.",
      "Chris, did you put together an updated patch for this?",
      "(In reply to comment #20)\n> Chris, did you put together an updated patch for this?\n\nI have a patch sitting in my local svn working copy of TC 8 trunk: I haven't gotten a chance to test it, yet (building openssl-FIPS+apr proved to be a pain in the past, but I think I've got it working). I haven't yet made the changes suggested by Konstantin.\n\nI was a little concerned about the dependency on tcnative 1.1.23 which isn't yet released: 1.1.23 will have the native FIPS code required to make this Java patch work.\n\nShall I do tcnative-version-sniffing and bail if the version isn't high enough, or just let a native-method-not-found exception be thrown?",
      "Since this is security related, requesting FIPS and the native library not supporting it should prevent Tomcat from starting. You probably want to trap the exception and throw a new one with a nicer error message. I haven't looked at the code to see if anything else would be required.",
      "Fixed in trunk, will be in 7.0.23 and later.\nProposed for 6.0.x.",
      "Fixed in 6.0 by r1224628 and will be in 6.0.36."
    ],
    "creation_ts": "2011-01-11T12:27:44Z",
    "fixes": [
      50570
    ]
  },
  {
    "id": 58566,
    "summary": "NoSuchMethodError and JVM crash when running HTTPS test with Tomcat 7 (o.a.t.util.net.TestSsl)",
    "description": "Tomcat Native 1.2.0 is unusable for HTTPS with Tomcat 7, 8 due to missing APIs on java side.\n\nApparently it can be used for plain HTTP and AJP, as other Tomcat 7 tests (using plain HTTP) pass successfully.\n\nTo reproduce:\n===============\n1) Run org.apache.tomcat.util.net.TestSsl test standalone with Tomcat 7, by placing the following line into build.properties\n\ntest.entry=org.apache.tomcat.util.net.TestSsl\n\nI was testing Tomcat 7 trunk (at r1711498)\n\n2) I was running Ant with JAVA_HOME=JDK 8u66 (32-bit) on Windows 7.\n\nNotes:\n=========\n1) Ant build with this single test was running for 17 minutes. Two tests were run\n\n- [testSimpleSsl] printed NoSuchMethodError and hung for 17 minutes\n- [testKeyPass] crashed the JVM.\n\n2) The \"TEST-org.apache.tomcat.util.net.TestSsl.APR.txt\" after JVM crash is effectively empty.\n\nYou need to catch console output of Ant by redirecting it into a file. The console output has NoSuchMethodError and other messages.\n\nErrors:\n========\n1)\n    [junit] SEVERE: Failed to initialize connector [Connector[HTTP/1.1-auto-1]]\n    [junit] org.apache.catalina.LifecycleException: Failed to initialize component [Connector[HTTP/1.1-auto-1]]\n    [junit]     at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:106)\n    [junit]     at org.apache.catalina.core.StandardService.initInternal(StandardService.java:559)\n    [junit]     at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:102)\n    [junit]     at org.apache.catalina.core.StandardServer.initInternal(StandardServer.java:821)\n    [junit]     at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:102)\n    [junit]     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)\n    [junit]     at org.apache.catalina.startup.Tomcat.start(Tomcat.java:339)\n    [junit]     at org.apache.catalina.startup.TomcatBaseTest$TomcatWithFastSessionIDs.start(TomcatBaseTest.java:793)\n    [junit]     at org.apache.tomcat.util.net.TestSsl.testSimpleSsl(TestSsl.java:61)\n...\n    [junit] Caused by: java.lang.NoSuchMethodError: sniCallBack\n    [junit]     at org.apache.tomcat.jni.SSLContext.make(Native Method)\n    [junit]     at org.apache.tomcat.util.net.AprEndpoint.bind(AprEndpoint.java:573)\n    [junit]     at org.apache.tomcat.util.net.AbstractEndpoint.init(AbstractEndpoint.java:651)\n    [junit]     at org.apache.coyote.AbstractProtocol.init(AbstractProtocol.java:434)\n    [junit]     at org.apache.catalina.connector.Connector.initInternal(Connector.java:978)\n    [junit]     at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:102)\n    [junit]     ... 33 more\n\n2) From JVM crash file:\n\n[[[\nStack: [0x17440000,0x17490000],  sp=0x1748f504,  free space=317k\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nV  [jvm.dll+0xe26df]\nC  [tcnative-1.dll+0x9d73]\nC  [tcnative-1.dll+0xc905d]\n\nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\nj  org.apache.tomcat.jni.SSLSocket.handshake(J)I+0\nj  org.apache.tomcat.util.net.AprEndpoint.setSocketOptions(J)Z+106\nj  org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor.run()V+34\nj  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+95\nj  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5\nj  org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run()V+4\nj  java.lang.Thread.run()V+11\nv  ~StubRoutines::call_stub\n]]]\n\n\nSource code\n============\nFrom quick look into native implementation of SSLContext.make() (sslcontext.c),\n\n[[[\n    /* Cache Java side SNI callback if not already cached */\n    if (ssl_context_class == NULL) {\n        ssl_context_class = (*e)->NewGlobalRef(e, o);\n        sni_java_callback = (*e)->GetStaticMethodID(e, ssl_context_class,\n                                                    \"sniCallBack\", \"(JLjava/lang/String;)J\");\n    }\n]]]\n\n1) There is no test for success of GetStaticMethodID() call.\n2) There is a race condition. Testing that ssl_context_class is not NULL does not mean that sni_java_callback has already been initialized.\n\nAs stacktrace above shows, SSLContext.make() is called from AprEndpoint.bind(), so a race here is unlikely unless someone initializes several connectors concurrently at the same time. It explains the JVM crash in the tests, as the first call results in NoSuchMethodError, but the second call succeeds with ssl_context_class check and crashes later.",
    "comments": [
      "Created attachment 33235\nStdout/Stderr output of Apache Ant\n\nAnt output. Testing Tomcat 7 trunk (at r1711498) with JDK 8u66",
      "Created attachment 33236\nJVM crash log",
      "I am not concerned about the potential race condition here.\n\nIn Tomcat, starting of multiple connectors is always single threaded.\n\nIn theory, connectors could be started in parallel via the embedded API but even then the likelihood of a race is low and, as it happens, the fix for the method not being present should prevent any crashes if the race occurs.\n\nI have a fix for this that enables 1.2.x to work with current 7.0.x trunk. I'll be committing that fix shortly.",
      "Fixed in trunk for 1.2.1",
      "(In reply to Mark Thomas from comment #3)\n> I am not concerned about the potential race condition here.\n> \n> In Tomcat, starting of multiple connectors is always single threaded.\n> \n> In theory, connectors could be started in parallel via the embedded API but\n> even then the likelihood of a race is low and, as it happens, the fix for\n> the method not being present should prevent any crashes if the race occurs.\n\nThere is also JMX API, StandardService.addConnector(...). There is no indication in java code that SSLContext.make() should be called by a single thread only (e.g. method not marked as synchronized).\n\nThere is a method that is certainly called only once - the method called by APRLifecycleListener, SSL.initialize(). I wonder whether this code can be moved there.\n\nI agree that this is not a stopper. Usually connectors have <Connector bindOnInit=\"true\"/> so there is a delay between initialization of all connectors and their start. The worst case - serving several requests without SNI - won't happen because all connectors will be initialized before starting them.\n\nBTW, in sslcontext.c / SSLContext.make():\n\n    /* Cache the byte[].class for performance reasons */\n    clazz = (*e)->FindClass(e, \"[B\");\n    byteArrayClass = (jclass) (*e)->NewGlobalRef(e, clazz);\n\nThe same lookup/caching of \"[B\" is present in ssl.c / SSL.initialize().\n\n\nReview of r1711667:\n(Comment typo already fixed by r1711675)\n\n1. sslcontext.c / SSLContext.make(..)\n\n>        /* Older Tomcat versions may not have this static method */\n>        if ( JNI_TRUE == (*e)->ExceptionCheck(e) ) {\n>            (*e)->ExceptionClear(e);\n>        }\n\nOther places (info.c, misc.c) just call\n         if ((*e)->ExceptionCheck(e)) {\n\n2. sslcontext.c / ssl_callback_ServerNameIndication()\n\n> if (sni_java_callback != 0) {\n\n1) sni_java_callback is jmethodID which is a pointer to a structure. So != NULL\n\n2) If callback call is skipped, new_ssl_context variable is left uninitialized (random value) and \"if (original_ssl_context != new_ssl_context) {\" check is satisfied and goes on accessing random memory.\n\n3) If sni_java_callback is unavailable, this method should return early. It does a lot of unneeded work.\n\n4) Java method SSLContext.sniCallBack() implemented in Tomcat trunk by default returns 0\n\nAs such,  \"if (original_ssl_context != new_ssl_context) {\"  compares not-null pointer with 0 returned by the method.\n\n5)\n> SSL_set_SSL_CTX(ssl, J2P(new_ssl_context, SSL_CTX *));\n\nIs \"new_ssl_context\" here a pointer to SSL_CTX ?\n\nI cannot confirm it. From java code it looks that it is a pointer to tcn_ssl_ctxt_t structure, which field \"ctx\" is (SSL_CTX*).\n\n\nLooking at Tomcat trunk code, the method \nin APREndpoint.bind():\n> sslHostConfig.setOpenSslContext(Long.valueOf(ctx));\n\nctx is a pointer to tcn_ssl_ctxt_t structure, not a SSL_CTX pointer.\n\n6) In SSLHostConfig.java in Tomcat trunk:\n\n    public Object getOpenSslContext() {\n        return openSslContext;\n    }\n\ns/Object/Long/, to match setter method and to avoid class casts later.",
      "Review comments all addressed."
    ],
    "creation_ts": "2015-10-31T01:47:07Z",
    "fixes": [
      58566
    ]
  },
  {
    "id": 63412,
    "summary": "WebSocket examples in Tomcat 9.0.20 RC fail with SecurityManager",
    "description": "Created attachment 36577\ncatalina.2019-05-08.log\n\nSmoke-testing Tomcat 9.0.20 release candidate:\nrunning apache-tomcat-9.0.20-windows-x64.zip + OpenJDK Java 12.0.1 64-bit on Windows 10.\n\nWebSocket examples are failing and are not usable.\n\n1. I opened all websocket examples in different tabs.\n2. Testing the \"echo\" example:\n\n1) The \"Connect\" button works, a connection is opened. \n2) Messages are sent to the server (\"Sent: Here is a message!\" line is printed), but there is no echo from server (nothing is received).\n3) The \"Disconnect\" button does not work.\n4) The connection closes itself after a timeout. The following is printed:\n\"Info: WebSocket connection closed, Code: 1006\"\n\n3. Other WebSocket examples fail to initialize. They open a connection but fail to operate any further.\n\n4. If I run the same version of Tomcat and Java without enabling a SecurityManager, the WebSocket examples work correctly.\n\nBTW, other examples work correctly. Running them with SecurityManager being enabled I do not note any issues.",
    "comments": [
      "I'm pretty sure it tries and fails to load the enums only there. Things worked mostly by accident before, and the classes of SocketWrapperBase should all be preloaded now since they're API usable in webapps now.\nWill test it.",
      "This will be fixed in 9.0.21. This is caused by the new async IO API which is now enabled by default (you can set useAsyncIO=\"false\" on the Connector to avoid the exception; or add the permission to the policy file for now, IMO it's the best way).\n\nIn catalina.policy:\npermission java.lang.RuntimePermission \"accessClassInPackage.org.apache.tomcat.util.net\";"
    ],
    "creation_ts": "2019-05-08T16:06:42Z",
    "fixes": [
      63412
    ]
  },
  {
    "id": 41752,
    "summary": "Wrong message on exception in MemoryRealm",
    "description": "When Digester read tomcat-user.xml file and exception is throw, then is created\nnew LifecycleException. As first parameter of this Exception is message string.\nThis string is hardcoded to \"memoryRealm.readXml\", so I thing that log message\nwill be wrong too!\n\nI think that there must be used StringManager.\n\nactual implementation:\n\nDigester digester = getDigester();\ntry {\n  synchronized (digester) {\n    digester.push(this);\n    digester.parse(file);\n  }\n} \ncatch (Exception e) {\n  throw new LifecycleException(\"memoryRealm.readXml\", e);\n} \nfinally {\n  digester.reset();\n}\n\n\nfixed:\n\nDigester digester = getDigester();\ntry {\n  synchronized (digester) {\n    digester.push(this);\n    digester.parse(file);\n  }\n} \ncatch (Exception e) {\n  throw new LifecycleException(sm.getString(\"memoryRealm.readXml\"), e);\n} \nfinally {\n  digester.reset();\n}",
    "comments": [
      "This is fuxed in svn and will be included in 5.5.23 and 6.0.11 onwards.\nThanks for the patch."
    ],
    "creation_ts": "2007-03-02T16:28:19Z",
    "fixes": [
      41752
    ]
  },
  {
    "id": 64506,
    "summary": "NullPointerException when loading webapp class",
    "description": "We have upgraded our Tomcat version to 9.0.27 from 8.0.42, since then we have been pretty frequently running into the below NullPointerException when our application classes get loaded, we believe this is due a concurrency issue (more details below). \njava.lang.NullPointerException\n        at org.apache.catalina.webresources.CachedResource.getURL(CachedResource.java:317)\n        at org.apache.catalina.webresources.FileResource.getCodeBase(FileResource.java:277)\n        at org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:2350)\n        at org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:865)\n        at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1334)\n        at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1188)\n\nOur Environment: \nTomcat Version: 9.0.27. Our application classes exploded to WEB-INF/classes.\n\nOur Investigation:\nTo troubleshoot the issue, we have looked at code in https://github.com/apache/tomcat/blob/9.0.27/java/org/apache/catalina/webresources/Cache.java and  https://github.com/apache/tomcat/blob/9.0.27/java/org/apache/catalina/webresources/CachedResource.java#L70, and it appears that we would run into this error if CachedResource is used when org.apache.catalina.webresources.CachedResource#webResource isn't initialized (i.e. stays null).\n\nUpon further debugging and viewing code in https://github.com/apache/tomcat/blob/9.0.27/java/org/apache/catalina/webresources/Cache.java#L59, it seems like it is possible that CachedResource could be used when its #webResource isn't initialized when two threads concurrently ask for the same resource but each with a different value for the boolean useClassLoaderResources.\n\nConsider this for example with 2 threads calling into Cache#getResource(String path, boolean useClassLoaderResources) for the same resource but with two different values for useClassLoaderResources and the resource is not in cache, both threads end up at line https://github.com/apache/tomcat/blob/9.0.27/java/org/apache/catalina/webresources/Cache.java#L82, then:\n\nThread 1: \nuseClassLoaderResources=true\nA new CachedResource is created at line https://github.com/apache/tomcat/blob/9.0.27/java/org/apache/catalina/webresources/Cache.java#L77\nand put into cache at line https://github.com/apache/tomcat/blob/9.0.27/java/org/apache/catalina/webresources/Cache.java#L82\nbut CachedResource#validateResource (where CachedResource#webResource is initialized) is not called yet, this would happen at line  https://github.com/apache/tomcat/blob/9.0.27/java/org/apache/catalina/webresources/Cache.java#L87.\n\nThread 2:\nuseClassLoaderResources=false  \nA new CachedResource is created at line  https://github.com/apache/tomcat/blob/9.0.27/java/org/apache/catalina/webresources/Cache.java#L77  \nbut finds the CachedResource in the cache (put in by the above thread) at line https://github.com/apache/tomcat/blob/9.0.27/java/org/apache/catalina/webresources/Cache.java#L82\nand calls CachedResource#validateResource at line https://github.com/apache/tomcat/blob/9.0.27/java/org/apache/catalina/webresources/Cache.java#L112, \nbut #validateResource doesn't do anything and returns because useClassLoaderResources is false, and so CachedResource#webResource remains uninitialized.  \nAssuming that Thread 1 hasn't initialized #webResource yet, when this thread (Thread 2) calls into CachedResource#getURL we would run into this error.\n\nLooks like the changes in the revision https://svn.apache.org/viewvc?view=revision&revision=1831828 are related. This seems like a concurrency issue, and we haven't seen this addressed in newer versions (from the changelog here https://ci.apache.org/projects/tomcat/tomcat9/docs/changelog.html)",
    "comments": [
      "Thanks for the report and the careful analysis. I think the analysis has identified the root cause. I'l look into a fix.\n\nOut of curiosity, what resources are being looked up as class loader resources and non-class loader resources in parallel?",
      "Mark,\nThank you for your prompt reply.\n\nThe resource we found that was being looked up concurrently is \"/WEB-INF/classes/\".\n\nThread 1 could be doing something like this Thread#getContextClassLoader()#getResource(\"\") for a class loader resource.\n\nAnd Thread 2 could be doing org.apache.catalina.WebResourceRoot#getResource(\"/WEB-INF/classes/\") (from org.apache.catalina.webresources.FileResource#getCodeBase) for a non-class loader resource.  This corresponds to the NPE stack trace shown in the description",
      "Fixed in:\n- master for 10.0.0-M7 onwards\n- 9.0.x for 9.0.37 onwards\n- 8.5.x for 8.5.57 onwards\n\n7.0.x is not affected.\n\nIt would be great if you were able to test this. Our you able to build Tomcat from source? If not, I can provide a snapshot build for you to test.",
      "Thank you Mark for the quick turn around.\nYes, we are able to build from source, being a race condition it isn't reproducible at will, we will need to manually simulate the race condition.\n\nAlthough, we haven't run into this issue, I am also wondering if a similar fix needs to be made in org.apache.catalina.webresources.Cache#getResources.",
      "Hmmm.. actually may be it is not required, since org.apache.catalina.webresources.CachedResource#validateResources isn't conditionally validating.",
      "Mark,\nTested the fix with a simulated race condition, and it worked. Thanks again for the quick turn around."
    ],
    "creation_ts": "2020-06-09T06:50:23Z",
    "fixes": [
      64506
    ]
  },
  {
    "id": 57661,
    "summary": "Delay sending of 100 continue response until application tries to read request body",
    "description": "Currently Tomcat sends the 100 continue response just before the request is passed to the application for processing. This denies the application the opporutnity to reject the request early based on the request line and/or headers. Dealying the 100 continue response until the application attempts to read the requets body should address this.",
    "comments": [
      "It is unfortunate that Tomcat unconditionally send 100 CONTINUE acknowledgements. (In Tomcat 7 this is triggered by the StandardContextValve.)\n\nThe \"Expect: 100-continue\" is important for clients that want to send a large POST request but are unable to read the response before they have sent the complete request body (e.g. the Apache httpclient). These clients could send only headers plus the \"Expect: 100-continue\" and would then see an error response (e.g. 403). With the current behaviour of Tomcat however, they are asked to send the entity, the server application responds with an error, but the client doesn't see it (assuming the request entity is larger than the swallow size, i.e. approx. 2 MB). Instead the client only sees an exception (\"connection reset\").",
      "It is unfortunate that Tomcat unconditionally send 100 CONTINUE acknowledgements. (In Tomcat 7 this is triggered by the StandardContextValve.)\n\nThe \"Expect: 100-continue\" is important for clients that want to send a large POST request but are unable to read the response before they have sent the complete request body (e.g. the Apache httpclient). These clients could send only headers plus the \"Expect: 100-continue\" and would then see an error response (e.g. 403). With the current behaviour of Tomcat however, they are asked to send the entity, the server application responds with an error, but the client doesn't see it (assuming the request entity is larger than the swallow size, i.e. approx. 2 MB). Instead the client only sees an exception (\"connection reset\").",
      "Sorry for the redundant comments.\n\nI have an addition to my analysis in comment #1:\n> ... (e.g. the Apache httpclient). These clients could\n> send only headers plus the \"Expect: 100-continue\" and would then see an\n> error response (e.g. 403)\n\nWith this enhancement implemented, there would be benefit, but it would be limited. The benefit would be that the client sees the response instead of an exception.\n\nWhat we wouldn't get with the Apache 4.x httpclient is that the connection can be reused for the next request. The problem is that because the httpclient doesn't send the last chunk of the (to be discarded) entity after seeing a final response to its \"Expect: 100-continue\" request. This forces the server to close the connection. Apparently, this was only fixed in the 5.x httpclient [1]\n\n[1] https://issues.apache.org/jira/browse/HTTPCORE-411",
      "To add some additional information based on my findings in Tomcat 6.0.45:\nAs already described by Mark, Tomcat sends the negative reponse before a client has completely uploaded his request body. I believe that this implementation is fully RFC compliant and reasonable one. Consider uploading hundreds of megabytes and then wait for the denial? What a waste.\n\nI was searching for a bug in Firefox and Tomcat and discovered that Firefox is faulty too. curl perfectly handles the premature end of transfer. I have documented my findings with Tomcat and the expect continue with Firefox here: https://bugzilla.mozilla.org/show_bug.cgi?id=751552#c14. Similar issues: https://bugzilla.mozilla.org/show_bug.cgi?id=914088, https://bugzilla.mozilla.org/show_bug.cgi?id=729496",
      "See https://github.com/eclipse-ee4j/servlet-api/issues/307 for a description of what other containers do.\n\nOptions appear to be:\na) container sends it after auth (current Tomcat behaviour)\nb) container sends it when an InputStream / Reader is obtained\nc) container sends it when an InputStream / Reader is first used\n\nI'm currently leaning towards adding an option to select between a) and b) but as an Enum so additional options could be added later.",
      "(In reply to Mark Thomas from comment #5)\n> See https://github.com/eclipse-ee4j/servlet-api/issues/307 for a description\n> of what other containers do.\n> \n> Options appear to be:\n> a) container sends it after auth (current Tomcat behaviour)\n> b) container sends it when an InputStream / Reader is obtained\n> c) container sends it when an InputStream / Reader is first used\n> \n> I'm currently leaning towards adding an option to select between a) and b)\n> but as an Enum so additional options could be added later.\n\nNot only auth, on any status != 2xx. You may remember my redirect example on the mailing list. At no point a filter should need to obtain/peek/consume the input stream if a decision has to done based on headers only.",
      "(In reply to Mark Thomas from comment #5)\nI ran into this recently and ended up implementing option (b) locally:\nb) container sends it when an InputStream / Reader is obtained\n\nI'd be happy to prepare my local changes as a PR if there is a willingness to move forward with this solution.\n\nThanks!",
      "Please note that state changing actions do not necessary require a body, e.g., DELETE or generic POST with command in the URL. If Tomcat would wait until obtaining input this would completely defeat Expect Continue support.",
      "Why send 100-continue if you don't expect to send a request entity? The whole point of 100-continue is to request permission from the server to send a (usually large) request entity.",
      "(In reply to Christopher Schultz from comment #9)\n> Why send 100-continue if you don't expect to send a request entity? The\n> whole point of 100-continue is to request permission from the server to send\n> a (usually large) request entity.\n\nbecause a client impl may does this by default. I haven't veryfied Apache HttpClient not to send the header when not HttpEntity is attached.",
      "I took a closer look at my implementation and it is actually option (c):\nc) container sends it when an InputStream / Reader is first used\n\nThe approach that I'm taking is to only send the '100 continue' response when the application reads the request body, there is no additional blocking involved, so it will not interfere with handling of requests with no content.\n\nRegarding requests like DELETE that do not contain content, it is not allowed for those requests to contain the \"Expect: 100-continue\" header, from RFC 7231 5.1.1:\nA client MUST NOT generate a 100-continue expectation in a request\n      that does not include a message body.\n\nFrom what I can tell, Apache HttpComponents will not add the \"Expect: 100-continue\" header if the content body size is zero.",
      "(In reply to Malay from comment #11)\n> I took a closer look at my implementation and it is actually option (c):\n> c) container sends it when an InputStream / Reader is first used\n> \n> The approach that I'm taking is to only send the '100 continue' response\n> when the application reads the request body, there is no additional blocking\n> involved, so it will not interfere with handling of requests with no content.\n> \n> Regarding requests like DELETE that do not contain content, it is not\n> allowed for those requests to contain the \"Expect: 100-continue\" header,\n> from RFC 7231 5.1.1:\n> A client MUST NOT generate a 100-continue expectation in a request\n>       that does not include a message body.\n> \n> From what I can tell, Apache HttpComponents will not add the \"Expect:\n> 100-continue\" header if the content body size is zero.\n\nThanks for citing. I did not have this in mind.",
      "I posted PR 332 https://github.com/apache/tomcat/pull/332 with my implementation. Please let me know if this is the right approach, I thought of several ways to implement this and decided on this approach because it allows StandardContextValve to still be the brains behind sending the 100 Continue response. Thanks!",
      "Fixed in:\n- master for 10.0.0-M8 onwards\n- 9.0.x for 9.0.38 onwards\n- 8.5.x for 8.5.58 onwards"
    ],
    "creation_ts": "2015-03-04T11:14:02Z",
    "fixes": [
      57661
    ]
  },
  {
    "id": 66591,
    "summary": "HttpResponse without any header generates corrupted AJP messages",
    "description": "Fix for bug 66512 caused an issue in one of our applications, which does not set any response header at all. At a first glance no RFC defines that one MUST set some http header. But we definitely \"should\". \n\nSo this \"Bug\" is only to bring this to your attention. At least there should be an appropriate error message instead of generating corrupted AJP messages.\n\nKR Conny",
    "comments": [
      "Thanks for the report.\n\nMy reading of RFC 9110 (section 3.4) is that responses do not require headers. I am a little curious how the fix for bug 66512 triggered this but it does look like a bug.\n\nI'm working on this now.",
      "I've tried to recreate this locally but am unable to. Specifically, I have not been able to write a Servlet that causes Tomcat to send an AJP response with no headers.\n\nPlease provide the simplest test case that recreates this issue from a clean install of the latest release of any supported version of Tomcat (8.5.x, 9.0.x, 10.1.x or 11.0.x as I write this).",
      "If I understood the code correctly, the \"header-loop\" beginning in line 950 is not entered at all in case of 0 headers. So no https status code is appended to AJP response and also the number of headers is missing then.\n\nhttps://github.com/apache/tomcat/blob/9.0.x/java/org/apache/coyote/ajp/AjpProcessor.java",
      "Created attachment 38551\nminimal testcase\n\nattached app returns string \"test\" without any headers.\nIn case of failure output looks like this\n00000000: 0065 7374  .est\nAt least when using apache http with mod_proxy_ajp",
      "Thanks - I can recreate it now. I have a test case and the fix looks simple. Just need to run a few more tests.",
      "Fixed in:\n- 11.0.x for 11.0.0-M6 onwards\n- 10.1.x for 10.1.9 onwards\n-  9.0.x for  9.0.75 onwards\n-  8.5.x for  8.5.89 onwards"
    ],
    "creation_ts": "2023-05-03T06:26:40Z",
    "fixes": [
      66591
    ]
  },
  {
    "id": 52953,
    "summary": "Unlike BASIC Authentication, DIGEST mode does not work if the hash is stored in uppercase.",
    "description": "Created attachment 28487\npatch against the current 8.0.0-dev trunk adding toLowerCase on hash retrieval\n\nUnlike BASIC Authentication, DIGEST mode does not work if the hash is stored in uppercase.\n\nThis is not a problem if the hashes are generated by CATALINA/bin/digest.sh, but if they are prepared with other software which generate uppercase hex strings for hashes, it can be very confusing trying to figure out why digest authentication is not working.\n\nThe other hash comparisons use equalsIgnoreCase() to compare the hashes, but the digest version of RealmBase.authenticate() prepares the serverDigestValue by taking the Principal's hash (as is) and prepending it to the nonce and other digest fields, and then rehashing.\n\nAs a result, the final hash serverDigest is not the same as the clientDigest value that comes from the browser.\n\nTo test, change an MD5 DIGEST hash to upper case and attempt to authenticate.\n\nThe provided one-line patch against the current 8.0.0-dev trunk simply uses toLowerCase on the retrieved server-side hash.\n\nBest Regards,\nNeale Rudd",
    "comments": [
      "Thanks for the report and the patch.\n\nA slightly modified version has been applied to trunk and 7.0.x and will be included in 7.0.27 onwards."
    ],
    "creation_ts": "2012-03-21T04:39:32Z",
    "fixes": [
      52953
    ]
  },
  {
    "id": 57708,
    "summary": "[Patch] Authentication by reverse proxy, authorization by Tomcat",
    "description": "Created attachment 32567\nPatch for tomcat v7.0.x\n\nIn the current implementation of the tomcatAuthentication parameter, this allows the REMOTE_USER variable from the webserver to be used as the principal for the tomcat request.\n\nA side effect of this option is that if the web application uses roles (authorization), the roles will be silently ignored, and the user will be locked out.\n\nThis limits the usefulness of tomcatAuthentication.\n\nThe attached patches introduce the tomcatAuthorization flag. When true, the REMOTE-USER will be used as the principal, while authorization will continue in Tomcat as normal.\n\nWhat this means practically is that it now becomes possible to place a webserver in front of a web application, and the authentication performed by the webserver will cleanly replace the authentication performed by tomcat, while leaving the web application authorization configuration intact.",
    "comments": [
      "Created attachment 32568\nPatch for tomcat v8.0.x",
      "Created attachment 32569\nPatch for tomcat v9.0.x",
      "I've taken a quick look at the patch for 9.0.x. I suspect that my comments will apply equally to the back-ports.\n\nOverall, +1. I'd change some of the details (see below) but the general approach looks sound.\n\nI'm happy fixing the details when I apply the patch so no need to re-submit.\n\nOn those details:\n- 'remote user' has a specific meaning in a servlet container. I think this\n  needs to be changed to 'AJP authenticated user'or something similar.\n- The indentation is inconsistent (it should be four spaces). Some of that is\n  because the patch is trying to follow the existing code which itself is not\n  very consistent. In particular, the continuation lines look odd.\n- There is clearly some scope for refactoring to reduce duplication in the\n  authenticators. That should be completed first.\n\nI'm a little wary of adding a new method to Realm but, we have done that before when the need arose and there is an implementation in RealmBase so the impact should be minimal.\n\nThanks for the patch. This is on my todo list for tomorrow.",
      "I did look at this yesterday and I got as far as having something ready to commit but I'm not entirely happy with.\n\nThe question is where to do the authorization.\n\nIf authorization is done in the CoyoteAdaptor (the Context and therefore the Realm is available) then it will work regardless of the Authenticator implementation that is used. The down side is that it happens before the Principal caching that avoids large numbers of Realm lookups is reached (this is in AuthenticatorBase). It also makes an assumption that the request mapping won't changed (e.g. by the RewriteValve).\n\nIf authorization is done in AuthenticatorBase then Connector authorization depends on the Authenticator implementation and that doesn't seem right.\n\nI've looked at several options and - so far - all of them have issues. I'll spend some more time thinking about this.",
      "I opted for a combination of both approaches.\n\nImplemented in r4667546 for Tomcat 9 based on the provided patch.\n\nI'm happy to back-port this to 8.0.x. Not so sure about 7.0.x. Definitely not for 6.0.x.",
      "Back-ported to 8.0.x for 8.0.21 onwards.",
      "Thanks for this.\n\nWe backported all the way back to v7.0.x, as we're forced to use that by support contracts on various software, such as Jira and Confluence.",
      "Backported to 7.0.xfor 7.0.60 onwards."
    ],
    "creation_ts": "2015-03-14T23:00:43Z",
    "fixes": [
      57708
    ]
  },
  {
    "id": 69706,
    "summary": "Session persistence broken when persistAuthentication is turned on in tomcat 11.0.7",
    "description": "Session serialization fails between restarts of tomcat, when both of these conditions are met:\n\t- persistAuthentication is turned on in context.xml (by line '<Manager pathname=\"SESSIONS.ser\" persistAuthentication=\"true\"/>' ) \n\t- Active _unauthenticated_ user sessions exist\n\nFollowing the related stack trace from \"catalina.${date}.log\":\n\n\tjava.io.NotSerializableException: java.util.OptionalInt\n\t\tat java.base/java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1200)\n\t\tat java.base/java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1585)\n\t\tat java.base/java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1542)\n\t\tat java.base/java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1451)\n\t\tat java.base/java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1194)\n\t\tat java.base/java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:358)\n\t\tat org.apache.catalina.session.StandardSession.doWriteObject(StandardSession.java:1275)\n\t\tat org.apache.catalina.session.StandardSession.writeObjectData(StandardSession.java:837)\n\t\tat org.apache.catalina.session.StandardManager.unload(StandardManager.java:218)\n\t\tat org.apache.catalina.session.StandardManager.stopInternal(StandardManager.java:285)\n\t\tat org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:235)\n\t\tat org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:4660)\n\t\tat org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:235)\n\t\tat org.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:626)\n\t\tat org.apache.catalina.startup.HostConfig.undeploy(HostConfig.java:1439)\n\t\tat org.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1348)\n\t\tat org.apache.catalina.startup.HostConfig.check(HostConfig.java:1617)\n\t\tat org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:263)\n\t\tat org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:109)\n\t\tat org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:940)\n\t\tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1139)\n\t\tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1143)\n\t\tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1121)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\n\t\tat java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:358)\n\t\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)\n\t\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)\n\t\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)\n\t\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:59)\n\t\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\nNote that org.apache.catalina.authenticator.SavedRequest does implement java.io.Serializable, while its member variable originalMaxInactiveInterval of type java.util.OptionalInt does _not_.\nThis has been changed at some point between tomcat version 11.0.1 and 11.0.7. (Version 11.0.0 did not have this issue.)",
    "comments": [
      "Looking at the commit, maybe the API change needs to be reverted. It is possible to add a boolean to determine if the value has been explicitly set instead (or use an Integer).",
      "Created attachment 40043\nPatch for review",
      "+1 for just using an Integer which can be null.",
      "This will be fixed in 11.0.8, 10.1.42 and 9.0.106. The API change introduced in the previous version had to be modified.",
      "Thank you for the quick fix."
    ],
    "creation_ts": "2025-06-04T14:01:58Z",
    "fixes": [
      69706
    ]
  },
  {
    "id": 66635,
    "summary": "AbstractEndpoint#logCertificate() prints incorrect information",
    "description": "This applies to other Tomcat versions as well, but only verified in 8.5.\nComing from: https://www.mail-archive.com/users@tomcat.apache.org/msg141656.html\n\nTomcat logs the following line:\n> 2023-06-08T12:38:54.938 INFORMATION [main] org.apache.tomcat.util.net.AbstractEndpoint.logCertificate Connector [https-openssl-apr-8444], TLS virtual host [deblndw024v.ad001.siemens.net], certificate type [RSA] configured from [/net/home/smartld/.keystore] using alias [tomcat] and with trust store [null] \n\nBut I have never configured a Java keystore, but solely use APR + OpenSSL style config:\n> <Connector port=\"8444\" connectionTimeout=\"20000\" keepAliveTimeout=\"300000\" maxParameterCount=\"1000\"\n>   maxHttpHeaderSize=\"24576\" maxThreads=\"250\"\n>   SSLEnabled=\"true\" scheme=\"https\" secure=\"true\"\n>   defaultSSLHostConfigName=\"deblndw024v.ad001.siemens.net\">\n>   <SSLHostConfig hostName=\"deblndw024v.ad001.siemens.net\" protocols=\"TLSv1.2+TLSv1.3\"\n>     honorCipherOrder=\"true\" disableSessionTickets=\"true\"\n>     ciphers=\"HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!DSS:!SHA1:!SHA256:!SHA384\">\n>     <Certificate certificateFile=\"/opt/openssl/deblndw024v.ad001.siemens.net/cert.crt\"\n>       certificateKeyFile=\"/opt/openssl/deblndw024v.ad001.siemens.net/key.crt\"\n>       certificateKeyPassword=\"...\" type=\"RSA\" />\n>   </SSLHostConfig>\n> </Connector>\n\nThe Java code emitting this message does not check for store type to print the correct information. The keystore [/net/home/smartld/.keystore] does not exist.\n\nThe called class does differentiate internallyb between store types, so should this printer.",
    "comments": [
      "Fixed in:\n- 11.0.x for 11.0.0-M8 onwards\n- 10.1.x for 10.1.11 onwards\n-  9.0.x for  9.0.77 onwards\n-  8.5.x for  8.5.91 onwards",
      "Looks much better now:\n\n> 2023-06-14T09:58:06.481 INFORMATION [main] org.apache.tomcat.util.net.AbstractEndpoint.logCertificate Connector [https-openssl-apr-8444], TLS virtual host [deblndw024v.ad001.siemens.net], certificate type [RSA] configured from key [/opt/openssl/deblndw024v.ad001.siemens.net/key.crt], certificate [/opt/openssl/deblndw024v.ad001.siemens.net/cert.crt] and certificate chain [null] with trust store [null]\n> 2023-06-14T09:58:06.585 INFORMATION [main] org.apache.tomcat.util.net.AbstractEndpoint.logCertificate Connector [https-openssl-apr-18444], TLS virtual host [deblndw024v.ad001.siemens.net], certificate type [RSA] configured from key [/opt/openssl/deblndw024v.ad001.siemens.net/key.crt], certificate [/opt/openssl/deblndw024v.ad001.siemens.net/cert.crt] and certificate chain [null] with trust store [/opt/openssl/certs]\n\nI wonder to what extend we need certificateChainFile these days because the mod_ssl counterpart is deprecated for a long time: https://httpd.apache.org/docs/current/mod/mod_ssl.html#sslcertificatechainfile as long as our code loads the file identially to mod_ssl.\n\nShould I spawn a new issue for this?",
      "Yes. A new issue needs a new BZ entry.",
      "(In reply to Mark Thomas from comment #3)\n> Yes. A new issue needs a new BZ entry.\n\nDone in Bug 66647."
    ],
    "creation_ts": "2023-06-09T06:57:30Z",
    "fixes": [
      66635
    ]
  },
  {
    "id": 40901,
    "summary": "listings page does not escape XML characters",
    "description": "On Solaris you can have a file or directory name called \"<b>xxx\" or \"<i>yyy\".\nUsing Tomcat's listings feature, you get a directory listing with the file name\nin bold or italics.\n\nI am not familiar with Javascript or cross-site scripting security problems, but\nI believe Tomcat escapes XML characters like \">\" and \"<\" to prevent client\nbrowsers to interpret HTML codes that are not intended to be interpreted as such\nfor the default error page.\nI think the same should be done for listings, or a warning should be added to\nthe documentation not to use it if you have no control over the file/directory\nnames you list.",
    "comments": [
      "Created attachment 19093\nPatch to DefaultServlet.java that HTML-encodes filenames for directory indexing",
      "Confirmed on Linux as well.  I'm attaching a simple patch that incorporates\nbasic HTML encoding into o.a.catalina.servlets.DefaultServlet when outputting a\ndirectory index (whether as HTML or XML).  The method in question is basically\nthe same as used in o.a.catalina.util.DOMWriter and in HTMLFilter.java in the\nJSR152/154 examples.",
      "Thanks Chris!\n\nBTW: the file/directory names should be \"<b>xxx<b>\", \"<i>yyy<i>\" to get the HTML\ncode interpreted by the browser. Somehow I lost the end tags in my posting.\n\nI tried jarring them up and unjarring them to Windows to see if I could\nreproduce it there. Alas, IOExc during unjarring.",
      "many thanks for the patch. A variation has been applied to SVN and will be\nincluded in 5.5.21 onwards."
    ],
    "creation_ts": "2006-11-05T20:38:27Z",
    "fixes": [
      40901
    ]
  },
  {
    "id": 43868,
    "summary": "MBeanServer invoke issue",
    "description": "Impossible to invoke \"removeRole\" or other MBean methods and \"setAttribute\" by\nMBeanServer cause of the same bug in ManagedBean.java at both lines 545\n(getSetter method) and 604 (getInvoke method):\n        object = this;\nMust be replace by:\n        object = bean;\n\nFortunately getGetter method is correct.",
    "comments": [
      "This has been fixed in svn and proposed for inclusion in 6.0.x",
      "This has been fixed in 6.0.x and will be included in 6.0.16 onwards."
    ],
    "creation_ts": "2007-11-15T01:26:51Z",
    "fixes": [
      43868
    ]
  },
  {
    "id": 61566,
    "summary": "Expose TLS Certificate and Trusted Authority details through the Manager TLS",
    "description": "The Tomcat Manager has a page to display all the configured TLS ciphers\n\nIt would be nice if it could also show:\n * What certificate is active for a connector\n * What certificate authorities, if any, are trusted for a connector\n\nAt the very least, it'd be good to report the fingerprint and expiry date. Even better would be to show nearly as much as \"openssl x509 text\" would show, and/or allow downloading of the pem-encoded certificate\n\n(The downloading is especially handy for sysadmins used to pem certificates / openssl / gnutls style certificates and tools, fighting with a java keystore. You can get the certificate via openssl s_client or similar, the trusted CAs you can't easily get externally)\n\nTBD - If you're in the middle of a graceful deployment of a new certificate for a connector (via JMX or via #61565), should it show details of both certs, or just the latest one? (I don't have a strong feeling either way)",
    "comments": [
      "This doesn't look as if it will be as easy as I'd hoped.\n\nWhile the information is fairly easy to get at for NIO and NIO2, it isn't for APR/native. Additional methods would need to be added to the JNI API and I'm not 100% sure the required information is accessible via the OpenSSL API.\n\nGiven that it is possible the APR/native connector will be removed in Tomcat 10, just providing this information for NIO and NIO2 could be considered.",
      "(In reply to Mark Thomas from comment #1)\n> Given that it is possible the APR/native connector will be removed in Tomcat\n> 10, just providing this information for NIO and NIO2 could be considered.\n\n+1\n\nEven if the APR connector remains, exposing this information for Java-based connectors is worthwhile.\n\nIf we get desperate, we can re-read the configuration from the <Connector> and re-load the certificates from the cert store. It won't always be 100% accurate (because you'll be reading the config and not the active cert from memory) but it will get the job done much of the time.",
      "This has been implemented for connectors that use either the JSSE or OpenSSL implementation that are configured with key stores.\n\nProviding the information for OpenSSL style configuration would require changes to Tomcat Native and, as previously stated, I'm not sure OpenSSL exposes the information.",
      "(In reply to Mark Thomas from comment #3)\n> This has been implemented for connectors that use either the JSSE or OpenSSL\n> implementation that are configured with key stores.\n> \n> Providing the information for OpenSSL style configuration would require\n> changes to Tomcat Native and, as previously stated, I'm not sure OpenSSL\n> exposes the information.\n\nCan you please clarify this?\n\nI think the issue is whether the certificate information is available to the Java components instead of coming from native/APR right? So the information should be available to any Java-based connector (NIO, NIO2) regardless of the \"configuration style\" that is being used, and the APR connector won't report this information (at least, not yet).",
      "For the feature to work, all of the following must be true:\n- HTTP connector\n- NIO or NIO2 implementation\n- JSSE style TLS configuration (key stores) used\n\nIt does not work for the HTTP APR/native connector.\nIt does not work if OpenSSL style configuration is used.\n\nWhether or not it works is independent of the TLS implementation (JSSE or OpenSSL) used.\n\nIt does not apply to AJP connectors.\n\nThe TLS information is extracted during the configuration phase. Hence the configuration style is important.\n\nWhen the OpenSSL configuration style is used, the same information isn't available in the same form at the same point. Rather than extracting it in the right form from OpenSSL (which would require JNI changes) it should be possible to derive it from the configuration files and cache it."
    ],
    "creation_ts": "2017-09-26T15:41:56Z",
    "fixes": [
      61566
    ]
  },
  {
    "id": 69532,
    "summary": "Performance optimization in Util.getExpressionFactory()",
    "description": "Created attachment 39968\nSpeed test\n\nA large, latency-sensitive application spends approximately 0.6% of cpu executing javax.el.Util.getExpressionFactory.  Profiling indicates 2/3rds of that time is spent acquiring and releasing the read lock associated with each cache entry.  Specifically, this block of code:\n\nfinal Lock readLock = cacheValue.getLock().readLock();\nreadLock.lock();\ntry {\n\tfactory = cacheValue.getExpressionFactory();\n} finally {\n\treadLock.unlock();\n}\n\nHowever, this read locking is unnecessary, as the protected value is initialized to null, then set exactly once to a long-lived object.  Unlocked reads that return a non-null value must be correct, and reads that return a null value will be resolved immediately afterwards with the write locking:\n\n\nif (factory == null) {\n\tfinal Lock writeLock = cacheValue.getLock().writeLock();\n\twriteLock.lock();\n\ttry {\n\t\tfactory = cacheValue.getExpressionFactory();\n\t\tif (factory == null) {\n\t\t\tfactory = ExpressionFactory.newInstance();\n\t\t\tcacheValue.setExpressionFactory(factory);\n\t\t}\n\t} finally {\n\t\twriteLock.unlock();\n\t}\n}\n\n\nEliminating the read lock doubles the speed of the attached performance test while maintaining safety (I think - please doublecheck!).  I observe results similar to:\n\nDone with old in 284\nDone with old in 283\nDone with old in 279\nDone with old in 279\nDone with old in 279\nDone with new in 204\nDone with new in 159\nDone with new in 152\nDone with new in 151\nDone with new in 153\n\nNotes:\n1. The test uses 500 distinct classloaders to avoid any bias towards our case of 1-2 contexts in the map.  I'm not sure what's typical.\n2. Run the test with -Xmx1g -Xms1g -XX:+UseParallelGC\n3. The test is single-threaded so the lock is uncontended.  Perf impact may vary under contention.",
    "comments": [
      "It looks like the pattern where usually a regular sync + a volatile field is used. The problem is the field here is inside a reference so not volatile (I suppose it's why Mark came up with that read lock).",
      "You're probably right about the history.  An AtomicReference might help here.",
      "Looking at the history, I think Konstantin deserves the credit for the original design rather than me.\n\nGiven the current implementation maintains a TCCL->class name Map and a TTCL->ExpressionFactory Map, I did wonder if some refactoring was possible to reduce that to a single Map.\n\nI also wondered if we had fully taken advantage of the key being a TCCL. Unlike other WeakReference keys, I think the lifecycle of a class loader means we don't need to worry about the reference returning null. I think there might be an optimisation there but haven't thought it through fully yet.",
      "Interestingly, ExpressionFactory.newInstance() uses the same locking logic as Util.getExpressionFactory().  Looks like a copy-and-modify from one to the other.",
      "Created attachment 39979\nTomcat 9 proposed patch\n\nI've attached a patch that improves on the current state in lots of ways:\n\n1. No locking\n2. No object allocation, after initialization\n3. No GC leaks of CacheKey instances\n4. Speed improvements > 50%\n\nData is stored in WeakHashMaps, which are modified in a thread-safe manner via copy-and-modify then compareAndSwap.\n\nThoughts?",
      "This patch also reduces the runtime of the existing perf test TestELParserPerformance.testExpressions() by about 15-20%, and heap usage by 25%.  Hopefully it is indeed thread safe?",
      "I like it. I do have a couple of minor comments:\n\n- ExpressionFactoryCache needs to be package private. It can't be public as we aren't allowed to add classes to the public API of a specification package.\n\n- New files need the standard ALv2 header",
      "Created attachment 39986\nProposed patch v2\n\nUpdated patch attached - added AL text, reduced class visibility, cleaned up a workspace-related problem.  Builds clean.",
      "Fixed in:\n- 11.0.x for 11.0.3 onwards\n- 10.1.x for 10.1.35 onwards\n-  9.0.x for  9.0.99 onwards"
    ],
    "creation_ts": "2025-01-10T21:39:28Z",
    "fixes": [
      69532
    ]
  },
  {
    "id": 49655,
    "summary": "ExpressionFactoryImpl.createMethodExpression() is not EL 2.2 Spec conform",
    "description": "org.apache.el.ExpressionFactoryImpl.createMethodExpression(ELContext context,\nString expression, Class expectedReturnType, Class[] expectedParamTypes)\n\ndoes not correctly impl EL Specification 2.2 (Maintenance Release 2 - December\n10, 2009)\n\nThe spezfication say at site 72 (last paragraph):\nexpectedParamTypes - The expected parameter types for the method to be found.\nMust be an array with no elements if there are no parameters expected. It is\nillegal to pass null, unless the method is specified with arugments in the EL\nexpression, in which case these arguments are used for method selection, and\nthis parameter is ignored.\n\nThe part \", unless the method is specified....\" was added in 2.2 and is not\nimplemented.\n\nIf i call the method with expectedParamTypes == null i get NullPointerException,\nalthough expression #{bean.sayHello('World')} has arguments.  \n\nThe Sun 2.2.1-b04 el (com.sun.el.ExpressionFactoryImpl) has the same defect. The\ncode looks identical.\nJUEL 2.2.1 (http://juel.sourceforge.net/) works fine.",
    "comments": [
      "Bug at Sun EL https://uel.dev.java.net/issues/show_bug.cgi?id=18",
      "This was fixed as part of the changes to correctly identify the method to us in EL and will be included in 7.0.1 onwards."
    ],
    "creation_ts": "2010-07-27T10:32:48Z",
    "fixes": [
      49655
    ]
  },
  {
    "id": 46925,
    "summary": "Nested groups in JNDI realm with non-recursive implementation",
    "description": "Created attachment 23420\nPatch which replaced the recursive method with a while loop (\"memberOf Algorithm\")\n\nI have modified the method getRoles in org.apache.catalina.realm.JNDIRealm in the trunk in order to use a while loop to detect nested groups (instead of the recursive method currently implemented there).\n\nThe algorithm is inspired by the article \"Practices in Directory Groups\" found here: http://middleware.internet2.edu/dir/groups/internet2-mace-dir-groups-best-practices-200210.htm \nIt avoids group slurping and handles cyclic group memberships as well.\n\nFind a patch attached.\n\nGreetings from Amsterdam, Stefan",
    "comments": [
      "Applied to trunk as r769102, thanks for the patch.\n\nI consider proposing backporting most of the JDNIRealm improvements to TC 6 after intensive testing.",
      "This improvement was added to 6.0.x in 6.0.21 onwards",
      "*** Bug 40218 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2009-03-27T03:58:28Z",
    "fixes": [
      46925
    ]
  },
  {
    "id": 69466,
    "summary": "Content-Length removal from HEAD response should not be mandatory",
    "description": "The Content-Length header was removed from HEAD response within https://bz.apache.org/bugzilla/show_bug.cgi?id=69379 but as per the two mentioned RFCs, this header is not forbidden, it could be present in a HEAD response.\n\nIn RFC 9110, the section 8.6 (https://www.rfc-editor.org/rfc/rfc9110.html#section-8.6) or section 9.3.2 (https://www.rfc-editor.org/rfc/rfc9110.html#section-9.3.2) don't forbid the Content-Length header.\nSection 8.6:\n```\nA server MAY send a Content-Length header field in a response to a HEAD request (Section 9.3.2); a server MUST NOT send Content-Length in such a response unless its field value equals the decimal number of octets that would have been sent in the content of a response if the same request had used the GET method.\n```\nSection 9.3.2:\n```\nHowever, a server MAY omit header fields for which a value is determined only while generating the content.\n```\n\nThis is also the case in RFC 7231 under section 4.3.2 (https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.2)\n```\n   The HEAD method is identical to GET except that the server MUST NOT\n   send a message body in the response (i.e., the response terminates at\n   the end of the header section).  The server SHOULD send the same\n   header fields in response to a HEAD request as it would have sent if\n   the request had been a GET, except that the payload header fields\n   (Section 3.3) MAY be omitted\n```\nThe RFC 7231 references the section 3.3 of RFC 7230 (https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2) which doesn't forbid the header:\n```\n   A server MAY send a Content-Length header field in a response to a\n   HEAD request (Section 4.3.2 of [RFC7231]); a server MUST NOT send\n   Content-Length in such a response unless its field-value equals the\n   decimal number of octets that would have been sent in the payload\n   body of a response if the same request had used the GET method.\n```\n\nIn our application we are able to send the Content-Length header for a HEAD request without computing any content, the value is stored in the same location than the requested object.\n\nWith the recent fix in the Tomcat processor, we are unable to send such header in a HEAD response.\nWould it be possible to allow the Content-Length header if the value is greater than 0? Or add a configuration parameter to permit such behavior as the RFC allows it?",
    "comments": [
      "*** Bug 69469 has been marked as a duplicate of this bug. ***",
      "For info, I am working on a better fix for this at the moment. We have an extensive set of tests (about 18,000) for this that cover all sorts of edge cases.\n\nThe approach I am trying to implement is:\n- don't remove any user set headers from a HEAD\n- any header (excluding Date) present in HEAD must be the same for GET\n- content related headers referenced in RFC 9110, section 9.3.2 that are\n  present in GET but not the equivalent HEAD are allowed",
      "@Mark - regarding implementation - may be marking a response as \"not handled directly\" by a servlet, i.e., handled through default implementation of HttpServlet.doHead(), applying the current filters to such marked requests, and then making it servlet's responsibility to set the headers correctly?\n\nOtherwise, there may be servlets that set, say, content-length header in doGet(), but will produce dynamic/generated data, so two consecutive requests to HEAD and GET will produce different header values. And if a servlet does do its own doHead(), and messed the headers up, it's not the container's fault.\n\nThe predicament here is also that:\na) if somebody depends on having content-length in HEAD, they are rather blocked from using 10.1.32 and up\nb) CVE-2024-52316 precludes use of anything below 10.1.31\nc) CVE-2024-52318 precludes use of 10.1.31 (in favor of at least 10.1.32)",
      "If you need a work-around until the December releases, use 10.1.31 and disable tag pooling.",
      "Fixed in:\n- 11.0.x for 11.0.2 onwards\n- 10.1.x for 10.1.34 onwards\n-  9.0.x for  9.0.98 onwards"
    ],
    "creation_ts": "2024-11-20T16:42:23Z",
    "fixes": [
      69466
    ]
  },
  {
    "id": 69068,
    "summary": "ReadListener#onError not called on read exception during async processing",
    "description": "Created attachment 39749\nUnit test\n\nDuring an HTTP/2 async request, when the client closes the connection before the server could fully read the request, no exception is reported to the ReadListener attached to the ServletInputStream.\n\nHere are the steps:\n* Start tomcat with HTTP/2 enabled and an async servlet\n* Start an HTTP/2 request by sending only the headers\n* The servlet receives the request and attaches a read listener\n* The client closes the connection before sending the body and trailers\n* The read listener is expected to be called to notify a read issue\n\nYou will find attached a Unit Test file to reproduce the problem.\n\nLet me know if this is an expected behaviour or an actual bug.\n\nThanks",
    "comments": [
      "First of all, thank you very much indeed for the test case. It is extremely rare for a bug report to come with a test case that we can just drop in the IDE and (part from some tweaks so it runs in 11.0.x rather than 9.0.x) it just works. It saves us so much time and really is appreciated.\n\nThis is a bug. You should see a SocketTimeoutException in the ReadListener as you would if the request was made over HTTP/1.1\n\nI have a fix for this locally. I just need to clean it up and complete some testing.",
      "All good.\n\nFixed in:\n- 11.0.x for 11.0.0-M21 onwards\n- 10.1.x for 10.1.25 onwards\n-  9.0.x for  9.0.90 onwards",
      "Thanks a lot ! That really helps. Will test it when new release is available and get back to you.",
      "Created attachment 39857\nAlternative fix\n\nThe proposed solution is dependent on the stream timeout. For long running/streaming use cases, no error is reported.\nI'm not sure about the proposed patch, but it seems to cover use cases where stream timeout is big. Let me know what you think.",
      "Please open a new issue for this. If you were able to modify/extend the existing test case to demonstrate the issue that would be very helpful.\n\nI'm not sure about the proposed patch. I'm wondering if this should also be handled by Stream.receiveReset()"
    ],
    "creation_ts": "2024-05-29T12:43:30Z",
    "fixes": [
      69068
    ]
  },
  {
    "id": 66527,
    "summary": "Embedded Tomcat addWebApp docBase usage is inconsistent with JavaDoc",
    "description": "JavaDoc for Tomcat.addWebApp(String contextPath, String docBase) says docBase is relative to the server home:\n\n* @param docBase     Base directory for the context, for static files. Must\n*                        exist, relative to the server home\n\nHowever, docBase is eventually passed as the first argument to getWebappConfigFile(String path, String contextName) where it is evaluated as if it were an absolute path:\n\nprotected URL getWebappConfigFile(String path, String contextName) {\n        File docBase = new File(path);\n        if (docBase.isDirectory()) {\n\nThe docBase.isDirectory() check will fail when docBase is a relative path, and then we incorrectly end up calling getWebappConfigFileFromWar().\n\nExcept for loading the context.xml file, everything else \"works\" when a relative path is used, so I assume this is a bug in the implementation and not the JavaDoc?",
    "comments": [
      "Looking at the history of that file, the docBase was always meant to be absolute. Saying it could be relative is a Javadoc bug added (by me) as part of the fix for bug 57723. I'll get the Javadoc corrected.\n\nI did look at the possibility of supporting a relative path but that begs the question \"Relative to what?\". CATALINA_BASE isn't an option as that is (usually) created dynamically when using the Tomcat class. Using current directory is too fragile for my liking.",
      "Fixed in:\n- 11.0.x for 11.0.0-M5 onwards\n- 10.1.x for 10.1.8 onwards\n-  9.0.x for  9.0.74 onwards\n-  8.5.x for  8.5.88 onwards",
      "(In reply to Mark Thomas from comment #1)\n> I did look at the possibility of supporting a relative path but that begs\n> the question \"Relative to what?\". CATALINA_BASE isn't an option as that is\n> (usually) created dynamically when using the Tomcat class.\nFunny enough, I actually discovered the issue when specifying a fixed CATALINA_BASE (setting server.tomcat.basedir with Spring Boot).\n\nFor example, if CATALINA_BASE=/foo and /foo/webapps/bar exists, then addWebApp(\"/bar\", \"bar\") actually works just fine.\n\nThe only issue that appeared was NoSuchFileException stemming from getWebappConfigFile interpreting \"bar\" as absolute when trying to locate context.xml as I mentioned in the original post. Otherwise, the app works (as I have no context.xml anyway).\n\nI think this works because of the underlying Context object, which says this for setDocBase(String):\n\n> Set the document root for this Context. This can be either an absolute pathname or\n> a relative pathname. Relative pathnames are relative to the containing Host's appBase.\nSo I guess \"Relative to what?\" is sort of explained?\n\nBut anyway, using an absolute path is easy enough for me. Plus it has the added benefit I hadn't considered until now, that you can load from any path and it doesn't need to be underneath an existing CATALINA_BASE.\n\nThank you for clearing this up."
    ],
    "creation_ts": "2023-03-13T02:37:13Z",
    "fixes": [
      66527
    ]
  },
  {
    "id": 64432,
    "summary": "RewriteValve does not work with multiple rules",
    "description": "Created attachment 37241\npatch with simple tests and potential fix\n\nWhen a multiline configuration file is used for RewriteValve is used, only the first rule is ever run/applied. Attached is a patch for a couple simple test cases, and a potential fix.\n\nThis problem is exhibited in master and the 8.5.x branch.\n\nI'm not sure of the fuller impact of the fix since this reverts recent changes in the code.",
    "comments": [
      "Fixed. Thanks for the report and the test cases.\n\nFixed in:\n- master for 10.0.0-M6 onwards\n- 9.0.x for 9.0.36 onwards\n- 8.5.x for 8.5.56 onwards",
      "*** Bug 64461 has been marked as a duplicate of this bug. ***",
      "*** Bug 64495 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2020-05-13T17:09:50Z",
    "fixes": [
      64432
    ]
  },
  {
    "id": 67235,
    "summary": "NPE (NullPointerException) occurs in AsyncContextImpl.decrementInProgressAsyncCount after version 10.1.12.",
    "description": "The error log \"java.lang.NullPointerException: Cannot invoke 'org.apache.catalina.Context.decrementInProgressAsyncCount()' because 'this.context' is null\" occurs in AsyncContextImpl.decrementInProgressAsyncCount when using Tomcat version 10.1.12 and later. This issue occurs when using SSE (Server-Sent Events). Specifically, it always happens when the client terminates the connection first, and the server then tries to send data. The issue occurs in both versions 10.1.12 and 10.1.13, but it does not occur in version 10.1.11.\n\nBelow is the attached stack trace.\n\n\n```\njava.lang.NullPointerException: Cannot invoke \"org.apache.catalina.Context.decrementInProgressAsyncCount()\" because \"this.context\" is null\n\tat org.apache.catalina.core.AsyncContextImpl.decrementInProgressAsyncCount(AsyncContextImpl.java:441)\n\tat org.apache.coyote.AsyncStateMachine.asyncPostProcess(AsyncStateMachine.java:295)\n\tat org.apache.coyote.AbstractProcessor.asyncPostProcess(AbstractProcessor.java:197)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:78)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n```",
    "comments": [
      "Are you using HTTP/2 for these requests? I'm guessing not but just wanted to check.",
      "I am unable to re-create the error described from the information provided.\n\nPlease provide the simplest possible test case the reproduces this error.",
      "I did not use HTTP2.\nThis issue occurred when setting up SSE (Server-Sent Events), and it's expected that this could always happen when using an asynchronous servlet.\n\nI'm building a server using the Spring Framework, and I'll briefly attach some sample code below that could cause this issue when running with embedded Tomcat as the web application server.\n\n```\nclass EventStreamV2Controller {\n\n    @GetMapping(value = [\"/sse\"], produces = [MediaType.TEXT_EVENT_STREAM_VALUE])\n    fun connectStream(): SseEmitter {\n        val sseEmitter = SseEmitter(Duration.ofSeconds(10).toMillis())\n\n        Thread {\n            Thread.sleep(Duration.ofSeconds(5).toMillis())\n            sseEmitter.send(\"message\")\n        }.start()\n\n        return sseEmitter\n    }\n}\n\n```\n\nWhen there is an API like the one described above, if the client preemptively terminates the SSE connection within 5 seconds after making the connection request, an issue occurs at the point when sseEmitter.send(\"message\") is called.",
      "It can be reproduced. From my debug observations, it turns out that it's ultimately due to the change of `org.apache.coyote.AsyncStateMachine#asyncError` (Maybe not final reason). \nSince I'm not very familiar with this area, I'll try to be as descriptive as possible :) \n\nAbnormal behavior:\n10.1.11: execute `decreaseInProgressAsyncCount` first, then execute `recycle` 10.1.12: becomes `recycle` first, then execute `decreaseInProgressAsyncCount`.\n\n\n1. When writing after 5s, an IO exception is encountered because the connection is broken. So you end up changing the state to ERROR at org.apache.coyote.AbstractProcessor#setErrorState:122 line, which is normal I think and which is first time to set state.\n2.An scoket ERROR event is then generated after 1) and process it asynchronously.\nThe final execution reaches org.apache.catalina.core.AsyncContextImpl#setErrorState: 393 line to notify the listener that an exception exists. At this point, there is a listener `StandardServletAsyncWebRequest`. This listener will eventually execute to ` org.apache.coyote.AsyncStateMachine#asyncDispatch` where will set state to DISPATCHING. \n3.The process continues, and then it goes to org.apache.coyote.AsyncStateMachine#asyncError. This is the problem. 10.1.11 eventually set state to ERROR, but 10.1.12 there ensure the error processing is only started once per generation, the state is still DISPATCHING. \n\n\nHope the analysis is right ;)",
      "Thanks for the reproducer and thanks Han for the analysis. The analysis looks good to me.\n\nThis bug has been present for a while and was exposed by the fix for bug 66841.\n\nAs my comments on bug 66941 suggested, there were a few things that needed to be cleaned up. One of which was multiple calls to error handlers. The fix for BZ 66841 started to do that but a side effect of that clean-up was to expose this bug. Previously it was masked by multiple loops through the async error handling process.\n\nThe fix for this is relatively straight forward although I am going to take the opportunity to have another look at the async error handling.",
      "I've applied the fix but I am leaving this issue open for now as I want to take a further a look at the error handling.",
      "The checks for duplicate error handling have been simplified and expanded. This addresses the behaviour I observed while investigating this bug."
    ],
    "creation_ts": "2023-09-06T04:17:11Z",
    "fixes": [
      67235
    ]
  },
  {
    "id": 57938,
    "summary": "HttpServletRequest.getParts causes NPE when allowCasualMultipartParsing set \"true\" and multipart field is empty",
    "description": "Created attachment 32745\nSample project to reproduce bug\n\nWhen sending a HTML form as multipart/form-data, if allowCasualMultipartParsing is set to True and any form field is empty, calling HttpServletRequest.getParts() causes NullPointerException.\n\n19-May-2015 23:30:59.912 SEVERE [http-nio-8512-exec-14] org.apache.catalina.core.StandardWrapperValve.invoke Servlet.service() for servlet [post] in context with path [/test] threw exception\njava.lang.NullPointerException\n\tjava.lang.String.<init>(String.java:479)\n\torg.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getString(DiskFileItem.java:321)\n\torg.apache.catalina.connector.Request.parseParts(Request.java:2758)\n\torg.apache.catalina.connector.Request.getParts(Request.java:2641)\n\torg.apache.catalina.connector.RequestFacade.getParts(RequestFacade.java:1083)\n\tcom.multipart.emptytest.post.doPost(post.java:25) (<--- HttpServletRequest.getParts() here)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:648)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:729)\n\torg.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n\t...\n\n\nTo Reproduce Bug:\n\n1) Set allowCasualMultipartParsing to \"true\" in context.xml,\n2) Create a HTML form with enctype=\"multipart/form-data\",\n3) Submit the form it to a servlet that calls HttpServletRequest.getParts(),\n4) If you leave any field empty in the form you will get a NPE.\n\nExpected Results: \n\nWhether there is an empty field or not HttpServletRequest.getParts() should complete without any exceptions. Empty fields should return empty Part objects.\n\nActual Results:\n\nGot NPE.\n\nAdditional Information: \n\nWhether allowCasualMultipartParsing is true or false if the servlet is annotated as @MultipartConfig, error disappears and HttpServletRequest.getParts() behaves as expected. But since sole purpose of allowCasualMultipartParsing is the opportunity of using getParts() in a ServletFilter, this is not a solution.\n\nA sample project to reproduce bug in attachment.",
    "comments": [
      "Just figured out what the problem is. maxPostSize attribute of Connector in server.xml was set to -1. When allowCasualMultipartParsing is true and if there is no @MultpartConfig, a MultipartConfigElement is created in org.apache.catalina.connector.Request.parseParts using this code:\n\n\nMultipartConfigElement mce = getWrapper().getMultipartConfigElement();\n\nif (mce == null) {\n    if(context.getAllowCasualMultipartParsing()) {\n        mce = new MultipartConfigElement(null,\n                                         connector.getMaxPostSize(),\n                                         connector.getMaxPostSize(),\n                                         connector.getMaxPostSize());\n    } else {\n                ...\n\nThe last parameter of MultipartConfigElement above is fileSizeTreshold which is (from javadoc) \"the size threshold after which files will be written to disk\". \n\nAlthough it says that \"The maximum size in bytes of the POST which will be handled by the container FORM URL parameter parsing. The limit can be disabled by setting this attribute to a value less than or equal to 0. If not specified, this attribute is set to 2097152 (2 megabytes).\" for maxPostSize in documents(https://tomcat.apache.org/tomcat-8.0-doc/config/http.html#Common_Attributes), setting maxPostSize to 0 blocks all post requests for example:\n\nHTTP Status 500 - java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (235) exceeds the configured maximum (0)\n\nSo setting maxPostSize to 0 is not a solution for anyone who wants to allow unlimited size file uploads.\n\n\nPosible quick fix is:\n\nMultipartConfigElement mce = getWrapper().getMultipartConfigElement();\n\nif (mce == null) {\n    if(context.getAllowCasualMultipartParsing()) {\n        mce = new MultipartConfigElement(null,\n                                         connector.getMaxPostSize(),\n                                         connector.getMaxPostSize(),\n                                         Math.max(0,connector.getMaxPostSize())); //line 2671 in v8.0.22\n    } else {\n                ...\n\n\n\nI set my maxPostSize to a reasonable value as a temporary fix. But this bug and misleading documentation of maxPostSize should be fixed.",
      "Thanks for the report. These issues have been fixed in trunk (9.0.x), 8.0.x (for 8.0.24 onwards) and 7.0.x (for 7.0.63 onwards).\n\nI opted for a slightly different fix for the first issue. Negative values are now converted to 0 in the MultipartConfigElement constructor.\n\nmaxPostSize=0 was really a bug in how allowCasualMultipartParsing was implemented but I opted to switch the meaning if zero to a limit of zero since a) it is more intuitive and b) it aligns with maxSavePostSize.",
      "(In reply to Mark Thomas from comment #2)\n> maxPostSize=0 was really a bug in how allowCasualMultipartParsing was\n> implemented but I opted to switch the meaning if zero to a limit of zero\n> since a) it is more intuitive and b) it aligns with maxSavePostSize.\n\nI'm interested (since I wrote it), what was the \"real\" bug?",
      "(In reply to Christopher Schultz from comment #3)\n> (In reply to Mark Thomas from comment #2)\n> > maxPostSize=0 was really a bug in how allowCasualMultipartParsing was\n> > implemented but I opted to switch the meaning if zero to a limit of zero\n> > since a) it is more intuitive and b) it aligns with maxSavePostSize.\n> \n> I'm interested (since I wrote it), what was the \"real\" bug?\n\nIt didn't handle the 0 == no limit case"
    ],
    "creation_ts": "2015-05-19T20:56:40Z",
    "fixes": [
      57938
    ]
  },
  {
    "id": 56825,
    "summary": "AuthenticatorBase not looking for Coyote Request certificate",
    "description": "When using Tomcat SSL coyote connector, the request does not by default contain the certificate chain under the key javax.servlet.request.X509Certificate\n\nThe following coyote action must be invoked in order to extract the certificate chain and enrich the request under the right key.\n\nThis makes it impossible to use the SSLAuthenticator with preemptive mode for example.\n\nProvided a test to reproduce and the fix within the patch file.\nI tried to follow Tomcat guidelines and coding rules. If not lemme know so that I can resubmit a new patch.\n\nNot tested under Tomcat 6 and 8 but, the AuthenticatorBase does not change a lot over versions so I guess the bug existed before Tomcat 7 and still exists in Tomcat 8.",
    "comments": [
      "Created attachment 31885\nPatch with the test to reproduce and a fix",
      "Generally we apply patches to the latest release and then back-port. Therefore patches should be against 8.0.x.\n\nThe current patch changes import order and white space which a) makes the patch harder to review and b) those changes would need to be reverted before the patch was committed.",
      "Thanks for reviewing.\n\nI'll checkout the 8.0.x trunk and submit a new patch.\nI'll take care as well of the formatting (including imports).",
      "Sorry, I wanted to get the next 8.0.x release out so I have taken you patch and applied to to 8.0.x myself. In addition to the changes I mentioned previously, I also did the unit tests slightly differently to reduce the number of changes required.\n\nThis has been fixed in 8.0.x for 8.0.11 onwards and in 7.0.x for 7.0.56 onwards.",
      "Thank you very much Mark.\nI'll check your commit so that I can avoid such mistakes next time.",
      "REOPENing for Tomcat 7.\nAs discussed in \"Re r1617445\" on dev, the change trigger re-authentication for webapps that do not need it.\n\nThe fix in Tomcat 8 is r1617461 but it has not been backported to Tomcat 7 yet.",
      "Re-authentication patch back-ported from truk for 7.0.56 onwards.",
      "Re-reviewing the changes in Tomcat 7 (revisions r1617447 r1620827 and r1622328 ) I have a question.\n\nThere exists ActionCode.REQ_SSL_ATTRIBUTE.\n\nThe method org.apache.catalina.connector.Request.getAttribute() does\n\n  \"if (isSSLAttribute(name))\n      coyoteRequest.action(ActionCode.REQ_SSL_ATTRIBUTE, ...)\"\n\nThis action populates the \"javax.servlet.request.X509Certificate\" attribute (aka Globals.CERTIFICATES_ATTR).\n\nI mean that it is effectively equivalent to the new API of using ActionCode.REQ_SSL_CERTIFICATE with parameter Boolean.FALSE.\n\n> When using Tomcat SSL coyote connector, the request does not by default contain\n> the certificate chain under the key javax.servlet.request.X509Certificate\n>\n> The following coyote action must be invoked in order to extract the certificate\n> chain and enrich the request under the right key.\n\nIs the above really true? Why was the old code not working properly? Was all this fix really needed? Was the new API really needed?\n\nI did the following at tc7.0.x\\trunk:\nI reverted to the state before those fixes and updated the tests to their current versions:\n\nsvn up -r 1617446\ncd test/org/apache/tomcat/util/net\nsvn up TestClientCert.java\nsvn up TesterSupport.java\n\nThen I run test.entry=org.apache.tomcat.util.net.TestClientCert test with BIO, NIO, APR (java.7.home=JDK 7u67).\n\nResults are:\n1) With APR the tests were skipped,\n \"SKIPPED: SSL renegotiation has to be supported for this test\"\n2) With BIO and NIO the tests passed.\n\nSo it looks like there was no issue.",
      "Hi,\n\n(In reply to Konstantin Kolinko from comment #8)\n> Re-reviewing the changes in Tomcat 7 (revisions r1617447 r1620827 and\n> r1622328 ) I have a question.\n> \n> There exists ActionCode.REQ_SSL_ATTRIBUTE.\n> \n> The method org.apache.catalina.connector.Request.getAttribute() does\n> \n>   \"if (isSSLAttribute(name))\n>       coyoteRequest.action(ActionCode.REQ_SSL_ATTRIBUTE, ...)\"\n> \n> This action populates the \"javax.servlet.request.X509Certificate\" attribute\n> (aka Globals.CERTIFICATES_ATTR).\n\nRight the getAttribute invokes ActionCode.REQ_SSL_ATTRIBUTE, but the main difference between REQ_SSL_ATTRIBUTE and REQ_SSL_CERTIFICATE is the following invocation:\nsslO = sslSupport.getPeerCertificateChain(<force>);\n\nREQ_SSL_ATTRIBUTE --> force is false\nREQ_SSL_CERTIFICATE --> force is true\n\nREQ_SSL_ATTRIBUTE --> the certificate entry is never populated cause the certificate chain is never extracted (in the use case above)\n\n> \n> I mean that it is effectively equivalent to the new API of using\n> ActionCode.REQ_SSL_CERTIFICATE with parameter Boolean.FALSE.\n> \n\n\n> > When using Tomcat SSL coyote connector, the request does not by default contain\n> > the certificate chain under the key javax.servlet.request.X509Certificate\n> >\n> > The following coyote action must be invoked in order to extract the certificate\n> > chain and enrich the request under the right key.\n> \n> Is the above really true? Why was the old code not working properly? Was all\n> this fix really needed? Was the new API really needed?\n \nI created the test to reproduce before proposing a fix. So if now it does not fail anymore, there must be something else.\n\nDid the following with this revision\n$ svn info\nPath: .\nWorking Copy Root Path: /Users/jlmonteiro/devs/asf/tomcat/tc7.0.x/trunk\nURL: http://svn.apache.org/repos/asf/tomcat/tc7.0.x/trunk\nRepository Root: http://svn.apache.org/repos/asf\nRepository UUID: 13f79535-47bb-0310-9956-ffa450edef68\nRevision: 1616257\nNode Kind: directory\nSchedule: normal\nLast Changed Author: markt\nLast Changed Rev: 1615951\nLast Changed Date: 2014-08-05 17:50:13 +0200 (Mar, 05 ao\u00fb 2014)\n\nKept the test case portion of my patch and it actually still fails.\nSo either my test is wrong which is definitely possible, or I missed something.\n\nWhat do you think?",
      "I've dug a little more into this. The unit test setting clientAuth=\"want\" is hiding the fact that this still isn't quite right.\n\nSome new API is going to be necessary. That said, I'm not sure that the current API is exactly right either.",
      "Fixed in 8.0.x for 8.0.13 onwards and in 7.0.x for 7.0.56 onwards. In the end, no new API was required as I was able to get the info I needed vai an existing API."
    ],
    "creation_ts": "2014-08-07T12:16:52Z",
    "fixes": [
      56825
    ]
  },
  {
    "id": 44558,
    "summary": "cite attempted address when throwing \"Cannot assign requested address\"",
    "description": "SEVERE: Error starting endpoint\njava.net.BindException: Cannot assign requested address:2217\n        at org.apache.tomcat.util.net.JIoEndpoint.init(JIoEndpoint.java:501)\n        at org.apache.tomcat.util.net.JIoEndpoint.start(JIoEndpoint.java:515)\n        at org.apache.coyote.http11.Http11Protocol.start(Http11Protocol.java:203)\n        at org.apache.catalina.connector.Connector.start(Connector.java:1131)\n        at org.apache.catalina.core.StandardService.start(StandardService.java:531)\n        at org.apache.catalina.core.StandardServer.start(StandardServer.java:710)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java:578)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\nsaying which address a bind was attempted for would accelerate the error resolution quite a bit!",
    "comments": [
      "This has been fixed in trunk and proposed for 6.0.x",
      "This is fixed in 6.0.x and will be in 6.0.17 omwards.",
      "this is particularly important, since e.g. today's debian stable kernel upgrade failed to re-deploy secondary network addresses from my\n\n /etc/network/interfaces file\n\nafter re-boot.\nOnly a manual \n\n   sudo /etc/init.d/networking restart\n\nfixed this.\n\nHard to detect unless tomcat tells you that despite you configuring \n\n192.168.1.195 it tries to bind to 192.168.1.1 anyway...  :(",
      "see also Bug 46461"
    ],
    "creation_ts": "2008-03-07T07:41:10Z",
    "fixes": [
      44558
    ]
  },
  {
    "id": 55975,
    "summary": "Inconsistent escaping applied to V0 cookie values",
    "description": "If a V0 value contains a backslash or a dquote then it will be converted to a V1 cookie and transformed into a quoted-string. During that transformation checks are made for backslash and dquote characters but they are not escaped consistently.\n\nIf the value contains a dquote, then it will be escaped. For example, the value \u00aba\"b\u00bb results in\n  Set-Cookie: foo=\"a\\\"b\"; Version=1\n\nIf the value contains a backslash then it will not be escaped. For example, the value \u00aba\\b\u00bb results in\n  Set-Cookie: foo=\"a\\b\"; Version=1\nwhich means the backslash is then incorrectly escaping the \"b\" character.\n\nIf the value contains a dquote and a backslash, then the dquote will be escaped and the backslash will not so \u00aba\"b\\c\u00bb results in\n  Set-Cookie: foo=\"a\\\"b\\c\"; Version=1",
    "comments": [
      "Fixed in 8.0.8 for 8.0.9 onwards.",
      "In org.apache.tomcat.util.http.TestSetCookieSupportSeparatorsAllowed there are 3 tests that are marked with  @Ignore(\"bug 55975\")\n\nIf I remove the @Ignore on them, 1 test passes, 2 tests fail.\n\nOne that passes:\n\nTestcase: v1ValueContainsNonV0Separator took 0 sec\n\nTwo that fail:\n\nTestcase: v1ValueContainsBackslashAndQuote took 0,008 sec\n\tFAILED\nexpected:<foo=[\"a\\\"b\\\\c\"]; Version=1> but was:<foo=[a\"b\\c]; Version=1>\n\nTestcase: v1ValueContainsBackslash took 0 sec\n\tFAILED\nexpected:<foo=[\"a\\\\b\"]; Version=1> but was:<foo=[a\\b]; Version=1>",
      "This is fixed. Those bug references were wrong."
    ],
    "creation_ts": "2014-01-08T04:18:10Z",
    "fixes": [
      55975
    ]
  },
  {
    "id": 67675,
    "summary": "Tomcat and/or Java do not read encrypted private keys with DES-EDE3-CBC generated by openssl-req(1)",
    "description": "Generate a cert/key pair with OpenSSL:\nopenssl req -x509 -newkey rsa:4096 -keyout key.crt -out cert.crt -sha256 -days 5 -passout file:key-password\n\nThis key will have DES-EDE3-CBC as encryption algorithm by default (1.2.840.113549.3.7).\n\nLoad this:\n    <Connector port=\"20001\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\"\n               maxParameterCount=\"1000\"\n               sslImplementationName=\"org.apache.tomcat.util.net.jsse.JSSEImplementation\">\n        <SSLHostConfig>\n            <Certificate certificateKeyFile=\"conf/certs-localhost/key.crt\"\n                         certificateKeyPassword=\"...\"\n                         certificateFile=\"conf/certs-localhost/cert.crt\"\n                         certificateChainFile=\"conf/cacerts.crt\"\n                         type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\nTomcat will say:\n10-Oct-2023 21:02:12.966 SCHWERWIEGEND [Catalina-utility-1] org.apache.catalina.security.TLSCertificateReloadListener.checkCertificatesForRenewal [Connector[\"https-jsse-nio-20001\"]], TLS virtual host [_default_] reload of TLS configuration failed\n        java.lang.IllegalArgumentException: PBE parameter parsing error: expecting the object identifier for AES cipher\n                at org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:107)\n                at org.apache.tomcat.util.net.AbstractEndpoint.addSslHostConfig(AbstractEndpoint.java:280)\n                at org.apache.coyote.http11.AbstractHttp11Protocol.addSslHostConfig(AbstractHttp11Protocol.java:798)\n                at org.apache.catalina.security.TLSCertificateReloadListener.checkCertificatesForRenewal(TLSCertificateReloadListener.java:152)\n                at org.apache.catalina.security.TLSCertificateReloadListener.lifecycleEvent(TLSCertificateReloadListener.java:116)\n                at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:114)\n                at org.apache.catalina.core.StandardServer.lambda$startPeriodicLifecycleEvent$0(StandardServer.java:943)\n                at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n                at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n                at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n                at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n                at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n                at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                at java.lang.Thread.run(Thread.java:750)\n        Caused by: java.io.IOException: PBE parameter parsing error: expecting the object identifier for AES cipher\n                at com.sun.crypto.provider.PBES2Parameters.parseES(PBES2Parameters.java:381)\n                at com.sun.crypto.provider.PBES2Parameters.engineInit(PBES2Parameters.java:284)\n                at java.security.AlgorithmParameters.init(AlgorithmParameters.java:293)\n                at sun.security.x509.AlgorithmId.decodeParams(AlgorithmId.java:151)\n                at sun.security.x509.AlgorithmId.<init>(AlgorithmId.java:133)\n                at sun.security.x509.AlgorithmId.parse(AlgorithmId.java:413)\n                at javax.crypto.EncryptedPrivateKeyInfo.<init>(EncryptedPrivateKeyInfo.java:98)\n                at org.apache.tomcat.util.net.jsse.PEMFile$Part.toPrivateKey(PEMFile.java:245)\n                at org.apache.tomcat.util.net.jsse.PEMFile.<init>(PEMFile.java:178)\n                at org.apache.tomcat.util.net.jsse.PEMFile.<init>(PEMFile.java:107)\n                at org.apache.tomcat.util.net.SSLUtilBase.getKeyManagers(SSLUtilBase.java:355)\n                at org.apache.tomcat.util.net.SSLUtilBase.createSSLContext(SSLUtilBase.java:268)\n                at org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:105)\n                ... 14 more\n\nThe reason is that Java does not support non-AES encrypted keys at least in this class. I won't argue why OpenSSL does use this as default or whether 3DES is secure or not. Just stating facts.\n\nopenssl-req(1) does not provide the option to pass the algorithm, one must generate the key separately then invoke another command to create the pair.\n\nA few references on the topic:\n* https://bugs.openjdk.org/browse/JDK-8221936\n* https://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art050\n* https://stackoverflow.com/a/60020403/696632\n* https://security.stackexchange.com/q/92593/298430\n* https://github.com/openssl/openssl/issues/7313\n* https://github.com/openssl/openssl/issues/5258\n\nI think we have two options:\n(a) Maybe we can put more effort into our code to read such keys and pass on to JSSE\n(b) Document that this combination is not supported for technical reasons and how the user can solve this himself\n\nIn any case, there should be no surprise since this key is perfectly accepted by OpenSSL.",
    "comments": [
      "This applies from Java 8 to 21.",
      "Switched to:\nopenssl genrsa -out key.crt -aes128 -passout file:key-password 4096\nopenssl req -x509 -key key.crt -out cert.crt -sha256 -days 5 -passout file:key-password\n\nNow I see:\n11-Oct-2023 09:34:54.412 SCHWERWIEGEND [main] org.apache.catalina.util.LifecycleBase.handleSubClassException Failed to initialize component [Connector[\"https-jsse-nio-20001\"]]\n        org.apache.catalina.LifecycleException: Protocol handler initialization failed\n                at org.apache.catalina.connector.Connector.initInternal(Connector.java:1011)\n                at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:127)\n                at org.apache.catalina.core.StandardService.initInternal(StandardService.java:554)\n                at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:127)\n                at org.apache.catalina.core.StandardServer.initInternal(StandardServer.java:1039)\n                at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:127)\n                at org.apache.catalina.startup.Catalina.load(Catalina.java:724)\n                at org.apache.catalina.startup.Catalina.load(Catalina.java:746)\n                at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n                at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n                at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n                at java.lang.reflect.Method.invoke(Method.java:498)\n                at org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:307)\n                at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:477)\n        Caused by: java.lang.IllegalArgumentException: Cannot find any provider supporting AES-128-CBC\n                at org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:107)\n                at org.apache.tomcat.util.net.AbstractJsseEndpoint.initialiseSsl(AbstractJsseEndpoint.java:71)\n                at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:236)\n                at org.apache.tomcat.util.net.AbstractEndpoint.bindWithCleanup(AbstractEndpoint.java:1326)\n                at org.apache.tomcat.util.net.AbstractEndpoint.init(AbstractEndpoint.java:1339)\n                at org.apache.coyote.AbstractProtocol.init(AbstractProtocol.java:654)\n                at org.apache.coyote.http11.AbstractHttp11Protocol.init(AbstractHttp11Protocol.java:75)\n                at org.apache.catalina.connector.Connector.initInternal(Connector.java:1009)\n                ... 13 more\n        Caused by: java.security.NoSuchAlgorithmException: Cannot find any provider supporting AES-128-CBC\n                at javax.crypto.Cipher.getInstance(Cipher.java:543)\n                at org.apache.tomcat.util.net.jsse.PEMFile$Part.toPrivateKey(PEMFile.java:292)\n                at org.apache.tomcat.util.net.jsse.PEMFile.<init>(PEMFile.java:186)\n                at org.apache.tomcat.util.net.jsse.PEMFile.<init>(PEMFile.java:107)\n                at org.apache.tomcat.util.net.SSLUtilBase.getKeyManagers(SSLUtilBase.java:355)\n                at org.apache.tomcat.util.net.SSLUtilBase.createSSLContext(SSLUtilBase.java:268)\n                at org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:105)\n                ... 20 more\n\nSeems not to be sufficient. It needs now:\nmv key.crt key-rsa.crt\ncp key-password key-password.2\nopenssl pkcs8 -in key-rsa.crt -out key.crt -topk8 -passin file:key-password -outform pem -passout file:key-password.2\nopenssl req -x509 -key key.crt -out cert.crt -sha256 -days 5 -passout file:key-password\n\nQuite some obstacles for users...",
      "It seems that very few (no?) users are creating keys with pass-phrases this way as this isn't an issue that has been reported previously and we went through a phase of getting reports of unsupported formats when we added the \"try and use an in-memory keystore for everything\" code.\n\nI'm not adverse to trying to fix this as it is an OpenSSL default (which version by the way?). My only reservation at this point is how complex the fix might get. That depends on how much of the fix can use the standard Java APIs and how much we end up having to hand-craft.",
      "(In reply to Mark Thomas from comment #3)\n> It seems that very few (no?) users are creating keys with pass-phrases this\n> way as this isn't an issue that has been reported previously and we went\n> through a phase of getting reports of unsupported formats when we added the\n> \"try and use an in-memory keystore for everything\" code.\n\nWell, we say that people can use any combination, therefore I'd expect this either just to work or documented NOT to work.\n\n> I'm not adverse to trying to fix this as it is an OpenSSL default (which\n> version by the way?). My only reservation at this point is how complex the\n> fix might get. That depends on how much of the fix can use the standard Java\n> APIs and how much we end up having to hand-craft.\n\nThis applies to any OpenSSL version 1.1.1+ since DES3 is hardcoded and the cipher cannot be changed unless you do the separate commands.\nUnfortunately, I cannot judge what the effort is to implement this in Java, but at least we can figure out combos which do not work and document meanwhile.",
      "We may end up supporting a subset of the OpenSSL functionality (and documenting that).\n\nFor me the target is not to support everything OpenSSL does (although it would be great if we could) but to support the format of certificates that our users want to use. I suspect that is a smaller subset of what is possible with OpenSSL.",
      "It looks like handling OID 1.2.840.113549.3.7 is something I was working on a while back in my project on GitHub. When running this through my own code, I get some debug output saying something about \"Rainer's weird thing\" which must have been a PEM file from him that I was trying to decode.\n\nThis appears to be ANSI X9.52 which requires payment to get a copy of the specification, but I've been picking my way through it. I have it parsing everything correctly, but the decryption doesn't seem to be working as expected. It succeeds but then produces garbage plaintext.",
      "Is that in your pem-utils project?",
      "I have uncommitted work locally which can read the ASN.1 and perform the decryption, which does not fail (i.e. no exception is thrown).\n\nBut when interpreting the decrypted data as an ASN.1 stream, the tags don't make any sense. I haven't looked that hard at the outbound ASN.1 stream. My immediate assumption was that it was complete garbage, but it's possible there is a bug in the parser which is trying to interpret some byte as a tag-id when it should be something else.\n\nI'd be happy to look more into it.\n\nThe fun part with X9.52 is that it doesn't specify a padding method for the cipher. Using PKCS5Padding results in a BadPaddingException from the Cipher, and using Nopadding results in garbage ciphertext. :(",
      "I'm working on this now. I don't think I am as far forward as you. It would be useful if I could see that code you have so far.\n\nMy current thinking is that the PKCS8 branch in PEMFile is going to need to parse the input and figure out of this is a format Java can handle and if not, handle it  somehow.",
      "(In reply to Mark Thomas from comment #9)\n> I'm working on this now. I don't think I am as far forward as you. It would\n> be useful if I could see that code you have so far.\n> \n> My current thinking is that the PKCS8 branch in PEMFile is going to need to\n> parse the input and figure out of this is a format Java can handle and if\n> not, handle it  somehow.\n\nMark, are my instructions sufficient to reproduce the issue on your end?",
      "Yes. The steps to reproduce this worked perfectly. Thanks.\n\nCurrently working through the ASN.1 and relevant RFCs to see what we have and if I can get Java to work with it.",
      "My current assessment is that it is possible to handle this. We are going to need to do a little more by hand. I think some refactoring will be required for the ASN.1 parser to make it more robust.",
      "(In reply to Mark Thomas from comment #12)\n> I think some refactoring will be required\n> for the ASN.1 parser to make it more robust.\n\nI managed to do OCSP using it ( https://github.com/apache/tomcat/blob/main/modules/openssl-foreign/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLEngine.java#L1327 ), but it really felt more like an accident !",
      "I have this working with the current test cases and a default OpenSSL self-signed key as per the original report.\n\nThe code needs to be cleaned up rather so I am currently expecting to commit the fix early next week.",
      "(In reply to Mark Thomas from comment #14)\n> I have this working with the current test cases and a default OpenSSL\n> self-signed key as per the original report.\n> \n> The code needs to be cleaned up rather so I am currently expecting to commit\n> the fix early next week.\n\nMagic, if you want me to test it with real certs before you merge just let me know and point me to the branch or go with a PR on GH.",
      "See https://github.com/apache/tomcat/pull/674\n\nThat should support any cert the current code supports plus the OpenSSL defaults.\n\nIt is possible there are other combinations that need to be supported. It should be easy to add those as required.",
      "Fixed in:\n- 11.0.x for 11.0.0-M14 onwards\n- 10.1.x for 10.1.16 onwards\n-  9.0.x for  9.0.83 onwards\n-  8.5.x for  8.5.96 onwards",
      "Is it expected for PEM cert/key created with OpenSSL 1.0.2zh (or any 1.0.2) to stop working after this change? It seems to work fine with items generated through OpenSSL 1.1.1. Here's an example of the command we use:\nopenssl req -new -sha256 -x509 -out servercert.pem -keyout serverkey.pem -subj /\"/CN=localhost\" -days 90 -passout pass:test\n\n\nI'm seeing the following error after upgrading to 9.0.83:\n13-Dec-2023 02:04:34.337 SEVERE [main] org.apache.catalina.util.LifecycleBase.handleSubClassException Failed to initialize component [Connector[\"https-openssl-apr-443\"]]\n\torg.apache.catalina.LifecycleException: Protocol handler initialization failed\n\t\tat org.apache.catalina.connector.Connector.initInternal(Connector.java:1011)\n\t\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:127)\n\t\tat org.apache.catalina.core.StandardService.initInternal(StandardService.java:554)\n\t\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:127)\n\t\tat org.apache.catalina.core.StandardServer.initInternal(StandardServer.java:1039)\n\t\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:127)\n\t\tat org.apache.catalina.startup.Catalina.load(Catalina.java:724)\n\t\tat org.apache.catalina.startup.Catalina.load(Catalina.java:746)\n\t\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\t\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\t\tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\n\t\tat org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:307)\n\t\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:477)\n\tCaused by: java.lang.IllegalArgumentException: The pseudo random function with DER encoded OID of [2a864886f70d0307] was not recognised\n\t\tat org.apache.tomcat.util.net.AprEndpoint.createSSLContext(AprEndpoint.java:467)\n\t\tat org.apache.tomcat.util.net.AprEndpoint.bind(AprEndpoint.java:433)\n\t\tat org.apache.tomcat.util.net.AbstractEndpoint.bindWithCleanup(AbstractEndpoint.java:1332)\n\t\tat org.apache.tomcat.util.net.AbstractEndpoint.init(AbstractEndpoint.java:1345)\n\t\tat org.apache.coyote.AbstractProtocol.init(AbstractProtocol.java:654)\n\t\tat org.apache.coyote.http11.AbstractHttp11Protocol.init(AbstractHttp11Protocol.java:75)\n\t\tat org.apache.catalina.connector.Connector.initInternal(Connector.java:1009)\n\t\t... 13 more\n\tCaused by: java.security.NoSuchAlgorithmException: The pseudo random function with DER encoded OID of [2a864886f70d0307] was not recognised\n\t\tat org.apache.tomcat.util.net.jsse.PEMFile$Part.toPrivateKey(PEMFile.java:411)\n\t\tat org.apache.tomcat.util.net.jsse.PEMFile.<init>(PEMFile.java:213)\n\t\tat org.apache.tomcat.util.net.jsse.PEMFile.<init>(PEMFile.java:141)\n\t\tat org.apache.tomcat.util.net.SSLUtilBase.getKeyManagers(SSLUtilBase.java:355)\n\t\tat org.apache.tomcat.util.net.openssl.OpenSSLUtil.getKeyManagers(OpenSSLUtil.java:108)\n\t\tat org.apache.tomcat.util.net.SSLUtilBase.createSSLContext(SSLUtilBase.java:268)\n\t\tat org.apache.tomcat.util.net.AprEndpoint.createSSLContext(AprEndpoint.java:465)\n\t\t... 19 more\n13-Dec-2023 02:04:34.352 INFO [main] org.apache.catalina.startup.Catalina.load Server initialization in [2478] milliseconds\n\nThe thrown error seems to have been added with this fix and that's why I'm writing here. That's my first post so I'm sorry if I should be opening a new report instead (couldn't find anything specific in the guidelines).",
      "(In reply to ggar from comment #18)\n> Is it expected for PEM cert/key created with OpenSSL 1.0.2zh (or any 1.0.2)\n> to stop working after this change? It seems to work fine with items\n> generated through OpenSSL 1.1.1. Here's an example of the command we use:\n> openssl req -new -sha256 -x509 -out servercert.pem -keyout serverkey.pem\n> -subj /\"/CN=localhost\" -days 90 -passout pass:test\n> \n> \n> I'm seeing the following error after upgrading to 9.0.83:\n> 13-Dec-2023 02:04:34.337 SEVERE [main]\n> org.apache.catalina.util.LifecycleBase.handleSubClassException Failed to\n> initialize component [Connector[\"https-openssl-apr-443\"]]\n> \torg.apache.catalina.LifecycleException: Protocol handler initialization\n> failed\n> \t\tat\n> org.apache.catalina.connector.Connector.initInternal(Connector.java:1011)\n> \t\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:127)\n> \t\tat\n> org.apache.catalina.core.StandardService.initInternal(StandardService.java:\n> 554)\n> \t\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:127)\n> \t\tat\n> org.apache.catalina.core.StandardServer.initInternal(StandardServer.java:\n> 1039)\n> \t\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:127)\n> \t\tat org.apache.catalina.startup.Catalina.load(Catalina.java:724)\n> \t\tat org.apache.catalina.startup.Catalina.load(Catalina.java:746)\n> \t\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\n> Method)\n> \t\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown\n> Source)\n> \t\tat\n> java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown\n> Source)\n> \t\tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\n> \t\tat org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:307)\n> \t\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:477)\n> \tCaused by: java.lang.IllegalArgumentException: The pseudo random function\n> with DER encoded OID of [2a864886f70d0307] was not recognised\n> \t\tat\n> org.apache.tomcat.util.net.AprEndpoint.createSSLContext(AprEndpoint.java:467)\n> \t\tat org.apache.tomcat.util.net.AprEndpoint.bind(AprEndpoint.java:433)\n> \t\tat\n> org.apache.tomcat.util.net.AbstractEndpoint.bindWithCleanup(AbstractEndpoint.\n> java:1332)\n> \t\tat\n> org.apache.tomcat.util.net.AbstractEndpoint.init(AbstractEndpoint.java:1345)\n> \t\tat org.apache.coyote.AbstractProtocol.init(AbstractProtocol.java:654)\n> \t\tat\n> org.apache.coyote.http11.AbstractHttp11Protocol.init(AbstractHttp11Protocol.\n> java:75)\n> \t\tat\n> org.apache.catalina.connector.Connector.initInternal(Connector.java:1009)\n> \t\t... 13 more\n> \tCaused by: java.security.NoSuchAlgorithmException: The pseudo random\n> function with DER encoded OID of [2a864886f70d0307] was not recognised\n> \t\tat\n> org.apache.tomcat.util.net.jsse.PEMFile$Part.toPrivateKey(PEMFile.java:411)\n> \t\tat org.apache.tomcat.util.net.jsse.PEMFile.<init>(PEMFile.java:213)\n> \t\tat org.apache.tomcat.util.net.jsse.PEMFile.<init>(PEMFile.java:141)\n> \t\tat\n> org.apache.tomcat.util.net.SSLUtilBase.getKeyManagers(SSLUtilBase.java:355)\n> \t\tat\n> org.apache.tomcat.util.net.openssl.OpenSSLUtil.getKeyManagers(OpenSSLUtil.\n> java:108)\n> \t\tat\n> org.apache.tomcat.util.net.SSLUtilBase.createSSLContext(SSLUtilBase.java:268)\n> \t\tat\n> org.apache.tomcat.util.net.AprEndpoint.createSSLContext(AprEndpoint.java:465)\n> \t\t... 19 more\n> 13-Dec-2023 02:04:34.352 INFO [main]\n> org.apache.catalina.startup.Catalina.load Server initialization in [2478]\n> milliseconds\n> \n> The thrown error seems to have been added with this fix and that's why I'm\n> writing here. That's my first post so I'm sorry if I should be opening a new\n> report instead (couldn't find anything specific in the guidelines).\n\nLikely a regression, but I wonder whether we should care about keys from OpenSSL 1.0.2 at all. It has been dead for a long time now. For the sake of completeness, please file an new issue and upload the faulty material. One needs to look at the ASN.1 dump compared to 1.1.1.",
      "If I have decoded it correctly, the OID is 1.2.840.113549.3.7\n\nhttp://oid-info.com/get/1.2.840.113549.3.7\n\nI need to look into why Tomcat isn't able to handle this.",
      "The algorithm is being read as the pseudo random function and failing.\n\nI need to see if I can find (or build) an OpenSSL 1.0.2 binary.",
      "(In reply to Mark Thomas from comment #21)\n> The algorithm is being read as the pseudo random function and failing.\n> \n> I need to see if I can find (or build) an OpenSSL 1.0.2 binary.\n\nMark, there are several links to precompiled ones on the OpenSSL wiki (https://wiki.openssl.org/index.php/Binaries). I was able to reproduce the issue with the ones at https://indy.fulgan.com/SSL/. Not sure if you can use those. I saw that you reopened this bug, should I create a new one as Michael suggested or there's no need?\n\nAnd I agree with what Michael said - 1.0.2 is very old and maybe not worth supporting. We already started moving towards something newer but since we might have people out there with the \"broken\" certs we wanted to make sure this change was here to stay.",
      "Tomcat ships OpenSSL binaries are part of the Tomcat Native distribution. I need to go back a bit but we have 1.0.2 binaries.\n\nFor now, this looks like a regression so I'm happy handling it here.\n\nWhile 1.0.2 has been EOL for a while it would not surprise me at all to find lots of 1.0.2 generated keys and certs still in use.",
      "Confirmed. It is a regression. OpenSSL 1.0.2 doesn't specify the PRF so the default should apply.",
      "That was fast! Does this mean that it will be fixed in an upcoming release? By the way, thank you for being so responsive and reproducing this so quickly. (In reply to Mark Thomas from comment #24)\n> Confirmed. It is a regression. OpenSSL 1.0.2 doesn't specify the PRF so the\n> default should apply.\n\nThat was fast! Does this mean that it will be fixed in an upcoming release? By the way, thank you for being so responsive and reproducing this so quickly.",
      "Yes, this should be fixed for the next release round which is currently scheduled for January.",
      "(In reply to Mark Thomas from comment #23)\n> While 1.0.2 has been EOL for a while it would not surprise me at all to find\n> lots of 1.0.2 generated keys and certs still in use.\n\n+1\n\nThe issue is not whether or not anyone is still using OpenSSL 1.0.2 today, but whether or not anyone still have keys and certs when when they /were/ using it in the past.",
      "(In reply to Christopher Schultz from comment #27)\n> (In reply to Mark Thomas from comment #23)\n> > While 1.0.2 has been EOL for a while it would not surprise me at all to find\n> > lots of 1.0.2 generated keys and certs still in use.\n> \n> +1\n> \n> The issue is not whether or not anyone is still using OpenSSL 1.0.2 today,\n> but whether or not anyone still have keys and certs when when they /were/\n> using it in the past.\n\nThat would also mean that they are years old and still valid...",
      "If the keys were long to start with, it isn't impossible that they would still be in use.\n\nRegression fixed in:\n- 11.0.x for 11.0.0-M16 onwards\n- 10.1.x for 10.1.18 onwards\n-  9.0.x for  9.0.85 onwards\n-  8.5.x for  8.5.98 onwards",
      "(In reply to Michael Osipov from comment #28)\n> (In reply to Christopher Schultz from comment #27)\n> > The issue is not whether or not anyone is still using OpenSSL 1.0.2 today,\n> > but whether or not anyone still have keys and certs when when they /were/\n> > using it in the past.\n> \n> That would also mean that they are years old and still valid...\n\nSure, but there is nothing wrong with that.\n\nWhat if a CA used OpenSSL 1.0.2 in 2019 (the year of the last release in that line) to mint their most-recent intermediate certificate(s)? Intermediate certificates are typically valid for 10 years or so.\n\nOn the other hand, I think this is only a problem for keys and not certificates, and it's very unlikely that Tomcat would be used to handle CA key material. Those keys ought to be in HSMs and only used for signing, not for typical web traffic.\n\nSince it's already fixed (thanks, Mark!) this is an academic conversation, but I do still think that supporting these types of files is reasonable.",
      "Hey, is there a scheduled date for the January release?"
    ],
    "creation_ts": "2023-10-11T07:16:52Z",
    "fixes": [
      67675
    ]
  },
  {
    "id": 40518,
    "summary": "The message key \"requestListenerValve.requestInit\" has not be referred to correctly.",
    "description": "The bug is:\n\nAn illegal message is output to the log when the listener application that \nimplements ServletRequestListener interface throws RuntimeException from the \nrequestInitialized method or the requestDestroyed method.\n\nmessage: \"Cannot find message associated with key \nrequestListenerValve.requestInit\"\n\ncause: The key exists in the properties \nfile \"org.apache.catalina.valves.LocalStrings.properties\", but the logic refers \nother properties file \"org.apache.catalina.core.LocalStrings.properties\"",
    "comments": [
      "Fix in svn and will be included in 5.5.21 onwards. Thansk for the report.",
      "Spam removal. Sorry for the noise."
    ],
    "creation_ts": "2006-09-15T09:13:40Z",
    "fixes": [
      40518
    ]
  },
  {
    "id": 51912,
    "summary": "IOOB exception in InternalNioInputBuffer when debug logging is enabled",
    "description": "I encountered the following while testing 7.0.22 RC.\n\nTo reproduce:\n1. Replace conf/logging.properties with the following:\n===============\nhandlers = 1catalina.org.apache.juli.FileHandler\n.handlers = 1catalina.org.apache.juli.FileHandler\n\n1catalina.org.apache.juli.FileHandler.level = FINE\n1catalina.org.apache.juli.FileHandler.directory = ${catalina.base}/logs\n1catalina.org.apache.juli.FileHandler.prefix = catalina.\n1catalina.org.apache.juli.FileHandler.bufferSize=20000\n\n.level=FINE\n===============\nNote that level=FINE enables debug logging.\n\n2. Run testsuite for NIO + org.apache.coyote.http11.TestInternalInputBuffer\nby adding the following to build.properties:\nexecute.test.bio=false\nexecute.test.nio=true\nexecute.test.apr=false\ntest.entry=org.apache.coyote.http11.TestInternalInputBuffer\n\n3. The test fails:\n==============\nTestsuite: org.apache.coyote.http11.TestInternalInputBuffer\nTests run: 7, Failures: 2, Errors: 0, Time elapsed: 50,357 sec\n\nTestcase: testBug48839 took 9,594 sec\nTestcase: testBug51557NoColon took 1,217 sec\n\tFAILED\n\njunit.framework.AssertionFailedError: \n\tat org.apache.coyote.http11.TestInternalInputBuffer.testBug51557NoColon(TestInternalInputBuffer.java:137)\n\nTestcase: testBug51557Separators took 22,807 sec\nTestcase: testBug51557Ctl took 13,104 sec\n\tFAILED\n\njunit.framework.AssertionFailedError: \n\tat org.apache.coyote.http11.TestInternalInputBuffer.doTestBug51557Char(TestInternalInputBuffer.java:216)\n\tat org.apache.coyote.http11.TestInternalInputBuffer.testBug51557Ctl(TestInternalInputBuffer.java:160)\n\nTestcase: testBug51557Continuation took 1,248 sec\nTestcase: testBug51557BoundaryStart took 1,185 sec\nTestcase: testBug51557BoundaryEnd took 1,186 sec\n==============\n\n4. It is the only test in testsuite that is failing in this logging configuration. The rest of testsuite did run successfully.\nThis test also succeeds when it is run with BIO or APR. Only NIO fails.\n\n\nIn the log file the following exception occurs 3 times:\n==============\n28.09.2011 17:50:38 org.apache.coyote.http11.AbstractHttp11Processor process\nFINE: Error parsing HTTP request header\njava.lang.StringIndexOutOfBoundsException: String index out of range: -40\n\tat java.lang.String.checkBounds(String.java:397)\n\tat java.lang.String.<init>(String.java:482)\n\tat org.apache.coyote.http11.InternalNioInputBuffer.skipLine(InternalNioInputBuffer.java:672)\n\tat org.apache.coyote.http11.InternalNioInputBuffer.parseHeader(InternalNioInputBuffer.java:526)\n\tat org.apache.coyote.http11.InternalNioInputBuffer.parseHeaders(InternalNioInputBuffer.java:435)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:905)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1550)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n\tat java.lang.Thread.run(Thread.java:662)\n==============\n\nIt is caused by debug logging in\norg.apache.coyote.http11.InternalNioInputBuffer.skipLine(InternalNioInputBuffer.java:672)\n\n671        if (log.isDebugEnabled()) {\n672            log.debug(sm.getString(\"iib.invalidheader\", new String(buf,\n673                    headerData.start,\n674                    headerData.lastSignificantChar - headerData.start + 1,\n675                    DEFAULT_CHARSET)));\n676        }\n\nInternalInputBuffer and InternalAprInputBuffer have similar debug logging in their skipLine() methods, but they do not fail.",
    "comments": [
      "Fixed in trunk and 7.0.x (r1177256) and will be in 7.0.23.\n\nReassigning to Tomcat 6, as I think its InternalNioInputBuffer.parseHeader should be aligned with TC7.",
      "It has been almost nine months. Are you going to propose a patch for this? If not, lets close this as fixed in 7.0.x.",
      "No proposal was forthcoming for 6.0.x"
    ],
    "creation_ts": "2011-09-28T14:22:54Z",
    "fixes": [
      51912
    ]
  },
  {
    "id": 49464,
    "summary": "DefaultServlet and CharacterEncoding",
    "description": "DefaultServlet doesn't set a character encoding. As per spec the encoding of the page is asssumed to be iso-8859-1. \n\nIf files are served with a different encoding, this can lead to display problems in the browser.\n\nThe problem has been discussed in http://old.nabble.com/DefaultServlet-doesn%27t-set-charset-td18893115.html#a18929527\nIn http://marc.info/?l=tomcat-user&m=127678462332564&w=2 another component was added - namely mod_jk/httpd - which set a character encoding on its own, if no character set was set previously.\n\nThere are at least three different solutions for this problem. \n\nOne of them is extending DefaultServlet to be configurable to include a charset in the response. A patch has been proposed by Markus Sch\u00f6nhaber (MKS) and can be found at\n  http://www.ddt-consult.de/sendCharset.patch\n\nThe two other solutions which were discussed are\n * configure httpd/mod_jk properly by adding AddDefaultCharset ENCODING to the right location/host\n * Use a filter to set the character encoding\n\nAll in all I still think it would be a good idea to explicitly set the wanted encoding in the first possible place, which is the DefaultServlet.",
    "comments": [
      "I've been digging into this and I think the situation is a little more complicated.\n\nThere are three scenarios to consider:\na) directly returning a file\nb) including a file into an output stream\nc) including a file into a writer\n\na) is the simple case. We can set the character encoding to be the effective value of fileEncoding (i.e. the value or system default it not set)\n\nb) and c) are trickier. In both cases we need to read the input as characters (conversion form bytes via fileEncoding). Then for b) we need to write it out again using whatever output encoding has been set on the response. c) we can just write the characters and let the write handle it.\n\nI think that covers all the cases although some edge cases may emerge as I dig into this.\n\nAs far as I can see this can all be done without any additional configuration options. I'm not so sure it can be done without changing some method signatures. While those methods are protected and internal to Tomcat, the default servlet is something that tend to get 'tweaked' by users so we'll need to tread carefully if we back-port any of this.",
      "(In reply to Mark Thomas from comment #1)\n> I've been digging into this and I think the situation is a little more\n> complicated.\n> \n> There are three scenarios to consider:\n> a) directly returning a file\n> b) including a file into an output stream\n> c) including a file into a writer\n> \n> a) is the simple case. We can set the character encoding to be the effective\n> value of fileEncoding (i.e. the value or system default it not set)\n\nWhat if web.xml contains a <mime-type> which includes a charset parameter? I think respecting that parameter would be good if possible.\n\n> b) and c) are trickier. In both cases we need to read the input as\n> characters (conversion form bytes via fileEncoding). Then for b) we need to\n> write it out again using whatever output encoding has been set on the\n> response. c) we can just write the characters and let the write handle it.\n\nI'm assuming that binary file types are basically out-of-scope here, right?\n\n> I think that covers all the cases although some edge cases may emerge as I\n> dig into this.\n> \n> As far as I can see this can all be done without any additional\n> configuration options. I'm not so sure it can be done without changing some\n> method signatures. While those methods are protected and internal to Tomcat,\n> the default servlet is something that tend to get 'tweaked' by users so\n> we'll need to tread carefully if we back-port any of this.\n\n+1",
      "If the response character encoding is set (via any of the available means to do so) then the patch will respect that.\n\nCorrect, binary files are out of scope. I'll double check the patch doesn't impact them.\n\nFixed in:\n- trunk for 9.0.0.M23 onwards\n- 8.5.x for 8.5.17 onwards\n- 8.0.x for 8.0.46 onwards\n- 7.0.x for 7.0.80 onwards",
      "Whoops. Binary files are caught in this. That needs fixing. Thanks for the hint.",
      "And fixed. Same versions as above.",
      "Re-opening. The first attempt at fixing this triggered a series of regressions. The fix has therefore been reverted in 7.0.x, 8.0.x and 8.5.x.\n\nThis needs more careful consideration. The end result may be that it is only fixed for 9.0.x",
      "With a significant increase in the number of unit tests and a number of additional regressions fixed, this is now fixed again for 9.0.x.\n\nGiven the history of regressions, I do not propose back-porting this to earlier versions as this time.",
      "*** Bug 62971 has been marked as a duplicate of this bug. ***",
      "It has been almost 2 years without further regressions so I have back-ported this to 8.5.x for 8.5.43 onwards."
    ],
    "creation_ts": "2010-06-18T08:13:17Z",
    "fixes": [
      49464
    ]
  },
  {
    "id": 68068,
    "summary": "Hotspot in Ast*Nodes: itable method calls",
    "description": "In-depth profiling of a high-volume, performance-sensitive application identified an avoidable use of an itable method call, a.k.a. invoking an interface method rather than a static or virtual method.  The performance impact is well described at https://stackoverflow.com/questions/21679998/does-it-matter-for-runtime-performance-if-a-method-is-called-by-its-explicit-typ#:~:text=invokeinterface%20is%20known%20to%20be,to%20prefer%20invokevirtual%20to%20invokeinterface%20\n\nThe underlying problem is calls to Node.getValue(), such as in AstAnd.getValue():\n\nObject obj = children[0].getValue(ctx);\n\nwhere \"children\" is \"Node[]\".  There are roughly 30 distinct implementations of Node and no JIT is capable of optimizing those away.\n\nFortunately, all 30 of the Node implementation extends the class SimpleNode.  Changing the references to Node to use SimpleNode will enable JVMs to instead use invokevirtual.\n\nOur tools struggle to measure the actual impact of this issue, because it occurs in small amounts in so many different code paths, and occurs repeatedly in each layer of a nested AST evaluation.  My best guess is 0.2% cpu, directly on the latency critical path.\n\nI hope the fix is as simple as it seems.  :)",
    "comments": [
      "Perhaps a simpler solution is to change Node from an interface to an abstract class, then have SimpleNode extends Node rather than implement it.  This achieves the same ends with more targeted and isolated changes.",
      "Created attachment 39353\nProposed patch - Tomcat 11 - v1\n\nThis is complicated by Node being generated code.\n\nSince there isn't a test to validate the fix, is the attached what is being requested?",
      "Yes, that's perfect, thanks!",
      "Fixed in:\n- 11.0.x for 11.0.0-M14 onwards\n- 10.1.x for 10.1.16 onwards\n-  9.0.x for  9.0.83 onwards\n-  8.5.x for  8.5.96 onwards",
      "Production results confirm a small improvement - greater than zero but not enormous.  Sorry, I'm not able to provide hard numbers because of the huge number of distinct code paths."
    ],
    "creation_ts": "2023-11-03T17:39:33Z",
    "fixes": [
      68068
    ]
  },
  {
    "id": 34509,
    "summary": "tag names that are xml:Name but not java identifier are not accepted",
    "description": "According to the JSP 2.0 specification, custom tag prefix and name should be \nof the type XML:Name. However, for Tomcat 5.5.8, if the name is not a legal \njava identifier, then a compilation error occurs. For instance, Tomcat won't \naccept Da~te`T#ag as a legal name for the Tag.",
    "comments": [
      "I see the JSP spec uses j2ee:tld-canonical-nameType, which says it's the same as\nxsd:nmtoken, which according to\nhttp://www.w3.org/TR/2000/WD-xml-2e-20000814#NT-Nmtoken should allow these\nvarious characters.  So this does seem to be a real issue, but I don't have the\ntime to fix it right now, and I think the magnitude of the patch required might\nbe big...",
      "This has been fixed in svn and will be included in 5.5.20 onwards",
      "HTTP Status 500 - \n\n--------------------------------------------------------------------------------\n\ntype Exception report\n\nmessage \n\ndescription The server encountered an internal error () that prevented it from \nfulfilling this request.\n\nexception \n\njavax.servlet.ServletException: fiid is null in html_header.jsp\n\torg.apache.jsp.jsp.displaycriticalerror_jsp._jspService\n(org.apache.jsp.jsp.displaycriticalerror_jsp:274)\n\torg.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:97)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n\torg.apache.jasper.servlet.JspServletWrapper.service\n(JspServletWrapper.java:322)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:291)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:241)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n\tcom.premier.ofa.servlets.LoggedHttpServlet.forwardToPage\n(LoggedHttpServlet.java:399)\n\tcom.premier.ofa.servlets.TransactionProcessorServlet.forwardToErrorPage\n(TransactionProcessorServlet.java:1137)\n\tcom.premier.ofa.servlets.TransactionProcessorServlet.forwardToErrorPage\n(TransactionProcessorServlet.java:1124)\n\tcom.premier.ofa.servlets.TransactionProcessorServlet.doGet\n(TransactionProcessorServlet.java:687)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:689)\n\tcom.premier.ofa.servlets.LoggedHttpServlet.service\n(LoggedHttpServlet.java:157)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n\n\nnote The full stack trace of the root cause is available in the Apache \nTomcat/5.5.9 logs.\n\n\n--------------------------------------------------------------------------------\n\nApache Tomcat/5.5.9",
      "See #2"
    ],
    "creation_ts": "2005-04-19T00:45:33Z",
    "fixes": [
      34509
    ]
  },
  {
    "id": 39689,
    "summary": "Tomcat Server Side Includes (SSI) do not work with single quotes",
    "description": "In http://httpd.apache.org/docs/2.0/en/mod/mod_include.html (apache 2.0 SSI\ndocumentation) you can read:\n\n\"The value [of an attribute value] will often be enclosed in double quotes, but\nsingle quotes (') and backticks (`) are also possible.\"\n\nTomcat SSI support is suposed to implement the same SSI directives as Apache.\nUnfortunately, it is not possible to enclose attribute values in single quotes.\n\nThank you very much for reading this bug report.",
    "comments": [
      "Please submit a test case that demonstrates this bug, so that we can investigate\nthe issue further.  Thank you.",
      "Fixed in SVN. Will be included in 5.5.18+"
    ],
    "creation_ts": "2006-05-31T07:46:22Z",
    "fixes": [
      39689
    ]
  },
  {
    "id": 68026,
    "summary": "org.apache.tomcat.buf.MessageBytes.toString() is no longuer cached",
    "description": "Created attachment 39323\nJava Flight Recording with spring boot application\n\nSince fixing bug 66196, the org.apache.tomcat.buf.MessageBytes.toString() is no longuer cached.\n\nFor one tomcat request, if a multiple calls (by example to this method, org.apache.catalina.connector.RequestFacade.getMethod() by springframework) is processed, a memory overconsumption is observed\n\nMaybe just fix with this ? \n\n\n```\n    public String toString() {\n        switch (type) {\n            case T_NULL:\n            case T_STR:\n                // No conversion required\n                break;\n            case T_BYTES:\n                // strValue = byteC.toString(); #OLD\n                setString(byteC.toString());\n                break;\n            case T_CHARS:\n                // strValue = charC.toString(); #OLD\n                setString(charC.toString());\n                break;\n        }\n\n        return strValue;\n    }\n```\n\nSame problem with tomcat \n-  >= 10.1.0\n-  >= 9.0.71\n-  >= 8.5.85",
    "comments": [
      "Actually, the change that actually modified the behavior is the fix for bug 66627 ( https://github.com/apache/tomcat/commit/897931b68c89788eeb71398c8e6dfda1d5bae161 ).\n\nObviously the entire thing is not going to be reverted. Basically it is now up to the caller to decide to call MessageBytes.setString manually as needed, to avoid repeated conversions that could cause some GC. Since this is annoying boilerplate code, maybe a new  utility toString method could be introduced (toStringType ?) and update callers as needed.",
      "Maybe, it's possible to cache in the caller ?\n\nhttps://github.com/apache/tomcat/blob/main/java/org/apache/catalina/connector/Request.java\n\nFor all coyoteRequest.*.toString() calls ?",
      "Or maybe just update with this code to keep the behaviour described in the getType() Javadoc ?\n\n    public void setBytes(byte[] b, int off, int len) {\n        byteC.setBytes(b, off, len);\n        type = T_BYTES;\n        hasHashCode = false;\n        hasLongValue = false;\n        strValue = byteC.toString();\n    }\n\n    /**\n     * Sets the content to be a char[]\n     *\n     * @param c   the chars\n     * @param off the start offset of the chars\n     * @param len the length of the chars\n     */\n    public void setChars(char[] c, int off, int len) {\n        charC.setChars(c, off, len);\n        type = T_CHARS;\n        hasHashCode = false;\n        hasLongValue = false;\n        strValue = charC.toString();\n    }\n\n\n    // -------------------- Conversion and getters --------------------\n\n    /**\n     * Compute the string value.\n     *\n     * @return the string\n     */\n    @Override\n    public String toString() {\n        return strValue;\n    }",
      "Changes to the behaviour of MessageBytes has previously introduced subtle bugs. I am therefore extremely reluctant to make the changes suggested in comment #0 or comment #3.\n\nCaching the values as suggested in comment #2 creates the risk that changes made to the underlying MessageBytes instance will not be seen. I don't think that is the case with request method but I'd prefer a more general solution.\n\nR\u00e9my's suggestion in comment #1 should work. I'll implement that for request method. I'll look at the other MessageByte usages in coyote request and may update some of the other usages as well.",
      "Fixed in:\n- 11.0.x for 11.0.0-M14 onwards\n- 10.1.x for 10.1.16 onwards\n-  9.0.x for  9.0.83 onwards\n-  8.5.x for  8.5.96 onwards",
      "Thanks for your quick fix.\n\nBut if you call toStringType() and after toString() method, your toString() method has not the same result because type attribute has been updated. Maybe it's necessary to take a specific cache in toStringType() without call setString() method ?\n\n\nOn the other hand, this should fix the memory consumption problem."
    ],
    "creation_ts": "2023-10-30T16:59:12Z",
    "fixes": [
      68026
    ]
  },
  {
    "id": 62628,
    "summary": "Async servlet over HTTP/2 non-blocking write does not work if client sets custom SETTINGS_INITIAL_WINDOW_SIZE",
    "description": "Same test cases as in https://bz.apache.org/bugzilla/show_bug.cgi?id=62620\n\nRun nghttp client with commands\n$ nghttp \"http://localhost:8080/largeasyncwrite\" -v --window-bits=17\n$ nghttp \"http://localhost:8080/largeasyncwrite2\" -v --window-bits=17\n\nNote: Test case 2. had a bug at line 55:\n\"while (ready = output.isReady() && i.get() <= 3) {\"\nshould be\n\"while ((ready = output.isReady()) && i.get() <= 3) {\"",
    "comments": [
      "Please retest with latest 9.0.x built from svn.",
      "Mark, my test is based on\ncommit 36eba2e863abc943a8a79898ff2ae553fc49139b (HEAD -> trunk, origin/trunk, origin/HEAD)\nAuthor: Mark Thomas <markt@apache.org>\nDate:   Wed Aug 15 15:25:17 2018 +0000\n\n    Add missing check\n    \n    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1838107 13f79535-47bb-0310-9956-ffa450edef68",
      "Thanks. I've added a 9.0.x version to Bugzilla and set it for this issue.",
      "Fixed in:\n- trunk for 9.0.12 onwards\n- 8.5.x for 8.5.34 onwards\n\nThanks again for the bug report.",
      "Thanks a lot for the fix! Now almost all my integrated tests passed."
    ],
    "creation_ts": "2018-08-15T20:17:29Z",
    "fixes": [
      62628
    ]
  },
  {
    "id": 52760,
    "summary": "Mime type for javascript incorrect  in documentation",
    "description": "The mime type for javascript for the expires by type filter is documented as text/javascript.  Tomcat actually serves javascript with the mime-type application/javascript.   \n\n\nhttp://tomcat.apache.org/tomcat-7.0-doc/config/filter.html\n\nSays\n <init-param>\n    <param-name>ExpiresByType text/javascript</param-name>\n    <param-value>access plus 1 month</param-value>\n </init-param>\n\nShould say\n\n <init-param>\n    <param-name>ExpiresByType application/javascript</param-name>\n    <param-value>access plus 1 month</param-value>\n </init-param>",
    "comments": [
      "Actually the text says access plus 10 minutes or something but you get the idea :-)",
      "Thanks. We have forgot this when we updated the mime type definitions for TC 7 in web.xml.\n\nFixed now in trunk and TC 7 (r1293832 and r1293837)."
    ],
    "creation_ts": "2012-02-24T13:35:39Z",
    "fixes": [
      52760
    ]
  },
  {
    "id": 61491,
    "summary": "IllegalArgumentException thrown by PerMessageDeflate sendMessagePart()",
    "description": "This issue is similar to https://bz.apache.org/bugzilla/show_bug.cgi?id=59635 but it is happending in another location of the code.   Please refer to the following stack.  \n\ncompressedPayload.limit() is zero because of the compressedPayload.flip() call.\n\nSep 04, 2017 11:10:08 PM org.glassfish.jersey.server.ServerRuntime$Responder writeResponse\nSEVERE: Error while closing the output stream in order to commit response.\njava.lang.IllegalArgumentException\n\tat java.nio.Buffer.limit(Unknown Source)\n\tat org.apache.tomcat.websocket.PerMessageDeflate.sendMessagePart(PerMessageDeflate.java:374)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:341)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.write(WsRemoteEndpointImplBase.java:803)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendStringByCompletion(WsRemoteEndpointImplBase.java:212)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointAsync.sendText(WsRemoteEndpointAsync.java:47)\n\tat org.atmosphere.container.version.JSR356WebSocket.write(JSR356WebSocket.java:73)\n\tat org.atmosphere.websocket.WebSocket.write(WebSocket.java:255)\n\tat org.atmosphere.websocket.WebSocket.write(WebSocket.java:46)\n\tat org.atmosphere.cpr.AtmosphereResponseImpl$Stream.write(AtmosphereResponseImpl.java:980)\n\tat org.glassfish.jersey.servlet.internal.ResponseWriter$NonCloseableOutputStreamWrapper.write(ResponseWriter.java:325)\n\tat java.io.ByteArrayOutputStream.writeTo(Unknown Source)\n\tat org.glassfish.jersey.message.internal.CommittingOutputStream.flushBuffer(CommittingOutputStream.java:307)\n\tat org.glassfish.jersey.message.internal.CommittingOutputStream.commit(CommittingOutputStream.java:261)\n\tat org.glassfish.jersey.message.internal.CommittingOutputStream.close(CommittingOutputStream.java:276)\n\tat org.glassfish.jersey.message.internal.OutboundMessageContext.close(OutboundMessageContext.java:877)\n\tat org.glassfish.jersey.server.ContainerResponse.close(ContainerResponse.java:412)\n\tat org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:784)\n\tat org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:444)\n\tat org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:434)\n\tat org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:329)\n\tat org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)\n\tat org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:315)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:297)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:267)\n\tat org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:321)\n\tat org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)\n\tat org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)\n\tat org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)\n\tat org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)\n\tat org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)\n\tat org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)\n\tat org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)\n\tat com.apriori.async.ws.config.AsyncServletContainer.service(AsyncServletContainer.java:108)\n\tat org.atmosphere.util.AtmosphereFilterChain.doFilter(AtmosphereFilterChain.java:135)\n\tat org.atmosphere.util.AtmosphereFilterChain.invokeFilterChain(AtmosphereFilterChain.java:96)\n\tat org.atmosphere.handler.ReflectorServletProcessor$FilterChainServletWrapper.service(ReflectorServletProcessor.java:337)\n\tat org.atmosphere.handler.ReflectorServletProcessor.onRequest(ReflectorServletProcessor.java:175)\n\tat org.atmosphere.cpr.AsynchronousProcessor.action(AsynchronousProcessor.java:223)\n\tat org.atmosphere.cpr.AsynchronousProcessor.suspended(AsynchronousProcessor.java:115)\n\tat org.atmosphere.container.Servlet30CometSupport.service(Servlet30CometSupport.java:67)\n\tat org.atmosphere.cpr.AtmosphereFramework.doCometSupport(AtmosphereFramework.java:2287)\n\tat org.atmosphere.websocket.DefaultWebSocketProcessor.dispatch(DefaultWebSocketProcessor.java:593)\n\tat org.atmosphere.websocket.DefaultWebSocketProcessor.open(DefaultWebSocketProcessor.java:224)\n\tat org.atmosphere.container.JSR356Endpoint.onOpen(JSR356Endpoint.java:264)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.init(WsHttpUpgradeHandler.java:133)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:914)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1457)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Unknown Source)",
    "comments": [
      "From the stack trace, this appears to be a duplicate of bug 59635.\n\nAre you sure compressedPayload.limit() is zero? 1, 2 and 3 are also possibilities.\n\nWhat is really needed here is a test case. Can you provide the String that was being sent at the time?\n\nI'll take another look at the code but a reliable test case would make this a lot simpler.",
      "I've managed to reproduce this.\n\nIt is triggered by a zero length message after a non-zero length message when the compression context is retained between messages.\n\nI'm starting to think about a fix.",
      "Fixed in:\n- trunk for 9.0.0.M27 onwards\n- 8.5.x for 8.5.21 onwards\n- 8.0.x for 8.0.47 onwards\n- 7.0.x for 7.0.82 onwards"
    ],
    "creation_ts": "2017-09-05T13:29:23Z",
    "fixes": [
      61491
    ]
  },
  {
    "id": 62912,
    "summary": "Tomcat adds a space character in the Content-Type header if this one has a ; character right after",
    "description": "Hello,\n\nI have written a servlet answering to an HTTP GET which set a response Content-Type having a value with a semi-column (eg ;).\nThe Content-Type looks like: application/xxx.yyy-data;version=1.0\nIn the servlet code I have response.setContentType(\"application/xxx.yyy-data;version=1.0\");\n\nTried on both 8.5.35 and 9.0.13, in both environments, the real Content-Type sent back by the server is: application/xxx.yyy-data; version=1.0\nSo Tomcat adds a space character right after the semi-column.\n\nI think it's a bug.\n\nCould you please provide a fix to prevent Tomcat to add a space character after the semi-column ?\n\nBest Regards.",
    "comments": [
      "Tomcat has to separate any charset from the provided content-type and store the charset and content-type (minus charset) separately. Extraction of the charset can be tricky. Historically there were a few bugs in this area until we switched to using a full parser. Similarly, generating content-type minus the charset had difficulties. Therefore, this value is generated by the parser from the constituent parts.\n\nFrom RFC 7231:\n\n     Content-Type = media-type\n     media-type = type \"/\" subtype *( OWS \";\" OWS parameter )\n     type       = token\n     subtype    = token\n\nWhite space after the semi-colon is optional but valid. If a user-agent is unable to parse this correctly then that is a bug in the user-agent, not in Tomcat.\n\nNormally, I'd close bugs like this as WONTFIX but recalling a similar issue I dug into the history a little:\nbug 53814\nbug 52811\n\nThe original intention was not to include a space after the semi-colon. It was added as a work-around for a popular but buggy client (Adobe Reader 9 on IE). It should be possible to remove the work-around but bitter experience makes me fear what else this might break.\n\nI'd like to remove the work-around, mainly as it reduces (very marginally) the network traffic per request and removes a few lines of code but that is probably something to consider for Tomcat 10 given the possibility of user-agent breakage.\n\nAt this point, fixing the bug in the user-agent parsing this header so it can handle the header with or without the optional white space looks like the best solution.",
      "Hello Mark,\n\nNot sure to have really understand what you said.\nYou talk about charset but the content I want to deliver to the client is a binary content.\n\nMy disappointment is that I set a content type for the response that seems to be modified by Tomcat. Indeed, I set it to \"application/xxx.yyy-data;version=1.0\" and  the client get a Content-Type set to \"application/xxx.yyy-data; version=1.0\": a space character has been introduced right after the ; character.\n\nI have tested this with different User-Agent s.\n\nCurl:\nRequest headers:\n       User-Agent: curl/7.40.0\n       Host: localhost:8080\n       Accept: */*\nResponse headers:\n       HTTP/1.1 200\n       Content-Type: application/xxx.yyy-data; version=1.0\n       Transfer-Encoding: chunked\n       Date: Thu, 15 Nov 2018 15:16:06 GMT\n\nFirefox:\nRequest headers:\n       User-Agent: Mozilla/5.0 (Windows NT 6.1; W\u2026) Gecko/20100101 Firefox/62.0\n       Host: localhost:8080\n       Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nResponse headers:\n       HTTP/1.1 200\n       Content-Type: application/xxx.yyy-data; version=1.0\n       Transfer-Encoding: chunked\n\nChrome:\nRequest headers:\n       User-Agent:  Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\n       Host: localhost:8080\n       Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\nResponse headers:\n       HTTP/1.1 200\n       Content-Type: application/xxx.yyy-data; version=1.0\n       Transfer-Encoding: chunked\n       Date: Thu, 15 Nov 2018 16:20:20 GMT\n\nSo whatever the User-Agent used, the Content-Type is application/xxx.yyy-data; version=1.0 (with a space character right after the ; character) whereas I have written in my servlet code response.setContentType(\"application/xxx.yyy-data;version=1.0\"); (no space character after the ; character).\n\nIs it clearer ?\n\nBest Regards.",
      "Hello,\n\nI can provide you a test case if you want ? Just tell me.\n\nBest Regards.",
      "I'll be clearer.\n\nThere is no Tomcat bug here.\n\nTomcat's response is consistent with what the Servlet requested and compliant with RFC 7201.\n\nYou haven't explained what the problem is but the working assumption is that the user agent (client) you are using can't handle the space Tomcat inserts. That is a bug in the user agent and should be fixed there.",
      "Created attachment 36262\nThe war to be deployed\n\nThen target http://localhost:8080/MyServletReturningContentTypeWithComma/test",
      "Hello Thomas,\n\nI try to figure out what you're saying.\n\nIf I have well understood:\n     - If, in the Content-Type value you have a semi-column followed by a string, you can have or not (because you mention it is optional) after the semi-column a space character, right ?\n     - The current Tomcat implementation is to add a space character after the semi-column in any case.\n\nWhat is quite disturbing to me is:\n     - space character is optional as you mentioned\n     - so why if, in the servlet code, you set a Content-Type with a ; character   \n       and no space after, even if the space character is optional, you add this  \n       one just after the ;\n\nYes you are right when saying it could be fixed at client-side but sometimes there are some situations where some client versions couldn't be updated. This is our case: those client versions are already deployed on the field and no easy way to update them unfortunately. \n\nSo is there any way to have a Tomcat (hidden) setting, in order to not have a space character after a ; character.\n\nBest Regards.",
      "(In reply to Franos from comment #6)\n> What is quite disturbing to me is:\n>      - space character is optional as you mentioned\n>      - so why if, in the servlet code, you set a Content-Type with a ;\n> character   \n>        and no space after, even if the space character is optional, you add\n> this  \n>        one just after the ;\n\nThis is being added because the header you are adding must be parsed by Tomcat *just in case there is a character set present* so it can be specially-handled. Since Tomcat parses the content-type (as set by the application), it can re-assemble the content-type header from the parsed values.\n\n> Yes you are right when saying it could be fixed at client-side but sometimes\n> there are some situations where some client versions couldn't be updated.\n> This is our case: those client versions are already deployed on the field\n> and no easy way to update them unfortunately. \n\nOkay, so we have some clients that vitally depend upon the space being added and other clients that vitally depend upon the space *not* being added. Why should your clients win over the others?\n\n> So is there any way to have a Tomcat (hidden) setting, in order to not have\n> a space character after a ; character.\n\nThe real question is \"why is Tomcat bothering to re-format the content-type header when it does not have to do so?\".\n\nI could see an argument for a \"don't mutate content-type headers when no charset is present\", but that's not what you asked for.",
      "Chris, you make a good point about not mutating the value unnecessarily. I did look briefly at what would be involved. It looks simple to do. My concern is that it has broadly the same potential to trigger regressions as removing the space - although at least ones that could be fixed by an application change. Probably something else to consider for Tomcat 10 alongside removing the space.",
      "Hello,\n\n> Okay, so we have some clients that vitally depend upon the space being added \n> and other clients that vitally depend upon the space *not* being added. Why \n> should your clients win over the others?\n\nI think that in most cases the provider of a server side solution validates their developments with a fixed list of clients (eg list of User-Agent s). In such case we can control the response (HTTP header included) to be sent to those clients depending of the value read from the request in the User-Agent HTTP header.\nSo why Tomcat is changing a value we have set at server side and we know it works with the list of User-Agent s  we want to support ?\nMore, in the tests I have performed, if the content sent to the client is character based, Tomcat appends automatically \";charset=ISO-8859-1\", for example, with no space. So why sometimes, we have space and sometimes we haven't ?\n\n\n> The real question is \"why is Tomcat bothering to re-format the content-type \n> header when it does not have to do so?\".\n\nYes, this is indeed the question I have.\n\n> I could see an argument for a \"don't mutate content-type headers when no \n> charset is present\", but that's not what you asked for.\n\nSo consider I ask for that.\n\nBest Regards.",
      "Note that this is being discussed on the dev list a bit. See r1846691.",
      "Hello,\n\nI have looked at that.\nThanks.\n\nMy worry is that it's scheduled for Tomcat 10.\nWe really need that on Tomcat 8.5.x and 9.x branches.\n\nBest Regards.",
      "Hi guys,\n\nisn't it possible to fix this issue since the space has this comment (org.apache.tomcat.util.http.parser.MediaType#toString):\n\n> // Workaround for Adobe Read 9 plug-in on IE bug\n> // Can be removed after 26 June 2013 (EOL of Reader 9)\n> // See BZ 53814\n\nGuess we are after 2013 so maybe time to drop it?\n\nSince space or not is valid from a spec perspective and the servlet spec let the developper responsible to set the right content type (5.2 of servlet 4) then the dev should be the one able to decide to use a space or not. For the case tomcat has to build the content type (character encoding usage) I guess the delimiterString (\";\" or \"; \") can be configured?\n\nRomain",
      "Moving this to an enhancement. The bug is in the user agent, not Tomcat.\n\nGiven that:\n- we have examples of broken clients that fail both with a space and without a space\n- both with a space and without a space a spec compliant\n\nIf we pick one option and hard-code it, experience tells us that it will break for someone at some point. While we could simply respond \"Fix the broken user agent\" I think Chris's idea is worth exploring.\n\nAssuming the code is minimal, it should be doable for Tomcat 10. The bigger question is whether the fix is considered safe enough for back-port.\n\nI'll put together a patch and start a discussion on the dev list.",
      "Created attachment 36389\nTomcat 9 patch to retain app provided content-type\n\nThe application provided content-type is only retained if no charset is present.",
      "Applied to master for 10.0.0-M5",
      "Back-ported in:\n- 9.0.x for 9.0.47 onwards\n- 8.5.x for 8.5.67 onwards"
    ],
    "creation_ts": "2018-11-15T11:05:41Z",
    "fixes": [
      62912
    ]
  },
  {
    "id": 57653,
    "summary": "APR/native crash during HTTP upgrade",
    "description": "Created attachment 32539\nCrash log\n\nWith the patch below applied (it forces writes onto a separate thread when using HTTP upgrade) repeated running of the org.apache.coyote.http11.upgrade.TestUpgrade unit test eventually (after a few minutes on OSX and Linux) triggers a JVM crash.\n\nI suspect that a socket is closed in one thread while it is still in the Poller. However, I have not yet been able to identify the code path that triggers this.\n\nI have attached the crash report.\n\n\n\nIndex: java/org/apache/coyote/http11/upgrade/UpgradeServletOutputStream.java\n===================================================================\n--- java/org/apache/coyote/http11/upgrade/UpgradeServletOutputStream.java\t(revision 1663237)\n+++ java/org/apache/coyote/http11/upgrade/UpgradeServletOutputStream.java\t(working copy)\n@@ -21,11 +21,9 @@\n import javax.servlet.ServletOutputStream;\n import javax.servlet.WriteListener;\n \n-import org.apache.coyote.ContainerThreadMarker;\n import org.apache.juli.logging.Log;\n import org.apache.juli.logging.LogFactory;\n import org.apache.tomcat.util.ExceptionUtils;\n-import org.apache.tomcat.util.net.DispatchType;\n import org.apache.tomcat.util.net.SocketWrapperBase;\n import org.apache.tomcat.util.res.StringManager;\n \n@@ -114,11 +112,11 @@\n         synchronized (registeredLock) {\n             registered = true;\n             // Container is responsible for first call to onDataAvailable().\n-            if (ContainerThreadMarker.isContainerThread()) {\n-                socketWrapper.addDispatch(DispatchType.NON_BLOCKING_WRITE);\n-            } else {\n+            //if (ContainerThreadMarker.isContainerThread()) {\n+            //    socketWrapper.addDispatch(DispatchType.NON_BLOCKING_WRITE);\n+            //} else {\n                 socketWrapper.registerWriteInterest();\n-            }\n+            //}\n         }\n \n         this.listener = listener;",
    "comments": [
      "NIO2 also did double closes of the sockets running the websockets tests before the latest refactoring. Syncing closeSocket could be the only solution.",
      "Created attachment 32543\nSafety patch for tcnative 1.1.x branch\n\nPlease patch tcnative with this and see if it catches the exact problem (likely \"invalid socket\"). Note that this is not a fix: it's only doing sanity-checking on the pollset and the sockets being manipulated.",
      "Thanks for the safety patch. I can see what it is doing (and it looks) right but the crash still occurs.",
      "This is the line that is failing:\nhttp://svn.eu.apache.org/viewvc/tomcat/native/branches/1.1.x/native/src/poll.c?view=annotate#l365\n\nAPR_RING_REMOVE(s->pe, link);\n\nAnd the core dump shows s->pe is 0x0.\n\nSo that explains why it is crashing.\n\nI should be able to add another safety check for that to prevent the crash.\n\nNext step is to figure out how it gets into that state in the first place.",
      "I think I have got to the bottom of this.\n\nLooking at the docs for apr_pollset_poll [1], it states \"Multiple signalled conditions for the same descriptor may be reported in one or more returned apr_pollfd_t structures, depending on the implementation.\".\n\nThe crash is occurring when the socket is registered for read and write.\n\nThe tc-native code assumes that there is only ever one returned structure per descriptor.\n\nThe unit test + modified code I am using just happens - if the timing is right - to register a socket for read and write which almost instantly becomes available for both. It looks like OSX rerurns mutiple apr_pollfd_t structures for mutliple events on the same descriptor and that triggers the crash.\n\nI've thrown together a quick patch to test this theory and the unit test has been running in a loop now for 20+ minutes without crashing so I am fairly confident this is the issue.\n\n\n[1] http://apr.apache.org/docs/apr/1.4/group__apr__poll.html#ga6b31d7b3a7b2d356370403dd2b79ecf3",
      "I had a look at the origins of that APR comment:\n\nhttp://svn.apache.org/viewvc?view=revision&revision=748951\n\nIt was especialy added to allow for an APR internal optimization when used in combination with the kqueue pollset implementation. And kqueue is the default pollset implof APR on OSX (and BSD).\n\nQuoting:\n\n\"Allow the kqueue pollset implementation to support checking both APR_POLLIN and\nAPR_POLLOUT for the same descriptor.  This requires separate kevent structures\nfor both conditions.\n\nImportantly, if both conditions are present, they will be returned in separate\napr_pollfd_t structures with this implementation (to avoid the cycles to coalesce \ninto the minimal number of structures).\"\n\nSo that fits nicely with your \"The crash is occurring when the socket is registered for read and write.\" OTOH that means it would not in an obvious way provide a reason if this problem occured on other platforms than OSX or BSD. Although the code comment doesn't limit itself to kqueue ...\n\nRegards,\n\nRainer",
      "Not knowing a great deal about the underlying issue...\n\nIf the fd is registered for both READ and WRITE, and we get multiple \"responses\" from apr_pollset_poll, are those happening (somewhat) simultaneously in two separate threads? So one of them fetches the fd, then the other fetches the same fd, then one of them removes the fd, then the other tries to do that same thing?\n\nOr do we need to examine the return from apr_pollset_poll to find out if we got the READ versus WRITE notification and make sure it's the one we were expecting?",
      "(In reply to Christopher Schultz from comment #7)\n> Not knowing a great deal about the underlying issue...\n\nIt is worth reading AprEndpoint.Poller.run() and the native implementation of poll()\n\n> If the fd is registered for both READ and WRITE, and we get multiple\n> \"responses\" from apr_pollset_poll, are those happening (somewhat)\n> simultaneously in two separate threads?\n\nNo.\n\n> So one of them fetches the fd, then\n> the other fetches the same fd, then one of them removes the fd, then the\n> other tries to do that same thing?\n\nNo. It happens sequentially in a single thread.\n\n> Or do we need to examine the return from apr_pollset_poll to find out if we\n> got the READ versus WRITE notification and make sure it's the one we were\n> expecting?\n\nThat is handled in Poller.run()\n\nThe fundamental problem is that poll() assumed that there would never be multiple notifications for the same socket. That assumption was not valid.",
      "*** Bug 56313 has been marked as a duplicate of this bug. ***",
      "(In reply to Rainer Jung from comment #6)\n\n> So that fits nicely with your \"The crash is occurring when the socket is\n> registered for read and write.\" OTOH that means it would not in an obvious\n> way provide a reason if this problem occured on other platforms than OSX or\n> BSD. Although the code comment doesn't limit itself to kqueue ...\n\nBug 56313 which appears to be the same issue is happening on Windows. It also appears to be a standard web applicaion without concurrent read/write.\n\nThe poller event merging code added to APR probably needs a few tweaks:\n- enable it for all OS's\n- add some debug logging as to what events are being merged incase there is something else going on we haven't figured out yet.\n\nThe patch I mentioned in comment #5 has been applied to tomcat-native 1.1.x and I am planning a 1.1.33 release shortly.",
      "This has been fixed for Tomcat 8.0.21 and tc-native 1.1.33 onwards. i.e. you need at least these versions of both components to avoid this bug.\n\nIt would be helpful if folks experiencing these issues on platforms other than OSX and BSD installed the above versions (when available) and enabled debug logging for AprEndpoint and reported any poller event merge messages that are logged.",
      "where can I download from the new version of tomcat and the dll? do I need to compile it myself?",
      "(In reply to Pavel from comment #12)\n> where can I download from the new version of tomcat and the dll? do I need\n> to compile it myself?\n\nI'm working on the tc-native 1.1.33 release at the moment. A release candidate will hopefully be available for testing later today (otherwise tomorrow). Keep an eye on the dev list for details.\n\nA 8.0.21 release will follow once we have a successful 1.1.33 release.",
      "I saw that 1.1.33 was released - just wanted to confirm, can this be used with tomcat 7? or must i upgrade the tomcat as well? (I thought the fix was in the tc-native dll itself).\n\ncurrently using tomcat 7.0.54.\n\nThanks.",
      "Upgrading tc-native will avoid the crash but may still experience a bug where Tomcat doesn't recognise that a connection is ready for read/write. You'll need Tomcat 7.0.60 onwards for that part of the fix.",
      "Got it.\n\nDo you have an ETA for tomcat 7.0.60?\n\nThanks again for the quick reply."
    ],
    "creation_ts": "2015-03-02T10:26:30Z",
    "fixes": [
      57653
    ]
  },
  {
    "id": 56903,
    "summary": "Missing comma-Separator in StandardContexts getRessourceOnlyServlets - CID-45051",
    "description": "Created attachment 31956\nSet flag in loop, so that commata are generated in between servlet names\n\nA missing setting of a flag in a loop prevented the generation of commata in between serlvet names in StandardContext#getRessourceOnlyServlets.",
    "comments": [
      "Created attachment 31957\nSet flag in loop, so that commata are generated in between servlet names plus test case",
      "Thanks for the fix. I have applied a variation of the patch (inverted logic and simpler test) to 8.0.x which will be included in 8.0.13 onwards.",
      "Fix is committed to 7.0.x and will be available in 7.0.56 onwards."
    ],
    "creation_ts": "2014-08-31T10:57:51Z",
    "fixes": [
      56903
    ]
  },
  {
    "id": 69598,
    "summary": "Reload service account token if changed in KubernetesMembershipProvider",
    "description": "Created attachment 40001\nCheck sa token modify time before fetching members\n\nI our kubernates environment the service account token is changed periodically each hour causing CloudMembershipService to stop fetching members from KubernetesMembershipProvider.\n\nThere are errors in catalina log:\nServer returned HTTP response code: 401 for URL: https://A.B.C.D:443/api/v1/namespaces/589474253/pods",
    "comments": [
      "Fixed in:\n- 11.0.x for 11.0.5 onwards\n- 10.1.x for 10.1.37 onwards\n-  9.0.x for  9.0.101 onwards\n\nThanks for the patch. I changed a few small things but the bulk of it is as you provided."
    ],
    "creation_ts": "2025-02-26T09:15:09Z",
    "fixes": [
      69598
    ]
  },
  {
    "id": 65726,
    "summary": "NullPointerException while reading request input with H2C upgraded exchanges",
    "description": "See https://github.com/spring-projects/spring-boot/issues/28912 for original issue.\n\nIt looks like trying to read the request body with an H2C-upgraded request fails with an NPE, while this doesn't fail with H2C prior-knowledge or HTTP 1.1.\n\nHere is the stacktrace:\n\njava.lang.NullPointerException: Cannot invoke \"org.apache.coyote.InputBuffer.doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)\" because \"this.inputBuffer\" is null\n\tat org.apache.coyote.Request.doRead(Request.java:640)\n\tat org.apache.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:317)\n\tat org.apache.catalina.connector.InputBuffer.checkByteBufferEof(InputBuffer.java:600)\n\tat org.apache.catalina.connector.InputBuffer.read(InputBuffer.java:340)\n\tat org.apache.catalina.connector.CoyoteInputStream.read(CoyoteInputStream.java:132)\n\tat java.base/java.io.InputStream.readNBytes(InputStream.java:409)\n\tat java.base/java.io.InputStream.readAllBytes(InputStream.java:346)\n\tat h2c.H2cServlet.doGet(H2cServlet.java:18)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:655)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:764)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\n\tat org.apache.coyote.http2.StreamProcessor.service(StreamProcessor.java:413)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n\tat org.apache.coyote.http2.StreamProcessor.process(StreamProcessor.java:74)\n\tat org.apache.coyote.http2.StreamRunnable.run(StreamRunnable.java:35)\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n\n\nA sample application can be found here: https://github.com/bclozel/h2c-tomcat",
    "comments": [
      "Thanks for the report.\n\nThere are a couple of TODOs for support for request bodies during HTTP/1.1 upgrade in the code. The NPE is caused by the current lack of support.\n\nI have a patch for this. Just need to do a little more testing.",
      "Fixed in:\n- 10.1.x for 10.1.0-M9 onwards\n- 10.0.x for 10.0.15 onwards\n- 9.0.x for 9.0.57 onwards\n- 8.5.x for 8.5.74 onwards"
    ],
    "creation_ts": "2021-12-06T14:18:50Z",
    "fixes": [
      65726
    ]
  },
  {
    "id": 29936,
    "summary": "XML parser loading problems by container",
    "description": "I'm trying to use JSTL 1.1 with this version of tomcat and have both saxon and \ncrimson in my web-app.\n\nIf we have crimson and saxon in our webapp lib then tomcat tries to use crimson \nas the xml parser when reading the web.xml and compiling the jsp and we get the \nprefix error:\n\norg.apache.jasper.JasperException: <h3>Validation error messages from \nTagLibraryValidator for c</h3><p>null: java.lang.IllegalStateException: can't \ndeclare any more prefixes in this context</p><h3>Validation error messages from \nTagLibraryValidator for fmt</h3><p>null: java.lang.IllegalStateException: can't \ndeclare any more prefixes in this context</p>\n\nIf we remove crimson, tomcat uses saxon (aelfred parser) and this fails on \nreading the web.xml (javax.xml.parsers.ParserConfigurationException: AElfred \nparser is namespace-aware)\n\nIf we remove saxon and crimson then we are okay (defaults to xerces in the \ntomcat endorsed directory?)\n\nIt seems to me that tomcat is using the parser in my web-app to read the \nweb.xml rather than using xerces from the endorsed directory.  \n\nThe same web-app runs without problems in version 5.0.16.  \n\nTomcat seems to be using the service provider mechanism in 5.0.25 as I have \nproperty files in C:\\Java\\jakarta-tomcat-5.0.25\n\\work\\Catalina\\localhost\\diabetes\\loader\\META-INF\\services (can't find any \ndocuments on this).\n\nIf I'm using more than one parser won't this cause problems as tomcat is \nsetting only one parser and xslt processor here?\n\nAny comments are gratefully received.\n\nThanks,\nPeter Neville",
    "comments": [
      "BTW: Java SDK is version 1.4.2_01",
      "I am afraid if you want this resolved, you'll have to investigate this further.\nOne thing which really hurts your report is the fact that this would be a\nclassloader issue, and yet there is no relevant functional changes in the\nclassloader since 5.0.16.",
      "Are you sure you haven't duplicated the tagdef in the JSP multiple times?\n\nFor example - this would cause an error:\n<%@ taglib uri=\"http://java.sun.com/jstl/core/c.tld\" prefix=\"c\" %>\n<%@ taglib uri=\"http://java.sun.com/jstl/core/c.tld\" prefix=\"c\" %>\n\nOr this:\n<%@ taglib uri=\"http://java.sun.com/jstl/core/c.tld\" prefix=\"c\" %>\n<%@include page=\"foo.jsp\"%> \n\nwhere foo.jsp also has:\n<%@ taglib uri=\"http://java.sun.com/jstl/core/c.tld\" prefix=\"c\" %>",
      "Remy: You mention that there hasn;t been any classloader chnages since 5.0.16, \nbut to the best of my knowledge 5.0.16 did not store service provider details \nin the apache work/catalina/localhost/webapp/loader sub-directories.\nAre there any explanations on this available?\n\nTim:\n\nThe taglibs are declared as:\n\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %>\n<%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %>\n\nSo not multiple declarations - there ins aninclude but this doesn't use taglibs.\n\nThe problem is instantly resolved by removing saxon and crimson from the web-\napp lib.\n\n\nThanks for your help so far...",
      "Also, I must set my web.xml for the web-app to :\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<web-app xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee web-app_2_4.xsd\"\n    version=\"2.4\">\n\ninstead of :\n\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE web-app\n    PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n    \"http://java.sun.com/dtd/web-app_2_3.dtd\">\n<web-app>\n\n\nOtherwise tomcat gives errors when compiling the jsp indicating that it can't \nfind bean properties etc.",
      "If you don't know what 5.0.16 has and what it does not have, I think you need to\ncheck the CVS history. I really cannot see anything I'd like to test in this bug\nreport (except the usual: we don't support replacing the XML provider, except\nusing the JVM provided mechanism).",
      "for what it's worth I'm seeing the same thing with:\n\ntomcat 5.0.25\njstl 1.1\nj2dsk 1.4.2_05\nlinux\n\nfor a web app that has crimson in the WEB-INF/lib. Removing the JAR that\ncontains crimson fixes it. It's surprising to me that tomcat is using the parser\nit finds in the web app for web.xml and JSP compilation - not what I'd expect\nand will probably trip other people up the same way.",
      "This issue is also prevalent in 5.5.x.  To reproduce, do the following:\n\n1) Remove all stock webapps that come with the standard installation.  This\nincludes the ones in server/webapps.  Remember to remove the configurations in\nconf/Catalina.\n2) Add a webapp that has a saxon parser located in WEB-INF/lib.  For instance,\none from sourceforge.\n3) Start Tomcat.  You should a stack trace similar to this:\n\nJun 7, 2007 11:33:29 AM org.apache.commons.digester.Digester getParser\nSEVERE: Digester.getParser: \njavax.xml.parsers.ParserConfigurationException: AElfred parser is namespace-aware\n\tat\ncom.icl.saxon.aelfred.SAXParserFactoryImpl.newSAXParser(SAXParserFactoryImpl.java:37)\n\tat org.apache.commons.digester.Digester.getParser(Digester.java:686)\n\tat org.apache.commons.digester.Digester.getXMLReader(Digester.java:902)\n\tat org.apache.commons.digester.Digester.parse(Digester.java:1548)\n\tat org.apache.catalina.startup.ContextConfig.defaultConfig(ContextConfig.java:515)\n\tat org.apache.catalina.startup.ContextConfig.start(ContextConfig.java:623)\n\tat org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:216)\n\tat\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n\tat org.apache.catalina.core.StandardContext.start(StandardContext.java:4290)\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:823)\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:807)\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:595)\n\tat\norg.apache.catalina.core.StandardHostDeployer.install(StandardHostDeployer.java:277)\n\tat org.apache.catalina.core.StandardHost.install(StandardHost.java:832)\n\tat org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:625)\n\tat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:431)\n\tat org.apache.catalina.startup.HostConfig.start(HostConfig.java:983)\n\tat org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:349)\n\tat\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n\tat org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1091)\n\tat org.apache.catalina.core.StandardHost.start(StandardHost.java:789)\n\tat org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1083)\n\tat org.apache.catalina.core.StandardEngine.start(StandardEngine.java:478)\n\tat org.apache.catalina.core.StandardService.start(StandardService.java:480)\n\tat org.apache.catalina.core.StandardServer.start(StandardServer.java:2313)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:556)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:287)\n\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:425)\nJun 7, 2007 11:33:29 AM org.apache.catalina.startup.ContextConfig defaultConfig\nSEVERE: Parse error in default web.xml\njava.lang.NullPointerException\n\tat org.apache.commons.digester.Digester.getXMLReader(Digester.java:902)\n\tat org.apache.commons.digester.Digester.parse(Digester.java:1548)\n\tat org.apache.catalina.startup.ContextConfig.defaultConfig(ContextConfig.java:515)\n\tat org.apache.catalina.startup.ContextConfig.start(ContextConfig.java:623)\n\tat org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:216)\n\tat\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n\tat org.apache.catalina.core.StandardContext.start(StandardContext.java:4290)\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:823)\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:807)\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:595)\n\tat\norg.apache.catalina.core.StandardHostDeployer.install(StandardHostDeployer.java:277)\n\tat org.apache.catalina.core.StandardHost.install(StandardHost.java:832)\n\tat org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:625)\n\tat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:431)\n\tat org.apache.catalina.startup.HostConfig.start(HostConfig.java:983)\n\tat org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:349)\n\tat\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n\tat org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1091)\n\tat org.apache.catalina.core.StandardHost.start(StandardHost.java:789)\n\tat org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1083)\n\tat org.apache.catalina.core.StandardEngine.start(StandardEngine.java:478)\n\tat org.apache.catalina.core.StandardService.start(StandardService.java:480)\n\tat org.apache.catalina.core.StandardServer.start(StandardServer.java:2313)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:556)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:287)\n\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:425)\n\nI believe the issue here is that when the Digester to parse web.xml is set in\nContextConfig, the path to WEB-INF/lib is established for the WebappClassloader.\n When the SAXParserFactory is created with newInstance() within the call to\nDigester.getParser(), the rules dictate that it will search thirdmost for a file\nMETA-INF/services/javax.xml.parsers.SAXParserFactory in jars available, and it\nwill find it in saxon.jar, prior to defaulting to a platform default parser. \nThis webapp parser is now used for parsing the web.xml file, but since this task\nis the container's responsibility, it should not be used.  As a note, this\nparticular parser needs to be namespace-aware and the setting of it being not\nnamespace-aware throws this exception.\n\nA possible solution is to load the (default) parser into the Digester prior to\nhaving it being loaded by the WebappClassloader.  Since this appears to be\none-time settable, it will use this parser regardless of what the webapp has.",
      "Eddy, which particular sourceforge webapp did you use to test this?",
      "The webapp was one of my own, but you just need a bare one, I believe.  It\ncontained a saxon parser from Sourceforge, which overrides the default parser.",
      "This works for me, at least I can't reproduce by following the steps provided\nhere, with the latest source from svn.\n\nPlease test this with the latest 5.5.x release. If you still see the issue,\nplease provide the simplest possible WAR that reproduces the issue on a clean\nTomcat install along with any additional configuration steps that may be required.",
      "Created attachment 20889\nWAR causing problem for container",
      "I've attached a small problematic WAR that just contains a blank web.xml along\nwith a saxon.jar in the WEB-INF/lib.  Remember that you need to remove ALL the\napps that come with Tomcat (rm -fr webapps/*) as well as the configs (rm -fr\nconf/Catalina).",
      "I can replicate this issue with the provided war on 5.5.x. It seems odd that\nthis only occurs with the conf/Catalina and other webapps missing.",
      "The root cause of this issue is the ContextConfig class creating the parser for web.xml whilst it is using the webapp's classloader. This causes a problem if the app being processed includes an xml parser.\n\nI have committed a fix to trunk and will propose it for 6.0.x and 5.5.x.",
      "*** Bug 43444 has been marked as a duplicate of this bug. ***",
      "This has been committed to 6.0.x and will be in 6.0.17 onwards.",
      "This has been fixed in 5.5.x and will be included in 5.5.27 onwards."
    ],
    "creation_ts": "2004-07-06T15:18:50Z",
    "fixes": [
      29936
    ]
  },
  {
    "id": 43687,
    "summary": "after repeated authentication tomcat again sends page with login form instead of protected static resource",
    "description": "Steps to replicate problem:\n\n   1) clear firefox cache\n   2) load url \"http://localhost:8080/aaa/index.html\"\n   3) fill in auth form\n   4) on index.html page click logout link to logout.jsp (invalidate session and\nredirect to index.html)\n   5) fill in auth form\n   6) you will get form page again (!)\n   7) click \"reload\" button\n   8) you will get index.html\n\n\nConversation with server:\n\nfirefox:  GET /aaa/index.html HTTP/1.1\n tomcat:  HTTP/1.1 200 OK\n          ETag: W/\"478-1193216820000\"\n          Last-Modified: Wed, 24 Oct 2007 09:07:00 GMT\n\n          <page with login form>\n\nfirefox:  POST /aaa/j_security_check HTTP/1.1\n tomcat:  HTTP/1.1 302 Moved Temporarily\n          Location: http://localhost:8080/aaa/index.html\n\nfirefox:  GET /aaa/index.html HTTP/1.1\n          If-Modified-Since: Wed, 24 Oct 2007 09:07:00 GMT\n          If-None-Match: W/\"478-1193216820000\"\n tomcat:  HTTP/1.1 200 OK\n          ETag: W/\"316-1193222364000\"\n          Last-Modified: Wed, 24 Oct 2007 10:39:24 GMT\n          \n          <page with protected content -- index.html>\n\nfirefox:  GET /aaa/logout.jsp HTTP/1.1\n tomcat:  HTTP/1.1 302 Moved Temporarily\n          Location: http://localhost:8080/aaa/index.html\n\nfirefox:  GET /aaa/index.html HTTP/1.1\n          If-Modified-Since: Wed, 24 Oct 2007 10:39:24 GMT\n          If-None-Match: W/\"316-1193222364000\"\n tomcat:  HTTP/1.1 200 OK\n          ETag: W/\"478-1193216820000\"\n          Last-Modified: Wed, 24 Oct 2007 09:07:00 GMT\n          <page with login form>\n\nfirefox:  POST /aaa/j_security_check HTTP/1.1\n tomcat:  HTTP/1.1 302 Moved Temporarily\n          Location: http://localhost:8080/aaa/index.html\n\nfirefox:  GET /aaa/index.html HTTP/1.1\n          If-Modified-Since: Wed, 24 Oct 2007 09:07:00 GMT\n          If-None-Match: W/\"478-1193216820000\"\n tomcat:  HTTP/1.1 304 Not Modified\n          ETag: W/\"316-1193222364000\"\n\nfirefox:  GET /aaa/index.html HTTP/1.1\n          If-Modified-Since: Wed, 24 Oct 2007 09:07:00 GMT\n          If-None-Match: W/\"478-1193216820000\"\n          Cache-Control: max-age=0\n tomcat:  HTTP/1.1 200 OK\n          ETag: W/\"316-1193222364000\"\n          Last-Modified: Wed, 24 Oct 2007 10:39:24 GMT\n\n          <page with protected content -- index.html>",
    "comments": [
      "Created attachment 21032\nweb app with form-based authentication\n\nwar to reproduce described behaviour",
      "Comment on attachment 21032\nweb app with form-based authentication\n\nwar to reproduce described behaviour.\n\nYou need also configured user with role \"aaa\". It is my\n$CATALINA_HOME/conf/tomcat-users.xml:\n<?xml version='1.0' encoding='utf-8'?>\t\t\t\t\t        \n<tomcat-users>\t\t\t\t\t\t\t\t        \n  <role rolename=\"aaa\"/>\t\t\t\t\t\t        \n  <user username=\"aaa\" password=\"aaa\" roles=\"aaa\"/>\t\t\t        \n</tomcat-users>",
      "After looking a bit into source i found (FormAuthenticator.java) save/restore\nmechanism for requests done before/after authentication. I don't understand\nneeds for it, particularly for save/restore ALL request headers. IMHO restoring\nheaders like \"If-None-Match\" is incorrect.\n\nAfter commenting out lines  (403-412) which serve to restore request headers\nproblem not occurs.",
      "Created attachment 21046\nPatch so that complient browsers don't think the login page is the real page\n\nTomcat needs to replay the original request exactly to have any hope of\nworking.  This patch, against 6.0 trunk, should prevent any modern browser\nconfusing the login page with the actual resource that it requested.",
      "(In reply to comment #4)\n> Created an attachment (id=21046) [edit]\n> Patch so that complient browsers don't think the login page is the real page\n> Tomcat needs to replay the original request exactly to have any hope of\n> working.  This patch, against 6.0 trunk, should prevent any modern browser\n> confusing the login page with the actual resource that it requested.\n\nOk, so I'm having a brain-dead moment (seem to be pretty common around \nhere :).  This patch should do nothing at all, and it is a FireFox bug that \nyou are looking at (it shouldn't be sending 'if-modified-since' and 'if-none-\nmatch' headers, since it was already told that the page is uncachable).",
      "(In reply to comment #5)\n> Ok, so I'm having a brain-dead moment (seem to be pretty common around \n> here :).  This patch should do nothing at all, and it is a FireFox bug that \n> you are looking at (it shouldn't be sending 'if-modified-since' and 'if-none-\n> match' headers, since it was already told that the page is uncachable).\n\nIMHO it isn't firefox bug. RFC2616 (14.9.1 What is Cacheable) about\n\"Cache-control: no-cache\" says:\n\n    If the no-cache directive does not specify a field-name, then a\n    cache MUST NOT use the response to satisfy a subsequent request\n    without successful revalidation with the origin server. This\n    allows an origin server to prevent caching even by caches that\n    have been configured to return stale responses to client requests.\n\nSo because tomcat sends for static resources \"ETag\" and \"Last-Modified\"\nheaders it allow to make REVALIDATION by firefox.",
      "Created attachment 21057\nAttempt to get around FireFox's aggressive caching\n\nFrom my reading of RFC 2616, this should work, since FF won't attempt to\nrevalidate a page that it doesn't have in it's cache.  If it doesn't work, than\nI consider it an FF bug (since the login page isn't in it's cache from 2616).",
      "(In reply to comment #7)\n> From my reading of RFC 2616, this should work, since FF won't attempt to\n> revalidate a page that it doesn't have in it's cache.  If it doesn't work, than\n> I consider it an FF bug (since the login page isn't in it's cache from 2616).\n\nIMHO acording to RFC2616 (14.9.2) \"Cache-control: no-store\" header not clearly\nforbids caching response in VOLATILE storage such as memory.\n\nMy understanding RFC2616 is following: to make response uncachable one should\nsend \"Cache-control: no-cache\" and NOT send headers used for revalidation such\n\"Etag\" and \"Last-Modified\".\n\nBut the problem is IMHO in save/restore mechanism.",
      "Created attachment 21063\nPatch to disable conditionals headers on a replay for Form Auth\n\nOk, I'm convinced that it needs to be done in the replay.  \n\nIf you are able to actually try out this patch, and post here, it will probably\nspeed up getting it into the 6.0 tree.",
      "(In reply to comment #9)\n> If you are able to actually try out this patch, and post here, it will probably\n> speed up getting it into the 6.0 tree.\n\nPatch is working for me. Thanks.",
      "The patch has now been committed to SVN, and will appear in the next version \nof TC 6.x."
    ],
    "creation_ts": "2007-10-24T03:58:50Z",
    "fixes": [
      43687
    ]
  },
  {
    "id": 47852,
    "summary": "[patch] Javadoc errors in 1.1x",
    "description": "Created attachment 24276\nJavadoc patch (incomplete, see text)\n\nThe attached patch fixes some Javadoc parameter errors in TC native 1.1x\n\nThere are some instances of TBA which need to be completed by someone who knows\nthe code better than I do...",
    "comments": [
      "Thanks for the patch.\nI committed it for 1.1.x (though maybe the Java code there is not used),\nand for TC 4.1, 5.5, 6.0 and trunk.\n\nI also replaced the pool TBAs with a short explanation."
    ],
    "creation_ts": "2009-09-16T06:57:01Z",
    "fixes": [
      47852
    ]
  },
  {
    "id": 51310,
    "summary": "Connector destroyInternal Execution",
    "description": "In Tomcat 7.0.12 Connector#destroyInternal method has never been called while server is under shutdown. Therefore NIOBlockingSelector#close is never called. Is it bug or else?",
    "comments": [
      "It actually doesn't matter since the JVM is shutting down. However, the right thing to do is to call Server.destroy() after calling Server.stop() so I have made the necessary change to 7.0.x and it will be included in 7.0.15 onwards.",
      "*** Bug 51638 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2011-06-01T15:58:45Z",
    "fixes": [
      51310
    ]
  },
  {
    "id": 55839,
    "summary": "DataSourceRealm doesn't handle prefix on password digest",
    "description": "Created attachment 31088\nEntire class with additional check for prefix.\n\nSimilar to bug #37984 which provided a fix for JNDIRealm, DataSourceRealm should also remove prefixes of the form {SHA}, {MD5}, etc before comparing the digests.\n\nThe attached class(sorry - corporate firewall wouldn't allow me to create a patch) is suitable for my own needs (where the prefix is provided in lower case, so is compared case-insensitively), but I acknowledge that a fuller fix may be more appropriate, e.g. providing a helper method for removing known prefixes in RealmBase.",
    "comments": [
      "I've added generic support for this to 8.0.x and 7.0.48 which will be included in 7.0.48 and 8.0.0-RC6 onwards. If you are able to test this just to make sure I didn't forget anything before those releases that would be great."
    ],
    "creation_ts": "2013-12-03T16:30:00Z",
    "fixes": [
      55839
    ]
  },
  {
    "id": 41466,
    "summary": "NIO Connector: IllegalArgumentException: You can only write using the application write buffer provided by the handler",
    "description": "Trying to use NIO connector instead of APR connector using Tomcat6 HEAD, I get\nan IllegalArgumentException while in a call to sendAck.  \n\nLooking at InternalNioOutputBuffer.sendAck(), it uses ByteBuffer.wrap() to\ncreate a new ByteBuffer and uses this ByteBuffer in a call to writeToSocket.\nThere is a check in SecureNioChannel.write() that the ByteBuffer is the one\nstored in the \n\nCommenting the line 372 in SecureNioChannel.java fixes the problem.\n//if ( src != bufHandler.getWriteBuffer() ) throw new\nIllegalArgumentException(\"You can only write using the application write buffer\nprovided by the handler.\");\nBut I guess that the check is here for a valid reason, and a better fix would\nvery likely consist in fixing the sendAck or in adding an \"or\" condition to the\ntest for the case of sendAck().\n\nGRAVE: Cannot find message associated with key standardWrapper.acknowledgeException\njava.lang.IllegalArgumentException: You can only write using the application\nwrite buffer provided by the handler.\n\tat org.apache.tomcat.util.net.SecureNioChannel.write(SecureNioChannel.java:372)\n\tat org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:111)\n\tat\norg.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:434)\n\tat\norg.apache.coyote.http11.InternalNioOutputBuffer.sendAck(InternalNioOutputBuffer.java:418)\n\tat org.apache.coyote.http11.Http11NioProcessor.action(Http11NioProcessor.java:1028)\n\tat org.apache.coyote.Response.action(Response.java:183)\n\tat org.apache.coyote.Response.acknowledge(Response.java:310)\n\tat org.apache.catalina.connector.Response.sendAcknowledgement(Response.java:1154)\n\tat\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:169)\n\tat\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)\n\tat\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:212)\n\tat org.apache.coyote.http11.Http11NioProcessor.process(Http11NioProcessor.java:888)\n\tat\norg.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:624)\n\tat org.apache.tomcat.util.net.NioEndpoint$Worker.run(NioEndpoint.java:1467)\n\tat java.lang.Thread.run(Thread.java:595)",
    "comments": [
      "Created attachment 19460\nA patch fixing the issue, but not meant to be a definitive patch\n\nShould fix this differently since it removes a useful check that is not valid\nin only one special case (sendAck call)",
      "Patch is invalid and would lead to invalid SSL data being sent, bug is\nacknowledged and will be fixed.",
      "The following fix has been applied\n\nIndex: java/org/apache/tomcat/util/net/NioSelectorPool.java\n===================================================================\n--- java/org/apache/tomcat/util/net/NioSelectorPool.java        (revision 500888)\n+++ java/org/apache/tomcat/util/net/NioSelectorPool.java        (working copy)\n@@ -103,6 +103,10 @@\n         boolean timedout = false;\n         int keycount = 1; //assume we can write\n         long time = System.currentTimeMillis(); //start the timeout timer\n+        if ( socket.getBufHandler().getWriteBuffer()!= buf ) {\n+            socket.getBufHandler().getWriteBuffer().put(buf);\n+            buf = socket.getBufHandler().getWriteBuffer();\n+        }\n         try {\n             while ( (!timedout) && buf.hasRemaining() ) {\n                 if ( keycount > 0 ) { //only write if we were registered for a\nwrite"
    ],
    "creation_ts": "2007-01-25T09:12:11Z",
    "fixes": [
      41466
    ]
  },
  {
    "id": 47453,
    "summary": "JasperException for deferred-method with return type void",
    "description": "Created attachment 23908\nZipped Eclipse 3.4 projects\n\nI tried to get the JSF sample application bookstore6 from the SUN Java EE 5 Tutorial running.\n\nEnvironment:  \nTomcat Version : 6.0.20\nEclipse Version: 3.4\nJava JDK Version: jdk1.5.0_17\n\nSee: http://java.sun.com/javaee/5/docs/tutorial/doc/bnara.html\n\nI added jsf-api.jar, jsf-impl.jar and jstl-1.1.2.jar to Tomcat's lib directory, then created the project (bookstoreJSF and utility project bookstore)and populated it with the sample source files from the Java EE 5 tutorial.\n\nI created a Tomcat Server in the Eclipse workspace and added the project to the Tomcat Server.\n\nThe server and the web application started fine.\n\nWhen I directed my browser (Firefox 3) at the starting page of the project (http://localhost:8080/bookstoreJSF), I got a Jasper Exception:\n\norg.apache.jasper.JasperException: /chooselocale.jsp(45,12) Unknown attribute type (void) for attribute actionListener.\n\tat org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:40)\n\tat org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:407)\n\tat org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:236)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.checkXmlAttributes(Validator.java:1099)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:821)\n\tat org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1530)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2411)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:840)\n\tat org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1530)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2411)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:840)\n\tat org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1530)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2411)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:840)\n\tat org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1530)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2411)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2417)\n\tat org.apache.jasper.compiler.Node$Root.accept(Node.java:495)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n\tat org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1736)\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:183)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:332)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:312)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:299)\n\tat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:586)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:317)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646)\n\tat org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:436)\n\tat org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:374)\n\tat org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:302)\n\tat com.sun.faces.context.ExternalContextImpl.dispatch(ExternalContextImpl.java:410)\n\tat com.sun.faces.application.ViewHandlerImpl.executePageToBuildView(ViewHandlerImpl.java:468)\n\tat com.sun.faces.application.ViewHandlerImpl.renderView(ViewHandlerImpl.java:140)\n\tat com.sun.faces.lifecycle.RenderResponsePhase.execute(RenderResponsePhase.java:110)\n\tat com.sun.faces.lifecycle.Phase.doPhase(Phase.java:100)\n\tat com.sun.faces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:139)\n\tat javax.faces.webapp.FacesServlet.service(FacesServlet.java:266)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646)\n\tat org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:436)\n\tat org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:374)\n\tat org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:302)\n\tat org.apache.jasper.runtime.PageContextImpl.doForward(PageContextImpl.java:706)\n\tat org.apache.jasper.runtime.PageContextImpl.forward(PageContextImpl.java:677)\n\tat org.apache.jsp.index_jsp._jspService(index_jsp.java:91)\n\tat org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)\n\tat java.lang.Thread.run(Thread.java:595)\n\n\nThe problem comes from an actionListener defined in the taglib (see bookstore.tld in the attached project bookstoreJSF) with a method-signature using 'void' as return type.\n\nI found no way to work around the problem. Then I looked up the source code for org.apache.jasper.compiler.Validator.\n\nFrom what I understand, the (inner class) method ValidateVisitor.checkXmlAttributes checks the deferred-method's return type from the taglib. The call to JspUtil.toClass then fires a ClassNotFoundException for the method's return type 'void'. This triggers the JasperException 'invalid attribute type' that I see in the Tomcat console.\n\nThe test for a 'deferred-value' type is perfectly correct, but the return type for a deferred-method should be legally specifiable as void.",
    "comments": [
      "Please see if the attached patch fixes the issue\n\nIndex: java/org/apache/jasper/compiler/JspUtil.java\n===================================================================\n--- java/org/apache/jasper/compiler/JspUtil.java        (revision 833094)\n+++ java/org/apache/jasper/compiler/JspUtil.java        (working copy)\n@@ -338,6 +338,8 @@\n             c = float.class;\n         else if (\"double\".equals(type))\n             c = double.class;\n+        else if (\"void\".equals(type))\n+            c = void.class;\n         else if (type.indexOf('[') < 0)\n             c = loader.loadClass(type);",
      "updating status to NEEDINFO based on last comment",
      "I can confirm that Tim's proposed patch does indeed fix the compilation problem.\n\nI have applied the patch to trunk and proposed it for 6.0.x",
      "Patch applied to 6.0.x and will be included in 6.0.21 onwards."
    ],
    "creation_ts": "2009-06-30T01:46:56Z",
    "fixes": [
      47453
    ]
  },
  {
    "id": 45794,
    "summary": "Patch causes JNDIRealm to bind with user entered credentials",
    "description": "This patch causes the JNDIRealm to bind with the credentials passed in by the user if user lookup fails when bound anonymously.\n\nI have updated the patch from http://markmail.org/message/qrmrubh3gfrz5yo5 to\nmatch up with the current source release for tomcat 6.0.18.\n\nMy environment:\nJava: 1.5.0_16\nOS: Debian Testing (2.6.26)\nTomcat: 6.0.18\n\nThanks,\nWilliam Beene",
    "comments": [
      "Created attachment 22578\nPatch that this entry references.",
      "Excellent! Thanks for porting my patch forward and getting it committed! SVN revision 712038.",
      "This patch has been included in the Tomcat distribution since version 6.0.21. I guess the bug can be closed?",
      "Yep"
    ],
    "creation_ts": "2008-09-12T11:15:48Z",
    "fixes": [
      45794
    ]
  },
  {
    "id": 60409,
    "summary": "IllegalArgumentException at java.nio.Buffer.position at SocketWrapperBase.transfer()",
    "description": "An unexpected exception found in log.\n\nSEVERE: Error finishing response\njava.lang.IllegalArgumentException\n  at java.nio.Buffer.position(Buffer.java:244)\n  at sun.nio.ch.IOUtil.write(IOUtil.java:68)\n  at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)\n  at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:134)\n  at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)\n  at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:157)\n  at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:125\n  at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:670)\n  at org.apache.tomcat.util.net.SocketWrapperBase.flushBlocking(SocketWrapperBase.java:60\n  at org.apache.tomcat.util.net.SocketWrapperBase.flush(SocketWrapperBase.java:597)\n  at org.apache.coyote.http11.Http11OutputBuffer.flushBuffer(Http11OutputBuffer.java:519)\n  at org.apache.coyote.http11.Http11OutputBuffer.finishResponse(Http11OutputBuffer.java:318)\n  at org.apache.coyote.http11.Http11Processor.endRequest(Http11Processor.java:1458)\n  at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:823)\n  at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n  at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:7\n  at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)\n  at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n  at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n  at java.lang.Thread.run(Thread.java:745)\n\nI'm not sure but cause may be the same as in recently fixed bug 60372. SocketWrapperBase also does not guard Buffer.limit() usages. Looks like all usages of this method on reusable buffers should be checked.",
    "comments": [
      "Hi,\n\nDo you have a reproducible scenario? It will help.\nAlso is it reproducible every time or just under load?\n\nThanks,\nVioleta",
      "Created attachment 34473\nA sample of stack traces",
      "1-3 errors per day under load. At least it has a stack trace. It's not easy to simulate I/O error at right time to reproduce it.\n\nThere are too many assorted messages in logs. After some filtering and search I see that this exception usualy happends just a two or three seconds after\n\norg.apache.coyote.http11.Http11Processor service\nINFO: Error parsing HTTP request header\n Note: further occurrences of HTTP header parsing errors will be logged at DEBUG level.\njava.lang.IllegalStateException: Unexpected state: headers already parsed. Buffer not recycled?\n  at org.apache.coyote.http11.Http11InputBuffer.parseHeaders(Http11InputBuffer.java:550)\n\norg.apache.coyote.http11.Http11Processor endRequest\nSEVERE: Error finishing response\njava.lang.NullPointerException\n  at org.apache.coyote.http11.Http11OutputBuffer.commit(Http11OutputBuffer.java:351)\n\nSee attachment for full traces.\n\nSo all of them may be related. There are many such errors in service and endRequest, but only a few at Buffer.position().\n\nSometimes it has a longer stack trace (see sample in the same attachment).",
      "Created attachment 34478\nCompressed journalctl output\n\nI've uploaded a nearly full log (without sensitive data and unrelevant messages from web applications).\n\nThere are also a lot of\n\norg.apache.tomcat.util.net.AbstractEndpoint countDownConnection\nWARNING: Incorrect connection count, multiple socket.close called on the same socket.\n\nafter some uptime.",
      "Hi,\n\nI succeeded to reproduce the exceptions from this issue [1].\n\n1. Request a file with such a length so that \"send file\" is used.\n - just before serving the file [2], delete it, thus it will cause the processor to be released and recycled. As a result this processor will be added to the \"recycled processors\" [3].\n - after this while finishing the response the processor will be released and recycled once again [4]. This will add the processor again to the \"recycled processors\". As a result one and the same processor will be in the \"recycled processors\".\n2. Now request twice. One and the same processor will be provided for the two different requests [5].\n\nI do not know whether you scenario is similar. If you can describe your scenario it will be helpful.\n\nSo currently we are using org.apache.tomcat.util.collections.SynchronizedStack<T> which does not guarantee uniqueness of the elements.\n\nRegards,\nVioleta\n\n\n\n[1] https://github.com/apache/tomcat/commit/74a12f550478b34261b39d2e324b3951e2ef80cc\n[2] https://github.com/apache/tomcat/blob/trunk/java/org/apache/tomcat/util/net/NioEndpoint.java#L891\n[3] https://github.com/apache/tomcat/blob/trunk/java/org/apache/coyote/AbstractProtocol.java#L927\n[4] https://github.com/apache/tomcat/blob/trunk/java/org/apache/coyote/AbstractProtocol.java#L854\n[5] https://github.com/apache/tomcat/blob/trunk/java/org/apache/coyote/AbstractProtocol.java#L728",
      "To date, the design decision has been that the request processing thread is responsible for ensuring that a processor is only recycled once per request.\n\nOne reason for not making it a cache responsibility is that the cache only tracks unused processors so preventing duplicates isn't guaranteed to fix the problem.",
      "Created attachment 34484\nUnexpected IllegalStateException in HttpServletResponse.sendError()\n\n(In reply to Violeta Georgieva from comment #5)\n>  - just before serving the file [2], delete it, thus it will cause the\n> processor to be released and recycled.\nI don't think that this is my case. Static content is not touched at all in this period. May be more unknown causes exist. I'm still not able to find a sequence to reproduce it.\n\nI've uploaded a one more strange exception. Last change in this directory was six month ago. All these requests are definitely should return 404. But one request throws a strange exception and I'm unable too see how it possible in DefaultServlet. Two more exceptions follow it. This also looks like response was incorretly reused.",
      "I've appended useSendfile=\"false\" to all HTTP connectors for testing purposes.",
      "Created attachment 34485\nPatch proposal\n\nHi Mark,\n\n(In reply to Mark Thomas from comment #6)\n> To date, the design decision has been that the request processing thread is\n> responsible for ensuring that a processor is only recycled once per request.\n> \n> One reason for not making it a cache responsibility is that the cache only\n> tracks unused processors so preventing duplicates isn't guaranteed to fix\n> the problem.\n\nWhat do you think about this approach?\nThe patch is made against Tomcat 9 trunk.\n\nThanks,\nVioleta",
      "Created attachment 34486\nAlternative patch\n\nMy initial impression looking at that patch was that it was fixing the symptom rather than the cause. The case it handles should never happen.\n\nI have attached an alternative patch that I believe addresses the root cause.",
      "(In reply to Mark Thomas from comment #10)\n> Created attachment 34486 [details]\n> Alternative patch\n> \n> My initial impression looking at that patch was that it was fixing the\n> symptom rather than the cause. The case it handles should never happen.\n> \n> I have attached an alternative patch that I believe addresses the root cause.\n\n+1",
      "(In reply to Mark Thomas from comment #10)\n> Created attachment 34486 [details]\n> Alternative patch\n> \n> My initial impression looking at that patch was that it was fixing the\n> symptom rather than the cause. The case it handles should never happen.\n> \n> I have attached an alternative patch that I believe addresses the root cause.\n\nI failed to reproduce the exception with the test case, for some reason, but the patch looks good.",
      "Hi Evgenij,\n\n(In reply to Evgenij Ryazanov from comment #8)\n> I've appended useSendfile=\"false\" to all HTTP connectors for testing\n> purposes.\n\nDo you have already some results with \"send file\" disabled?\n\nThanks a lot,\nVioleta",
      "Hi. I don't see such strange exceptions in journal any more. 16 hours may be not enough to be fully sure, however. But in previous runs (with sendfile) first NPE or IAE appears in a half an hour or so.",
      "Hi,\n\nI committed the Mark's patch.\n\nThe fix will be available in:\n- 9.0.x for 9.0.0.M14 onwards and\n- 8.5.x for 8.5.9 onwards\n\nI do not see these exceptions in 8.0.x and 7.0.x.\n\nRegard,\nVioleta",
      "Try enabling NIO in 8.0.X and you should be able to recreate same issue there.  We did using 8.0.30.  It seems to be NIO specific--8.5.4 was where we discovered it because NIO was enforced for the first time, but you can see it in older versions too.",
      "I've received a report at $work of a customer seeing the same / a similar issue with 8.0.38 + NIO + send file.\n\nWhile our test case doesn't trigger the issue, it does appear that there is still something that needs to be fixed in 8.0.x (and possibly earlier versions).\n\nRe-opening to investigate further.",
      "I have confirmed that the issue observed in 8.0.x is essentially the same as that seen in 8.5.x. Rather than introduce the issue, the refactoring appears simply to have made it easier to observe.\n\nIt has been fixed in:\n- 8.0.x for 8.0.40 onwards\n- 7.0.x for 7.0.74 onwards\n- 6.0.x for 6.0.49 onwards"
    ],
    "creation_ts": "2016-11-24T01:00:32Z",
    "fixes": [
      60409
    ]
  },
  {
    "id": 58178,
    "summary": "Exception not passed to c:catch in custom jsp tag",
    "description": "Created attachment 32935\nProject demonstrating the problem\n\nIf a custom tag uses the jstl <catch> tag, then the exception is saved into the page attributes, but is not actually available to other tags via EL expressions.\n\nIf, however, the <catch> tag is used directly in a jsp page, then the exception is propagated into the var and visible to subsequent El expressions.\n\n\nI'm attaching a small project that contains a taglib that demonstrates the problem. The project contains 2 jsps:\n\n1. no-tagtest.jsp that uses the <catch> and other jstl tags directly in the jsp\n2. tagtest.jsp that references a custom tag that uses the <catch> and other jstl tags.\n\nThe problem seems to be that when a custom tag uses any other tags, then the page context is an instance of JspContextWrapper. When resolving el expressions, the JspContextWrapper.getElContext() returns an ELContext for the rootContext, rather than the page context. In this example, the <catch> tag saves the exception as an attribute named \"error\" in the page context attributes (the page context will be an instance of JspContextWrapper). However, when the \"error\" variable is referenced later in an EL expression, the EL mechanism has a page context that is the root context of the JspContextWrapper and thus can't resolve that variable.",
    "comments": [
      "There is also a similar issue with EL and imports.\n\nThe page context issue should be fixable by wrapping the root ELContext. I'm not sure that the imports issue is as easy to fix. It might end up needed a new ELContext per tag instance that uses EL and that is going to get expensive (i.e. slow down JSP pages).\n\nMore thought required.",
      "I've dug into this a little more and I think this is fixable for both the reported use case and the import use case by wrapping the ELContext. I'm working on some test cases and a fix.",
      "The PageContext part of this has been fixed in trunk, 8.0.x (for 8.0.25 onwards) and 7.0.x (for 7.0.64 onwards).\n\nThe import part of this only affects 8.0.x onwards.",
      "Import part fixed in trunk and 8.0.x (for 8.0.25 onwards).",
      "Hello Mark, \nIs there way to patch the fix to 8.0.23? \nCould you please let us know the class/java files need to replaced in 8.0.23 to make this work?",
      "The patches for 8.0.x are r1694503 and r1694548.\n\nI would not recommend copying class files from one version to another. If you really want to patch this in 8.0.23 then you need to checkout the 8.0.23 tag, apply the two patches above and then build your patched version of 8.0.23 from source.\n\nI'd recommend not pathcing and upgrading to 8.0.latest instead.",
      "See also http://tomcat.markmail.org/thread/cnqkckysilwhpyip for a discussion on a follow-up issue and r1785823, r1785826 and r1785827"
    ],
    "creation_ts": "2015-07-24T10:00:56Z",
    "fixes": [
      58178
    ]
  },
  {
    "id": 63286,
    "summary": "Inconsistencies between AccessLogValve and mod_log_config",
    "description": "I am trying to achieve consistent log formats between HTTPd and Tomcat. Unfortunately, there are subtle differences between conversion patterns.\n\nIn Tomcat I have \"%h %u %{yyyy-MM-dd'T'HH:mm:ss.SSS}t &quot;%r&quot; %s %b %T\"\nIn HTTPd I have \"%h %u %{%FT%T}t.%{msec_frac}t \\\"%r\\\" %>s %b %{ms}T\"\n\nnow the inconsistencies:\n%D: In Tomcat it is millisecond resolution, HTTPd microsecond resolution\n%T: both in second resolution, but Tomcat used floating point while HTTPd uses integers\n\n%{UNIT}T does not exist on Tomcat at all. Granted.\n\nThis all feels weird probably for most having different semantics for the same pattern. I think this needs to be aligned, or at least documented!",
    "comments": [
      "Also see bug 56966. I don't recall why that stalled. It may have been related to the API changes required. Probably time to take another look.",
      "(In reply to Mark Thomas from comment #1)\n> Also see bug 56966. I don't recall why that stalled. It may have been\n> related to the API changes required. Probably time to take another look.\n\nIt looks related, but the issue you mention is about resolution, this one's different. Three years have passed since the ticket has been touched.",
      "We can't change the behaviour in the middle of the 9.0.x series. The risk of braking things for users is too great. I've added it to the TODO list for 10.0.x.\n\nMeanwhile, we can clearly document the current behaviour and note the differences with httpd. Working on that now...",
      "That's fine by me. Though, %{UNIT}T can be introduced in 8.5 and 9, can't it?",
      "The documentation has been fixed in:\n- master for 9.0.18 onwards\n- 8.5.x for 8.5.40 onwards\n- 7.0.x for 7.0.94 onwards\n\nMoving this to enhancement request to add support for %{UNIT}T",
      "There's another difference between httpd and Tomcat access logs that people often stumble upon: By default the request timestamp for httpd is the time of the beginning of the request, for Tomcat it is the end of the requst (or more precisely the moment of peparing the access log line).\n\nSince httpd 2.4 and TC 7 (?) one can choose between begin and end with a documented pattern, but the defaults still differ.\n\nThe delta makes it harder to align the logs in case of long running requests.\n\nOne consequence is, that the timestamp in Tomcat access logs always increase monotonically, but not so in httpd access log. Later but faster requests might get logged before earlier but slower requests.\n\nShould we document this as well?\n\nRegards,\n\nRainer",
      "This should be fixed in 10.0.0-M2.",
      "(In reply to Remy Maucherat from comment #7)\n> This should be fixed in 10.0.0-M2.\n\nI fail to find this commit in https://github.com/apache/tomcat/commits/master/java/org/apache/catalina/valves/AccessLogValve.java and https://github.com/apache/tomcat/commits/master/java/org/apache/catalina/valves/AbstractAccessLogValve.java. Where is it?",
      "AccessLogValve was not doing anything related. The argument that used milliseconds was in AbstractALV, now it uses nanoseconds.",
      "Let me recheck this. I hope docs have been updated too.",
      "(In reply to Remy Maucherat from comment #9)\n> AccessLogValve was not doing anything related. The argument that used\n> milliseconds was in AbstractALV, now it uses nanoseconds.\n\nR\u00e9my, I have updated documentation to reflect your changes."
    ],
    "creation_ts": "2019-03-25T11:52:21Z",
    "fixes": [
      63286
    ]
  },
  {
    "id": 64403,
    "summary": "HTTP/2 with compression does not unset Content-Length",
    "description": "When applying GZIP compression, no Content-Length header should be set as the response size cannot be determined in advance. CompressionConfig.useCompression therefore calls response.setContentLength(-1).\n\nThe behaviour I am seeing, is that with Http2 and GZIP compression, I still get a Content-Length header, but for the original response size. This causes all kinds of weird quirks in browsers when it comes to caching resources (as the browser cannot reliably determine the resource size, it will no cache the resource).\n\nThe Http11Processor.prepareResponse() method first sets up compression, and then sets the Content-Length. The HTTP2 StreamProcessor.prepareResponse() call StreamProcessor.prepareHeaders(...) and that one does this stuff in the wrong order: it first sets the content-length header and then sets up compression.",
    "comments": [
      "Thanks for the report. I'm surprised the clients didn't reject the response entirely.\n\nFixed in:\n- master for 10.0.0-M5 onwards\n- 9.0.x for 9.0.35 onwards\n- 8.5.x for 8.5.55 onwards",
      "Thanks for the fix!\n\nYes, I was wondering about that too, IIRC the spec requires clients to drop such invalid responses."
    ],
    "creation_ts": "2020-05-01T16:54:15Z",
    "fixes": [
      64403
    ]
  },
  {
    "id": 54377,
    "summary": "RemoteIpFilter does not correctly set request attributes for AccessLog",
    "description": "In RemoteIpFilter class, there is code that publishes the new request attributes to AccessLog (see below).\n\n821             if (requestAttributesEnabled) {\n822                 request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n823                         request.getRemoteAddr());\n824                 request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n825                         request.getRemoteHost());\n826                 request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n827                         request.getProtocol());\n828                 request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n829                         Integer.valueOf(request.getServerPort()));\n830             }\n\nThe problem is that the source values should come from xRequest, e.g. xRequest.getRemoteAddr() and xRequest.getRemoteHost(), etc.\n\nAs it is written above, RemoteIpFilter simply republishes the current values, and AccessLog therefore does not display the correct values.",
    "comments": [
      "Created attachment 29820\npatch proposal",
      "Created attachment 29821\ntest case",
      "+1\n\nPlease find a patch proposal and a test case.\nRemoteIpValve sets the correct request attributes, only RequestIpFilter need correction.\n\nRegards\nVioleta",
      "Thanks for the patch and test cases. This has been applied to trunk and 7.0.x and will be included in 7.0.35 onwards."
    ],
    "creation_ts": "2013-01-05T23:52:37Z",
    "fixes": [
      54377
    ]
  },
  {
    "id": 65553,
    "summary": "Orphaned thread by JNDIRealm / clearReferencesThreads reports memory leak",
    "description": "Created attachment 38020\nStacktrace on creation of orphaned thread\n\nHello,\n \nwe are using the org.apache.catalina.realm.JNDIRealm for authentication of users against our windows AD.\nWhen undeploying the application, we see the following  warning in our logs:\n \nWARNING [Catalina-utility-1]  org.apache.catalina.loader.Webapp ClassLoaderBase.clearReferencesThreads The  web application [ROOT] appears to have started a thread named [Thread-106] but  has failed to stop it. This is very likely to create a memory leak. Stack trace  of thread:\n java.base@11.0.3/java.net.SocketInputStream.socketRead0(Native  Method)\n java.base@11.0.3/java.net.SocketInputStream.socketRead(SocketInputStream.java:115)\n java.base@11.0.3/java.net.SocketInputStream.read(SocketInputStream.java:168)\n java.base@11.0.3/java.net.SocketInputStream.read(SocketInputStream.java:140)\n java.base@11.0.3/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:448)\n java.base@11.0.3/sun.security.ssl.SSLSocketInputRecord.bytesInCompletePacket(SSLSocketInputRecord.java:68)\n java.base@11.0.3/sun.security.ssl.SSLSocketImpl.readApplicationRecord(SSLSocketImpl.java:1104)\n java.base@11.0.3/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:823)\n java.base@11.0.3/java.io.BufferedInputStream.fill(BufferedInputStream.java:252)\n java.base@11.0.3/java.io.BufferedInputStream.read1(BufferedInputStream.java:292)\n java.base@11.0.3/java.io.BufferedInputStream.read(BufferedInputStream.java:351)\n java.naming@11.0.3/com.sun.jndi.ldap.Connection.run(Connection.java:832)\n java.base@11.0.3/java.lang.Thread.run(Thread.java:834)\n \nThe warning is not always shown but quite often.\n \nSummary of the analysis of the problem: \nOn tomcat startup, the worker-thread is running under the  tomcat classloader. But when a reconnect happens, the thread is running with  the classloader of the web application and gets thus reported.\n \nThe details:\nDigging into the problem via remote debugging showed the  reason how this happens:\nDuring startup, Tomcat is initializing the JNDIRealm. The  open-method of JNDIRealm is switching the classloader between bootstrap-CL and  tomcat-lib-CL, depending on the attribute \"useContextClassLoader\".\nAfterwards the context-Object is created  (createDirContext). Within this LdapCtx, an LdapClient is used to communicate  with the AD-Server.\nThis LdapClient uses a com.sun.jndi.ldap.Connection for  TCP communication. This connection opens the reported Worker-Thread.\nThis can be seen at https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/master/src/java.naming/share/classes/com/sun/jndi/ldap/Connection.java  around line 243 --> worker = Obj.helper.createThread(this);\n \nSo far, so good.\n \nSomehow, the com.sun.jndi.ldap.Connection is sometimes  closed and the thread dies. At least, the thread is not visible any more. Maybe because of a timeout on the AD-server side or something else happened.\nIf a new user accesses the site, the JNDIRealm is  authenticating the user.\nThis triggers the following chain (path is shortened):  JNDIRealm.getUserBySearch --> LdapCtx.dosearch --> LdapCtx.ensureOpen  --> LdapCtx.connect --> LdapClient.getInstance -->  Connection.<init>\n\nA detailed stack is attached as an image.\n\nThis call chain creates a new com.sun.jndi.ldap.Connection and  thus a new thread. But this time, the thread is connected to the classloader of  the web-application.\nOn undeployment, the thread is thus reported to be orphaned.\n \nIt was tested with Tomcat 9.0.52, Windows 10, OpenJDK  11.0.12_7.\n \nAs the authentication is conducted within tomcat, before  the application is triggered, thus the application can't handle that error.\n\nThe flag \"useContextClassLoader\" is not taken into account during authentication.\nDuring this process a re-connect can occur and create the thread with the wrong classloader.\n \nThanks in advance,\nThomas",
    "comments": [
      "One view is that the JRE should not be doing this - or at least doing it in a way that doesn't run the risk of memory leaks in a Java EE / Jakarta EE environment. We have raised JRE bugs for issues like this in the past and they have been fixed.\n\nThe counter view is that this thread is not a one-off and is not short-lived (the typical cases for JRE bugs that have been fixed) and Tomcat has already acknowledged - with the useContextClassLoader flag - that it needs to be taking action to ensure that any threads are created with the expected class loader.\n\nIf the consensus is that Tomcat needs to handle this then we'd need to ensure that every version of authenticate() also set the class loader if required. We'd probably want to refactor the existing handling to make sure we don't try setting the class loader twice.\n\nI am currently leaning towards handling this in Tomcat rather than raising a JRE bug.\n\nThoughts?",
      "I see the same in my application, though not with the JNDIRealm:\n\n2021-08-31T20:25:13.679 INFORMATION [https-openssl-apr-8443-exec-67] org.apache.catalina.core.ApplicationContext.log HTMLManager: stop: Stopping web application '/smartld##001'\n2021-08-31T20:25:13.712 INFORMATION [https-openssl-apr-8443-exec-67] org.apache.catalina.core.ApplicationContext.log org.tuckey.web.filters.urlrewrite.UrlRewriteFilter INFO: destroy called\n\n> 2021-09-01T15:55:23.726 WARNUNG [deblndw028v.ad001.siemens.net-startStop-3] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [ket##001] appears to have started a thread named [Thread-9] but has\n>  java.lang.Object.wait(Native Method)\n>  java.lang.Object.wait(Object.java:502)\n>  com.sun.jndi.ldap.Connection.pauseReader(Connection.java:840)\n>  com.sun.jndi.ldap.Connection.run(Connection.java:983)\n>  java.lang.Thread.run(Thread.java:748)\n\nwhich comes right after a stop in the manager app or a container shutdown:\n> 2021-09-01T15:55:19.615 INFORMATION [main] org.apache.catalina.core.StandardServer.await A valid shutdown command was received via the shutdown port. Stopping the Server instance.\n> 2021-09-01T15:55:19.616 INFORMATION [main] org.apache.coyote.AbstractProtocol.pause Pausing ProtocolHandler [\"https-openssl-apr-8443\"]\n> 2021-09-01T15:55:19.635 INFORMATION [main] org.apache.catalina.core.StandardService.stopInternal Stopping service [Catalina]\n> 2021-09-01T15:55:19.638 INFORMATION [deblndw028v.ad001.siemens.net-startStop-3] org.apache.catalina.core.ApplicationContext.log Destroying Spring FrameworkServlet 'dispatch'\n> 2021-09-01T15:55:23.530 INFORMATION [deblndw028v.ad001.siemens.net-startStop-3] org.apache.catalina.core.ApplicationContext.log Closing Spring root WebApplicationContext\n\n\nI think a solution within the JDK should be pursued first.",
      "Hello Michael,\nif the leak is reported without using JNDIRealm, it might be\nthat your application creates an LDAP-Query or InitialDirContext without closing it?\nMaybe you can use a breakpoint in \"com.sun.jndi.ldap.Connection\" to see which code is causing the thread to start.\nI opened the bug because Tomcat is causing the thread to start, out of the scope of the web-application. It can also happen that a web application causes this leak report but then the application might be able to handle it.",
      "(In reply to Thomas Hoffmann from comment #3)\n> Hello Michael,\n> if the leak is reported without using JNDIRealm, it might be\n> that your application creates an LDAP-Query or InitialDirContext without\n> closing it?\n> Maybe you can use a breakpoint in \"com.sun.jndi.ldap.Connection\" to see\n> which code is causing the thread to start.\n> I opened the bug because Tomcat is causing the thread to start, out of the\n> scope of the web-application. It can also happen that a web application\n> causes this leak report but then the application might be able to handle it.\n\nOne of the reasons is https://github.com/spring-projects/spring-ldap/issues/489\n\nI have reviewed other spots, but always close/release connections as well as naming enumerations. One reaons could be that I create test connection in startInternal and that could be subject to not the webapp classloader.\nI guess I have missed something.",
      "OpenJDK bug created\n\nhttps://bugs.openjdk.java.net/browse/JDK-8273874\n\nWe will still need to address this in Tomcat to cover the time until we can guarantee that the version of the JRE that Tomcat is running on has the appropriate fix.",
      "Work-around added in:\n- 10.1.x for 10.1.0-M6 onwards\n- 10.0.x for 10.0.12 onwards\n- 9.0.x for 9.0.54 onwards\n- 8.5.x for 8.5.72 onwards\n\nIt will need to stay in place for these versions. Once there a fix in the JRE and Tomcat's minimum JRE version is known to include the fix, then we can remove the work-around."
    ],
    "creation_ts": "2021-09-06T07:53:40Z",
    "fixes": [
      65553
    ]
  },
  {
    "id": 69419,
    "summary": "Redundant code execution in nested ApplicationHttpRequest.setAttribute()",
    "description": "Created attachment 39916\nPatch for 9.x\n\nJSP inclusions wrap the current ServletRequest in a new ApplicationHttpRequest; nested inclusions therefore result in nested chains of ApplicationHttpRequests.  In our large, etc. application, this nesting ranges from 1 - 7 layers deep before disappearing from our data (meaning: 8+ exists but it's extremely rare).\n\nAny access to the request is handled first by the outermost ApplicationHttpRequest, then delegated to each item in the chain until it finally reaches the original, unwrapped request.  This unfortunately means that the expensive logic for identifying special values is executed for each nested layer, with the same result each time.\n\nThe attached patch file implements a fast-path that is used when delegating to a nested instance, eliminating both the duplicate special logic and many embedded virtual method lookups.  The patch includes the change, a speed test (added to TesterApplicationHttpRequestPerformance), and a JUnit test (added to TestApplicationHttpRequest).  Performance as observed on my machine:\n\n\nBefore: \nDepth 0: 970930633ns\nDepth 1: 1175171009ns\nDepth 4: 1950073374ns\nDepth 7: 3441997543ns\n\nAfter:\nDepth 0: 970601794ns\nDepth 1: 1210693988ns\nDepth 4: 1420921877ns\nDepth 7: 1831309561ns",
    "comments": [
      "Thanks for the patch. I applied a slightly simpler version of the fix that was more aligned with how similar problems have been addressed elsewhere in the code base.\n\nFixed in:\n- 11.0.x for 11.0.1 onwards\n- 10.1.x for 10.1.32 onwards\n-  9.0.x for  9.0.97 onwards",
      "Thank you!  :)  Nice upgrades, much simpler.",
      "@markt this version of the patch loses much of the performance gain, thanks to the repeated instanceof checks and typecasting:\n\nwhile (wrappedRequest instanceof ApplicationHttpRequest) {\n  wrappedRequest = ((ApplicationHttpRequest) wrappedRequest).getRequest();\n}\n\nThe initial patch avoided this by performing both operations once (during the constructor), and never doing them during the many calls to getAttribute().\n\nMy performance data, sorted from worst to best:\n\nBefore:\nDepth 0: 970930633ns\nDepth 1: 1175171009ns\nDepth 4: 1950073374ns\nDepth 7: 3441997543ns\n\nModified patch:\nDepth 0: 968298514ns (-0.5%)\nDepth 1: 1236370935ns (5%)\nDepth 4: 1865582436ns (-4%)\nDepth 7: 2525736664ns (-26%)\n\nOriginal patch:\nDepth 0: 970601794ns (0%)\nDepth 1: 1210693988ns (2.5%)\nDepth 4: 1420921877ns (-27%)\nDepth 7: 1831309561ns (-47%)\n\nCould we please update such that getAttribute() avoids the type checks?",
      "I see similar improvements (~50%) with just the simple patch but even better improvements (~75%) with a variation of the full patch.\n\nJust running some tests. Will commit shortly if all is good.",
      "Done.",
      "Validated.  Thanks!  :)",
      "This change reached production and had a greater-than-expected impact, totaling approximately 0.2% of cpu.  I can't explain the gap but hypothesize the lack of recursion enabled inlining, which enables further optimization by the JIT."
    ],
    "creation_ts": "2024-10-29T18:23:30Z",
    "fixes": [
      69419
    ]
  },
  {
    "id": 58624,
    "summary": "Websocket send blocks indefinitely in FutureToSendHandler",
    "description": "- Tomcat 8.0.24\n- APR connector disabled, using the NIO connector\n- SSL is on\n- Encoder is of type Encoder.Text<Object>\n\nWe found this during load tests, it only happened to one message out of millions but there is nothing special about that message.\n\nWe have a class that wraps javax.websocket.RemoteEndpoint.Basic to ensure that it's thread-safe - so messages are never sent from multiple threads on one socket.\n\nThe FutureToSendHandler gets stuck waiting for the call to onResult. Looking at the code, logically sendStringByCompletion(msg, completion) (WsRemoteEndpoint.java:573) must not call the onResult for some code path. I am trying to figure out where but no luck so far.\n\nThis is the first time we have seen this problem over many load tests so unfortunately we can't try to replicate on the latest at the moment.\n\n\"defaultEventExecutorGroup-3-18\" - Thread t@61\n   java.lang.Thread.State: WAITING\n\tat sun.misc.Unsafe.park(Native Method)\n\t- parking to wait for <2fcb7fa> (a java.util.concurrent.CountDownLatch$Sync)\n\tat java.util.concurrent.locks.LockSupport.park(Unknown Source)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(Unknown Source)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(Unknown Source)\n\tat java.util.concurrent.CountDownLatch.await(Unknown Source)\n\tat org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:76)\n\tat org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:31)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendObject(WsRemoteEndpointImplBase.java:521)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointBasic.sendObject(WsRemoteEndpointBasic.java:74)\n        ...",
    "comments": [
      "I mistakenly thought that packets sent with getBasicRemote() were sent on the same thread.\n\nTo add, all of the threads for sending messages are in the state of waiting for tasks - none of them are blocked:\n\n\"WebSocketServer-localhost-/MyApp-1453\" - Thread t@13892\n   java.lang.Thread.State: TIMED_WAITING\n\tat sun.misc.Unsafe.park(Native Method)\n\t- parking to wait for <785b947d> (a java.util.concurrent.SynchronousQueue$TransferStack)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)\n\tat java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)\n\tat java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)\n\tat java.util.concurrent.SynchronousQueue.poll(Unknown Source)\n\tat java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n\tat java.lang.Thread.run(Unknown Source)\n\n   Locked ownable synchronizers:\n\t- None\n\nSome other things that might be relevant from looking at the code:\n- We don't call the sendPing() or sendText() methods, only sendObject().\n- We don't use partial message decoding/encoding.\n- Batching is not enabled.\n- Looking at a heap dump, the only reference to the FutureSendHandler from the stuck thread is in the ConcurrentHashMap in org.apache.tomcat.websocket.WsSession.futures",
      "Sorry for all the noise.\n\nIf I understand correctly, the flow of sending messages goes like this:\n\nWsRemoteEndpointImplBase.startMessage -> messaged dispatched to WsServerContainer.executor -> calls WsRemoteEndpointImplBase.endMessage on completion (via EndMessageHandler).\n\nI'm wondering if there could be an exception in the executor callback. For example, there are some exceptions thrown in writeMessagePart (called by endMessage). If an exception was thrown there it would be thrown all the way up to the executor and not logged. Am I correct in saying that exceptions in executor tasks would not produce exceptions in the Tomcat logs? ThreadPoolExecutor doesn't log them to the console by (http://stackoverflow.com/q/2248131/281469)\n\n\nMy current working theory for what's happening is as follows: \n- Server starts sending a message\n- The client closes the connection before the executor finishes the message, which causes WsRemoteEndpointImplBase.closed to be set to true.\n- Server finishes sending the message, calls endMessage, which calls writeMessagePart which throws an IllegalStateException because closed=true.\n- Because of the exception the future never completes and the exception doesn't get logged.\n\nAt first I thought the synchronized (messagePartLock) block would protect against this. However it can still occur:\n- The executor task finishes and endMessage() reaches the end of the synchronized block (but before calling writeMessagePart).\n- The client close enters and exits the synchronized block in startMessage(). Calls writeMessagePart(), sets closed=true.\n- The executor task calls writeMessagePart().\n\nIf this is a race condition it is a very rare one - it occurred once in sending ~5 million messages during a soak test.",
      "(In reply to Barry Coughlan from comment #2)\n> My current working theory for what's happening is as follows: \n> - Server starts sending a message\n> - The client closes the connection before the executor finishes the message,\n> which causes WsRemoteEndpointImplBase.closed to be set to true.\n> - Server finishes sending the message, calls endMessage, which calls\n> writeMessagePart which throws an IllegalStateException because closed=true.\n> - Because of the exception the future never completes and the exception\n> doesn't get logged.\n\nI'm no expert, but what about this:\n\nThe Future won't complete, but it should probably throw ExecutionException if you call one of the \"get\" methods. You can unwrap that and see the exception that caused the operation to fail.",
      "(In reply to Christopher Schultz from comment #3)\n> (In reply to Barry Coughlan from comment #2)\n> > My current working theory for what's happening is as follows: \n> > - Server starts sending a message\n> > - The client closes the connection before the executor finishes the message,\n> > which causes WsRemoteEndpointImplBase.closed to be set to true.\n> > - Server finishes sending the message, calls endMessage, which calls\n> > writeMessagePart which throws an IllegalStateException because closed=true.\n> > - Because of the exception the future never completes and the exception\n> > doesn't get logged.\n> \n> I'm no expert, but what about this:\n> \n> The Future won't complete, but it should probably throw ExecutionException\n> if you call one of the \"get\" methods. You can unwrap that and see the\n> exception that caused the operation to fail.\n\nThe getBasicRemote().sendObject() calls the Future.get() on our behalf (see the stack trace in the first post). The .get() never returns because the onResult of the FutureToSendHandler never gets called.",
      "The race condition I was talking about was incorrect, as the if (!close) in endMessage() takes care of it. Also the exceptions are logged because the executor is called with execute() instead of submit().\n\nSo I'm back to square one :)",
      "Thanks for all the work on this.\n\nIt is worth updating to the latest 8.0.x in case one of the I/O or concurrency updates has improved this.\n\nI'm switching this to NEEDINFO. Ideally we need a test case but that is not essential. If you believe you have found a code path that could trigger this let us know and we'll take a look. As long as we can confirm the code path is theoretically possible, we'll be happy to fix it.",
      "(In reply to Mark Thomas from comment #6)\n> Thanks for all the work on this.\n> \n> It is worth updating to the latest 8.0.x in case one of the I/O or\n> concurrency updates has improved this.\n> \n> I'm switching this to NEEDINFO. Ideally we need a test case but that is not\n> essential. If you believe you have found a code path that could trigger this\n> let us know and we'll take a look. As long as we can confirm the code path\n> is theoretically possible, we'll be happy to fix it.\n\nHi Mark,\n\nI managed to replicate this on 8.0.24 and 8.0.28. I don't think I could automate a test to replicate this, but it can be shown with a simple example by setting breakpoints.\n\n============================================================\n\nSample server endpoint:\n\n------------------------\n\npackage tomcatbug58624;\n\nimport javax.websocket.EncodeException;\nimport javax.websocket.Encoder;\nimport javax.websocket.EndpointConfig;\n\npublic class WsEncoder implements Encoder.Text<Object> {\n\n    @Override\n    public void destroy() {\n    }\n\n    @Override\n    public void init(EndpointConfig endpointConfig) {\n    }\n\n    @Override\n    public String encode(Object object) throws EncodeException {\n        return (String) object;\n    }\n\n}\n\n------------------------\n\npackage tomcatbug58624;\n\nimport java.io.IOException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nimport javax.websocket.CloseReason;\nimport javax.websocket.EncodeException;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(value = \"/bug58624\", encoders = WsEncoder.class)\npublic class WsEndpoint {\n\n    public static class SendWsMessage implements Runnable {\n        private Session session;\n\n        public SendWsMessage(Session session) {\n            this.session = session;\n        }\n\n        @Override\n        public void run() {\n            try {\n                session.getBasicRemote().sendObject(\"test\");\n            } catch (IOException | EncodeException e) {\n                e.printStackTrace();\n            }\n        }\n\n    }\n\n    private static final ExecutorService ex = Executors.newFixedThreadPool(1);\n\n    @OnOpen\n    public void onOpen(Session session) throws IOException {\n        ex.submit(new SendWsMessage(session));\n    }\n\n    @OnMessage\n    public void onMessage(String message) {\n        System.out.println(\"OnMessage: \" + message);\n    }\n\n    @OnError\n    public void onError(Throwable t) {\n        System.err.println(\"OnError:\");\n        t.printStackTrace();\n    }\n\n    @OnClose\n    public void onClose(Session session, CloseReason cr) {\n        System.out.println(\"Closed \" + cr);\n    }\n}\n\n-----------------------------\n\nSet breakpoint on WsEndpoint$SendWsMessage:29 (The .sendObject() line)\nSet breakpoint on WsRemoteEndpointImplServer:76 (start of doWrite())\n\n- Open websocket\n  - Thread 1 breaks on sendObject()\n- Close websocket from client side (I just did Ctrl+C with Tyrus CLI)\n   - Thread 2 breaks on doWrite()\n- Continue Thread 1 so that the message gets queued to send\n- Continue Thread 2\n\nsendObject() waits indefinitely for Future.get(). The reason is that doWrite is not set to true in endMessage() because closed = true.\n\nThis would happen any time a message is queued to be sent while a close is in progress.\n\nI\u2019m not familiar enough with the codebase to submit a patch, but it looks to me like if closed==true in endMessage(), it should call sendResult with an exception for any messages still in the queue.",
      "Thanks for the analysis. I'll take a look.",
      "Thanks for the great analysis and test case. I've fixed this in 9.0.x for 9.0.0.M2. There has been some refactoring of the relevant code so a back-port may take a little longer than usual.",
      "(In reply to Mark Thomas from comment #9)\n> Thanks for the great analysis and test case. I've fixed this in 9.0.x for\n> 9.0.0.M2. There has been some refactoring of the relevant code so a\n> back-port may take a little longer than usual.\n\nThanks a lot for the speedy fix Mark.\n\nFor future readers, we currently work around this in Tomcat 8 by replicating the behaviour of getBasicRemote().sendObject() but with a timeout on the future, so that at least our application can recover: \n\nFuture<Void> f = session.getAsyncRemote().sendObject(...)        \ntry {\n    f.get(10, TimeUnit.SECONDS);\n} catch (InterruptedException e) {\n    throw new IOException(e);\n} catch (ExecutionException e) {\n    Throwable cause = e.getCause();\n    if (cause instanceof IOException) {\n        throw (IOException) cause;\n    } else if (cause instanceof EncodeException) {\n        throw (EncodeException) cause;\n    } else {\n        throw new IOException(e);\n    }\n} catch (TimeoutException e) {\n    throw new IOException(e);\n}",
      "I've back-ported the fix to 8.0.x for 8.0.30 onwards and to 7.0.x for 7.0.66 onwards.",
      "Created attachment 33320\nTest to check that session.close() does not call OnError",
      "Hi Mark,\n\nI was writing a test case for bug57489 and came across a problem with session.close() that I think is related to this fix. Since session.close() sets state = State.CLOSING the block in registerFuture() fails. See test case attached.\n\n\n\n02-Dec-2015 16:49:33.351 FINE [main] org.apache.tomcat.websocket.WsSession.sendCloseMessage Failed to send close message for session [0] to remote endpoint\n java.io.IOException: java.util.concurrent.ExecutionException: java.io.IOException: Unable to write the complete message as the WebSocket connection has been closed\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:282)\n\tat org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:584)\n\tat org.apache.tomcat.websocket.WsSession.doClose(WsSession.java:488)\n\tat org.apache.tomcat.websocket.WsSession.close(WsSession.java:455)\n\tat org.apache.tomcat.websocket.WsSession.close(WsSession.java:449)\n\tat org.apache.tomcat.websocket.server.TestCleanClose.testOnErrorNotCalledWhenClosingConnection(TestCleanClose.java:46)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.util.concurrent.ExecutionException: java.io.IOException: Unable to write the complete message as the WebSocket connection has been closed\n\tat org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:102)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:275)\n\t... 34 more\nCaused by: java.io.IOException: Unable to write the complete message as the WebSocket connection has been closed\n\tat org.apache.tomcat.websocket.WsSession.registerFuture(WsSession.java:658)\n\tat org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:92)\n\t... 35 more",
      "Should I change this to reopened just so this isn't forgotten about?",
      "+1 for reopening the case or creating a new bug, if this (java.io.IOException: Unable to write the complete message as the WebSocket connection has been closed) is not related to the existing bug.\n\nSpring also recreated the error in one of their tests and had to ignore it until Tomcat is fixed: https://jira.spring.io/browse/INT-3909",
      "This new issue is being tracked under bug 59014",
      "Using tomcat version 8.0.38. Seeing the block on sendText message indefinitely.\n\n\"pool-2-thread-2\" #26 prio=5 os_prio=0 tid=0x0bc22c00 nid=0x5ca7 waiting for monitor entry [0x8636f000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n        at org.apache.tomcat.websocket.WsSession.registerFuture(WsSession.java:662)\n        - waiting to lock <0x9324a678> (a java.lang.Object)\n        at org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:109)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendPartialString(WsRemoteEndpointImplBase.java:256)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendString(WsRemoteEndpointImplBase.java:195)\n        at org.apache.tomcat.websocket.WsRemoteEndpointBasic.sendText(WsRemoteEndpointBasic.java:37)"
    ],
    "creation_ts": "2015-11-18T12:16:29Z",
    "fixes": [
      58624
    ]
  },
  {
    "id": 69360,
    "summary": "Inconsistent DELETE behavior between DefaultServlet and WebdavServlet",
    "description": "If a resource cannot be deleted by the DefaultServlet https://github.com/apache/tomcat/blob/c50b8aa2588c85df86c0c6e0cd03e79700822360/java/org/apache/catalina/servlets/DefaultServlet.java#L699-L700 METHOD_NOT_ALLOWED is returned. Either the resource is readOnly or java.io.File#delete() returns false. Reasonable. But the WebdavServlet says https://github.com/apache/tomcat/blob/c50b8aa2588c85df86c0c6e0cd03e79700822360/java/org/apache/catalina/servlets/WebdavServlet.java#L1703-L1714 INTERNAL_SERVER_ERROR which is inconsistent and not necessarily true. We can only return this if we use Files#delete(Path).\n\nIf no one objects I will return METHOD_NOT_ALLOWED for both servlets. Took me some time to search for the exception in the catalina.out which I haven't found until I have found this inconsistency.",
    "comments": [
      "Moreover, I'd even use the method sendNotAllowed() for consistency reasons.",
      "(In reply to Michael Osipov from comment #1)\n> Moreover, I'd even use the method sendNotAllowed() for consistency reasons.\n\nNope, won't work because when a collection is hit it could be partially deleted. I will stick to the status code for now. This change must be reviewed separately.",
      "METHOD_NOT_ALLOWED is not a bad status to return for WebDAV DELETE if it fails, although 500 is ok as well since the cause is not really known.",
      "(In reply to Remy Maucherat from comment #3)\n> METHOD_NOT_ALLOWED is not a bad status to return for WebDAV DELETE if it\n> fails, although 500 is ok as well since the cause is not really known.\n\nWell, for read-only it is false. The likelyhood for FS failures is smaller here, I guess. Are you OK with METHOD_NOT_ALLOWED consistency for both servlet?",
      "(In reply to Michael Osipov from comment #4)\n> (In reply to Remy Maucherat from comment #3)\n> > METHOD_NOT_ALLOWED is not a bad status to return for WebDAV DELETE if it\n> > fails, although 500 is ok as well since the cause is not really known.\n> \n> Well, for read-only it is false. The likelyhood for FS failures is smaller\n> here, I guess. Are you OK with METHOD_NOT_ALLOWED consistency for both\n> servlet?\n\nYes, as I was saying, I verified in some docs that METHOD_NOT_ALLOWED is a good return status code in that situation for WebDAV DELETE.",
      "(In reply to Remy Maucherat from comment #5)\n> (In reply to Michael Osipov from comment #4)\n> > (In reply to Remy Maucherat from comment #3)\n> > > METHOD_NOT_ALLOWED is not a bad status to return for WebDAV DELETE if it\n> > > fails, although 500 is ok as well since the cause is not really known.\n> > \n> > Well, for read-only it is false. The likelyhood for FS failures is smaller\n> > here, I guess. Are you OK with METHOD_NOT_ALLOWED consistency for both\n> > servlet?\n> \n> Yes, as I was saying, I verified in some docs that METHOD_NOT_ALLOWED is a\n> good return status code in that situation for WebDAV DELETE.\n\nAlright, thanks.",
      "Fixed in:\n- main for 12.0.0-M1 and onwards\n- 11.0.x for 11.0.0 and onwards\n- 10.1.x for 10.1.31 and onwards\n- 9.0.x  for 9.0.96 and onwards",
      "Incorporated Mark's objection."
    ],
    "creation_ts": "2024-10-02T07:51:18Z",
    "fixes": [
      69360
    ]
  },
  {
    "id": 66184,
    "summary": "Null root logger level on Java 8",
    "description": "The constructor `java.util.logging.LogManager$RootLogger` in OpenJDK 8 no longer sets the log level. This causes the following test to fail:\n\n    Logger current = ...;\n    while (current.getLevel() == null && current.getParent() != null) {\n        current = current.getParent();\n    }\n    assertNotNull(current.getLevel());\n\nAs far as I understand the `java.util.logging.Logger` contract forbids both `getLevel()` and `getParent()` to return a null value.\n\nSteps to reproduce:\n\n * create an application with a `logging.properties` file without a `.level` property.",
    "comments": [
      "Sounds like a bug in Java, not Tomcat.\n\nDo you have a stack trace from where Tomcat triggers this?",
      "Hi Christopher,\n\n(In reply to Christopher Schultz from comment #1)\n> Sounds like a bug in Java, not Tomcat.\n> \n> Do you have a stack trace from where Tomcat triggers this?\n\nThe `LogManager` in JDK8 initializes the level of the root logger in `LogManager#ensureLogManagerInitialized()`, so it is not a Java bug:\n\nhttps://github.com/openjdk/jdk8u/blob/3dca446d440e55cbb7dc3555392f4520ec9ff3bc/jdk/src/share/classes/java/util/logging/LogManager.java#L350\n\nTomcat's `ClassLoaderLogManager` creates additional \"root\" loggers (one per classloader) and:\n\n * if the classloader does not contain a `logging.properties` resource, its root logger becomes a child of its parent classloader root logger,\n * otherwise the root classloader remains without a parent and without a level.\n\nI have submitted a PR with a test case:\n\nhttps://github.com/apache/tomcat/pull/533\n\nThe lack of a `Level` object does not prevent JUL from working, since the (inaccessible) effective int level is computed correctly. However this causes problems in code that need to access the effective level like this one:\n\nhttps://issues.apache.org/jira/browse/LOG4J2-3564",
      "Thanks for the bug report and the PR.\n\nThis has been fixed in:\n- 10.1.x for 10.1.0-M18 onwards\n- 10.0.x for 10.0.24 onwards\n-  9.0.x for 9.0.66 onwards\n-  8.5.x for 8.5.83 onwards"
    ],
    "creation_ts": "2022-07-28T15:31:35Z",
    "fixes": [
      66184
    ]
  },
  {
    "id": 69121,
    "summary": "Async requests are being forwarded to the default error page when the connection with the server is lost",
    "description": "After upgrading to Tomcat `9.0.89` I've noticed that when an async request is terminated due to the client losing connection to the server, my application is trying to forward the request to the application default error page, which fails since the connection to the server is gone.\n\nAfter digging a little on the changes made in this version plus some debugging, I've found [this commit](https://github.com/apache/tomcat/commit/31fc71858f9212fb8c1c508d3cafb852d40a6ede), which may be the root cause.\n\nPerhaps we should only reset the response error status for async request if the IO is still available (I'm using [this section](https://github.com/apache/tomcat/blob/e69545d70c4e3e7a2a16526278612d05d80cdf74/java/org/apache/catalina/core/StandardHostValve.java#L146) as reference).\n\nA sample implementation is available on [my fork of the project](https://github.com/eduhoribe/tomcat/tree/9.0.x)",
    "comments": [
      "I'm leaning towards closing this as WONTFIX but I am leaving it open in case there is an aspect of this report that I have missed.\n\nI would expect Tomcat to forward to the default error page if the connection to the client is lost whether async is being used or not.\n\nThe referenced commit was to ensure that that did not happen when an async application was handling an error and dispatched to to specific target.\n\nI suspect that you are seeing a dispatch from onError that is now being performed correctly and that the target of that dispatch is failing which in turn is triggering the default error page. If all of that is true, then that is working as intended. If not, please provide the simplest possible test case - ideally in the same form as the Tomcat unit tests - that demonstrates the issue and include an explanation of why you think it isn't specification compliant.",
      "I've made a simple project to illustrate the issue that I'm having, which can be found [here](https://github.com/eduhoribe/tomcat-bz69121).\nNote that the default error page wasn't being hit on `9.0.88` on the async request and after upgrading to `9.0.89` that didn't change for the async request, but the `onCompletion` code is not being hit either.\n\nIt seems to me that the Tomcat change is triggering some kind of redirect to the default error page, but that is failing due to the client going away.\n\nIf checking the IO availability is not \"up to spec\", checking if the response is already committed could be a better option.\nI've tested the idea a little [here](https://github.com/eduhoribe/tomcat/tree/9.0.xx)",
      "Provided test case fails to run:\n\n[ERROR] Failed to execute goal org.jetbrains.kotlin:kotlin-maven-plugin:2.0.0:test-compile (test-compile) on project tomcat-bz69121: Compilation failure\n[ERROR] /home/mark/repos/bz-69121/src/test/kotlin/TestController.kt:[46,15] Argument type mismatch: actual type is 'java.time.Duration', but 'kotlin.Long' was expected.\n\nPlease provide a working test case.",
      "The project declares itself as Java 8 compatible, but I'm using the `Thread#sleep(Duration)` method, that is only available on Java >= 19, sorry for the confusion.\nRunning with newer Java should fix the problem, but I'm updating the project to work properly with Java >= 8 too.\n\nIt is worth pointing out that the unit test will fail with Tomcat `9.0.89`, which is the default for the project.\nChanging the `tomcat.version` property on `pom.xml` to `9.0.88` will make it pass.",
      "The provided test case does not create a working WAR file (despite declaring WAR packaging).\n\nRunning the tests as part of the Maven build does work but that is considerably more difficult to debug than a WAR file that can be deployed to any Tomcat instance.",
      "OK. With some modifications to the test case I can see that the test is failing because onComplete() is not being called. That does look like a bug to me. I am currently working on a Tomcat unit test for this and an associated fix.",
      "Just updated the project again and now it should build a working WAR file, hope that helps on the debugging.",
      "Tx. Perfect timing. I was just getting to the point where I think I know what is going on and wanted to check that theory against your test case.",
      "Hmm. The updated build isn't producing a WAR at all.",
      "Sorry... I forgot to add a file :|",
      "Thanks. The test case is working as a WAR now. I have been able to compare this test case with the current Tomcat test case that should test this scenario and have spotted one difference - the error handler throws an exception in this case.\n\nI have updated the Tomcat unit tests to include this additional case.\n\nThe no so great news is that this has uncovered some further edge cases where onComplete() isn't being called and fixing all of these is looking non-trivial. I'll be continuing to work on this next week.",
      "Thank you very much for your work, too bad this isn't that simple to solve.",
      "Good news. The fix was simpler than I anticipated once I narrowed where to apply the fix.\n\nThis has been fixed in:\n- 11.0.x for 11.0.0-M22 onwards\n- 10.1.x for 10.1.26 onwards\n-  9.0.x for  9.0.91 onwards",
      "Awesome, thank you very much.\n\nLooking forward to the next release."
    ],
    "creation_ts": "2024-06-07T03:53:26Z",
    "fixes": [
      69121
    ]
  },
  {
    "id": 66582,
    "summary": "Can't reference static fields declared in interfaces in JSP pages: javax.el.ELException: The class [...] must be public, in an exported package (for Java 9+), non-abstract and not an interface",
    "description": "On a JSP page we have the following import:\n\n<%@ page import=\"static jetbrains.buildServer.auth.SessionModel.KEY_ENABLE_LOGOUT_ALL_SESSIONS\" %>\n\nAfter upgrading to Tomcat 9.0.72, it stopped working with the following error:\n\njavax.el.ELException: The class [jetbrains.buildServer.auth.SessionModel] must be public, in an exported package (for Java 9+), non-abstract and not an interface\n\tat javax.el.ImportHandler.findClass(ImportHandler.java:455) ~[el-api.jar:3.0.FR]\n\tat javax.el.ImportHandler.importStatic(ImportHandler.java:297) ~[el-api.jar:3.0.FR]\n\tat org.apache.jasper.runtime.PageContextImpl.getELContext(PageContextImpl.java:710) ~[jasper.jar:9.0.74]\n\tat org.apache.jasper.runtime.JspContextWrapper.getELContext(JspContextWrapper.java:513) ~[jasper.jar:9.0.74]\n\tat org.apache.jsp.tag.web.ext.includeExtensions_tag.doTag(includeExtensions_tag.java:157) ~[?:?]\n\tat org.apache.jsp.profile.userGeneralSettings_jsp._jspService(userGeneralSettings_jsp.java:264) ~[?:?]\n\tat org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) ~[jasper.jar:9.0.74]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:623) ~[servlet-api.jar:4.0.FR]\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:466) ~[jasper.jar:9.0.74]\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:379) ~[jasper.jar:9.0.74]\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:327) ~[jasper.jar:9.0.74]\n\n\n\"jetbrains.buildServer.auth.SessionModel\" is indeed an interface, but to me this looks like a valid usage of the import statement",
    "comments": [
      "This is a regression caused by fixing bug 66441.\n\nThe import is valid for a JSP but not for EL. I'll get this fixed for the May releases.",
      "Fixed in:\n- 11.0.x for 11.0.0-M6 onwards\n- 10.1.x for 10.1.9 onwards\n-  9.0.x for  9.0.75 onwards\n-  8.5.x for  8.5.89 onwards"
    ],
    "creation_ts": "2023-04-27T16:00:06Z",
    "fixes": [
      66582
    ]
  },
  {
    "id": 60718,
    "summary": "requestDestroyed not called for asynchronous after I/O error",
    "description": "Sequence of events:\n1. Servlet \"synchronously\" writes an async response: ac = req.startAsync(); try { resp.getOutputStream().write(new byte[1024*1024]); } finally { ac.complete(); }\n2. Client disconnects to force broken pipe (etc.): uc = new URL(\"...\").openConnection(); uc.getInputStream().close(); uc.disconnect();\n\nIn this case, where ServletRequestListener.requestInitialized is called.  Summary of scenarios:\n- Fail: the servlet writes the response synchronously after startAsync (described above)\n- Fail: In Tomcat 8.5.11, the servlet writes the response truly asynchronously (with a new Thread)\n- Pass: in Tomcat 8.5.6, the servlet writes the response truly asynchronously (with a new Thread)\n- Pass: the servlet writes the response truly synchronously (without startAsync)\n- Pass: the client reads the stream without disconnecting early (all Tomcat versions, regardless of other scenarios presented).\n\nI think requestDestroyed should always be called.",
    "comments": [
      "Please try again stating more clearly what the code is (use an attachment), and the supposed failure. Please also review carefully bug 60385 it seems to apply to some of the fail scenarios described maybe (like possibly the first one).",
      "Created attachment 34742\ntest project\n\nI reviewed bug 60385 before opening this bug, and I do not think it is relevant.  That bug is about requestInitialized throwing an exception and therefore requestDestroyed not being called, which is reasonable.  This bug throws no exception from requestInitialized, but it forces a client error during getOutputStream().write().\n\nI am attaching a test project that demonstrates the problem for me (on Windows at least, but earlier version of the test also failed on Linux).  Install the WAR in Tomcat, then run the main method in TestServlet.  The main method connects to four endpoints, so I would expect four \"+ requestDestroyed\" messages.  On Tomcat 8.5.6, there are only three (missing async=sync).  On 8.5.11, there is only one (missing all async scenarios).  Additionally, 8.5.11 has a noisy setErrorState stack trace (seems unnecessary?) and an IllegalStateException from AsyncStateMachine.asyncError.",
      "It's likely the same (or a related) problem, but access log entries are not written for the failing cases either (ala bug 58702).",
      "I think it's not going to \"work\" unless AsyncContextImpl.fireOnComplete calls context.fireRequestDestroyEvent(request). Or something like that.\n\nThe Tomcat code is based on the thinking that the request remains \"in scope\" while the async is started (so even when the Servlet's service method is no longer executed), which is what the spec seems to say (section 3.12).\n\nAlthough it seems to contradict section 3.12 of the spec, it could be interpreted wrong in Tomcat and requestInitialized and requestDestroyed should simply be called around the Servlet's service method call. Right now, the code is very careful to not call requestDestroyed if async is started, and then it's obvious there are cases where it's not going to be called. And doing it like that is a duplicate for what AsyncListener does so that's rather weird, but maybe it's better for some frameworks (?). I would remove !request.isAsync() in StandardHostValve, and drop fireRequestDestroyEvent from async dispatch.\n\nSo there is likely two possibilities, but Tomcat currently does neither.",
      "Tomcat doesn't appear to call AsyncListener for these scenarios either.\n\nFWIW, I agree with the \"in scope\" interpretation.  I was expecting requestDestroyed to be called only after the request is no longer \"in scope\", not just after service returns for async.",
      "I like the idea of moving the context.fireRequestDestroyEvent(request) call to AsyncContextImpl.fireOnComplete(). That is much better aligned with what section 3.12 of the spec says.\n\nA quick test with the current Async unit tests doesn't show any failures.\n\nNext steps are to look into the additional scenarios presented in this bug.",
      "Many thanks for the test case. I've applied a fix to trunk (9.0.x) that addresses the issues raised by the test case. Before I back-port it, I want to look at whether the error handling needs some refactoring.",
      "Fixed in:\n- trunk for 9.0.0.M18 onwards\n- 8.5.x for 8.5.12 onwards\n- 8.0.x for 8.0.42 onwards\n- 7.0.x for 7.0.76 onwards"
    ],
    "creation_ts": "2017-02-09T13:17:01Z",
    "fixes": [
      60718
    ]
  },
  {
    "id": 69333,
    "summary": "Unnecessary code in generated JSPs",
    "description": "Our large, high-traffic system has 1000+ jsps, and more than one class file is > 1MB (not my fault :) ).  Examination of the generated code identified an isolated changed that will slightly reduce code size, although with near-zero runtime impact.  The primary benefit to our system will be smaller class files, meaning lower aggregate code cache usage.\n\nReferencing generated code such as this:\n\n  private boolean _jspx_meth_c_005fotherwise_005f30(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f34, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f21)\n          throws java.lang.Throwable {\n...\n    _jsp_getInstanceManager().newInstance(_jspx_th_c_005fotherwise_005f30);\n    try {\n     ...\n    } finally {\n      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f30, _jsp_getInstanceManager(), false);\n    }\n    return false;\n  }\n\nThe finally block triggers the JSPRuntimeLibrary.releaseTag() method:\n\npublic static void releaseTag(Tag tag, InstanceManager instanceManager, boolean reused) {\n  // Caller ensures pool is non-null if reuse is true\n  if (!reused) {\n    releaseTag(tag, instanceManager);\n  }\n}\n\nThe generated JSP code includes the hard-coded value \"false\", which short-circuits the releaseTag method and guarantees the line achieves nothing.\n\nOne can argue that the JIT compiler will notice this and remove it; however, this line actually contains two method calls, JspRuntimeLibrary.releaseTag and _jsp_getInstanceManager().\n\n\npublic org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {\n  if (_jsp_instancemanager == null) {\n    synchronized (this) {\n      if (_jsp_instancemanager == null) {\n        _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());\n      }\n    }\n  }\n  return _jsp_instancemanager;\n}\n\nThis method call will almost always return the cached value and therefore be a very highly-optimized branch... however it must always be checked, and therefore always be executed.  In addition, the JIT is not guaranteed to inline the releaseTag() and _jsp_getInstanceManager() methods, in which case it cannot detect the available optimizations.\n\nPut it all together and this is an unnecessary line of code, repeated over and over, that has a non-zero impact.  This analysis applies only when the generated argument is \"false\", and this line is clearly required when set to \"true\".\n\nPreferred solution is to remove the line in all cases when the value is \"false\".  If the try/finally can be simultaneously removed, that's even better, and removes yet more instructions.",
    "comments": [
      "(In reply to John Engebretson from comment #0)\n> public static void releaseTag(Tag tag, InstanceManager instanceManager,\n> boolean reused) {\n>   // Caller ensures pool is non-null if reuse is true\n>   if (!reused) {\n>     releaseTag(tag, instanceManager);\n>   }\n> }\n> \n> The generated JSP code includes the hard-coded value \"false\", which\n> short-circuits the releaseTag method and guarantees the line achieves\n> nothing.\n\n!false is ... false? And the body of the if-block is skipped?\n\nMaybe I'm misunderstanding what you are saying.\n\n> Put it all together and this is an unnecessary line of code, repeated over\n> and over, that has a non-zero impact.  This analysis applies only when the\n> generated argument is \"false\", and this line is clearly required when set to\n> \"true\".\n> \n> Preferred solution is to remove the line in all cases when the value is\n> \"false\".  If the try/finally can be simultaneously removed, that's even\n> better, and removes yet more instructions.\n\nI think I would agree, as long as the logic is flipped-around.",
      "Yes, sorry for the error.  :)",
      "Do your tests show that suppressing these calls when the parameter will be *true* that it still gives a benefit?",
      "My tests show a reduction in .class file size and a small reduction in the JVM's code cache, but that may be a margin-of-error situation.  This is definitely not a high-impact change.\n\nI'm okay to close if you think the cost-benefit is poor.",
      "Looking at the generated source and the code the generates it, I don't see why we need the try/catch/finally.\n\nLocal testing indicates we can remove the try/catch/finally. We can also remove the 3-arg releaseTag() method and call the 2-arg directly.\n\nI have a few more tests to run but should be in a position to commit the fix tomorrow if the tests go well.",
      "I'm fairly sure that try/catch/finally don't add any overhead in terms of method-code-bytes. It expands the size of the exception-handling table, but it doesn't reduce code size. Perhaps overall .class file size, sure.\n\nUsually complaints about JSPs are due to a single method becoming too long to fit into the .class file format.\n\nIn your case, you were concerned about code cache usage which, I think, will still be the same with or without the try/catch/finally blocks.\n\nI'm not saying there isn't a change worth making here; quite the contrary. Any simplification of any code is always a win IMHO. I just want to make sure to manage expectations of what any change will actually accomplish.",
      "> I just want to make sure to manage expectations of what any change will actually accomplish.\n\nUnderstood, agreed, and appreciated.  :)",
      "Fixed in:\n- 11.0.x for 11.0.0 onwards\n- 10.1.x for 10.1.31 onwards\n-  9.0.x for  9.0.96 onwards",
      "I've got a custom tag library which has worked literally for decades in Tomcat.\nActually it worked from v4 up to v9.0.95. Now in v9.0.96 which contains this change it's not working correctly any longer.\nThe problem seems to be that your change is calling release() on cached tags and reuses the tag after this.\nTo all what I know this is breaking the convention that release() should be called only when the JSP is definately done with the tag. It's the official place to release resources before the tag is later garbage collected.",
      "Please do not reopen another BZ, even if it is related to your issue. The issue you are describing has already been fixed (BZ 69399) and will be fixed in 9.0.97."
    ],
    "creation_ts": "2024-09-20T15:29:32Z",
    "fixes": [
      69333
    ]
  },
  {
    "id": 49030,
    "summary": "Processing of Tomcat Connector configuration can leave some connectors uninitialized",
    "description": "If the Server part of the Tomcat 6 configuration is beeing processed and there are more connectory defined, it seems to be the fact the exceptions during the connector initialization are not catched properly, so if there comes some exception by the initialization of one connector (for example to try to initialize the new connector for the same port like had the already initialized connector), then no other connectors are processed and created (no one listening port is allocated) even if such other connectors are defined properly. It leads to the situation the connectory are then initialized differently if the order of the connectors changes. It can be very confusing if searching some error in the definitions. Together with the fact, the default server.xml contains at least in some cases the invalid connector definition it leads to serious confusion it searching the configuration problem...",
    "comments": [
      "It is then the problem especially in the connection with the bug 49031",
      "This has been fixed in trunk and proposed for 6.0.x",
      "Great, thank You.",
      "I like this, but there are caveats implementing this feature:\n\n1. Connectors that fail in a call to initialize() will also likely to fail in start(), pause(), stop(). Thus all the loops over connectors have to be safeguarded.\n\nThis includes loops over array returned by StandardService.findConnectors(), e.g. in ServerLifecycleListener#destroyMBeans(Service).\n\n\n2. Need to reimplement support for \n\norg.apache.catalina.startup.EXIT_ON_INIT_FAILURE=true\n\nconfiguration property [1], [2].\n\n[1] http://tomcat.apache.org/tomcat-6.0-doc/config/systemprops.html\n[2] https://issues.apache.org/bugzilla/show_bug.cgi?id=48625\n\nAs a test case for this feature one can try to start a second instance of Tomcat using the same configuration.\n\nIf the above EXIT_ON_INIT_FAILURE setting is added to conf/catalina.properties, Tomcat 6.0.27 will abort startup on the first init() failure.\n\nIf the init() exception were caught and startup continued, as proposed patch does, the abort does not happen.",
      "Created attachment 25633\n2010-06-24_tc6_bug49030.patch\n\nPatch for tc6.0.x",
      "I ported the patch to TC7 and applied in r957960,\n\nbut my testing shows that the fix for bug 48625 included there does not work, because Connector.init() does not behave as expected. I created bug 49503 to track that.",
      "This has been fixed in 6.0.x and will be included in 6.0.30 onwards.",
      "*** Bug 46461 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2010-03-31T12:34:56Z",
    "fixes": [
      49030
    ]
  },
  {
    "id": 54012,
    "summary": "No \"pageContext\" in tag files' generated java code when using code generation by JSTL tagplugin \"Set\"",
    "description": "Created attachment 29485\nPatch for org.apache.jasper.tagplugins.jstl.core.Set.java\n\nThe code generated by the following code from \" org.apache.jasper.tagplugins.jstl.core.Set\" can't work in Tag Files.\n\nThere is no \"PageContext\" in tag file. So this should check \"isTagFile\".\n\n            String strVar = ctxt.getConstantAttribute(\"var\");\n            ctxt.generateJavaSource(\"if(null != \" + resultName + \"){\");\n            ctxt.generateJavaSource(\"    pageContext.setAttribute(\\\"\" + strVar + \"\\\",\" + resultName + \",\" + iScope + \");\");\n            ctxt.generateJavaSource(\"} else {\");\n            if(hasScope){\n                ctxt.generateJavaSource(\"    pageContext.removeAttribute(\\\"\" + strVar + \"\\\",\" + iScope + \");\");\n            }else{\n                ctxt.generateJavaSource(\"    pageContext.removeAttribute(\\\"\" + strVar + \"\\\");\");\n            }\n            ctxt.generateJavaSource(\"}\");",
    "comments": [
      "Comment on attachment 29485\nPatch for org.apache.jasper.tagplugins.jstl.core.Set.java\n\n>Index: org/apache/jasper/tagplugins/jstl/core/Set.java\n>===================================================================\n>--- org/apache/jasper/tagplugins/jstl/core/Set.java\t(revision 1370136)\n>+++ org/apache/jasper/tagplugins/jstl/core/Set.java\t(working copy)\n>@@ -70,14 +70,20 @@\n>         \n>         //if the attribute var has been specified then assign the result to the var;\n>         if(hasVar){\n>+            String jspCtxt = null;\n>+            if (ctxt.isTagFile()) {\n>+                jspCtxt = \"this.getJspContext()\";\n>+            } else {\n>+                jspCtxt = \"_jspx_page_context\";\n>+            }\n>             String strVar = ctxt.getConstantAttribute(\"var\");\n>             ctxt.generateJavaSource(\"if(null != \" + resultName + \"){\");\n>-            ctxt.generateJavaSource(\"    pageContext.setAttribute(\\\"\" + strVar + \"\\\",\" + resultName + \",\" + iScope + \");\");\n>+            ctxt.generateJavaSource(\"    \"+jspCtxt+\".setAttribute(\\\"\" + strVar + \"\\\",\" + resultName + \",\" + iScope + \");\");\n>             ctxt.generateJavaSource(\"} else {\");\n>             if(hasScope){\n>-                ctxt.generateJavaSource(\"    pageContext.removeAttribute(\\\"\" + strVar + \"\\\",\" + iScope + \");\");\n>+                ctxt.generateJavaSource(\"    \"+jspCtxt+\".removeAttribute(\\\"\" + strVar + \"\\\",\" + iScope + \");\");\n>             }else{\n>-                ctxt.generateJavaSource(\"    pageContext.removeAttribute(\\\"\" + strVar + \"\\\");\");\n>+                ctxt.generateJavaSource(\"    \"+jspCtxt+\".removeAttribute(\\\"\" + strVar + \"\\\");\");\n>             }\n>             ctxt.generateJavaSource(\"}\");\n>",
      "Created attachment 29486\nPatch for Compiler.java",
      "Created attachment 29487\nPatch for PageInfo.java",
      "Created attachment 29488\nPatch for TagPluginContext.java",
      "Created attachment 29489\nPatch for TagPluginManager.java",
      "Thanks for the patch. I applied a slightly modified version to trunk and 7.0.x. I also added a test case to trunk. The fix will be in 7.0.33 onwards."
    ],
    "creation_ts": "2012-10-16T09:01:56Z",
    "fixes": [
      54012
    ]
  },
  {
    "id": 64848,
    "summary": "WsSession objects in OUTPUT_CLOSED state are implicitly held by waitingProcessors and GC cannot purge them from the JVM heap",
    "description": "Created attachment 37534\nAttachment with the 3 services that help reproduce the issue + SocketTimeoutException stack trace and WsSession GC root snapshot from a heap dump\n\nOverview:\n---------\n\nWebSocket session objects (represented as WsSession) \"get stuck\" on the heap under heavy load in case Tomcat acts as a WebSocket API gateway between a client and a server application.\nBy assuming a system configuration where the Tomcat WebSocket API gateway service is deployed along with a server application on the same machine but the client is launched elsewhere then the network latency can impose a considerable overhead on the entire client-side data processing compared to the server side where the data can be generated and transferred to the gateway service much faster than the client can consume it and this can lead to the classic fast producer-slow consumer phenomenon.\n\nIf the network latency goes beyond a certain threshold and the client cannot keep up in a timely manner with the data flow coming from the gateway service then Tomcat starts throwing SocketTimeoutException (by default after 20 seconds) at the WebSocket sessions for which the data weren't transmitted in time. Such a timeout may end up in an abnormally closed WebSocket connection (usually represented with 1006 status code at the client side) and even though the corresponding sessions are moved into the OUTPUT_CLOSED state at Tomcat level, they are still kept on the JVM heap endlessly by preventing the GC to purge them out consequently producing a slow memory leak.\n\nSteps to Reproduce:\n-------------------\n\nReproducing such a situation is a bit cumbersome in terms of the required hardware configuration as it needs two machines/VMs: one for the client and another for the Tomcat WebSocket API gateway + server application. On the other hand the client app should be hosted \"far\" from the Tomcat WebSocket app in terms of network distance, i.e. if it connects to the Tomcat WebSocket app via VPN then the network latency can be enough to reproduce the issue. Alternatively in the Tomcat WebSocket app the org.apache.tomcat.websocket.BLOCKING_SEND_TIMEOUT property can also be adjusted as part of a customized RequestUpgradeStrategy to simulate a slow network.\nThe overall system demonstrates a simple distributed client-server application inserting the Tomcat WebSocket API GW as an intermediary. The client can send a number to the server that denotes a length (given in KBs) so the server will respond with a random alphanumeric string having a length specified by the given number. The Tomcat WebSocket API GW just routes the WS traffic back and forth between the other two services.\n\n1. Run the attached random-string-ws-provider-undertow-1.0.0-SNAPSHOT-jar-with-dependencies application (the server app) in a form of\n\njava -jar random-string-ws-provider-undertow-1.0.0-SNAPSHOT-jar-with-dependencies <host> <port>\n\nBy default it configures the underlying Undertow webserver to launch on localhost and listen on port #8193.\n\n2. Run the attached ws-api-gateway-tomcat-1.0.0-SNAPSHOT.jar application (the Tomcat WebSocket API GW app) in a form of\n\njava -jar ws-api-gateway-tomcat-1.0.0-SNAPSHOT.jar\n\nBy default it listens on port #8444 and it can be overridden by setting the server.port property.\nIf the Undertow server app runs with non-default host and port configurations then this needs to be reflected here by specifying the zuul.routes.random-string-websocket-provider.url property accordingly, e.g.:\n\njava -jar -Dzuul.routes.random-string-websocket-provider.url=http://<another-host>:<another-port> ws-api-gateway-tomcat-1.0.0-SNAPSHOT.jar\n\n3. Run the attached ws-random-string-gatling-load-test application (the client app wrapped into gatling to generate artifical load) in a form of\n\nmvn clean -B compile exec:java -Dexec.mainClass=RandomStringWebSocketRequestApp -DrampUpUsers=<number-of-concurrent-users> -DrampUpTime=1 -DserverUrl=<host-where-other-two-services-run> -DserverPort=<port-where-Tomcat-API-GW-listens-on> -Dgatling.simulationClass=com.acme.wsrequest.simulation.RandomStringWebSocketRequestSimulation -DrandomStringLengthInKb=1000\n\nActual Results:\n---------------\n\nRunning the client app with 400 users will start producing the SocketTimeoutException confidently in the Tomcat WebSocket API gateway service. At the client side the gatling report starts showing unexpectedly closed WS connections (with status code 1006) and the number of such connections seems to have a strong correspondence to the number of \"got stuck\" WsSession objects on the Tomcat WebSocket app's heap. That WsSession objects are preserved indefinitely and hence cannot be garbage-collected.\n\nExpected Results:\n-----------------\n\nWsSession objects representing abnormally closed WebSocket connections shall eventually be the subject of garbage collection on the JVM heap.\n\nBuild Date & Hardware:\n----------------------\n\nBuild 2020-10-26 on Windows Server 2016 Standard (Version 1607 - OS Build 14393.3930)\n\nAdditional Builds and Platforms:\n--------------------------------\n\nN/A\n\nAdditional Information:\n-----------------------\n\nThere is an attachment (tomcat-ws-api-gw-sockettimeoutexception-stack-trace.txt) to show the stack trace produced when SocketTimeoutException is encountered.\n\nAnother attachment (tomcat-wssession-gc-root.png) contains the relevant prt of the heap dump created after a 400-user gatling load execution. Searching for \"websocketsession\" objects will bring up the preserved WebSocket session objects and checking the GC root of such a session object can also show the object reference chain up to the \"waitingProcessors\" map present in Http11NioProtocol.",
    "comments": [
      "Please re-test with 9.0.39.",
      "The other thing to check is whether you have multiple threads writing to the same WebSocket session concurrently. That is not supported by the Java WebSocket API and could lead to the issue you describe.",
      "Actually, scratch that last comment. Tomcat detects that and will throw an Exception. I'm still looking into this but there are changes between 9.0.36 and 9./0.39 that might help so that feedback would still be very helpful.",
      "I'm able to recreate this with the 3 provided Maven projects.\n\nI ran the client on a local VM with VMware Workstation configured to limit the network connection to 10Mbps with 20ms latency inbound and outbound.\n\nNext step is to update to the latest Tomcat 9 code and see if the issue persists.",
      "This bug has already been fixed in the 9.0.38 onwards.\n\nhttps://github.com/apache/tomcat/commit/5707895bafa38c1443460356a268932a967b79e9",
      "After re-testing the reported scenario with 9.0.39 Tomcat version (core + websocket) the WsSession objects still seem to get stuck on the heap.\n\nUpon investigating the Tomcat source code a bit deeper it's not entirely clear how a particular Processor can be removed from the waitingProcessors set located in Http11NioProtocol class (more accurately in its heir, AbstractProtocol). According to the heap dump snapshot enclosed with the original report, a WsSession object is held by a WsHttpUpgradeHandler object that is used within UpgradeProcessorInternal class. UpgradeProcessorInternal inherits from Processor, the type whose objects seem stored in waitingProcessors.\n\nIf sending a message block fails in WsRemoteEndpointImplBase during the invocation of writeMessagePart() method (as the referred https://github.com/apache/tomcat/commit/5707895bafa38c1443460356a268932a967b79e9 pull request also contains) then even though the WebSocket session gets closed followed by re-throwing of the caught exception, does it mean that the WsHttpUpgradeHandler object associated to the closed WebSocket session should eventually be purged from the above mentioned waitingProcessors set too?\nIn other words, under which conditions should a Processor be removed from waitingProcessors?",
      "The issue as reproduced by the provided test case is fixed in 9.0.39.\n\nEntries are removed from the waitingProcessor list when an event is processed for the socket (and returned once processing is complete if the connection is still open).\n\nIf the writes from the server are made from an application thread (rather then in response to a message from the client and on the same thread) then it looks like it is possible that an unclean close will result in problem described here.\n\nRe-opening while I investigate a potential unit test for this.",
      "Fixed in:\n- 10.0.x for 10.0.0-M10 onwards\n- 9.0.x for 9.0.40 onwards\n- 8.5.x for 8.5.60 onwards",
      "I can confirm that the issue I reported is indeed fixed in Tomcat 9.0.40 so thanks for the quick remediation.\nDo you happen to have an estimation as to when the 9.0.40 version of Tomcat is expected to be released?",
      "I couldn't find any information about the publication date of 9.0.40 but it would help us if we knew when it is expected as we would include it in our next release. Please let me know if you happen to have any update on the next Tomcat version's release date.",
      "Soon. Need to resolve the remaining open issues then we can tag. Hopefully early next week.",
      "Ok, it sounds promising. Thanks for the quick feedback.",
      "Hi Thomas,\n\nAccording to the last information I got the Tomcat 9.0.40 release was estimated to be ready this week but I haven't seen any update on this.\n\nSince our internal release is still in progress this week, I think we may have the chance to integrate the new Tomcat early next week in case it'll be ready by then.\nWould it be feasible to have the official Tomcat 9.0.40 build in the beginning of next week?",
      "Tomcat 9.0.40 started on 12 November[1]. Feel free to test and vote!\n\n[1] https://lists.apache.org/thread.html/rce32f696e12fecfd4b4383a5e8a389f4dac7d357053fd03ac7280868%40%3Cdev.tomcat.apache.org%3E",
      "We are seeing this issue with 8.5.72 - is there some other patch needed for the 8.5 codeline ? The fix is confirmed for 9.0.40.",
      "(In reply to Vishwanath Karra from comment #15)\n> We are seeing this issue with 8.5.72 - is there some other patch needed for\n> the 8.5 codeline ? The fix is confirmed for 9.0.40.\n\nAre you sure it's the same issue? Please post all your relevant information (i.e. actual evidence that you have a Websocket session memory leak) to the user's mailing list to verify this is the same problem.",
      "(In reply to Christopher Schultz from comment #16)\n> (In reply to Vishwanath Karra from comment #15)\n> > We are seeing this issue with 8.5.72 - is there some other patch needed for\n> > the 8.5 codeline ? The fix is confirmed for 9.0.40.\n> \n> Are you sure it's the same issue? Please post all your relevant information\n> (i.e. actual evidence that you have a Websocket session memory leak) to the\n> user's mailing list to verify this is the same problem.\n\n We can see the problem on 8.5.84, the problem is when we configure server.xml connector of the protocol is org. Apache. Coyote. Http11. Http11Nio2Protocol. This is not an issue when changing to the default configuration (Nio).\n  In tests, when Nio mode was set, the problem was fixed after 8.5.60, but when Nio2 mode was set, the problem existed on versions 8.5.60, 8.5.75, 8.5.84, etc.",
      "After a recent upgrade from 9.0.63 to 9.0.75 (with the 2 websocket fixes from 9.0.77 patched in) I am seeing some occurrences of the WsSession Object stuck on the heap with state OUTPUT_CLOSED in WsHttpUpgradeHandler under Http11Nio2Protocol.waitingProcessors.\n\nWe are in the process of identifying the steps to reproduce but these occurrences have been rare so far.\n\nLooking at the more recent reworking of WsSession isOpen / isClosed and surrounding logic from BZ66574 I am wondering if it makes sense for OUTPUT_CLOSED to also be checked in the isClosed call?   Without a reproducible test case in place it is difficult to determine via static code analysis, but I wanted to mention that we are seeing this after our recent upgrade and did not see it in 9.0.63.",
      "This is looking like a case where the remote endpoint is not able to respond with its own close message.  \n\nWe have seen 2 types of exception recorded in the Nio2SocketWrapper present in the heap:\n\nAsynchronousCloseException\nIOException - connection reset by peer"
    ],
    "creation_ts": "2020-10-26T11:32:32Z",
    "fixes": [
      64848
    ]
  },
  {
    "id": 39088,
    "summary": "StandardWrapper getRootCause() infinite loop",
    "description": "The \"// Extra aggressive rootCause finding\" in StandardWrapper.java is an\nunderstatement.  It causes an infinite loop in certain cases.  For example, the\nsemantics of the following exception class are that getRootCause() returns the\none and only root cause of the exception chain, which in this case can be the\nexception itself.  It is not derived from ServletException, thus is not bound to\nreturn null at the end of the chain as ServletException does.  Its not safe to\nuse reflection to call an arbitrary method of an arbitrary Exception class, just\nbecause it happens to have the same name as the method in ServletException.\n\npublic class MyException \n   extends Exception\n{\n   public MyException(Throwable cause) {\n      this.cause = cause;\n   }\n   Throwable cause;\n   public Throwable getCause() {\n      return cause;\n   }\n   public Throwable getRootCause() {\n      if (cause instanceof VCOMException) {\n         return ((VCOMException) exception).getRootCause();\n      }\n      return cause == null ? this : cause;\n   }\n}",
    "comments": [
      "Suggested patch?",
      "(In reply to comment #1)\n> Suggested patch?\nBreak out of the loop if cause == exception.",
      "The problem is user code:\nreturn cause == null ? this : cause;\n\nIf the root cause is null, then it should return null, not itself.",
      "(In reply to comment #3)\n> The problem is user code:\n> return cause == null ? this : cause;\n> \n> If the root cause is null, then it should return null, not itself. \n\nYou can't control every exception class that could be thrown in user code.  This\nis getRootCause(), not getCause().  Lots of java code was written before Sun\nadded getCause() to Throwable and standardized exception chaining.\n\nTomcat calling getRootCause() of an arbitrary exception class is dangerous, as\nthe infinite loop demonstrates.  It should either only call it on descendants of\nServletException and a few other known types, or at a minimum protect against\nthe infinite loop condition.",
      "At best - here is the patch if any (not me) is interested ...\n/container/catalina/src/share/org/apache/catalina/core/StandardWrapper.java\n\n@@ -627,13 +627,14 @@\n \n     /**\n      * Extract the root cause from a servlet exception.\n-     * \n+     *\n      * @param e The servlet exception\n      */\n     public static Throwable getRootCause(ServletException e) {\n         Throwable rootCause = e;\n         Throwable rootCauseCheck = null;\n         // Extra aggressive rootCause finding\n+        int recursionKlugeDetector = 20;\n         do {\n             try {\n                 rootCauseCheck = (Throwable)IntrospectionUtils.getProperty\n@@ -644,6 +645,16 @@\n             } catch (ClassCastException ex) {\n                 rootCauseCheck = null;\n             }\n+\n+            /*\n+                We've done this 20 times .. if you've nested more than\n+                20 levels of exceptions. Tomcat throwing the wrong exception\n+                is the least of your concerns.\n+            */\n+\n+            if (recursionKlugeDetector-- == 0) {\n+                return rootCause;\n+            }\n         } while (rootCauseCheck != null);\n         return rootCause;\n     }",
      "see http://issues.apache.org/bugzilla/show_bug.cgi?id=37038\nPerhaps Tomcat should use the commons-lang ExceptionUtils root cause finding\nthat already fixes this problem...  It appears to be superior to the // Extra\naggressive rootCause finding remification.",
      "This issue has caused a production incident for us. It was rather tough to debug\ngiven the fact that one would not expect that a getRootCause() method in a\nnon-Tomcat exception actually implements a (hidden) Tomcat interface. IMHO this\nis very bad style.\n\nA recursion detector does not address these issues:\n1. Tomcat has no business calling a getRootCause() method in user code. That\nmethod may have a very different contract than what Tomcat expects. It may have\nside effects or it may be illegal to call the method in some cases. Because it\nis not clear to a user that his getRootCause() method is called by Tomcat and\nbecause exception paths are usually not tested that well, production incidents\nare likely to still happen to some users.\n2. The user still does not know that he is implementing a hidden Tomcat interface.\n3. 20 recursions (or any arbitrary number) of reflection, with calls to a method\nof unknown specifications may cause performance issues.\n\nI believe that a similar fix to the one for bug 37038 is the best solution. That\nfix would result in code that does not surprise Java developers, without the\nproblems outlined above. It is also unlikely that it would result in breakage,\nsince I don't think that it's likely that anyone took advantage of this\n'feature' to implement some functionality.",
      "Wouter,  unfortunately nothing ever gets fixed in Tomcat.  The people who can \nmake the changes think there shit doesn't stink, and unless they find the bug \nand it affects them, it doesn't exist.  The patch for this would be like 1 \nline of code, and the one Tim provided above (with the typical Tomcat \ndeveloper sarcastic asshole mentality) is almost worse than the current code.  \nI won't write a patch, and you shouldn't either.  Noone will incorporate one \ninto the Tomcat codebase, ever, or let you put it in.  They will give excuses \nlike, \"if we fix it, it could break code that depends on it being broken\".  \nGood luck.",
      "it is for a called game Bots",
      "I have fixed the infinite loop issue in svn by breaking out of the loop as\nJonathan suggested in comment 2. The fix will be in 5.5.21 onwards.\n\nThere are certainly more comprehensive ways of doing this, the commons-lang\napproach is just one of them. If someone would like to provide a patch then I\nwould be happy to review it.",
      "Mark,\n\nThanks for working on this issue. Your change still results in potentially\ndangerous invocations of getRootCause on third-party classes, though. This fix\ndoes not have that flaw and is much cleaner overall:\n\npublic static Throwable getRootCause(ServletException e) {\n    Throwable rootCause = e.getRootCause();\n    if (rootCause instanceof ServletException\n        && rootCause != e) {\n        rootCause = getRootCause((ServletException) rootCause);\n    }\n    return rootCause;\n}\n\nCould you please review it?",
      "Thanks for the suggested patch. Whilst it is safer, it also less likely to get\nat the true root cause and I'd like to keep the behaviour of getting at the root\ncause wherever possible.\n\nUsing commons-lang is one option but I'd rather not add yet another jar to the\nbuild process. It should be possible to add the ExceptionUtils class to\no.a.c.util and use that. It looks like there might be some dependencies on other\ncommons-lang classes that would need to be coded around. If you want to take a\nlook at this - that would be great. If not, no problem and I'll look at it later\nthis week.",
      "Mark,\n\nIf you really want the root cause, you should do this:\n\npublic static Throwable getRootCause(ServletException e) {\n    Throwable rootCause = e.getRootCause();\n    if (rootCause instanceof ServletException\n            && rootCause != e) {\n        rootCause = getRootCause((ServletException) rootCause);\n    } else {\n        Throwable deepRootCause;\n        do {\n            deepRootCause = rootCause.getCause();\n            if (rootCause == deepRootCause) {\n                return rootCause;\n            } else if (deepRootCause != null) {\n                rootCause = deepRootCause;\n            }\n        } while (deepRootCause != null);\n    }\n    return rootCause;\n}\n\nThis code is actually far more likely to find the true root cause and as an\nadded bonus, it uses API's whose implementation you should be able to trust.",
      "That won't work since JspException does not extend ServletException and \nJspException is typically the reason we wish to delve deeper into the real root \ncause. \n\nThis issue is fixed in tomcat6 since getCause() and getRootCause() are \nimlpemented as one in the same (since 1.5 jdk is required) but since tomcat \nneeds to be able to run on java 1.3 (shudders) - the getCause may not be \navailable for 1.3 implementations.\n\nRemarking as fixed for now lness a better patch arrives.",
      "Here is some code that works for both ServletException and \nJspException:\n\npublic static Throwable getRootCause(ServletException e) {\n    Throwable rootCause = e.getRootCause();\n    return processRootCause(e, rootCause);\n}\n\nprivate static Throwable processRootCause(Exception e, Throwable rootCause) {\n    if (rootCause == null || rootCause == e) {\n        return e;   //The root cause is a ServletException or JspException\n    }\n\n    if (rootCause instanceof ServletException) {\n        rootCause = getRootCause((ServletException) rootCause);\n    } else if (rootCause instanceof JspException) {\n        JspException jspRootCause = (JspException)rootCause;\n        Throwable deeperRootCause = jspRootCause.getRootCause();\n        rootCause = processRootCause(jspRootCause, deeperRootCause);\n    }\n    return rootCause;   //The root cause is not a ServletException or JspException\n}",
      "Thanks for the new patch. I have committed a variation to svn and will be in\n5.5.21 onwards."
    ],
    "creation_ts": "2006-03-23T21:02:08Z",
    "fixes": [
      39088
    ]
  },
  {
    "id": 69359,
    "summary": "WebdavServlet duplicates getRelativePath() method from super class with incorrect Javadoc",
    "description": "Method https://github.com/apache/tomcat/blob/c50b8aa2588c85df86c0c6e0cd03e79700822360/java/org/apache/catalina/servlets/WebdavServlet.java#L413-L416 duplicates https://github.com/apache/tomcat/blob/c50b8aa2588c85df86c0c6e0cd03e79700822360/java/org/apache/catalina/servlets/DefaultServlet.java#L430-L432.\n\nThe Javadoc above https://github.com/apache/tomcat/blob/c50b8aa2588c85df86c0c6e0cd03e79700822360/java/org/apache/catalina/servlets/WebdavServlet.java#L406-L413 was very likely meant for the method below, the overridden one: https://github.com/apache/tomcat/blob/c50b8aa2588c85df86c0c6e0cd03e79700822360/java/org/apache/catalina/servlets/WebdavServlet.java#L419-L438\n\nIf no one will object, will simply delete the method and move the Javadoc comment down.",
    "comments": [
      "+1",
      "Fixed in:\n- main for 12.0.0-M1 and onwards\n- 11.0.x for 11.0.0 and onwards\n- 10.1.x for 10.1.31 and onwards\n- 9.0.x  for 9.0.96 and onwards"
    ],
    "creation_ts": "2024-10-02T07:26:24Z",
    "fixes": [
      69359
    ]
  },
  {
    "id": 51584,
    "summary": "Crash (infinite loop) when files starting with '#' are in the library tree",
    "description": "Situation:\n stray text file in my /WEB-INF/classes/...../ directory named \"#SurveyMain.java#\"     ( It was a backup/autosaved source file, and eclipse 'helpfully' deployed it. ) \n\n \n causes crash on startup in tomcat 7.0.6, 7.0.19 and 7.0.20-dev (1151601M). - out of memory.\n\n\nAdded this test to .20-dev:\n\nIndex: org/apache/catalina/startup/ContextConfig.java\n===================================================================\n--- org/apache/catalina/startup/ContextConfig.java\t(revision 1151601)\n+++ org/apache/catalina/startup/ContextConfig.java\t(working copy)\n@@ -1902,6 +1902,7 @@\n                 while (dirs.hasMoreElements()) {\n                     String dir = dirs.nextElement();\n                     URL dirUrl = new URL(url.toString() + '/' + dir);\n+                    System.err.println(\"Processing: \" + url.toString() + '/' + dir);\n                     processAnnotationsJndi(dirUrl, fragment);\n                 }\n                 \n\nPrinted tons of lines\u2026 at startup\u2026\n\n\nProcessing: jndi:/localhost/cldr-apps/WEB-INF/classes/org/unicode/cldr/web/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/#SurveyMain.java#/....\n\nThen crashed as before\u2026\n\njava.lang.OutOfMemoryError: Java heap space\n\tat java.util.Arrays.copyOfRange(Arrays.java:3209)\n\tat java.lang.String.<init>(String.java:215)\n\tat java.lang.StringBuilder.toString(StringBuilder.java:430)\n\tat java.io.UnixFileSystem.resolve(UnixFileSystem.java:93)\n\tat java.io.File.<init>(File.java:312)\n\tat org.apache.naming.resources.FileDirContext.list(FileDirContext.java:871)\n\tat org.apache.naming.resources.FileDirContext.list(FileDirContext.java:304)\n\tat org.apache.naming.resources.ProxyDirContext.list(ProxyDirContext.java:506)\n\tat org.apache.naming.resources.DirContextURLConnection.list(DirContextURLConnection.java:444)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1901)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1906)\n\n\n\nI think the problem is that the URL generated contains a '#' and so file:// interprets it as a fragment and not as a path.\n\nQuick patch:\n\nIndex: java/org/apache/catalina/startup/ContextConfig.java\n===================================================================\n--- java/org/apache/catalina/startup/ContextConfig.java\t(revision 1151601)\n+++ java/org/apache/catalina/startup/ContextConfig.java\t(working copy)\n@@ -1901,7 +1901,11 @@\n                 Enumeration<String> dirs = dcUrlConn.list();\n                 while (dirs.hasMoreElements()) {\n                     String dir = dirs.nextElement();\n+                    if(dir.startsWith(\"#\")) {\n+                        continue;\n+                    }\n                     URL dirUrl = new URL(url.toString() + '/' + dir);\n+                    //System.err.println(\"Processing: \" + dirUrl.toString());\n                     processAnnotationsJndi(dirUrl, fragment);\n                 }",
    "comments": [
      "Thanks for the report.\n\nThe fix needs to be at a lower level than the patch you suggest to address the root cause rather than one of the symptoms.\n\nThe patch has been applied to 7.0.x and will be included in 7.0.20 onwards.",
      "(In reply to comment #1)\n> Thanks for the report.\n> \n> The fix needs to be at a lower level than the patch you suggest to address the\n> root cause rather than one of the symptoms.\n\nI don't doubt it at all. \n\n> The patch has been applied to 7.0.x and will be included in 7.0.20 onwards.\n\nThanks! I was surprised to find this was a unique find. But perhaps few people use  vim + eclipse + tomcat.  I don't, but apparently I edited one source file with vim.",
      "Just noting that the fix for this issue (r1152593) was incomplete and caused regression - bug 53257. See further discussion there."
    ],
    "creation_ts": "2011-07-29T15:34:27Z",
    "fixes": [
      51584
    ]
  },
  {
    "id": 69696,
    "summary": "Unexpected jsp page result if inner class changed to compilation error",
    "description": "If a valid jsp file with inner class visited once and then the jsp inner class source changed to invalid, its inner class (.class) retained in working directory. Later, the request result is unpredictable.\n\n1. source code of welcome.jsp\n```java\n<%\nclass Person {\n  int getAge() {\n    return 30;\n  }\n}\n%>\n<html>\n        <body>\n                Welcome! Age:<%=new Person().getAge()%>\n        </body>\n</html>\n```\n2. curl with expected result.\n3. change the source code to:\n```java\n<%\nclass Person {\n  int getAge() {\n    return 30a; // obviously failed to compile.\n  }\n}\n%>\n<html>\n        <body>\n                Welcome! Age:<%=new Person().getAge()%>\n        </body>\n</html>\n```\n4. curl welcome.jsp, got 500 as expected!\n5. curl welcome.jsp again quickly, got 200 response same with step 2.",
    "comments": [
      "Ok, so there are two issues:\n- The leftover inner class. The issue here is that this separate file is the compiler's business and Jasper will probably not going to be able to clean that up, so I would say this is not going to be fixed.\n- The bad retries. Using the old JSP wrapper is not very good.",
      "The JSP wrapper is now marked for reload, producing a 500 for each request. The leftover class is not cleaned up, and I don't know if it can be fixed. The fix will be in 11.0.8, 10.1.42 and 9.0.106."
    ],
    "creation_ts": "2025-05-20T09:34:11Z",
    "fixes": [
      69696
    ]
  },
  {
    "id": 56588,
    "summary": "ApplicationListener#pluggabilityBlocked field is always \"false\" in Tomcat 8",
    "description": "(Noted when reviewing bug 55282 and its fix - r1597855 )\n\nApart from ~42 references in text code, the o.a.t.util.descriptor.web.ApplicationListener constructor is called in only one place and in that place [1] the pluggabilityBlocked argument is always \"false\".\n\n[1] org.apache.catalina.startup.ContextConfig#configureContext(WebXml)\n\n\nOriginally this feature was added in r1492307 and this the second constructor argument was named \"fromTLD\". The feature is that listeners added by TLD scanning do not have access to all configuration APIs.\n\nIn Tomcat 8 Jasper now initializes itself via JasperInitializer.onStartup() and adds TLD listeners via ServletContext.addListener(String) calls.\n\nThus:\n1. I suspect that the feature implemented by r1492307 may be currently broken which means that listeners defined in TLDs have access to full API.\n\n2. ApplicationListener.pluggabilityBlocked field and a bunch of code can be removed.",
    "comments": [
      "The feature isn't broken. The original fix included a test that still passes. It works because all listeners added via ServletContext.addListener() are blocked from using pluggability features.\n\nI agree there is some unused code we can remove.",
      "Fixed in 8.0.x for 8.0.9 onwards.",
      "Ack. I see.\nIn StandardContext.listenerStart() the listeners that have been already configured before (via ServletContext API) are added to 'noPluggabilityListeners' set. That does the trick.\n\nI updated deprecation markers on o.a.c.Context methods in Tomcat 7 in r1600638. It will be in 7.0.55."
    ],
    "creation_ts": "2014-06-04T12:46:07Z",
    "fixes": [
      56588
    ]
  },
  {
    "id": 57338,
    "summary": "SingleSignOnEntry cache of ClusterSingleSignOn valve is not synchronized on Tomcat startup",
    "description": "When using the ClusterSingleSignOn valve, it looks like the single sign on session state is not synchronized to cluster nodes when they start. The state is instead only replicated at the moment that an action is performed, so any nodes that come online after that action are out of sync.\n\nSee mailing list discussion here: http://www.mail-archive.com/users@tomcat.apache.org/msg115472.html",
    "comments": [
      "Anyone working on this? If not I'll take a look. My initial thoughts are to make use of one of the ReplicatedMap implementations.",
      "Not yet.\nI've just ClusterSingleSignOn implements ClusterValve.(r1645595)\nI am writing a document of ClusterSingleSignOn now.\n\nIMHO.\nIf using the ReplicatedMap, it may be necessary to add jvmRoute to SSOID.\nIf using SSO cache (ReplicatedMap) of backup node, it will be replicated to the other node.\nSo, It may be necessary that the SSO Cookie is sticky.\n\nFor example, setting the SSO Cookie name(JSESSIONIDSSO) to session_cookie of mod_jk.\nAs a Result, all of the Web applications in the SSO can be used on the same node,\nI think to be able to suppress unnecessary replication.",
      "The biggest problem I can see with ReplicatedMap at this point as that I don't want to / can't replicated the two Maps (cache and reverse) as currently implemented since that means replicating the entire session and a potentially non-serializable Principal.\n\nI'm looking into refactoring the SSO implementation to make this easier.\n\nRegarding adding jvmRoute to the SSO cookie, I see the point you are making and I agree with it. However, I think that point applies irrespective of this bug report and is probably best handled separately.",
      "I have a patch but it is untested. I'm working on that now and hope to be able to commit something in the next 24 hours.",
      "This is currently implemented in trunk (Tomcat 9).\n\nWe need to discuss on the dev list which versions, if any, this can be back-ported to as there were a number of fairly invasive changes made to enable this to be implemented sensibly.",
      "I've back-ported the fix to 8.0.x and it will be included in 8.0.x onwards. I'll wait for some feedback on that before back-porting it to 7.0.x.",
      "*** Bug 28039 has been marked as a duplicate of this bug. ***",
      "(In reply to Mark Thomas from comment #6)\n> I've back-ported the fix to 8.0.x and it will be included in 8.0.x onwards.\n> I'll wait for some feedback on that before back-porting it to 7.0.x.\n\nJust wondering...has there been any more thought to back-porting this fix to 7.0.x?",
      "It has been long enough now without any issues being reported so I'll start work on the back-port.",
      "Fixed in 7.0.x/trunk for 7.0.62 onwards."
    ],
    "creation_ts": "2014-12-10T17:58:51Z",
    "fixes": [
      57338
    ]
  },
  {
    "id": 49884,
    "summary": "NullPointerException in org.apache.catalina.core.AsyncContextImpl.doInternalComplete",
    "description": "Hi, I'm running Tomcat trunk (revision 992708, 2010-09-03) and I'm hitting an async servlet (see attached) with Apache Bench, and every once in a while I see a NullPointerException in org.apache.catalina.core.AsyncContextImpl.doInternalComplete:\n\nSep 4, 2010 8:09:39 PM org.apache.catalina.core.AsyncContextImpl doInternalDispatch\nFINE: TIMING OUT!\nSep 4, 2010 8:09:40 PM org.apache.catalina.core.AsyncContextImpl doInternalDispatch\nFINE: TIMING OUT!\nSep 4, 2010 8:09:40 PM org.apache.catalina.core.AsyncContextImpl doInternalComplete\nSEVERE: \nThrowable occurred: java.lang.NullPointerException\n\tat org.apache.catalina.core.AsyncContextImpl.doInternalComplete(AsyncContextImpl.java:384)\n\tat org.apache.catalina.core.AsyncContextImpl.doInternalDispatch(AsyncContextImpl.java:327)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:238)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:201)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:163)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:108)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:557)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n\tat org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:301)\n\tat org.apache.coyote.http11.Http11Processor.asyncDispatch(Http11Processor.java:333)\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:258)\n\tat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:257)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:898)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:920)\n\tat java.lang.Thread.run(Thread.java:736)",
    "comments": [
      "Created attachment 25989\nServlet used to reproduce the problem",
      "The state changes in AsyncContextImpl aren't atomic so I think what you are seeing is the result of multiple parallel calls to doInternalComplete(). Am I correct in thinking this error is fairly rare?",
      "(In reply to comment #2)\n> The state changes in AsyncContextImpl aren't atomic so I think what you are\n> seeing is the result of multiple parallel calls to doInternalComplete(). Am I\n> correct in thinking this error is fairly rare?\n\nYes, it is rare. The reason I reported this is that I'm load testing this servlet (well, my real servlet, but this one just to repro the problem), and every once in a while I get a 200 or 500 response that takes over 10 seconds whereas the average is half a second (using AccessLogValve %D to see this). I ran with tracing and noticed this NPE and thought maybe it's somehow related to the sporadic long request, but I don't know if it's root cause. Also, it is preceded by the \"TIMING OUT!\" entry, so maybe this NPE is just a side effect of the timeout?",
      "I've been able to spend some time looking at this. It is very easy to reproduce on a multi-core machine with relatively low numbers of requests and concurrency.\n\nThere is definitely a threading issue at the heart of this. I need to dig deeper to find out exactly what the root cause is.",
      "(In reply to comment #4)\n> I've been able to spend some time looking at this. It is very easy to reproduce\n> on a multi-core machine with relatively low numbers of requests and\n> concurrency.\n> \n> There is definitely a threading issue at the heart of this. I need to dig\n> deeper to find out exactly what the root cause is.\n\nThanks Mark.",
      "Created attachment 26022\nPatch to make some private fields final\n\nThey are probably not a cause of the synch. issues, but it would not harm to make these fields final.",
      "This has been fixed in trunk and will be included in 7.0.3. Thanks for uncovering this. It highlighted a bunch of issues with the async implementation that are hopefully now fixed."
    ],
    "creation_ts": "2010-09-04T23:16:09Z",
    "fixes": [
      49884
    ]
  },
  {
    "id": 41666,
    "summary": "If-Unmodified-Since failure",
    "description": "The If-Unmodified-Since header doesn't work enoughly.\n\nfailed case:\n The If-Unmodified-Since header value: 1000000(milliseconds)\n The lastModified value of target resource: 1001000(milliseconds)\n\nIn this case, the response's status code should be SC_PRECONDITION_FAILED,\nbut the result is not so.\n\ncaused by:\nIn DefaultServlet#checkIfUnmodifiedSince:\n    if ( lastModified > (headerValue + 1000)) {\n\nI think it should be:\n    if ( lastModified >= (headerValue + 1000)) {",
    "comments": [
      "If-Modified-Since is also similar.",
      "Fixed in svn. This will be included in 5.5.23 onwards."
    ],
    "creation_ts": "2007-02-21T01:44:28Z",
    "fixes": [
      41666
    ]
  },
  {
    "id": 64110,
    "summary": "Record TLS protocol in access log for connections with a failed TLS handshake",
    "description": "For reference: https://lists.apache.org/thread.html/r7d872a09a56b539545a226813761ee3c0dcdf75787449dd8551f2f07%40%3Cusers.tomcat.apache.org%3E\n\nWhen a TLS connection is attempted and failed, Tomcat will record an access log where the protocol is \"-\" and the cipher suite is \"-\" (if specified in the log string, of course).\n\nIn the event of a TLS handshake failure (e.g. no shared cipher suites, protocol not supported/configured/allowed, insufficient client-cert trust, etc.), the TLS protocol itself -- as advertised by the client -- should be a known value, and should be available to the access log instead of \"-\".",
    "comments": [
      "This applies to Tomcat 7 and Tomcat 8 also.",
      "https://github.com/apache/tomcat/pull/380 submitted for feedback.",
      "Fixed in:\n- 10.0.x for 10.0.1 onwards\n- 9.0.x for 9.0.42 onwards\n- 8.5.x for 8.5.62 onwards"
    ],
    "creation_ts": "2020-02-01T16:23:45Z",
    "fixes": [
      64110
    ]
  },
  {
    "id": 51741,
    "summary": "Eclipse WTP \"Serve modules without publishing\" broken with tc7, needs patch in tomcat",
    "description": "Eclipse WTP has an option \"Serve modules without publishing\" that works well with tc6, but not with tc7.\nAfter investigation by the WTP team, there seem to be no way for them to fix this without modifying tomcat. The problem in WTP is reported here : https://bugs.eclipse.org/bugs/show_bug.cgi?id=333102\n\nBasically, their DirContext implementation (org.eclipse.jst.server.tomcat.loader.WtpDirContext) returns a ResourceAttributes that correctly points to an existing location, but org.apache.catalina.loader.WebappClassLoader.findResourceInternal(String, String) ignores it and returns a ResourceEntry whose codeBase and source fields point to a non-existing location.\nThis breaks applications that call getResource(...) on the Thread ContextClassLoader and use the returned URL.\nA call to getResourceAsStream(...) on the Thread CCL is OK.",
    "comments": [
      "I'm preparing a patch for org.apache.catalina.loader.WebappClassLoader.findResourceInternal(String, String) but I'm also wondering if tomcat should not provide such a \"virtual\" DirContext just like org.apache.catalina.loader.VirtualWebappLoader is provided (which could probably be used by WTP instead of org.eclipse.jst.server.tomcat.loader.WtpWebappLoader)",
      "With aliases and altDirContexts this code is already pretty messy. A virtual DirContext may make things worse.",
      "fixed WebappClassLoader in r1163802, will be available in tomcat 7.0.22",
      "Not sure about the expected behavior of the WepappClassLoader, but here's something I ran into while testing the new release 7.0.22.\n\nI'm still experiencing the issue when using org.apache.catalina.loader.WebappClassLoader.findResources(String).\n\nUnlike org.apache.catalina.loader.WebappClassLoader.findResource(String), it doesn't look for resources into the local repository using org.apache.catalina.loader.WebappClassLoader.findResourceInternal(String, String), where the fix to this bug can be found.\n\nNot sure if this is an expected behavior, but this use case doesn't seem to be covered by the fix.",
      "you're correct, my fix is not sufficient, I'll work on it soon.\nUnfortunately the code in tomcat is quite complex and feels like it has a lot of history, I have to be very careful not to break anything...",
      "Thank you very much !",
      "Sylvain,\n\nThanks for your work on this.  I've verified the \"<classloader>.getResource()\" is fixed in Tomcat 7.0.22 for \"Serve modules without publishing\".  Unfortunately, the testing revealed I missed a change to DirContextURLConnection in 7.0.21 which breaks annotation processing for 3.0 webapps.  See Eclipse bug:\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id=360012\n\nThis means that WTP 3.2.5, 3.3.2, or 3.4 will be needed to avoid the annotation problem in a released WTP.  An updated org.eclipse.jst.server.tomcat.runtime.70.loader.jar is available in the bug above which fixes the problem.  Until those releases are available, the simplest way to work around if you are using a 3.0 webapp is to edit the org.eclipse.jst.server.tomcat.core plug-in jar to replace the \".70.loader\" jar with the updated one.\n\nFinally, I've updated the project set I use for testing to include a test for \"<classloader>.getResources()\".  I'll try to clean it up some and attach a zip to the Eclipse bug in case you or someone else wants to use it.\n\nCheers,\nLarry",
      "I'm still working on a patch...\nActually, I think that it's really impossible to have a custom DirContext that fakes WEB-INF/classes to allow multiple virtual paths because one way or another it would return inexistent URLs.\n\nSo, I started to work on a patch that would allow to specify additional paths that should be searched for annotated classes just like WEB-INF/classes. Such a configuration parameter is located on the StandardContext.\n\nWith this patch, WTP could totally avoid to provide its own extensions to tomcat classes and just configure a <Context> with the new property, a <Resource> with the org.apache.naming.resources.VirtualDirContext implementation and a <Loader> with the org.apache.catalina.loader.VirtualWebappLoader implementation.",
      "I agree to release under the Apache Licence my changes to WtpDirContext found in the Eclipse WTP source.  These changes extended the source that Fabrizio Giustina originally contributed to both Eclipse and Tomcat.",
      "patch commited on trunk : 1209686 + 1209694 + 1209731\n\nI'll apply to tc 7 in a couple of days",
      "applied on tc7, will be available in 7.0.24.",
      "Note that the patch to ContextConfig contained invalid assumptions that triggered regressions (see bug 52669). Namely:\n- the patch assumed that web applications were always deployed in exploded form\n- the patch assumed that classes were always located in packages\n\nThe patch also broke OSGi embedded usage.",
      "See r1307600 for one more issue with the patch.\nThe fix will be in 7.0.27."
    ],
    "creation_ts": "2011-08-29T21:29:56Z",
    "fixes": [
      51741
    ]
  },
  {
    "id": 64188,
    "summary": "CLOSE_CONNECTION_NOW is done when servlet/filter makes a response.flush(); and fails in HTTP/2",
    "description": "When HTTP/2 is configured and a servlet/response makes a \"response.flushBuffer()\" (response is a ServletResponse object), sometimes it closes all channels of the connections.\n\n\n\nIn the source code of org.apache.coyote.AbstractProcessor.java, 'public final void action(ActionCode actionCode, Object param)' method, I can see \"CLOSE\" case:\n\n---\n        case CLOSE: {\n            action(ActionCode.COMMIT, null);\n            try {\n                finishResponse();\n            } catch (CloseNowException cne) {\n                setErrorState(ErrorState.CLOSE_NOW, cne);\n            } catch (IOException e) {\n                setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);\n            }\n            break;\n        }\n---\n\nIt is easy to see that with \"finishResponse()\", if it throws an exception, it tries first to capture \"CloseNowException\".\nIf it is the case, then it \"setErrorState(ErrorState.CLOSE_NOW, cne);\"; so it close only the channel; not the whole connection.\n\nBut this behavior is not the same with \"case CLIENT_FLUSH:\".\nIf \" flush();\" throws an exception, it closes the whole connection with \" setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);\".\n\nMy suggestion is to try catch first 'CloseNowException' (as in CLOSE case); and if it is catched, then close only the channel, not the whole connection. So the code could be something like this:\n\n-----\n\n        case CLIENT_FLUSH: {\n            action(ActionCode.COMMIT, null);\n            try {\n                flush();\n            } catch (CloseNowException cne) {\n                setErrorState(ErrorState.CLOSE_NOW, cne);\n                 response.setErrorException(cne);  //I am not sure about this line\n            } catch (IOException e) {\n                setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);\n                response.setErrorException(e);\n            }\n            break;\n        }\n-----\nThen, if an error is producced, it lets other chnnels to completed.\n\nI implemented it in my enviroment, and it works; but I do know know if it \"breaks\" some kind of standard or RFC or what else.",
    "comments": [
      "I don't see any reason why not to do this (although I want to think this through a little more before committing a fix). It also looks like COMMIT needs the same treatment.",
      "Fixed in:\n- master for 10.0.0-M2 onwards\n- 9.0.x for 9.0.32 onwards\n- 8.5.x for 8.5.52 onwards"
    ],
    "creation_ts": "2020-03-02T15:14:25Z",
    "fixes": [
      64188
    ]
  },
  {
    "id": 64097,
    "summary": "Service loader implementation incomplete",
    "description": "The custom service loader implementation used by the EL API is incomplete. It does not skip comments causing it to use a comment line as a class name. This means it often fails to load a valid EL implementation present on the class path.\n\nI suspect the issues are not limited to comment handling but I haven't dug further.\n\nSwitching to using ServiceLoader rather than a custom implementation looks to be the best solution.",
    "comments": [
      "Fixed in:\n- master for 10.0.0.0-M1 onwards\n- 9.0.x for 9.0.31 onwards\n- 8.5.x for 8.5.51 onwards\n- 7.0.x for 7.0.100 onwards",
      "In Tomcat 8.5.51 we now have a regression when compiling JSP's in Maven (using io.leonard.maven.plugins:jspc-maven-plugin:2.4.5) that might be related to this fix:\n\njavax.el.ELException: Unable to find ExpressionFactory of type: # Licensed to the Apache Software Foundation (ASF) under one or more\n \tat javax.el.ExpressionFactory.newInstance(ExpressionFactory.java:154)\n \tat javax.el.ExpressionFactory.newInstance(ExpressionFactory.java:93)\n \tat org.apache.jasper.compiler.PageInfo.<init>(PageInfo.java:79)\n \tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:114)\n \tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:372)\n \tat org.apache.jasper.JspC.processFile(JspC.java:1263)\n \tat org.apache.jasper.JspC.execute(JspC.java:1415)\n \tat io.leonard.maven.plugins.jspc.JspcWorker.call(JspcWorker.java:27)\n \tat io.leonard.maven.plugins.jspc.JspcWorker.call(JspcWorker.java:9)\n \tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n \tat java.lang.Thread.run(Thread.java:745)\n Caused by: java.lang.ClassNotFoundException: # Licensed to the Apache Software Foundation (ASF) under one or more\n \tat java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n \tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n \tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n \tat javax.el.ExpressionFactory.newInstance(ExpressionFactory.java:147)\n \t... 12 more\n\nThis seems to be the direct opposite of what was intended.\n\nReverting to Tomcat 8.5.50 fixes the issue.\n\nRelated Google search result: https://forum.axelor.com/t/error-when-trying-to-start-the-demo-app-on-tomcat-com-axelor-internal-javax-el-elexception-unable-to-find-expressionfactory-of-type-licensed-to-the-apache-software-foundation-asf-under-one-or-more/2625",
      "You aren't using 8.5.51. That stack trace is from 8.5.50. Looks like you have a strange combination of versions. The users list is the place to see further help.",
      "You are absolutely right. Thanks for your quick and correct analysis!\n\nProblem was caused by the depedency of the Maven plugin on an older Tomcat version. Fixed by updating its dependency.",
      "(In reply to Peer Heijnen from comment #4)\n> You are absolutely right. Thanks for your quick and correct analysis!\n> \n> Problem was caused by the depedency of the Maven plugin on an older Tomcat\n> version. Fixed by updating its dependency.\n\nMay I ask exactly what you changed? I am getting a similar issue and cannot find a maven plugin in my project with a tomcat dependency. Thanks!",
      "Restore the correct resolution. If you have questions, please use the users mailing list.",
      "Hi Mark, \n\nI recently upgraded it to tomcat 8.5.51. And observing this error stack trace\n\nServlet.service() for servlet [jsp] in context with path [/my-app] threw exception [Unable to compile class for JSP] with root cause java.lang.ClassNotFoundException: # Licensed to the Apache Software Foundation (ASF) under one or more\n at org.eclipse.gemini.web.tomcat.internal.loader.BundleWebappClassLoader.loadClass(BundleWebappClassLoader.java:318)\n at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n at javax.el.ExpressionFactory.newInstance(ExpressionFactory.java:147)\n at javax.el.ExpressionFactory.newInstance(ExpressionFactory.java:93)\n at org.apache.jasper.compiler.PageInfo.<init>(PageInfo.java:79)\n at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:116)\n at org.apache.jasper.compiler.Compiler.compile(Compiler.java:375)\n at org.apache.jasper.compiler.Compiler.compile(Compiler.java:351)\n at org.apache.jasper.compiler.Compiler.compile(Compiler.java:335)\n at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:597)\n at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:399)\n at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:386)\n at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:330)\n at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)\n at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)\n at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)\n at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)\n at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)\n at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\n at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\nCan you please let me know, why i am getting this error after upgrading to 8.5.51 version ?\nAs i havent faced this issue while upgrading it to 8.5.50",
      "You aren't using the EL API from 8.5.51. The EL API you are using suffers from this bug. The users list is the place to see help.",
      "(In reply to Mark Thomas from comment #8)\n> You aren't using the EL API from 8.5.51. The EL API you are using suffers\n> from this bug. The users list is the place to see help.\n\nHi Mark, Thanks for your reply. Can you please let me know how can i check that i am not using EL API from 8.5.51 and so i can update it."
    ],
    "creation_ts": "2020-01-25T08:25:37Z",
    "fixes": [
      64097
    ]
  },
  {
    "id": 64621,
    "summary": "HTTP/2 Tomcat Server responds with RST_STREAM (REFUSED_STREAM) continuously in one of the TCP connection.",
    "description": "*Sub-Component - Coyote*\n\n*OS : Redhat Linux*\n\n*Description:*\n\n*Setup:*\n\nWe have an implementation with Tomcat to transport http/2 packets between 2 systems. \n\n*Issue reproduction:*\n\nDuring a load test (with some 1000 requests per second) in the pre-production systems, we identified some scenarios where our Tomcat server is continuously replying with a RST_STREAM, with REFUSED_STREAM as the reason, in a single TCP Connection. \n\nEven though it is understood that exceeding the number of streams per connection rejects the new streams with RST_STREAM (REFUSED_STREAM) error as per Section 5.1.2 and SECTION 8.1.4 of RFC7540. We are not seeing any other responses sent by the server after sometime. It was only RST_STREAM (REFUSED_STREAM) errors. For the whole test run period (around 30 minutes), it was only RST_STREAM in that particular TCP connection.\n\nIf the RST_STREAM is sent for exceeded stream count, should it have not recovered after sometime? \n\n\n*Additional Information:*\n\nAlso, by looking into the tomcat code base, it was understood that the RST_STREAM (REFUSED_STREAM) response from tomcat is only possible during an exceeded stream count and in no other situation (reference given below).\n\nif (localSettings.getMaxConcurrentStreams() < activeRemoteStreamCount.incrementAndGet()) {\n                activeRemoteStreamCount.decrementAndGet();\n                throw new StreamException(sm.getString(\"upgradeHandler.tooManyRemoteStreams\",\n                        Long.toString(localSettings.getMaxConcurrentStreams())),\n                        Http2Error.REFUSED_STREAM, streamId);\n            }\n\nIn addition to this, in the Stream processor code, we noticed a \u2018FIXME:\u2019 comment to fix the syncs (reference given below).\n\nfinal void process(SocketEvent event) {\n        try {\n            // FIXME: the regular processor syncs on socketWrapper, but here this deadlocks\n            synchronized (this) {\n                // HTTP/2 equivalent of AbstractConnectionHandler#process() without the\n                // socket <-> processor mapping\n                ContainerThreadMarker.set();\n                SocketState state = SocketState.CLOSED;\n                try {\n                    state = process(socketWrapper, event);\n\n                    if (state == SocketState.CLOSED) {\n                        if (!getErrorState().isConnectionIoAllowed()) {\n                            ConnectionException ce = new ConnectionException(sm.getString(\n                                    \"streamProcessor.error.connection\", stream.getConnectionId(),\n                                    stream.getIdentifier()), Http2Error.INTERNAL_ERROR);\n                            stream.close(ce);\n                        } else if (!getErrorState().isIoAllowed()) {\n                            StreamException se = stream.getResetException();\n                            if (se == null) {\n                                se = new StreamException(sm.getString(\n                                        \"streamProcessor.error.stream\", stream.getConnectionId(),\n                                        stream.getIdentifier()), Http2Error.INTERNAL_ERROR,\n                                        stream.getIdAsInt());\n                            }\n                            stream.close(se);\n                        }\n                    }\n                } catch (Exception e) {\n                    String msg = sm.getString(\"streamProcessor.error.connection\",\n                            stream.getConnectionId(), stream.getIdentifier());\n                    if (log.isDebugEnabled()) {\n                        log.debug(msg, e);\n                    }\n                    ConnectionException ce = new ConnectionException(msg, Http2Error.INTERNAL_ERROR);\n                    ce.initCause(e);\n                    stream.close(ce);\n                } finally {\n                    ContainerThreadMarker.clear();\n                }\n            }\n        } finally {\n            handler.executeQueuedStream();\n        }\n    }\n\nCorrelating these two items, if the streams are not closed due to this sync issue, the activeRemoteStreamCount will be in an increasing trend (as I am seeing the stream closure only here), Which will result in the REFUSED_STREAM errors. \n\nCan you confirm this issue and suggest on whether a fix is available in any of your working streams? As the system is already in production, it is susceptible to the issue in production anytime, when the load increases. Please help us find a way forward. \n\nThanks in advance.",
    "comments": [
      "Exact Tomcat version being used?",
      "The current Tomcat version used is 9.0.22, in which we are seeing this issue. I have also checked the pasted code snippets up-to the latest 9.0.37 version. It is the same till 9.0.37.",
      "Please re-test with 9.0.37. There have been many fixes since 9.0.22\n\nAre you using h2 or h2c?",
      "It is h2c we are using. \n\nAlso, as this is a pre-production/production, upgrading to the latest version requires solid evidence to push to the higher version :(. \n\nIs it possible to check on the corresponding modules on whether this issue is resolved in 9.0.37? Can you please help on this?",
      "You have misunderstood the nature of the FIXME. There is no \"sync issue\" here that results in streams not being closed.\n\nWe have a test case that tests the REFUSED_STREAM state and extending that test demonstrates that new streams may be sent once the concurrency level falls below the limit.\n\nFor us to investigate further you will need to provide the *minimal* steps to reproduce this error (with code, scripts etc as required) on a clean install of the latest Tomcat 9.0.x release.",
      "Thanks Mark, for the update. Will try to reproduce in our local setup and will get back to you with more clarity. As this occurs randomly, we are yet to narrow down to the \"reproduction steps\". So, will get back to you ASAP. \n\nThanks again for the swift responses.",
      "Even after trying to simulate this in our local lab setup for the past few weeks, we are not able to reproduce the same in lab. \n\nHowever, this is getting reproduced in the production environment (the client being different in the production environment). In local environment, we use JMeter as a simulator and in the production environment the client uses Envoy 3PP for HTTP communication.\n\nAs an additional information, we are able to see a pattern that, whenever the client is sending a \"HEADER\" packet along with a \"RST_STREAM\" (Reason: NO_ERROR) packet in the same TCP packet, TOMCAT server is going to this mode and sending continuous RST_STREAM (Reason: REFUSED_STREAM) answers to any message that is coming in that TCP connection from the client. \n\nAs it is difficult to convince the customer to upgrade to 9.0.37, without solid data point on the fix availability in the latest version, we request your kind help on this. Is there any commit or some improvement that we can point to convince the customer to move to the latest tomcat version that you can help with in connection with this? \n\nOnce again, Thanks in advance :).",
      "Without the ability to recreate this issue the only way to test if the issue is resolved is going to be in production.\n\nBased on the additional information provided, I expanded the test cases to cover two scenarios:\na) ensuring after active stream limit is reached, new streams are allowed once the number of current active streams falls\nb) ensuring that client cancelled streams are removed from the active stream count\n\ntest a) passed.\n\nTest b) identified a bug where cancelled streams weren't removed from the active stream count. I suspect this is at least part of, possibly all of, the cause of the issues you are seeing.\n\nThe bug has been fixed in:\n- master for 10.0.0-M8 onwards\n- 9.0.x for 9.0.38 onwards\n- 8.5.x for 8.5.58 onwards\n\nThose releases are expected in early September. You are, of course, free to build from source and test before then.\n\nAbsent any further information, I am going to assume that this issue is now fixed.",
      "Thank you so much for the swift response Mark! This is of great help for us. We will check on how we can take this in.",
      "Like 64671, I am curious if anyone knows if this was introduced any place before 9.0.22. Thanks!"
    ],
    "creation_ts": "2020-07-23T13:36:21Z",
    "fixes": [
      64621
    ]
  },
  {
    "id": 53333,
    "summary": "NPE is thrown for env-entry without env-entry-type but with injection-target specified",
    "description": "Created attachment 28863\nTest web application\n\nHi,\n\nI have a web application (attached) that specifies env-entry in the web.xml. The env-entry does not specify env-entry-type, but specifies injection-target. When deploying that web application, the exception below is thrown:\n\n\nCaused by: java.lang.NullPointerException\n\tat java.util.Hashtable.put(Hashtable.java:394)\n\tat org.apache.catalina.deploy.NamingResources.addEnvironment(NamingResources.java:254)\n\tat org.apache.catalina.deploy.WebXml.configureContext(WebXml.java:1195)\n\tat org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1294)\n\tat org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:855)\n\tat org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:345)\n\tat org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n\tat org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5161)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n\n\nServlet Specification, 14.4 Deployment Descriptor Diagram, describes that use case and how it should be handled:\n\"\nenv-entry element\nIf an injection-target is specified for the environment entry, the enventry-\ntype may be ommitted or MUST match the type of the injection target. If\nno injection-target is specified, the env-entry-type is required.\n\"\n\n\nI would like to propose a patch (attached) that solves this issue.\n\nI'm looking forward for your comments.\n\nThanks\nVioleta\n\n\nSteps to reproduce the problem:\n1. Deploy the attached application\n2. Request http://localhost:8080/test/TestServlet\n3. NPE is thrown\n4. Apply the provided patch\n5. Request http://localhost:8080/test/TestServlet\n6. The following response should be generated:\nenvEntry_1: 1 \nenvEntry_2: 2 \ndataSource: org.apache.tomcat.dbcp.dbcp.BasicDataSource@506dd108",
    "comments": [
      "Created attachment 28864\nPatch proposal",
      "Thanks for pointing this out. It is definitely a bug.\n\nAs I started to look at this I found some clean-up that could be done. It changes the failure point although I think the patch is currently trying to identify the type at the correct point. However, I'm not sure that NamingResources is the best home for the actual functionality. I think some refactoring may be in order. I'm looking at the now.\n\nI also think that the specification wording is ambiguous. There is\n<quote>\ntype may be ommitted or MUST match the type of the injection target\n</quote>\nand\n<quote>\ntype MUST be assignment compatible with the type of the injection target\n</quote>\n\nClearly the wording is different but I am not convinced that the meaning is. It depends what is meant by \"match\". I am leaning towards implementing the more flexible \"assignment compatible\" in all cases.",
      "Thanks for the suggested patch. I used it as a basis for the committed solution although I tweaked the code a little and made it more relaxed regarding inputs. Generally, as long as the types are compatible - it will work.\n\nThe change has been applied to trunk and 7.0.x and will be included in 7.0.28 onwards.",
      "Thanks"
    ],
    "creation_ts": "2012-05-30T19:28:00Z",
    "fixes": [
      53333
    ]
  },
  {
    "id": 45906,
    "summary": "Fix ResourceAttributes ETag handling",
    "description": "Created attachment 22642\nFix ResourceAttributes ETag handling\n\nThe ResourceAttributes class and it's clients have a few problems WRT ETag handling:\n\n- ResourceAttributes only has a \"getetag\" attribute (apparently for WebDav?), and doesn't expose this value through an HTTP header compatible ALTERNATE_ETAG attribute like it does it's other attributes.\n- ResourceAttributes doesn't expose it's ETag through the getIDs(), getAll(), or get(String) methods, meaning FileDirContext.FileResourceAttributes won't return the value to DirContextURLConnection clients along with the other attributes.\n- The ResourceAttributes API is confusing, in that setETag(String) sets the *strong* etag, but getETag() returns the *weak* etag.\n- ResourceAttributes.getETag(boolean) is broken in that it sets the 'result' variable if there is an ETAG attribute value, but then immediately proceeds to overwrite that result value with the 'strongETag' or 'weakETag' value.\n- The only user of ResourceAttributes.getETag(boolean) is DefaultServlet.getETag(ResourceAttributes), which calls both ResourceAttributes.getETag() and ResourceAttributes.getETag(boolean) in succession - this method can be totally removed (making access more consistent with other attributes) by having just the simpler ResourceAttributes.getETag() return a strong tag if there is one, else fallback to returning the weak one.\n- The DefaultServlet.getETag(ResourceAttributes) method has a redundant and dead-code path to generate a weak etag using the content length and last modified values - which will have already been done and returned by ResourceAttributes.getETag(boolean).\n\nThe attached patch against trunk should fix all of this.\n\nFYI: This is a continuation of the DirContextURLConnection problems I fixed in bug 44611.",
    "comments": [
      "Sorry, this may be a dup of bug 45735, but provides more extensive cleanups.",
      "I have applied the patch to trunk with a minor modification (setETag was not renamed). I will propose it for 6.0.x.\n\nMany thanks.",
      "Sounds great Mark, I renamed that before I realized getETag() could replace getETag(boolean) and return either the weak or strong value.  With the single generic getter, having a single generic setter makes more sense.\n\nAnyhow, the quick response makes it a pleasure to contribute, so thanks for helping get the fix in :)",
      "This has been applied to 6.0.x (with getETag(boolean) marked as deprecated) and will be included in 6.0.19 onwards. Thanks again for the patch."
    ],
    "creation_ts": "2008-09-27T15:07:04Z",
    "fixes": [
      45906
    ]
  },
  {
    "id": 66393,
    "summary": "ExtendedAccessLogValve's x-P(XXX) does not correspond to the documentation",
    "description": "This [1] resource says:\nx-P(XXX) for the URL encoded (using UTF-8) request parameter with name XXX\nBut the code [2] does:\n>             try {\n>                 return URLEncoder.encode(value, \"UTF-8\");\n>             } catch (UnsupportedEncodingException e) {\n>                 // Should never happen - all JVMs are required to support UTF-8\n>                 return null;\n>             }\n>         }\n\nThis is java.net.URLEncoder. We all know that this class is deceiving because it actually implements form encoding (Javadoc: Utility class for HTML form encoding. This class contains static methods for converting a String to the application/x-www-form-urlencoded MIME format.) and not URL/URI encoding which produces different results. Tomcat includes a decent URLEcoder class, maybe this one should rather be used, no?\n\nNote: I haven't verified with other Tomcat versions, but I guess they have the same problem.\n\n[1] https://tomcat.apache.org/tomcat-8.5-doc/config/valve.html#Extended_Access_Log_Valve/Attributes\n[2] https://github.com/apache/tomcat/blob/cf2015c1350a3f057182dd4c26c20f68df8b3400/java/org/apache/catalina/valves/ExtendedAccessLogValve.java#L412-L418",
    "comments": [
      "Fixed in:\n- 11.0.x for 11.0.0-M2 onwards\n- 10.1.x for 10.1.5 onwards\n- 9.0.x for 9.0.71 onwards\n- 8.5.x for 8.5.85 onwards"
    ],
    "creation_ts": "2022-12-15T21:45:05Z",
    "fixes": [
      66393
    ]
  },
  {
    "id": 47841,
    "summary": "CombinedRealm fails to switch to other realm",
    "description": "Created attachment 24266\ncatalina.out - with errors\n\nI have the following configuration in server.xml to enable authentication\nagainst both the ldap servers and user realm. This works perfectly except for\nif both the ldap servers are unreachable, Tomcat doesn't fall back to the user\nrealm. When I start Tomcat up the requests just hang waiting for a connection\ntimeout. \n\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n\n             <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n                       resourceName=\"UserDatabase\"/>\n\n             <Realm className=\"org.apache.catalina.realm.JNDIRealm\"\n                       connectionName=\"${jndi.connectionName}\"\n                       connectionPassword=\"${jndi.connectionPassword}\"\n\n                       connectionURL=\"${jndi.connectionURL}\"\n                       alternateURL=\"${jndi.alternateURL}\"\n\n                       userBase=\"${jndi.userBase}\"\n                       userSearch=\"${jndi.userSearch}\"\n                       userSubtree=\"${jndi.userSubtree}\"\n\n                       roleBase=\"${jndi.roleBase}\"\n                       roleName=\"${jndi.roleName}\"\n                       roleSearch=\"${jndi.roleSearch}\"\n                       roleSubtree=\"${jndi.roleSubtree}\"\n\n             />\n\n\n      </Realm>",
    "comments": [
      "In the scenario you describe, with the configuration provided, Tomcat will try the UserdatabaseRealm first and then the JNDIRealm.\n\nIf the LDAP server isn't available, then Tomcat will wait for the connection to time out.\n\nThe timeout is not currently configurable. It is debatable how useful that would be since if the LDAP server was down, you system is likely to have real issues.\n\nIf you have a use case where configuring the timeout would be useful, please create an enhancement request. Enhancement requests with patches and a good justification usually get looked at faster.",
      "(In reply to comment #1)\n> In the scenario you describe, with the configuration provided, Tomcat will try\n> the UserdatabaseRealm first and then the JNDIRealm.\n> \n> If the LDAP server isn't available, then Tomcat will wait for the connection to\n> time out.\n> \n> The timeout is not currently configurable. It is debatable how useful that\n> would be since if the LDAP server was down, you system is likely to have real\n> issues.\n> \n> If you have a use case where configuring the timeout would be useful, please\n> create an enhancement request. Enhancement requests with patches and a good\n> justification usually get looked at faster.\n\nMark,\n\nThanks for your reply. \n\nI tested this again, and what surprises me is that if LDAP were down (I simulated this by changing the ldap port number in jndi.connectionURL), then Tomcat won't serve anything. Surely non-protected content should be served regardless of what is going on with LDAP, but I can't even get to the tomcat home page.\n\nI can think of 2 reasons to add a configurable timeout for LDAP:\n\n1. To stop tcp requests stacking up on the server.\n2. To aid the user trying to log in, at least realise there's a problem on the server side (and not the client).\n\nRegards,\n\nEdward.",
      "Ah, I see what is going on here. If one of the nested realms fails to start, the combined realm fails to start. That doesn't seem like a good idea. I'll fix that so the combined realm logs an error but carries on. I'll also look at making the LDAP timeout configurable.",
      "I have fixed the issue on realm start and also added a connection timeout attribute to the JNDIRealm. These changes have been applied to trunk and proposed for 6.0.x",
      "Hi Mark,\n\nJust to let you know I have tested out your fix for the combined realm and that works perfectly.\n This is the output I saw in catalina.out. Even though tomcat couldn't contact ldap, it carried on working as usual\n and I was able to log in with the UserDatabaseRealm instead.\n\nThanks for your help on this.\n\nEdward.\n\n\nINFO: Starting Servlet Engine: Apache Tomcat/7.0.0-dev\n18-Dec-2009 15:22:45 org.apache.catalina.realm.JNDIRealm open\nWARNING: Exception performing authentication\njavax.naming.CommunicationException: lmprdinf901.companyx.local:390 [Root exception is java.net.ConnectException: Connection refused: connect]\n        at com.sun.jndi.ldap.Connection.<init>(Connection.java:197)\n        at com.sun.jndi.ldap.LdapClient.<init>(LdapClient.java:118)\n        at com.sun.jndi.ldap.LdapClient.getInstance(LdapClient.java:1580)\n        at com.sun.jndi.ldap.LdapCtx.connect(LdapCtx.java:2652)\n        at com.sun.jndi.ldap.LdapCtx.<init>(LdapCtx.java:293)\n        at com.sun.jndi.ldap.LdapCtxFactory.getUsingURL(LdapCtxFactory.java:175)\n        at com.sun.jndi.ldap.LdapCtxFactory.getUsingURLs(LdapCtxFactory.java:193)\n        at com.sun.jndi.ldap.LdapCtxFactory.getLdapCtxInstance(LdapCtxFactory.java:136)\n        at com.sun.jndi.ldap.LdapCtxFactory.getInitialContext(LdapCtxFactory.java:66)\n        at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:667)\n        at javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:288)\n        at javax.naming.InitialContext.init(InitialContext.java:223)\n        at javax.naming.InitialContext.<init>(InitialContext.java:197)\n        at javax.naming.directory.InitialDirContext.<init>(InitialDirContext.java:82)\n        at org.apache.catalina.realm.JNDIRealm.open(JNDIRealm.java:1951)\n        at org.apache.catalina.realm.JNDIRealm.start(JNDIRealm.java:2043)\n        at org.apache.catalina.realm.CombinedRealm.start(CombinedRealm.java:237)\n        at org.apache.catalina.realm.LockOutRealm.start(LockOutRealm.java:112)\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1037)\n        at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:451)\n        at org.apache.catalina.core.StandardService.start(StandardService.java:516)\n        at org.apache.catalina.core.StandardServer.start(StandardServer.java:726)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java:580)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)\nCaused by: java.net.ConnectException: Connection refused: connect\n        at java.net.PlainSocketImpl.socketConnect(Native Method)\n        at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)\n        at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)\n        at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)\n        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)\n        at java.net.Socket.connect(Socket.java:525)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at com.sun.jndi.ldap.Connection.createSocket(Connection.java:336)\n        at com.sun.jndi.ldap.Connection.<init>(Connection.java:184)\n        ... 28 more\n18-Dec-2009 15:22:46 org.apache.catalina.realm.CombinedRealm start\nSEVERE: Failed to start \"org.apache.catalina.realm.JNDIRealm/1.0\" realm\nLifecycleException:  Exception opening directory server connection:  javax.naming.CommunicationException: lmprdinf902.ig\ni.ig.local:390 [Root exception is java.net.ConnectException: Connection refused: connect]\n        at org.apache.catalina.realm.JNDIRealm.start(JNDIRealm.java:2045)\n        at org.apache.catalina.realm.CombinedRealm.start(CombinedRealm.java:237)\n        at org.apache.catalina.realm.LockOutRealm.start(LockOutRealm.java:112)\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1037)\n        at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:451)\n        at org.apache.catalina.core.StandardService.start(StandardService.java:516)\n        at org.apache.catalina.core.StandardServer.start(StandardServer.java:726)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java:580)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)\n18-Dec-2009 15:22:46 org.apache.catalina.startup.HostConfig deployDescriptor\nINFO: Deploying configuration descriptor host-manager.xml\n18-Dec-2009 15:22:46 org.apache.catalina.startup.HostConfig deployDescriptor\nINFO: Deploying configuration descriptor manager.xml\n18-Dec-2009 15:22:46 org.apache.catalina.startup.HostConfig deployDirectory\nINFO: Deploying web application directory docs\n18-Dec-2009 15:22:46 org.apache.catalina.startup.HostConfig deployDirectory\nINFO: Deploying web application directory examples\n18-Dec-2009 15:22:47 org.apache.catalina.startup.HostConfig deployDirectory\nINFO: Deploying web application directory ROOT\n18-Dec-2009 15:22:47 org.apache.coyote.http11.Http11Protocol start\nINFO: Starting Coyote HTTP/1.1 on http-8080\n18-Dec-2009 15:22:47 org.apache.coyote.http11.Http11Protocol start\nINFO: Starting Coyote HTTP/1.1 on http-8443\n18-Dec-2009 15:22:47 org.apache.coyote.ajp.AjpProtocol start\nINFO: Starting Coyote AJP/1.3 on ajp-8009",
      "Glad it works. Just leaving this open until the fix is actually applied to 6.0.x",
      "Fix applied to 6.0.x and will be in 6.0.21 onwards."
    ],
    "creation_ts": "2009-09-15T02:01:07Z",
    "fixes": [
      47841
    ]
  },
  {
    "id": 65433,
    "summary": "Possible StringIndexOutOfBoundsException for symlinks in DirResourceSet.listWebAppPaths",
    "description": "Created attachment 37944\nPatch to fix bug\n\nWhen entry is symbolic link outside of parent directory, it is possible that its cannonical path will be shorter than parent's cannonical path. In that case attempt to evaluate expression\n\ncanPath = entry.getCanonicalPath().substring(f.getCanonicalPath().length());\n\nwill end in throwing java.lang.StringIndexOutOfBoundsException.\n\nSuggested solution is to compare lengths begore evaluation. \n\nIt is possible that this problem is also present elsewhere.\n\nSame problem will affect 10.0.x and 8.5.x branches as well.",
    "comments": [
      "Thanks for the report and the patch.\n\nFixed in:\n- 10.1.x for 10.1.0-M3 onwards\n- 10.0.x for 10.0.9 onwards\n- 9.0.x for 9.0.51 onwards\n- 8.5.x for 8.5.70 onwards",
      "FWIW: I can confirm that the fix solves my observed problems as well",
      "*** Bug 65637 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2021-07-05T13:18:32Z",
    "fixes": [
      65433
    ]
  },
  {
    "id": 42509,
    "summary": "API signature errors in javax.servlet.jsp",
    "description": "The servlet 2.5 spec requires the following API signature for\njavax/servlet/jsp/tagext/TagInfo.java\n\npublic static final String BODY_CONTENT_TAG_DEPENDENT = \"tagdependent\";\npublic static final String BODY_CONTENT_EMPTY = \"empty\";\npublic static final String BODY_CONTENT_SCRIPTLESS = \"scriptless\";\n\nSee:\nhttp://java.sun.com/javaee/5/docs/api/constant-values.html#javax.servlet",
    "comments": [
      "Created attachment 20267\npatch for TagInfo",
      "Created attachment 20271\nnew patch for signature problems with javax.servlet.jsp\n\nadding new patch that includes a fix for a jsp API signature problem with\njavax/servlet/jsp/el/ScopedAttributeELResolver\n\nThis second patch is cumulative, obsoleting the previous patch.  This should be\nthe last patch for JSP 2.1 signature problems.\tI plan to open a separate\nbugzilla to attach a patch for some signature problems with EL."
    ],
    "creation_ts": "2007-05-24T05:47:12Z",
    "fixes": [
      42509
    ]
  },
  {
    "id": 40860,
    "summary": "Tomcat loses request parameters",
    "description": "Hi,\n\nI\u2019m having a problem with parameters loses in tomcat. It\u2019s an intermittent\nproblem. That occurs when I do some ajax\u2019s request and then I do one or more\nform submissions. \n\nI put the tomcat in debug mode and  I observed the class CoyoteAdapter \u2013 the\nmethod service(). There exists a request variable (CoyoteRequest type) that has\na protected variable requestParametersParsed that is a flag to parse or not\nparse the parameters of a post or get. In the end of the method exists a\n\u2018finally\u2019 clause that force the request variable to do a recycle. The recycle\nforces the requestParametersParsed variable to change to false. Then in the next\nutilization of the class the parameters will be parsed again. \n\nThe problem that I\u2019ve found is in some situations (as described at the start)\nthe requestParametersParsed variable is true and the parameters are not parsed. \n\nThe consequence of this is that in my servlet when I ask request.getParameter(\u2026)\nand it returns null but in my query string or in my post data has the parameter.\nThe prove of that is when I ask request.getQueryString() and it returns a not\nempty string with my parameter.\n\nEx:\n\nrequest.getQueryString() = servlet?param=x\nrequest.getParameter(\u2018param\u2019) = null\n\n\nSee a pierce of the method service of CoyoteAdapter:\n \n    public void service(Request req, Response res)\n        throws Exception {\n\n\u2026\n        try {\n\n            // Parse and set Catalina and configuration specific\n            // request parameters\n            if ( postParseRequest(req, request, res, response) ) {\n                // Calling the container\n                connector.getContainer().invoke(request, response);\n            }\n\n\u2026\n        } finally {\n            // Recycle the wrapper request and response\n            request.recycle();\n            response.recycle();\n        }\n\n    }\n\nAt line \u201cif postParseRequest(\u2026\u201d the request. requestParametersParsed must be\nfalse but in some situations it is true!\n\nI cant find the cause of the problem but I found the problem. To resolve my\nproblem I put a request.recycle(); before the line to force the\nrequestParametersParsed  variable to false.\nI don\u2019t want to have a tomcat modified by me. Its not good. \n\nSee the post\nhttp://mail-archives.apache.org/mod_mbox/tomcat-dev/200601.mbox/%3C43D11EAA.1090905@amazon.com.br%3E\nHe is having the same problem.\n\nThanks\n\nThiago",
    "comments": [
      "I suppose the logical conclusion would be to look why the flag is false, rather\nthan resort to hacking. Most likely you are seeing concurrent access to the\nrequest object.",
      "(In reply to comment #1)\n> I suppose the logical conclusion would be to look why the flag is false, rather\n> than resort to hacking. Most likely you are seeing concurrent access to the\n> request object.\n\nBut i\u00b4m an user and not a developer. As an user i cant do nothing to resolve the\nproblem. As i observe, the recycle must set to false! There is a finally clause\nthat force the recycle! I supose that or the recycle may throw an exception or\nan other process is accessing the request object.",
      "A new request object is generated for each request. Therefore, the only ways I\ncan for what you report to happen are:\n- Multiple threads trying to read the parameters at the same time. This isn't\nsomething any of the internal Tomcat code does.\n- An exception during the parameter processing.\n\nI have added additional logging if the parameter processing fails to SVN and\nthis will be included in 5.5.21 onwards.\n\nIf you still see this problem post 5.5.21 and there is no helpful information in\nthe logs, please re-open and provide a test case so I can investigate further."
    ],
    "creation_ts": "2006-11-01T04:29:15Z",
    "fixes": [
      40860
    ]
  },
  {
    "id": 48627,
    "summary": "JasperException with JSF tags and value expressions",
    "description": "I recently updated from Tomcat 6.0.20 to 6.0.24.\nNow some jsps with jsf tags are not compiling anymore.\n\nFollowing tag results in a JasperException in 6.0.24 but compiles fine with older versions:\n\n<h:outputText value=\"\\\\\">\n\nStack:\nCaused by: org.apache.jasper.JasperException: /pages/preferences.jsp(147,100) According to TLD or attribute directive in tag file, attribute value does not accept any expressions\n                at org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:40)\n                at org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:407)\n                at org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:148)\n                at org.apache.jasper.compiler.Validator$ValidateVisitor.checkXmlAttributes(Validator.java:1165)\n                at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:852)\n                at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1530)\n                at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n                at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2411)\n                at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:871)\n                at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1530)\n                at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n                at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2411)\n                at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:871)\n                at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1530)\n                at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n                at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2411)\n                at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:871)\n                at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1530)\n                at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n                at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2411)\n                at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:871)\n                at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1530)\n                at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n                at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2411)\n                at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:871)\n                at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1530)\n                at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n                at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2411)\n                at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:871)\n                at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1530)\n                at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n                at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2411)\n                at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2417)\n                at org.apache.jasper.compiler.Node$Root.accept(Node.java:495)\n                at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n                at org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1775)\n                at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:183)\n                at org.apache.jasper.compiler.Compiler.compile(Compiler.java:332)\n                at org.apache.jasper.compiler.Compiler.compile(Compiler.java:312)\n                at org.apache.jasper.compiler.Compiler.compile(Compiler.java:299)\n                at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:589)\n                at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:317)\n                at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313)\n                at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260)\n                at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n                at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n                at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n                at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646)\n                at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:551)\n                at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:488)\n                at org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:968)\n                at org.apache.jasper.runtime.PageContextImpl.doInclude(PageContextImpl.java:650)\n                at org.apache.jasper.runtime.PageContextImpl.include(PageContextImpl.java:644)\n                at org.apache.tiles.jsp.context.JspTilesRequestContext.include(JspTilesRequestContext.java:80)\n                ... 67 more",
    "comments": [
      "We're also hitting this since upgrading to 6.0.24 -- in our case, the attribute value also contains a '\\' character.\n\nI'm updating the platform to \"All\" since we're running on various OS combinations and have seen the issue on both Windows and Mac so far. I also upgraded severity to \"major\" since it's a significant loss of functionality for those of us who do hit it. :)",
      "I have been able to reproduce this and have added a test case for it to Tomcat 7. I know exactly what caused it. My recent changes to address a number of issues with EL parsing made the incorrect assumption that EL would be valid for any attribute. Clearly that isn't a valid assumption.\n\nI agree this is a nasty regression and I am working on a fix. Once I have a fix are either of you willing and able to test it? You'll either need to build Tomcat from source or I can provide a binary patch.",
      "Yeah, I'd be happy to test it. Thanks!",
      "I can also test it but I need a binary patch",
      "Created attachment 24910\nBinary patch for testing purposes only\n\nThis has been fixed in trunk and proposed for 6.0.x.\n\nTo test if you are happy build from source, checkout tc6.0.x/trunk and apply this patch before building: http://svn.apache.org/viewvc?view=revision&revision=904949\n\nTo test with the binary patch, make the following changes to a 6.0.24 installation:\n\n1. Create the following directory structure in $CATALINA_HOME/lib\norg/apache/jasper/compiler\n\n2. Download the binary patch attachment and extract the 2 class files to the directory you created in step 1.\n\nYou should now have:\n$CATALINA_HOME/lib/org/apache/jasper/compiler/AttributeParser.class\n$CATALINA_HOME/lib/org/apache/jasper/compiler/Parser.class\n\n3. Empty the $CATALINA_BASE/work directory\n\n4. Start Tomcat\n\nPlease be aware that this patch in both source and binary form is for testing purposes only and is not an official release from the ASF.\n\nLet us know how you get on. Thanks in advance.",
      "The fix worked perfectly for me. I took your binary patch to make things a little faster -- let me know if you need extra verification and I can build it from source.\n\nThanks Mark!",
      "The initial JasperException does not occur anymore but I got a new one.\nMaybe the patch is not fully compatible?\n\nCaused by: java.lang.NoSuchMethodError: org.apache.jasper.compiler.PageInfo.isErrorOnUndeclaredNamespace()Z\n\tat org.apache.jasper.compiler.Parser.parseCustomTag(Parser.java:1175)\n\tat org.apache.jasper.compiler.Parser.parseElements(Parser.java:1422)\n\tat org.apache.jasper.compiler.Parser.parse(Parser.java:131)\n\tat org.apache.jasper.compiler.ParserController.doParse(ParserController.java:255)\n\tat org.apache.jasper.compiler.ParserController.parse(ParserController.java:103)\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:170)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:332)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:312)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:299)\n\tat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:589)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:317)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646)\n\tat org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:551)\n\tat org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:488)\n\tat org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:968)\n\tat org.apache.jasper.runtime.PageContextImpl.doInclude(PageContextImpl.java:650)\n\tat org.apache.jasper.runtime.PageContextImpl.include(PageContextImpl.java:644)\n\tat org.apache.tiles.jsp.context.JspTilesRequestContext.include(JspTilesRequestContext.java:80)\n\t... 93 more\nCause:",
      "(In reply to comment #7)\n> The initial JasperException does not occur anymore but I got a new one.\n> Maybe the patch is not fully compatible?\n> \n> Caused by: java.lang.NoSuchMethodError:\n> org.apache.jasper.compiler.PageInfo.isErrorOnUndeclaredNamespace()Z\n\nThat method was introduced in Tomcat 7. \n>     at org.apache.jasper.compiler.Parser.parseCustomTag(Parser.java:1175)\n>     at org.apache.jasper.compiler.Parser.parseElements(Parser.java:1422)\n>     at org.apache.jasper.compiler.Parser.parse(Parser.java:131)\n\nand these line numbers are Tomact 7 line numbers.\n\nThe binary patch is only intended for testing with Tomcat 6.0.24.",
      "(In reply to comment #6)\n> The fix worked perfectly for me. I took your binary patch to make things a\n> little faster -- let me know if you need extra verification and I can build it\n> from source.\n> \n> Thanks Mark!\n\nThanks for the testing. I'll add a note to the STATUS file.",
      "I don't have Tomcat 7, I wasn't even aware of it. \nI am using 6.0.24 and used the binary patch applied to this bug.",
      "I decompiled the patch and it contains this line:\n  if(pageInfo.isErrorOnUndeclaredNamespace())",
      "Created attachment 24925\nUpdated source patch for Tomcat 6.0\n\nUpdated patch for Tomcat 6.0.24.\nIt is the result of merging revisions 904949, 905226, 906465 from trunk.",
      "Created attachment 24926\nUpdated binary patch for Tomcat 6.0.24 for testing purposes only\n\nUpdated binary patch for Tomcat 6.0.24 that corresponds to the source patch from attachment 24925\n\nIts usage is subject to the conditions stated in Comment 5.\n\nPlease be aware that this patch in both source and binary form is for testing purposes only and is not an official release from the ASF.",
      "This has been fixed in 6.0.x and will be included in 6.0.25 onwards."
    ],
    "creation_ts": "2010-01-27T00:28:18Z",
    "fixes": [
      48627
    ]
  },
  {
    "id": 65776,
    "summary": "\"Duplicate accept detected\" error from a subsequent request with the same local port",
    "description": "\"Duplicate accept detected\" error might happen if a client reuses its local port somehow.\n\nThis is a synthetic test to demonstrate it: https://github.com/izeye/spring-boot-throwaway-branches/blob/tomcat-duplicate-accept-detected/src/test/java/com/izeye/throwaway/DuplicateAcceptDetectedTests.java\n\nThis is happening in my production environment that is running on CentOS in a Kubernetes cluster. Although I didn't get to the bottom of the reason why the same local port is being used yet, it seems that it might prevent from accepting valid requests from a client.",
    "comments": [
      "This scenario was considered when designing the protection for the OS bug. The solution considered was to add a timing check for the re-use as in the OS bug case the re-use is near enough instant. However, we didn't add the check as we could not see a scenario where:\n- a client connected to Tomcat\n- no other clients connected\n- the same client reconnected using the same local port\nand we wanted to avoid the performance overhead of the check.\n\nIt appears that there is something about your production environment where the above sequence is happening. Are you sure the client is genuinely re-using the local port rather than the server hitting the OS bug? We believe the bug affects multiple Linux distributions.",
      "Thanks for the quick feedback!\n\nI just assumed that it's a Ubuntu-specific bug as it's reported against the Ubuntu issue tracker. I haven't had time looking into it closely yet, so it was just one of possible guesses based on the assumption.\n\nI'll let you know if anything meaningful is identified.",
      "Moving to NEEDINFO pending further updates.",
      "The simplest thing to do is to run the pure C test case provided in the Java bug report:\n\nhttps://bugs.openjdk.java.net/browse/JDK-8263243?focusedCommentId=14410275&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14410275\n\nIf you see the error then raise a bug with CentOS. I'd recommend including a link to at least the Java bug report for background.",
      "I'm sorry, I'm not a goot at English.\nPlease carefully read it. :)\n\n-----\nI found a situation where a normal connection was attempted with the same client IP/Port in the following situations.\n\nIn under load, in the case of the kernel configuration as follows, if the randomly found position is located in 32768-49999 with high probability, there is a possibility that 50000 will be allocated continuously.\n\n- ip_local_port_range = 32768 - 60000\n- ip_local_reserved_ports = 30000-49999\n\n# find client port - kernel simple pseudocode\n``` \n  port = random(in ip_local_port_range)\n  while port++ < max(ip_local_port_range)\n    if (port in ip_local_reserved_ports) continue\n    if (port is used ports) continue\n  \treturn port \n  done\n  return not found port\n```\n\n\n- kernel 3.10\nhttps://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/net/ipv4/inet_connection_sock.c?h=linux-3.10.y#n104\n\n```\nsmallest_rover = rover = net_random() % remaining + low;\n```\n\n- kernel 4.19\nhttps://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/net/ipv4/inet_connection_sock.c?h=linux-4.19.y#n182\n```\noffset = prandom_u32() % remaining;\n```\n\n\nIn this setting, the problem occurs because the range of ip_local_reserved_ports is too wide, and although the appropriate port according to rfc6056 was not allocated, it does not mean that this connection itself is invalid.\n\nI experienced this problem in the k8s readiness/liveness probe request, and eventually the service became UNREADY and the service became unavailable.\n\nThe need to bypass bugs in Ubuntu is understandable, but the current code is risky and has side effects.\n\nTherefore, it appears that the change needs to be rolled back, offered an option, or better hedged. \n\nhttps://github.com/apache/tomcat/commit/d03cfcf3b0d6639acb2884f1bbea5f2f29b95d91\n\nI hope for a positive review.",
      "That should only be an issue if:\n- there are no other connections to the server between liveness checks\n- the liveness checks are >= time_wait seconds apart\n\nIncreasing the frequency of the liveness checks should be a valid workaround in the rare cases this is an issue.\n\nMeanwhile, I'll look at adding a \"time since last accept\" check to the test. When the error occurs it is almost instant so something like less than a second should work.",
      "Checking the time since the last accept adds a significant overhead. With a simply JMeter test with keep-alive disabled, throughput dropped by 75% once I added the timing check. That level of overhead isn't acceptable.\n\nIf you are seeing what you believe to be a false positive warning with a liveness check, reducing the time between checks should fix the issue.",
      "We are seeing this error on Windows Server 2019\n\nJan 21, 2022 10:30:21 AM org.apache.tomcat.util.net.AprEndpoint setSocketOptions\nSEVERE: Error allocating socket processor\njava.io.IOException: Duplicate accept detected. This is a known OS bug. Please consider reporting that you are affected: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1924298\n at org.apache.tomcat.util.net.AprEndpoint.setSocketOptions(AprEndpoint.java:811)\n at org.apache.tomcat.util.net.AprEndpoint.setSocketOptions(AprEndpoint.java:83)\n at org.apache.tomcat.util.net.Acceptor.run(Acceptor.java:149)\n at java.base/java.lang.Thread.run(Thread.java:829)\n\nAdoptium JDK jdk-11.0.13+8 64bit\nApache Tomcat 9.0.56\ntomcat-native-1.2.31\nopenssl-1.1.1l\napr-1.7.0\napr-util-1.6.1\n\n2022-01-21 09:58:59 Apache Commons Daemon procrun stdout initialized.\nJan 21, 2022 9:59:01 AM org.apache.catalina.core.AprLifecycleListener lifecycleEvent\nINFO: Loaded Apache Tomcat Native library [1.2.31] using APR version [1.7.0].\nJan 21, 2022 9:59:01 AM org.apache.catalina.core.AprLifecycleListener lifecycleEvent\nINFO: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].\nJan 21, 2022 9:59:01 AM org.apache.catalina.core.AprLifecycleListener lifecycleEvent\nINFO: APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]\nJan 21, 2022 9:59:01 AM org.apache.catalina.core.AprLifecycleListener initializeSSL\nINFO: OpenSSL successfully initialized [OpenSSL 1.1.1l 24 Aug 2021]\nJan 21, 2022 9:59:01 AM org.apache.coyote.AbstractProtocol init\nINFO: Initializing ProtocolHandler [\"http-apr-0.0.0.0-xxxxx\"]\nJan 21, 2022 9:59:01 AM org.apache.coyote.AbstractProtocol init\nINFO: Initializing ProtocolHandler [\"https-openssl-apr-0.0.0.0-xxxxx\"]\nJan 21, 2022 9:59:01 AM org.apache.tomcat.util.net.openssl.OpenSSLUtil getKeyManagers\nJan 21, 2022 9:59:01 AM org.apache.catalina.startup.Catalina load\nINFO: Server initialization in [667] milliseconds\nJan 21, 2022 9:59:01 AM org.apache.catalina.core.StandardService startInternal\nINFO: Starting service [Catalina]\nJan 21, 2022 9:59:01 AM org.apache.catalina.core.StandardEngine startInternal\nINFO: Starting Servlet engine: [Apache Tomcat/9.0.56]\n\nAND We are seeing the error on Ubuntu 20.04.3 LTS\n\nJan 21, 2022 8:55:02 AM org.apache.tomcat.util.net.AprEndpoint setSocketOptions\nSEVERE: Error allocating socket processor\njava.io.IOException: Duplicate accept detected. This is a known OS bug. Please consider reporting that you are affected: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1924298\n        at org.apache.tomcat.util.net.AprEndpoint.setSocketOptions(AprEndpoint.java:811)\n        at org.apache.tomcat.util.net.AprEndpoint.setSocketOptions(AprEndpoint.java:83)\n        at org.apache.tomcat.util.net.Acceptor.run(Acceptor.java:149)\n        at java.base/java.lang.Thread.run(Thread.java:829)\n\nJan 21, 2022 7:08:11 AM org.apache.catalina.core.AprLifecycleListener lifecycleEvent\nINFO: Loaded Apache Tomcat Native library [1.2.31] using APR version [1.7.0].\nJan 21, 2022 7:08:11 AM org.apache.catalina.core.AprLifecycleListener lifecycleEvent\nINFO: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].\nJan 21, 2022 7:08:11 AM org.apache.catalina.core.AprLifecycleListener lifecycleEvent\nINFO: APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]\nJan 21, 2022 7:08:11 AM org.apache.catalina.core.AprLifecycleListener initializeSSL\nINFO: OpenSSL successfully initialized [OpenSSL 1.1.1l 24 Aug 2021]\nJan 21, 2022 7:08:11 AM org.apache.coyote.AbstractProtocol init\nINFO: Initializing ProtocolHandler [\"http-apr-0.0.0.0-xxxxx\"]\nJan 21, 2022 7:08:11 AM org.apache.coyote.AbstractProtocol init\nINFO: Initializing ProtocolHandler [\"https-openssl-apr-0.0.0.0-xxxxx\"]\nJan 21, 2022 7:08:11 AM org.apache.catalina.startup.Catalina load\nINFO: Server initialization in [463] milliseconds\nJan 21, 2022 7:08:11 AM org.apache.catalina.core.StandardService startInternal\nINFO: Starting service [Catalina]\nJan 21, 2022 7:08:11 AM org.apache.catalina.core.StandardEngine startInternal\nINFO: Starting Servlet engine: [Apache Tomcat/9.0.56]\n\nWe do NOT see this issue logged, by Tomcat, on the same Windows or Linux O/S versions with\n\nDIFF AdoptOpenJDK 11.0.10+9 64bit\nDIFF Apache Tomcat 9.0.43\nDIFF tomcat-native-1.2.26\nDIFF openssl-1.1.1i\nSAME apr-1.7.0\nSAME apr-util-1.6.1\n\nReported here: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1924298/comments/8",
      "(In reply to Brooke T. Hedrick from comment #8)\n> We are seeing this error on Windows Server 2019\n\nUh oh. This is supposed to be a Linux kernel bug.\n\n> Apache Tomcat 9.0.56\n\n> We do NOT see this issue logged, by Tomcat, on the same Windows or Linux O/S\n> versions with\n> \n> DIFF Apache Tomcat 9.0.43\n\nThis check was added in Tomcat 9.0.56. You may want to downgrade to Tomcat 9.0.55  in your Windows environments which, theoretically, should not be susceptible to the bug we are trying to work around.\n\nAre you able to compile+run the C-language test driver which is mentioned above? I'm not sure it will even compile on Windows but it would be interesting to see what happens on a Windows system.",
      "Hey Christopher Schultz,\n\nRE>\nAre you able to compile+run the C-language test driver which is mentioned above? I'm not sure it will even compile on Windows but it would be interesting to see what happens on a Windows system.\n\n\n\nWe spent about 90 minutes with VS 2017 and didn't have it running yet.  Issues with libraries not being the same and the \"equivalents\" not having the same functions.  We don't have strong c/c++ skills and haven't tried to move code between Linux and Windows before.\n\nWould compiling/running this under WSL be a valid test?",
      "Not sure if this is useful, but running the test with WSL and Ubuntu 20.04.3 LTS\n\n2 \"console windows\" running the wrk at the same time.\n\nThis is how the server failed\nListening on port 5555\npthread_create: Cannot allocate memory",
      "There are multiple issues being report here so i will try and address each in turn.\n\nThe original issue reported by Johhny Lim\n- The log message is correct - you've hit the OS bug\n- The issue appears to affect mutliple (most?, all?) Linux distributions\nThis should be considered resolved as \"working as designed\".\n\n\nThe issue reported by 2022-01-14 03:39:38 GMT\n- Can be avoided by configuration see comment #6\n- Modifying the existing check is not practical see comment #7\nThis should be considered resolved as \"Won't fix\"\n\n\nThe issue on Windows reported by Brooke T. Hedrick\n- The memory allocation error running with WSL (comment #11) indicates a different issue\n- I have ported the original test case to Windows and I have not yet been able to recreate the error\n\nI have a few more tests I want to run. I want to try and tweak the test case and the Windows network config to try and increase the load on accept().\n\nI do have a couple of questions regarding the Windows system where this issue was observed:\n- Bare metal or VM?\n- If VM, which hypervisor?\n- What sort of load (in terms of new connections per second) was the system under at the time?\n\nMoving status to NEEDINFO to reflect the status of this one remaining unresolved issue.",
      "@Mark\nRE: https://bz.apache.org/bugzilla/show_bug.cgi?id=65776#c12\n\n\n- Bare metal or VM? VM\n- If VM, which hypervisor? VMWare ESX 7.x \n- What sort of load (in terms of new connections per second) was the system under at the time?  Very Little.  IIRC, a single request could cause it.",
      "Thanks for the additional info.\n\nI wasn't able to reproduce the issue on Windows. Combined with your information regarding low load, it looks like you are seeing a false positive.\n\nThe good news is that means we aren't seeing the same issue on Windows. The bad news is we need to try and find a way to avoid - or at least reduce - the false positive rate.",
      "The large drop in throughput I reported in comment #7 has been bothering me so I wanted to look at this again.\n\nTesting this is tricky as you can quickly run out of ephemeral ports. Once that happens, test results become unstable. I think this may have happened when I tested this previously. I definitely saw ephemeral port exhaustion when I tried to re-test this.\n\nBy reducing the test to a single client thread and temporarily reducing the period sockets spend in TIME_WAIT I was able to get the test results to stabilise. I was then able to test the following changes:\n- skip the check completely on Windows\n- add a check for 'duplicates must occur within 1s\" to avoid false positives from things like heartbeats on idle systems\n\nThe results were very promising. The performance difference was (probably) marginally lower but I'd need to repeat the test quite a few times (and brush up on my stats) to provide a definitive answer.\n\nMy engineering estimate view of the results is that the performance impact is negligible so I'll be apply the change shortly.",
      "Fixed in:\n- 10.1.x for 10.1.0-M11 onwards\n- 10.0.x for 10.0.17 onwards\n- 9.0.x for 9.0.59 onwards\n- 8.5.x for 8.5.76 onwards",
      "*** Bug 66476 has been marked as a duplicate of this bug. ***",
      "*** Bug 66476 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2021-12-31T09:25:36Z",
    "fixes": [
      65776
    ]
  },
  {
    "id": 66068,
    "summary": "Asynchronous request processing changes IP behind RemoteIpValve",
    "description": "Created attachment 38287\nexample project\n\nHi guys\n\nRequest that is made to the Tomcat 9 server that is behind load balancer and with RemoteIpValve enabled.\n\nRemoteIpValve is configured in server.xml exactly before access log valve as follows:\n   <Valve className=\"org.apache.catalina.valves.RemoteIpValve\"\n       remoteIpHeader=\"x-forwarded-for\"\n       protocolHeader=\"x-forwarded-proto\"\n   />\n\nIn the case request is processed in synchronous way the right ip of caller is received from request.getRemoteAddr()\n\nIn the case request is moved to asynchronous mode by request.startAsync( request, response ) and is processed on the same thread the right ip of client is received from asyncContext.getRequest().getRemoteAddr()\n\nIn the case request is moved to asynchronous mode by request.startAsync( request, response ) and is processed on the OTHER thread the ip of client is NOT received from asyncContext.getRequest().getRemoteAddr(), but ip of proxy server.\n\nIn all cases access log prints right client ip.\n\nExample source code is attached both with compiled .war file.\nExample request is made to:\n   http://localhost/remoteipvalve-bug-example/\nwith the following headers:\n   X-Forwarded-For: 1.2.3.4\n   X-Forwarded-Proto: 443\n\nExample logger result:\n17-May-2022 15:47:19.623 WARNING [http-nio-80-exec-53] RootServlet.doGet Request ip before async start: 1.2.3.4\n17-May-2022 15:47:19.623 WARNING [http-nio-80-exec-53] RootServlet.doGet Request ip after async started: 1.2.3.4)\n17-May-2022 15:47:19.625 WARNING [Thread-67] RootServlet$1.run Request ip after async started: 127.0.0.1)",
    "comments": [
      "I think the fix for this is fairly simple. If the request is in async mode, we don't reset the request in the finally block after calling the next Valve in the pipeline.\n\nAssuming there are no objections to this approach, I'll apply a patch to that effect in a couple of days.",
      "Fixed in:\n- 10.1.x for 10.1.0-M16 onwards\n- 10.0.x for 10.0.22 onwards\n- 9.0.x for 9.0.64 onwards\n- 8.5.x for 8.5.80 onwards"
    ],
    "creation_ts": "2022-05-17T12:56:27Z",
    "fixes": [
      66068
    ]
  },
  {
    "id": 64190,
    "summary": "OneLineFormatter always add milliseconds at the end of timestamp",
    "description": "I have looked into the code.\nOneLineFormatter always add miliseconds to the end of log timestamp which is very inconvenient since ISO 8601 has timezone at the end.\nI ended up with timestamp like this:\n2020-03-03T12:12:06.000000+1100.071\n\nI want to ether have the milliseconds in with solution described in https://bz.apache.org/bugzilla/show_bug.cgi?id=59871#c11 or having a configure property to let me stop adding miliseconds to the end of the timestamp\n\nI can help out with the fix if the developer team doesn't have resource to fix this. Just need to tell me which direction is prefered",
    "comments": [
      "This might be difficult, due to the way the OneLineFormatter caches DateFormat objects and only updates the \"time\" every 1000ms.\n\nWhatever solution you come up with needs to maintain the existing performance characteristics of the OneLineFormatter.",
      "I have a patch ready that does this.",
      "Fixed in:\n- master for 10.0.0-M2 onwards\n- 9.0.x for 9.0.32 onwards\n- 8.5.x for 8.5.52 onwards\n- 7.0.x for 7.0.101 onwards"
    ],
    "creation_ts": "2020-03-03T01:20:02Z",
    "fixes": [
      64190
    ]
  },
  {
    "id": 44392,
    "summary": "HTML entities not resolved in SSI filter",
    "description": "HTML entities which are contained in an SSI set directive aren't resolved by the\nSSI filter (in contrary to what is done by mod_include of Apaches HTTP).\n\nmod_include resolves all HTML entities in most of the attribute values of ssi\ndirectives. It also resolves \\\" to \" and \\$ to $.\n\nThe ssi filter of tomcat resolves all escaped character which are escaped with a\nbackslash, but no HTML entities at all.\n\nApart from that, giving encoding \"entity\" should be different from giving\nencoding=\"none\" to the SSI echo directive. One should replace all invalid HTML\ncharacters by valid HTML entities and the other one should do nothing.\n\nThe encoding is especially important if you wan't to store a HTML-Comment within\na SSI variable.\n\nIf I want to store a variable test with the value \"<!-- testvalue \"x\" -->\"\n\n\n<!--#set var=\"test\" value=\"<!-- testvalue \"x\" -->\"-->\n\nfor mod_include you must write:\n\n<!--#set var=\"test\" value=\"<!&#45;&#45; testvalue \\\"x\\\" &#45;&#45;>\" -->\n\nfor Tomcats SSI you must write:\n\n<!--#set var=\"test\" value=\"<!\\-\\- testvalue \\\"x\\\" \\-\\->\" -->\n\nAnd there should be a difference whether I output this variable with\n<!--#echo var=\"test\" encoding=\"none\" -->  \nwhich should lead to <!-- testvalue \"x\" -->, or\n<!--#echo var=\"test\" encoding=\"entity\" -->\nwhich should lead to &lt;!-- testvalue &quot;x&quot; --&gt;",
    "comments": [
      "This has been fixed in trunk and proposed for 6.0.x.",
      "The patch has been applied to 6.0.x and will be in 6.0.17 onwards."
    ],
    "creation_ts": "2008-02-11T05:37:37Z",
    "fixes": [
      44392
    ]
  },
  {
    "id": 65397,
    "summary": "NullPointerException during jar scanning with jar symlinked into WEB-INF/lib",
    "description": "Symlinking a jar into WEB-INF/lib results in a NullPointerException during scanning for web fragments:\n\nCaused by: java.lang.NullPointerException\n    at org.apache.tomcat.util.scan.StandardJarScanner.process(StandardJarScanner.java:382)\n    at org.apache.tomcat.util.scan.StandardJarScanner.scan(StandardJarScanner.java:195)\n    at org.apache.catalina.startup.ContextConfig.processJarsForWebFragments(ContextConfig.java:2136)\n    at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1289)\n    at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:986)\n    at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:303)\n    at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\n    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5135)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n    ... 38 more\n\n\nThis behaviour can be reproduced with the following steps:\n\nwget https://apache.mirrors.nublue.co.uk/tomcat/tomcat-9/v9.0.48/bin/apache-tomcat-9.0.48.tar.gz  \ntar -xzf apache-tomcat-9.0.48.tar.gz\nmkdir -p apache-tomcat-9.0.48/webapps/symlink-problem/WEB-INF/lib\nwget https://repo.spring.io/artifactory/libs-release-local/org/springframework/cloud/spring-cloud-bindings/1.7.1/spring-cloud-bindings-1.7.1.jar\nln -s spring-cloud-bindings-1.7.1.jar apache-tomcat-9.0.48/webapps/symlink-problem/WEB-INF/lib\napache-tomcat-9.0.48/bin/catalina.sh run\n\nI don't believe that the specific jar that's symlinked is important, any jar will reproduce the failure. The problem also occurs with <Resources allowLinking=\"true\"/> added to conf/context.xml.\n\nWe've also seen a similar problem with embedded Tomcat when scanning for tag libraries. Please see https://github.com/spring-projects/spring-boot/issues/27075 for some further details.",
    "comments": [
      "I can confirm that linking any JAR does appear to trigger this.\n\nMy testing with both main (10.1.x) and 9.0.x is that adding:\n\n<Resources allowLinking=\"true\" />\n\nto conf/context.xml does work around the issue. I don't recall any recent changes to resource handling that would explain why this works for me but not for you.",
      "Thanks for the report.\n\nFixed in:\n- 10.1.x for 10.1.0-M2 onwards\n- 10.0.x for 10.0.8 onwards\n- 9.0.x for 9.0.49 onwards\n- 8.5.x for 8.5.69 onwards",
      "Hi,\n\n sorry, but I do not think this is completely fixed. When moving from 9.0.48 to 9.0.50, we get a nasty stack trace that is cured by adding \n\n<Resources allowLinking=\"true\" />\n\nThere is definitely no warning about a mis-configuration as I would have expected from the 9.0.49 change log entry. We are using symbolic links on a few levels of our installation. There is no symbolic linking directly in WEB-INF/lib. So it seems to be somewhere else. Shall I open an new report? At the moment I do not have an easy reproducer.\n\n18-Jul-2021 14:06:07.991 INFO [main] org.apache.myfaces.config.DefaultFacesConfigurationProvider.getClassloaderFacesConfig Reading config : jar:file:/net/ltsdm01/fs1/cb2/Portals/smgr2021.2\n-GA-final-r10889/apache-tomcat-9.0.50/webapps/cb2/WEB-INF/lib/richfaces-a4j-4.5.1.Final.jar!/META-INF/behaviors-handler-delegate.faces-config.xml\n18-Jul-2021 14:06:07.992 INFO [main] org.apache.myfaces.config.DefaultFacesConfigurationProvider.getContextSpecifiedFacesConfig Reading config /WEB-INF/sdm-facelets-config.xml\n18-Jul-2021 14:06:08.024 SEVERE [main] org.apache.myfaces.webapp.AbstractFacesInitializer.initFaces An error occured while initializing MyFaces: String index out of range: -25\n\tjava.lang.StringIndexOutOfBoundsException: String index out of range: -25\n\t\tat java.base/java.lang.String.substring(String.java:1841)\n\t\tat org.apache.catalina.webresources.DirResourceSet.listWebAppPaths(DirResourceSet.java:175)\n\t\tat org.apache.catalina.webresources.StandardRoot.listWebAppPaths(StandardRoot.java:149)\n\t\tat org.apache.catalina.core.ApplicationContext.getResourcePaths(ApplicationContext.java:602)\n\t\tat org.apache.catalina.core.ApplicationContextFacade.getResourcePaths(ApplicationContextFacade.java:183)\n\t\tat org.apache.myfaces.context.servlet.ServletExternalContextImplBase.getResourcePaths(ServletExternalContextImplBase.java:142)\n\t\tat org.apache.myfaces.config.DefaultFacesConfigurationProvider.getFacesFlowFacesConfig(DefaultFacesConfigurationProvider.java:583)\n\t\tat org.apache.myfaces.config.DefaultFacesConfigurationMerger.getFacesConfigData(DefaultFacesConfigurationMerger.java:111)\n\t\tat org.apache.myfaces.config.FacesConfigurator.configure(FacesConfigurator.java:474)\n\t\tat org.apache.myfaces.webapp.AbstractFacesInitializer.buildConfiguration(AbstractFacesInitializer.java:416)\n\t\tat org.apache.myfaces.webapp.Jsp21FacesInitializer.initContainerIntegration(Jsp21FacesInitializer.java:73)\n\t\tat org.apache.myfaces.webapp.AbstractFacesInitializer.initFaces(AbstractFacesInitializer.java:172)\n\t\tat org.apache.myfaces.webapp.StartupServletContextListener.contextInitialized(StartupServletContextListener.java:119)\n\t\tat org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4768)\n\t\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5230)\n\t\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n\t\tat org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1398)\n\t\tat org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1388)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n\t\tat java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\n\t\tat org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:921)\n\t\tat org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:835)\n\t\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n\t\tat org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1398)\n\t\tat org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1388)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n\t\tat java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\n\t\tat org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:921)\n\t\tat org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:263)\n\t\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n\t\tat org.apache.catalina.core.StandardService.startInternal(StandardService.java:437)\n\t\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n\t\tat org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:934)\n\t\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n\t\tat org.apache.catalina.startup.Catalina.start(Catalina.java:772)\n\t\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\t\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:345)\n\t\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:476)",
      "That is a regression in this fix and is tracked as bug 65433",
      "Thanks for clarifying."
    ],
    "creation_ts": "2021-06-24T10:41:10Z",
    "fixes": [
      65397
    ]
  },
  {
    "id": 41074,
    "summary": "Output of tag \"jsp:plugin\" is not conform to XHTML.",
    "description": "The jsp comiler outputs all tag required for an object in upper case letters. \nTo be conform with XHTML lower case is required, but all tags are hard coded in \nthe generator.",
    "comments": [
      "This has been fixed in SVN and will be in 5.5.21 onwards."
    ],
    "creation_ts": "2006-11-29T05:35:54Z",
    "fixes": [
      41074
    ]
  },
  {
    "id": 62897,
    "summary": "Provide a property to disable WebappClassLoaderBase.checkThreadLocalsForLeaks()",
    "description": "When running on Java 11 with clearReferencesObjectStreamClassCaches and clearReferencesRmiTargets both set to false, a number of reflective access warnings are still generated when the web app class loader is stopped:\n\nWARNING: Illegal reflective access by org.apache.catalina.loader.WebappClassLoaderBase (file:/Users/awilkinson/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/9.0.12/tomcat-embed-core-9.0.12.jar) to field java.lang.Thread.threadLocals\nWARNING: Illegal reflective access by org.apache.catalina.loader.WebappClassLoaderBase (file:/Users/awilkinson/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/9.0.12/tomcat-embed-core-9.0.12.jar) to field java.lang.Thread.inheritableThreadLocals\nWARNING: Illegal reflective access by org.apache.catalina.loader.WebappClassLoaderBase (file:/Users/awilkinson/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/9.0.12/tomcat-embed-core-9.0.12.jar) to field java.lang.ThreadLocal$ThreadLocalMap.table\nWARNING: Illegal reflective access by org.apache.catalina.loader.WebappClassLoaderBase (file:/Users/awilkinson/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/9.0.12/tomcat-embed-core-9.0.12.jar) to method java.lang.ThreadLocal$ThreadLocalMap.expungeStaleEntries()\nWARNING: Illegal reflective access by org.apache.catalina.loader.WebappClassLoaderBase (file:/Users/awilkinson/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/9.0.12/tomcat-embed-core-9.0.12.jar) to field java.lang.ThreadLocal$ThreadLocalMap$Entry.value\n\nI believe these all originate from code that's called by WebappClassLoaderBase.checkThreadLocalsForLeaks(). It would be useful to have a property that allows these checks to be disabled in the same way as the others.",
    "comments": [
      "Fixed in:\n- trunk for 9.0.14 onwards\n- 8.5.x for 8.5.36 onwards\n- 7.0.x for 7.0.93 onwards",
      "*** Bug 62901 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2018-11-09T09:39:51Z",
    "fixes": [
      62897
    ]
  },
  {
    "id": 65251,
    "summary": "Child name [/app1] is not unique after upgrading 9.0.44",
    "description": "Created attachment 37817\nserver.xml\n\nHello,\n\nWe have been using following command to deploy an app, say app1, for multiple \"example.com\" hosts on the same Tomcat instance hosted on a machine.\n\nwget --connect-timeout=60 --http-user=$TC_MGR_USERNAME --http-password=$TC_MGR_PASSWORD --no-check-certificate --header='Host: $hostname' 'https://$ip_address/mgr/text/deploy?war=file:$WAR&path=/app1&update=true' -O -\n\nAfter upgrading to Tomcat 9.0.44, we are seeing the following error consistently, preventing app1 to start normally. We have been using the same command since Tomcat 8.x versions without any issue and nothing has changed at our end.\n\n15-Apr-2021 14:46:58.852 INFO [ajp-nio-127.0.0.1-8009-exec-27] org.apache.catalina.startup.HostConfig.deployWAR Deploying web application archive [/usr/sites/x.example.com/tomcatweb/app1.war]\n15-Apr-2021 14:46:58.860 INFO [Catalina-utility-1] org.apache.catalina.startup.HostConfig.deployWAR Deploying web application archive [/usr/sites/x.example.com/tomcatweb/app1.war]\n15-Apr-2021 14:46:58.861 SEVERE [Catalina-utility-1] org.apache.catalina.startup.HostConfig.deployWAR Error deploying web application archive [/usr/sites/x.example.com/tomcatweb/app1.war]\n        java.lang.IllegalArgumentException: Child name [/app1] is not unique\n                at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:703)\n                at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:690)\n                at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:706)\n                at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:1023)\n                at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1903)\n                at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n                at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n                at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n                at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112)\n                at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:824)\n                at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:474)\n                at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1660)\n                at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:315)\n                at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\n                at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1151)\n                at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1353)\n                at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1357)\n                at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1335)\n                at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n                at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n                at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n                at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n                at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n                at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                at java.lang.Thread.run(Thread.java:748)\n15-Apr-2021 14:46:58.861 INFO [Catalina-utility-1] org.apache.catalina.startup.HostConfig.deployWAR Deployment of web application archive [/usr/sites/x.example.com/tomcatweb/app1.war] has finished in [1] ms\n\n\nI have attached server.xml for your reference which has multiple hosts, each host has multiple apps. Our Java deployer utility calls 'https://$ip_address/mgr/text/deploy?war=file:$WAR&path=/$app&update=true' command on different hosts for same app, app1, at the same time using multiple threads. \n\nThe change log for Tomcat 9.0.44 https://tomcat.apache.org/tomcat-9.0-doc/changelog.html mentions \"Remove the restriction that prevented the Manager web application deploying different web applications in parallel. (markt)\". Even though we do not use parallel deployment(no version passed in command line), we suspect the changes here https://github.com/apache/tomcat/pull/403 might have caused the issue above.\n\nEnvironment details:\nCentOS Linux release 7.9.2009 (Core)\nopenjdk version \"1.8.0_282\"\nOpenJDK Runtime Environment (build 1.8.0_282-b08)\nOpenJDK 64-Bit Server VM (build 25.282-b08, mixed mode)\n\nAny help would be appreciated.\n\nThank you!",
    "comments": [
      "Thanks for the report.\n\nIt appears that both the deploy thread and the background processing thread are trying to deploy the updated WAR file. There is code that is meant to prevent that. I've found a bug in that code that allows me to recreate the stacktrace you reported. I am working on a fix.\n\nTo be sure I have found the same error you are seeing, can you clarify what you mean by \"preventing app1 to start normally\"?\n\nIn my testing when the two threads attempt to start the updated application, one of those threads succeeds and one fails. The app does start. To put it another way, the bug just causes an ugly stack trace in the logs, it doesn't prevent the deployment from completing nor does it break the application. Are you seeing the same?\n\nA potential workaround would be to disable automatic deployment (autoDeploy=\"false\" on the Host). If you are doing all your deployments via the Manager then you might want to do this anyway for the security benefits (an arbitrary file upload vulnerability can't be leveraged into RCE).",
      "Fixed in:\n- 10.0.x for 10.0.6 onwards\n- 9.0.x for 9.0.46 onwards\n- 8.5.x for 8.5.66 onwards\n\nFeel free to re-open if the issue you found isn't the one I've just fixed.",
      "(In reply to Mark Thomas from comment #1)\n> Thanks for the report.\n> \n> It appears that both the deploy thread and the background processing thread\n> are trying to deploy the updated WAR file. There is code that is meant to\n> prevent that. I've found a bug in that code that allows me to recreate the\n> stacktrace you reported. I am working on a fix.\n> \n> To be sure I have found the same error you are seeing, can you clarify what\n> you mean by \"preventing app1 to start normally\"?\n> \n> In my testing when the two threads attempt to start the updated application,\n> one of those threads succeeds and one fails. The app does start. To put it\n> another way, the bug just causes an ugly stack trace in the logs, it doesn't\n> prevent the deployment from completing nor does it break the application.\n> Are you seeing the same?\n> \n> A potential workaround would be to disable automatic deployment\n> (autoDeploy=\"false\" on the Host). If you are doing all your deployments via\n> the Manager then you might want to do this anyway for the security benefits\n> (an arbitrary file upload vulnerability can't be leveraged into RCE).\n\nWhen we saw \"Child name [/app1] is not unique\" and visited `app1` web page, we saw following error. It seems one of the war attempts was successful but the application did not start normally. Our context.xml defines database resources.\n\njavax.naming.NameNotFoundException: Name [comp/env] is not bound in this Context. Unable to find [comp].\n\torg.apache.naming.NamingContext.lookup(NamingContext.java:833)\n\torg.apache.naming.NamingContext.lookup(NamingContext.java:174)\n\torg.apache.naming.SelectorContext.lookup(SelectorContext.java:163)\n\tjavax.naming.InitialContext.lookup(InitialContext.java:417)"
    ],
    "creation_ts": "2021-04-19T21:43:21Z",
    "fixes": [
      65251
    ]
  },
  {
    "id": 54928,
    "summary": "IllegalStateException: Calling [asyncError()] is not valid for a request with Async state [COMPLETING]",
    "description": "In an async scenario (request.startAsync), when the client goes away, trying to write to the response raises an IOException. If I then call asyncContext.complete() in order to finalize and clean up the request, soon after the following exception occurs:\n\njava.lang.IllegalStateException: Calling [asyncError()] is not valid for a request with Async state [COMPLETING]\n        at org.apache.coyote.AsyncStateMachine.asyncError(AsyncStateMachine.java:304)\n        at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:793)\n        at org.apache.coyote.Request.action(Request.java:373)\n        at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:441)\n        at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:312)\n        at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1509)\n        at org.apache.coyote.http11.Http11NioProcessor.asyncDispatch(Http11NioProcessor.java:221)\n        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:619)\n        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1581)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1540)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n        at java.lang.Thread.run(Thread.java:722)\n\nIt looks like an attempt to maybe to send an error event to AsyncListener's but asyncContext.complete has already been called.\n\nIs calling asyncContext.complete() a reasonable way to handle an IOException from the response in order to finalize the request and release any resorces associated with it?",
    "comments": [
      "This is a question for the users list if you want to discuss this further (and possibly the Servlet EG as I don't see a clear definition of how an app is expected to handle this in the spec).\n\nI'm assuming that the I/O operation that triggers the error does not occur on a container thread. If it occurs in a container thread let Tomcat handle it.\n\nLooking at the Tomcat source code, a dispatch to a simple error page should trigger an error when it tries to write to the response which in turn should trigger the onError method of any registered AsyncListener allowing you to do the clean-up.",
      "Okay, I see. It looks like one has to dispatch before calling asyncContext.complete(). I opened this ticket because of the exception but I didn't realize it was illegal ot call complete() from a non-container thread. Maybe that can be detected and rejected with a message to that extent.",
      "(In reply to comment #2)\n> Okay, I see. It looks like one has to dispatch before calling\n> asyncContext.complete().\n\nIn this case you need the dispatch to get the request back onto a container thread where the error handling can deal with the error. It is this bit I am not 100% is what is intended by the spec but I can't find any clear definitions.\n\n> I opened this ticket because of the exception but I\n> didn't realize it was illegal ot call complete() from a non-container\n> thread. Maybe that can be detected and rejected with a message to that\n> extent.\n\nIt is perfectly valid to call complete() from a non-container thread.\n\nAgain, the users list is the place to discuss this.",
      "I've been pondering this and having thought about the question you asked on the Servlet spec users list, I have reached the conclusion that allowing complete() makes the most sense here.\n\nI'm re-opening this to make this change for 7.0.41\n\nThe EG may ultimately come to a different conclusion. We'll deal with that if it happens.",
      "OK, thanks. For what it's worth, from brief experimentation calling complete() in this scenario on Jetty and Glassfish doesn't cause any exceptions. Not sure that means it works but if it doesn't it could be considered a bug since it completes silently.",
      "I think some other changes might have fixed this. Please can you re-test with the latest trunk.",
      "I can confirm the exception no longer appears in the logs. Thanks for fixing this!",
      "(In reply to comment #4)\n> I'm re-opening this to make this change for 7.0.41\n\nI backported the test case to Tomcat 7 in r1634259. The test case passes successfully."
    ],
    "creation_ts": "2013-05-04T12:41:30Z",
    "fixes": [
      54928
    ]
  },
  {
    "id": 63026,
    "summary": "JNDIRealm fails to authenticate user with 2 trailing spaces CN",
    "description": "Using JNDIRealm to authenticate users against Microsoft Active Directory fails if the AD user object has 2 trailing spaces in it's cn.  Realm is configured with adCompat=\"true\" and userSearch=\"(sAMAccountName={0})\".  \n\nDebugging through the code the getUserBySearch() method ldap search returns a result with only the last space escaped, but the method getDistinquishedName() returns a dn with both spaces escaped.  In this scenario the bindAsUser() method will return false resulting in an authentication failure.  If I modify the dn returned from getDistinquishedName() to only escape the last space in the cn the bindAsUser() method will return true and the authentication will be successful.",
    "comments": [
      "Sounds miserable.\n\nAny reason this user's username includes two \u2013 or even one \u2013 trailing space?\n\nSince you debugged so successfully, would you care to prepare a patch for the JNDIRealm?",
      "(In reply to Dave Anuszewski from comment #0)\n> Using JNDIRealm to authenticate users against Microsoft Active Directory\n> fails if the AD user object has 2 trailing spaces in it's cn.  Realm is\n> configured with adCompat=\"true\" and userSearch=\"(sAMAccountName={0})\".  \n> \n> Debugging through the code the getUserBySearch() method ldap search returns\n> a result with only the last space escaped, but the method\n> getDistinquishedName() returns a dn with both spaces escaped.  In this\n> scenario the bindAsUser() method will return false resulting in an\n> authentication failure.  If I modify the dn returned from\n> getDistinquishedName() to only escape the last space in the cn the\n> bindAsUser() method will return true and the authentication will be\n> successful.\n\nOut of curiousity, why do you plague your users with username and password where you could use SPNEGO?",
      "Which version of Windows are you using? I'm using my default AD test environment built with 2k8r2 and the UI won't allow creating of users where the CN has trailing spaces. Alternatively, how are you creating those users?",
      "Ah.\n\nnet user \"bug63026 \" pwd /ADD\n\ndoes the trick. Interestingly, if you specify multiple spaces Windows only escapes the last one in the UI. I wonder if this is an AD issue. I'll dig further as I don't necessarily trust what the UI is showing me.",
      "RFC 4514 (string representation of distinguished names) states that a space at the beginning or end of a string must be escaped (there are other escaping requirements but I am ignoring them for this discussion). Other characters may be escaped.\n\nAny character can be escaped with \"\\nn\" sequences. Some characters may be escaped with \"\\\"\n\nAD correctly escapes a space if it is the first or last character using \"\\ \".\n\nIt appears that the additional escaping observed originates in Java.\n\nAD accepts queries using the same \"\\ \" escaping it uses but does not accept any additional \"\\ \" escaping.\n\nAD accepts queries that use optional \"\\nn\" escaping.\n\nRFC 4145 (string representation of search filters) only refers to \"\\nn\" escaping.\n\nI'm currently looking at options to address this issue.",
      "Fixed in:\n- trunk for 9.0.15 onwards\n- 8.5.x for 8.5.38 onwards\n- 7.0.x for 7.0.93 onwards\n\nI ended up adding a new option that forces DNs to use \\nn escaping - forceDnHexEscape."
    ],
    "creation_ts": "2018-12-20T18:06:06Z",
    "fixes": [
      63026
    ]
  },
  {
    "id": 69699,
    "summary": "Rewrite redirection forget SessionID path parameter",
    "description": "Given rewrite rule: \n- RewriteRule ^/b(.*) /a$1 [R]\n\nfor original request \"/b;k=1;jsessionid=a1b2c3d4e5/001\", receive 302 to \"/a/001\".\n\nSession ID part disappear in redirect target URL.",
    "comments": [
      "That is expected, documented behaviour:\n\n\"The URL presented to the rewrite valve is the same URL used for request mapping...\". i.e. all path parameters are removed.\n\nWe might want to consider a variable exposing the URL session ID so the user can do something like\n\nRewriteCond %{URL_SESSION_ID} !=\"\"\n\nAlthough I'll note no-one has actually asked for this functionality on the users list.\n\nI don't think we should be automatically adding it.",
      "Per servlet spec says:\n\n\"URL rewriting should not be used as a session tracking mechanism where cookies or SSL sessions are supported and suitable.\"\n\nBefore forward jsessionid, we need determine whether cookies or SSL sessions are supported or not.",
      "Update PR#862, URL-Rewriting is the last alternative option for Session Tracking Mode.",
      "This will be fixed in 11.0.8, 10.1.42 and 9.0.106."
    ],
    "creation_ts": "2025-05-29T01:13:33Z",
    "fixes": [
      69699
    ]
  },
  {
    "id": 48004,
    "summary": "setHeader() does not replace the previous value for a \"Server\"",
    "description": "Hello,\nIn a servlet or in a filter (before passing the control to doFilter() or after) try the following\nHttpServletResponse myResponse = ...\nmyResponse.setHeader(\"Server\",\"My own server name because I do not want to expose the real server name to the public for security reasons\");\n...\n\nIn the headers of the response you will get\nServer\tApache-Coyote/1.1, My own server name...\n\nAccording to the J2EE API for HttpServletResponse.html.setHeader()\nhttp://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/servlet/http/HttpServletResponse.html#setHeader(java.lang.String,%20java.lang.String)\n...\nSets a response header with the given name and value. If the header had already been set, the new value overwrites the previous one. The containsHeader method can be used to test for the presence of a header before setting its value.\n...\nIn fact if I call myResponse.containsHeader(\"Server\") I even get a false!!!\n\nIf you look in the IDE at the response object and dig in the responses and wrappers, you will find at the end a buffer with some data already set by Tomcat with this value and other things\n.\nAs I understand it Tomcat (or Coyote) does not let this header to be changed while nothing in the specification says that it is special.\nI did not find either a parameter in server.xml or other where the server name is specified to be overiden.\n\nSo the spec is not implemented properly for this specific header.\nSome other values are in this buffer, my goal was not to change them but other headers or values could have the same issue.\n\nThis issue is the same in Tomcat 5.5.28 and Tomcat 6.0.20. Not tested on 7.x.\n\nThanks \nOlivier",
    "comments": [
      "*** Bug 48005 has been marked as a duplicate of this bug. ***",
      "This has been fixed in trunk and proposed for 6.0.x and 5.5.x.\n\nNote that you can set the server attribute on the connector to override the default server name. I updated the HTTP connector docs to clarify how this works.",
      "The patch has been applied to 6.0.x and will be included in 6.0.23 onwards.",
      "This fix is imcomplete.\n\nThere should be a distinction between setting a header to an empty string \"\" and setting it to null (which should clear the header entirely since there is no .removeHeader() on http response).\n\nNevertheless, there is no way to completely avoid sending the \"Server\" header.\nSecurity audits fail just because of the header presence, under the assupmtion that the specific header, even if blank, is still revealing something about the server.\n\nThe solution I have is this (Http11Processor for now):\n\n1-add a field\n\"protected boolean addServerHeader = true;\"\n\n\n2-Implement the setServer() this way, to distinguish the desire to avoid the header completely. If the server.xml doesn't have a server property, the setServer() shouldn't be called and the default is to add server header.\n\n    public void setServer( String server ) {\n        if (server==null) {\n            this.server = null;\n            this.addServerHeader = true;\n        } else if (server.equals(\"\")) {\n            this.server = null;\n            this.addServerHeader = false;\n        } else {\n            this.server = server;\n            this.addServerHeader = true;\n        }\n    }\n\n\n3-At the end of prepareResponse(), conditionally add the server header:\n\n        if(addServerHeader) {\n        \tif (server != null) {\n            \t// Always overrides anything the app might set\n\t            headers.setValue(\"Server\").setString(server);\n        \t} else if (headers.getValue(\"Server\") == null) {\n            \t// If app didn't set the header, use the default\n\t            outputBuffer.write(Constants.SERVER_BYTES);\n        \t}\n        }\n\n\nThis is the proper fix which at least is tomcat specific and doesn't break the servlet spec. I won't argue about the httpresponse.setHeader(\"Server\", null) since it is not specified in the servelt spec (which means it should be legal to remove the header!).",
      "This has been fixed in 5..5.x and will be included in 5.5.29 onwards."
    ],
    "creation_ts": "2009-10-15T11:16:16Z",
    "fixes": [
      48004
    ]
  },
  {
    "id": 66548,
    "summary": "Tomcat does not validate value of Sec-Websocket-Key header",
    "description": "In the websocket RFC (https://www.rfc-editor.org/rfc/rfc6455#section-4.1) we read:\n\nThe request MUST include a header field with the name\n        |Sec-WebSocket-Key|.  The value of this header field MUST be a\n        nonce consisting of a randomly selected 16-byte value that has\n        been base64-encoded (see Section 4 of [RFC4648]).  The nonce\n        MUST be selected randomly for each connection.\n\nTomcat appears to accept any value for Sec-WebSocket-Key - even if it's not a base64 string, and even if it's not the correct length.\n\nI don't think this causes any functional or security issues, but since the WebSocket spec is worded pretty strongly (\"MUST\"), I think it would make sense for Tomcat to throw an exception if the Sec-WebSocket-Key header does not meet this requirement.",
    "comments": [
      "Seems reasonable.\n\nCare you provide a patch/PR?",
      "Throwing an exception isn't appropriate here. Just returning SC_BAD_REQUEST is sufficient.\n\nI'll note that RFC 6455 also states:\n\n\"It is not necessary for the server to base64-decode the |Sec-WebSocket-Key| value.\"\n\nWhich begs the question exactly how far should the server go to validate this value? Possible tests:\na) length of 24 characters\nb) ends with \"==\"\nc) characters 0 to 21 are valid for use in base64\n\nOr just decode and check the length despite RFC 6455 saying it is unnecessary.\n\nI think you either do a) + b) or do the full decode. c)",
      "Sorry, comment was posted while incomplete. Continuing...\n\nThe changes required for c) are such that it would be simpler just to do the decode.\n\nI'd lean towards the a) + b) approach but have no objection to the decode.",
      "This could break things if someone we find out that clients have been using random values there instead of faithfully implementing the specification.",
      "Yes, but.\n\nHistorically, we have been generally unsympathetic to clients that don't follow the relevant specs.\n\nGiven there doesn't seem to be any advantage for the server here (the feature benefits clients) maybe just add the validation in 11.0.x?\n\nI am happy for it to be added to all versions but if folks are concerned about breakage then I'm fine with not back-porting.",
      "(In reply to Remy Maucherat from comment #4)\n> This could break things if someone we find out that clients have been using\n> random values there instead of faithfully implementing the specification.\n\nThis is an RFC-MUST situation, so I think it's okay to enforce it.\n\nMaybe we implement this in Tomcat 11 and 10.1 but wait to back-port to 9.0/8.5 until after a few releases to see if we break anything.\n\n(In reply to Mark Thomas from comment #3)\n> The changes required for c) are such that it would be simpler just to do the\n> decode.\n\nOne point in favor of \"validating\" the string without decoding it is avoiding the buffer-allocation that would come along with decoding string->bytes.",
      "Fixed in:\n- 11.0.x for 11.0.0-M5 onwards\n- 10.1.x for 10.1.8 onwards\n\nAs per schultz's suggestion, I am going to wait at least one release cycle before back-porting this to 9.0.x and 8.5.x in case there are clients out there that do not provide a valid value for this header.",
      "Waiting for (lack of) feedback from 11.0.x and 10.1.x users.",
      "It has been two release cycles with non negative feedback so I am going to proceed with the back-port.",
      "Fixed in:\n- 9.0.76 onwards\n- 8.5.90 onwards"
    ],
    "creation_ts": "2023-03-30T19:44:48Z",
    "fixes": [
      66548
    ]
  },
  {
    "id": 66670,
    "summary": "Add SSLHostConfig#certificateKeyPasswordFile and SSLHostConfig#certificateKeystorePasswordFile",
    "description": "This is somewhat expired by https://httpd.apache.org/docs/current/mod/mod_ssl.html#sslpassphrasedialog and its flexiblity, but I do not intend to request all of those features.\n\nOne of the current problems to use inline passwords (certificateKeyPassword) in the server.xml\n* Multiple connectors for the same certificate/key pair on different ports\n* Multiple Tomcat instances for the same hostname, but you need different JVM configs/version/etc. or need the physical separation between processes\n\nAll of these requires to touch every single certificateKeyPassword and update when you rotate the cert/key pair and password. In HTTPd you don't have that problem because you modify a single password file and done.\nNote: I don't intend to put HTTPd in front of those Tomcat because I need to configure and update it, it adds overhead and it has several open issues with expect/continue support for some of our use cases.\n\nI'd like to introduce this parameter only for OpenSSL or PEM-based cert keys, not Java keystores since certificateKeystorePassword has a default value which does not allow to make it mutually exclusive. This attribute will be mutually exclusive with certificateKeyPassword since only either one should be populated, an exception will be raised when both is provided.\n\nThis will require changes in a few Java files as well as Tomcat Native in Java and C.\n\nTarget config example:\n> <Connector port=\"%%HTTPS_PORT%%\" connectionTimeout=\"20000\" keepAliveTimeout=\"300000\" maxParameterCount=\"1000\"\n>   maxHttpHeaderSize=\"24576\" maxThreads=\"250\"\n>   SSLEnabled=\"true\" scheme=\"https\" secure=\"true\"\n>   defaultSSLHostConfigName=\"%%VIRTUAL_HOSTNAME%%\">\n>   <SSLHostConfig hostName=\"%%VIRTUAL_HOSTNAME%%\" protocols=\"TLSv1.2+TLSv1.3\"\n>     honorCipherOrder=\"true\" disableSessionTickets=\"true\"\n>     ciphers=\"HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!DSS:!SHA1:!SHA256:!SHA384\">\n>     <Certificate certificateFile=\"/etc/ssl/%%VIRTUAL_HOSTNAME%%/cert.crt\"\n>       certificateKeyFile=\"/etc/ssl/%%VIRTUAL_HOSTNAME%%/key.crt\"\n>       certificateKeyPasswordFile=\"/etc/ssl/%%VIRTUAL_HOSTNAME%%/password\" type=\"RSA\" />\n>   </SSLHostConfig>\n> </Connector>\n\nIMPORTANT: This is not a security concern or to avoid plaintext passwords in conf files, it is solely about reducing admin overhead.\n\nLet me know what you think, I'd like to start implementing it this week.",
    "comments": [
      "Why not just use an XML entity?\n\n<!DOCTYPE Context [\n<!ENTITY certPassword \"tiger\">\n]>\n...\n...\n<SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n...>\n<SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n...>\n<SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n...>\n<SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n...>\n<SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n...>\n<SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n...>\n\nOr, if you really want to use a separate file:\n\n<!DOCTYPE Context [\n<!ENTITY certPassword SYSTEM \"file:///etc/ssl/%%VIRTUAL_HOSTNAME%%/password\">\n]>\n\n?",
      "(In reply to Christopher Schultz from comment #1)\n> Why not just use an XML entity?\n> \n> <!DOCTYPE Context [\n> <!ENTITY certPassword \"tiger\">\n> ]>\n> ...\n> ...\n> <SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n> ...>\n> <SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n> ...>\n> <SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n> ...>\n> <SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n> ...>\n> <SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n> ...>\n> <SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n> ...>\n> \n> Or, if you really want to use a separate file:\n> \n> <!DOCTYPE Context [\n> <!ENTITY certPassword SYSTEM \"file:///etc/ssl/%%VIRTUAL_HOSTNAME%%/password\">\n> ]>\n> \n> ?\n\nI haven't even thought about this. I see some logical problems to it:\n* From code, this will not work, XML only\n* Most people don't even know system identifiers or DTDs at all\n* What will happen if the file contains a line separator? Will it be stripped automatically?\n\nWDYT?",
      "There are property sources to do property replacement in server.xml. For example: https://github.com/apache/tomcat/blob/main/java/org/apache/tomcat/util/digester/ServiceBindingPropertySource.java (that's the only exotic one that is included in the Tomcat sources, though ;) ).",
      "(In reply to Remy Maucherat from comment #3)\n> There are property sources to do property replacement in server.xml. For\n> example:\n> https://github.com/apache/tomcat/blob/main/java/org/apache/tomcat/util/\n> digester/ServiceBindingPropertySource.java (that's the only exotic one that\n> is included in the Tomcat sources, though ;) ).\n\nYeah, but obviously not straight forward for the user and requires a change in the setup on the target server which is not desired in my case.",
      "(In reply to Michael Osipov from comment #2)\n> * From code, this will not work, XML only\n\nTrue, but not really relevant. If you want to re-use passwords (or files), you can do that in your code pretty easily.\n\n> * Most people don't even know system identifiers or DTDs at all\n\nAlso true, but this is standard XML and not some weird hand-wavy thing that Tomcat invented like \"property sources\".\n\n> * What will happen if the file contains a line separator? Will it be\n> stripped automatically?\n\nI haven't done extensive testing, but I believe exotic whitespace will be preserved. So if you have a trailing newline in your file, then your password will also have a trailing newline. So be careful.\n\nBut you'd have to do that, anyway. If Tomcat were to implement a \"use this file here\" attribute resolver, then we would not want to be doing things like trimming whitespace or anything like that, either.\n\n(In reply to Remy Maucherat from comment #3)\n> .../ServiceBindingPropertySource\n\nThis was going to be my next suggestion. I only recently discovered this capability existed and I fully intend to start playing-around with it because our current build process requires us to build locally in each environment to get e.g. database credentials into the right place in context.xml.\n\nBut... I think the ServiceBindingPropertySource only works with applications, not with server.xml, right R\u00e9my?",
      "(In reply to Christopher Schultz from comment #5)\n> But... I think the ServiceBindingPropertySource only works with\n> applications, not with server.xml, right R\u00e9my?\n\nThese property sources are first and foremost for server.xml. For example this is used for the vault that some customers wanted to have sensitive stuff placed these instead of directly in server.xml ( https://github.com/web-servers/tomcat-vault/blob/main/INSTALL.md ). (of course, it's not really more secure, I know)",
      "So, you guys don't see a need for such a feature? Yeah, we all know that are workarounds/solutions, but they (completely) lack documentation and ease of access.\n\nChris, of course in my I can read the file myself, but this can basically apply to everything which is text-based, no?",
      "(In reply to Christopher Schultz from comment #1)\n> Why not just use an XML entity?\n> \n> <!DOCTYPE Context [\n> <!ENTITY certPassword \"tiger\">\n> ]>\n> ...\n> ...\n> <SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n> ...>\n> <SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n> ...>\n> <SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n> ...>\n> <SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n> ...>\n> <SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n> ...>\n> <SSLHostConfig certificateKeyPassword=\"&certPassword;\"\n> ...>\n> \n> Or, if you really want to use a separate file:\n> \n> <!DOCTYPE Context [\n> <!ENTITY certPassword SYSTEM \"file:///etc/ssl/%%VIRTUAL_HOSTNAME%%/password\">\n> ]>\n> \n> ?\n\nThis does not work:\nSCHWERWIEGEND: Parse Fatal Error at line 33 column 44: Externe Entityreferenz \"&certPassword;\" ist in einem Attributwert nicht zul\u00e4ssig.\norg.xml.sax.SAXParseException; systemId: file:/var/opt/tomcat-services/conf/server.xml; lineNumber: 33; columnNumber: 44; Externe Entityreferenz \"&certPassword;\" ist in einem Attributwert nicht zul\u00e4ssig.\n        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:204)\n        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:178)\n        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:400)\n        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:32\n\nbecause of https://stackoverflow.com/a/65784393/696632\n\nI will pursue a draft PR next week.",
      "(In reply to Michael Osipov from comment #8)\n\n> because of https://stackoverflow.com/a/65784393/696632\n\nDoesn't that link also offer a solution (an internal entity) that would work for this use case?",
      "(In reply to Mark Thomas from comment #9)\n> (In reply to Michael Osipov from comment #8)\n> \n> > because of https://stackoverflow.com/a/65784393/696632\n> \n> Doesn't that link also offer a solution (an internal entity) that would work\n> for this use case?\n\n> Reference an internal entity from an attribute value\n\nPartially, because it still would require me to touch every server.xml file. So it is a half-hearted solution, then I can keep vim's \"s#old#new#c\".",
      "(In reply to Michael Osipov from comment #8)\n> This does not work:\n> SCHWERWIEGEND: Parse Fatal Error at line 33 column 44: Externe\n> Entityreferenz \"&certPassword;\" ist in einem Attributwert nicht zul\u00e4ssig.\n> org.xml.sax.SAXParseException; systemId:\n> file:/var/opt/tomcat-services/conf/server.xml; lineNumber: 33; columnNumber:\n> 44; Externe Entityreferenz \"&certPassword;\" ist in einem Attributwert nicht\n> zul\u00e4ssig.\n\nHmm. I thought we explicitly allowed external entities to support this kind of thing.",
      "(In reply to Christopher Schultz from comment #11)\n> (In reply to Michael Osipov from comment #8)\n> > This does not work:\n> > SCHWERWIEGEND: Parse Fatal Error at line 33 column 44: Externe\n> > Entityreferenz \"&certPassword;\" ist in einem Attributwert nicht zul\u00e4ssig.\n> > org.xml.sax.SAXParseException; systemId:\n> > file:/var/opt/tomcat-services/conf/server.xml; lineNumber: 33; columnNumber:\n> > 44; Externe Entityreferenz \"&certPassword;\" ist in einem Attributwert nicht\n> > zul\u00e4ssig.\n> \n> Hmm. I thought we explicitly allowed external entities to support this kind\n> of thing.\n\nNote: I am working on an impl now. Hope to complete it by next week or so. This will be ideal combination with the recent TLS cert reload listener.",
      "Folks,\n\nI have done quite good progress yesterday, all combinations of connectors and TLS implementations work from file. Before I do more testing and documentation, I'd like to know your opinion on the following:\nShould it be a new parameter/attribute or should I refit the current password parameter/attribute to the approach of OpenSSL: https://www.openssl.org/docs/man3.0/man1/openssl-passphrase-options.html#OPTIONS? I would limit to \"pass:\", \"file:\", \"env:\" for now. No prefix will mean the current behavior, just like \"pass:\" or is that too breaking for you? WDYT?\n\nWIP:\n* https://github.com/michael-o/tomcat/compare/0e7812b88390e2ca989596236b86492dcbb69d18...michael-o:tomcat:BZ-66670\n* https://github.com/michael-o/tomcat-native/compare/1.2.x...michael-o:tomcat-native:BZ-66670\n\nHope to present the PR in a week or so.",
      "Is there a particular reason to add support directly to tcnative for this? Why not read the file in Java and pass the password to libtctative as usual? This would not require any changes to libtcnative, no additional release of libtcnative, no additional upgrade of libtcnative for users, etc.?",
      "(In reply to Christopher Schultz from comment #14)\n> Is there a particular reason to add support directly to tcnative for this?\n> Why not read the file in Java and pass the password to libtctative as usual?\n> This would not require any changes to libtcnative, no additional release of\n> libtcnative, no additional upgrade of libtcnative for users, etc.?\n\nWhile you are right, I am doing this for consistency with the rest. Consider that not only Tomcat might use libtcnative, they will benefit as well. Netty does use libtcnative as well.",
      "Fixed in:\n- main for 11.0.0-M14 and onwards\n- 10.1.x for 10.1.16 and onwards\n- 9.0.x  for 9.0.83 and onwards\n- 8.5.x for 8.5.96 and onwards"
    ],
    "creation_ts": "2023-06-26T15:01:13Z",
    "fixes": [
      66670
    ]
  },
  {
    "id": 38713,
    "summary": "java.io.IOException: tmpFile.renameTo(classFile) failed when compiling new JSP (upon redeploy)",
    "description": "[http-8080-Processor24 ERROR 26902165 DispatcherServlet.serviceWrapper()] -\nCould not complete request\norg.apache.jasper.JasperException: Unable to compile class for JSP\n        at\norg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:565)\n        at\norg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:293)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:291)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:241)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at\norg.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672)\n        at\norg.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:463)\n        at\norg.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:398)\n        at\norg.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:301)\n        at\norg.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:97)\n        at\norg.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250)\n        at\norg.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:928)\n        at\norg.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:705)\n        at\norg.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:625)\n        at\norg.springframework.web.servlet.FrameworkServlet.serviceWrapper(FrameworkServlet.java:386)\n        at\norg.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:346)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n        at\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)\n        at\norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)\n        at\norg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)\n        at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)\n        at\norg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)\n        at\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:856)\n        at\norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:744)\n        at\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)\n        at\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n        at java.lang.Thread.run(Thread.java:595)\n[http-8080-Processor24 ERROR 26902165 [wirelessapp].invoke()] -\nServlet.service() for servlet wirelessapp threw exception\njava.io.IOException: tmpFile.renameTo(classFile) failed\n        at\norg.apache.jasper.compiler.SmapUtil$SDEInstaller.install(SmapUtil.java:245)\n        at org.apache.jasper.compiler.SmapUtil.installSmap(SmapUtil.java:164)\n        at\norg.apache.jasper.compiler.AntCompiler.generateClass(AntCompiler.java:267)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:288)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:267)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:255)\n        at\norg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:556)\n        at\norg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:293)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:291)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:241)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at\norg.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672)\n        at\norg.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:463)\n        at\norg.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:398)\n        at\norg.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:301)\n        at\norg.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:97)\n        at\norg.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250)\n        at\norg.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:928)\n        at\norg.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:705)\n        at\norg.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:625)\n        at\norg.springframework.web.servlet.FrameworkServlet.serviceWrapper(FrameworkServlet.java:386)\n        at\norg.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:346)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n        at\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)\n        at\norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)\n        at\norg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)\n        at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)\n        at\norg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)\n        at\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:856)\n        at\norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:744)\n        at\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)\n        at\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n        at java.lang.Thread.run(Thread.java:595)",
    "comments": [
      "For more info:\nGot same error on Tomcat 5.5.15. Using JDK 1.5.0_06.\n\nApparently other people have seen this bug before (but on another JVM):\n\nhttp://mail-archives.apache.org/mod_mbox/tomcat-dev/200403.mbox/%3C406AADCC.7020003@ruc.dk%3E",
      "We have the same problem. I think I managed to find out the cause: it only\nhappens if the JSP itself throws FileNotFoundException. So in order to\nreproduce: have only one JSP in your Webapp like so:\n\n<%!\n  java.util.Random r = new java.util.Random();\n%><% if(r.nextInt(10) > 0) throw new java.io.FileNotFoundException(); %>\n\nand put some concurrent load on that JSP.\n\nEvaluation: Jasper has a rather big catch block in JspServletWrapper.java and\nwill interpret any FNFE as an indication that the JSP itself has disappeared. It\nwill remove the JspServletWrapper which triggers a recompilation.\n\nI'm pretty sure there is a race condition in that recompilation code that causes\ntwo concurrent compilations for the same file. These two compilations would\nfight over the generated files and lead to the observed bug. See the thread dump\nbelow (taken after SDEInstaller hit a breakpoint in the offending line): two\ncompilations with different OIDs for JSPServletWrapper although the webapp has\nonly one JSP.\n\n\n\"http-16001-Processor22\" daemon prio=10 tid=0x00764340 nid=0x23 waiting on\ncondition [0xedb7e000..0xedb7f9f0]\n        at java.io.IOException.<init>(IOException.java:40)\n        at java.io.FileNotFoundException.<init>(FileNotFoundException.java:46)\n        at\norg.apache.jasper.compiler.SmapUtil$SDEInstaller.<init>(SmapUtil.java:248)\n        at\norg.apache.jasper.compiler.SmapUtil$SDEInstaller.install(SmapUtil.java:236)\n        at org.apache.jasper.compiler.SmapUtil.installSmap(SmapUtil.java:163)\n        at org.apache.jasper.compiler.Compiler.generateClass(Compiler.java:429)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:472)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:451)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:439)\n        at\norg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:511)\n        at\norg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:295)\n        - locked <0xf1320090> (a org.apache.jasper.servlet.JspServletWrapper)\n\n\n\"http-16001-Processor25\" daemon prio=10 tid=0x00767a50 nid=0x26 runnable\n[0xed87d000..0xed87fc70]\n        at java.net.URLStreamHandler.setURL(URLStreamHandler.java:505)\n        at java.net.URLStreamHandler.parseURL(URLStreamHandler.java:283)\n        at sun.net.www.protocol.file.Handler.parseURL(Handler.java:50)\n        at java.net.URL.<init>(URL.java:596)\n        at java.net.URL.<init>(URL.java:464)\n        at java.net.URL.<init>(URL.java:413)\n        at java.net.JarURLConnection.parseSpecs(JarURLConnection.java:161)\n        at java.net.JarURLConnection.<init>(JarURLConnection.java:144)\n        at\nsun.net.www.protocol.jar.JarURLConnection.<init>(JarURLConnection.java:61)\n        at sun.net.www.protocol.jar.Handler.openConnection(Handler.java:24)\n        at java.net.URL.openConnection(URL.java:943)\n        at java.net.URL.openStream(URL.java:1007)\n        at\norg.apache.catalina.loader.StandardClassLoader.getResourceAsStream(StandardClassLoader.java:679)\n        at java.lang.Class.getResourceAsStream(Class.java:1998)\n        at org.apache.tools.ant.ComponentHelper.initTypes(ComponentHelper.java:741)\n        at\norg.apache.tools.ant.ComponentHelper.initDefaultDefinitions(ComponentHelper.java:247)\n        at org.apache.tools.ant.Project.init(Project.java:262)\n        at org.apache.jasper.compiler.Compiler.getProject(Compiler.java:116)\n        at org.apache.jasper.compiler.Compiler.generateClass(Compiler.java:320)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:472)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:451)\n        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:439)\n        at\norg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:511)\n        at\norg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:295)\n        - locked <0xf0c4d448> (a org.apache.jasper.servlet.JspServletWrapper)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:292)",
      "Also found this problem with Tomcat 5.5.4 on Windows 2000 Professional.",
      "(In reply to comment #2)\n> We have the same problem. I think I managed to find out the cause: it only\n> happens if the JSP itself throws FileNotFoundException. So in order to\n> reproduce: have only one JSP in your Webapp like so:\n> \n> <%!\n>   java.util.Random r = new java.util.Random();\n> %><% if(r.nextInt(10) > 0) throw new java.io.FileNotFoundException(); %>\n> \n> and put some concurrent load on that JSP.\n> \n\nI have seen this problem where the jsp does NOT have any code that throws a\nFileNotFoundException. I do not believe this is the source of the problem.\n\nI've seen the problem with Tomcat 5.0.28 with j2sdk1.4.2_05.\n\nNot that a browser refresh allows the JSP to compile correctly.",
      "I tend to believe the race condition theory put forth by Matthias.  If one of\nyou wants to submit a patch for fix it, that'd be awesome.  Thanks.",
      "I have also found this to occur in Tomcat 5.5.17 on both Windows XP and Windows\n2003 Server. This causes some concern for my boss, and I'm not sure what to tell\nhim. Please fix this ASAP.",
      "This bug is related to bad version of jstl.jar (for example old jstl and new\nstandard.jar)",
      "This bug took a while to track down. I ended up changing the \"fork\" parameter to\ntrue in the web.xml under Jasper <servlet-name>jsp</servlet-name> for Apache\nTomcat 5.5.17. My best guess is the problem must occur by sharing the JVM. When\nthe JVM is forked into two processes we no longer have the problem of sharing\nfiles (ie, trying to rename a file while it's in use). I hope this helps someone\nelse because I stared at this for quite some time.\n\nThanks,\n  Ron Ledwich",
      "Thanks very much Ron Ledwich!  Your advice worked and saved me a lot of time!\n\nSincerely,\nJava Man\n\n(In reply to comment #8)\n> This bug took a while to track down. I ended up changing the \"fork\" parameter to\n> true in the web.xml under Jasper <servlet-name>jsp</servlet-name> for Apache\n> Tomcat 5.5.17. My best guess is the problem must occur by sharing the JVM. When\n> the JVM is forked into two processes we no longer have the problem of sharing\n> files (ie, trying to rename a file while it's in use). I hope this helps someone\n> else because I stared at this for quite some time.\n> \n> Thanks,\n>   Ron Ledwich",
      "I have the same problem using tomcat bundled with JBoss 4.0.4. fork=true did not\nsolve the problem for me.",
      "(In reply to comment #4)\n\n> I have seen this problem where the jsp does NOT have any code that throws a\n> FileNotFoundException. I do not believe this is the source of the problem.\n\nIt may not be obvious. Our code would include markup from a different server via\nHTTPUrlConnection. A 404 on the target is translated into a\nFileNotFoundException. 404s, FNF and compilation problems are clearly correlated\nin our case.\n\nI've looked at the synchronization code for JSP compilation before and a small\npatch won't do, I'm afraid.",
      "Updating version to 5.5.17, the latest reported, and severity to normal.  If\nanyone can post attach a simple test WAR file to this Bugzilla page that will\nlet us reproduce the issue, that'd be awesome.",
      "It happens also in 5.5.20\nIn our case it happens with jsp:include though I am not sure it is related.",
      "Hi all - in XP the reason this was happening for us was because the overall file\npath of the file with an extension of .classtmp was > 256 characters long and\nthe rename would not work. We had the problem in tomcat within jboss, so\nrenaming the location of the jboss server to give us a filepath of <256 fixed\nthe problem.",
      "(In reply to comment #14)\n> Hi all - in XP the reason this was happening for us was because the overall file\n> path of the file with an extension of .classtmp was > 256 characters long and\n> the rename would not work. We had the problem in tomcat within jboss, so\n> renaming the location of the jboss server to give us a filepath of <256 fixed\n> the problem.\n> \n> \nThis was the solution for me running Tomcat 5.5.12 on WinXp with java 1.4.2_09",
      "I've seen this sporadically over the years. Most recently with 5.5.23 on Win XP.\nIt's not readily reproducable at will, as it seems to depend on the timing of\nthings. My most recent cases were when my computer was responding very\nsluggishly due to having a lot of applications running sucking up lots of system\nresources (and probably a bit of page thrashing). The race condition during\ncompiling sounds convincing to me. FWIW, here's a portion of my stacktrace:\n\njava.io.IOException: tmpFile.renameTo(classFile) failed\n\tat org.apache.jasper.compiler.SmapUtil$SDEInstaller.install(SmapUtil.java:246)\n\tat org.apache.jasper.compiler.SmapUtil.installSmap(SmapUtil.java:165)\n\tat org.apache.jasper.compiler.JDTCompiler.generateClass(JDTCompiler.java:450)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:298)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:277)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:265)\n\tat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:564)\n\tat\norg.apache.jasper.servlet.JspServletWrapper.loadTagFile(JspServletWrapper.java:204)\n\tat\norg.apache.jasper.compiler.TagFileProcessor.loadTagFile(TagFileProcessor.java:516)\n\tat org.apache.jasper.compiler.TagFileProcessor.access$000(TagFileProcessor.java:49)\n\tat\norg.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:567)\n\tat org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1442)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2164)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2214)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2325)\n\tat org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1186)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2164)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2214)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2325)\n\tat org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1186)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2164)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2214)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2325)\n\tat org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1186)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2164)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2214)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2325)\n\tat org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1186)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2164)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2214)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2345)\n\tat org.apache.jasper.compiler.Node$JspBody.accept(Node.java:1896)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2164)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2214)\n\tat\norg.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:571)\n\tat org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1442)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2164)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2214)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2225)\n\tat org.apache.jasper.compiler.Node$JspRoot.accept(Node.java:526)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2164)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2214)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2220)\n\tat org.apache.jasper.compiler.Node$Root.accept(Node.java:457)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2164)\n\tat\norg.apache.jasper.compiler.TagFileProcessor.loadTagFiles(TagFileProcessor.java:585)\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:179)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:296)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:277)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:265)\n\tat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:564)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:299)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:315)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:265)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:803)",
      "See http://issues.apache.org/bugzilla/show_bug.cgi?id=2500. \nDoes the fixing of bug 2500 make this problem go away?",
      "Hi,\nWe are getting the same error in our Web app which runs on sun one 7.0 web \nserver.\n\nIn our case, we have a jsp file that has a <%@include file= .. > to another \njsp file.\n\nWe can see the .classtmp file for this jsp in the web server. \nNone of the solutions given in this post have worked for us so far.\n\nHas anyone faced a similar situation with sun one before? Please suggest a way \nforward.",
      "We are running on Windows but had the same scenario: a jsp file that has a\n<%@include file= .. > to another jsp file.\n\nIt seemed that one possibility was the JSPs being compiled in the wrong order.\nSo we created an ANT task that we run when we deploy the web app to the server.\nThe ANT task compiles all the .jsp files, except those included ones.\n\nFor the included files, we renamed them to a different extension .jspinc and\nthese are not precompiled individually, but they do get compiled inline with the\nfiles that include them.",
      "Hi Brian,\nThanks for replying.\nAs far as I can understand, you are precompiling the jsps before deploying. \nBut we depend on the server to compile them at run time. \nAlso, while looking into this issue, we found that when ever this error \noccurs, a file with an extension .classtmp exists in the work folder. \n\nAnd we have also found that when ever the size of the compiled servlet is \nbelow a particualr limit which is around 32KBs it is fine. But when the size \nexceeds this limit, we get the error.\n\nIs there any such limit to the sizes of the class files? if so, how can we \nremove this constraint? or is there any other way out? Will <%jsp:include> tag \nhelp?\n\n(In reply to comment #19)\n> We are running on Windows but had the same scenario: a jsp file that has a\n> <%@include file= .. > to another jsp file.\n> It seemed that one possibility was the JSPs being compiled in the wrong \norder.\n> So we created an ANT task that we run when we deploy the web app to the \nserver.\n> The ANT task compiles all the .jsp files, except those included ones.\n> For the included files, we renamed them to a different extension .jspinc and\n> these are not precompiled individually, but they do get compiled inline with \nthe\n> files that include them.",
      "Using the test case provided by Matthias Ernst in comment#2 I can reproduce this on 5.5.23 in about 5 seconds using JMeter configured with 20 threads.\n\nWith the latest 5.5.x code I can't reproduce this even if I hammer the test JSP with with 250 threads for several minutes.\n\nAs Jonathan Leech suggests in comment#17 it looks very much like the fix for bug2500 also fixed this issue. That fix is in 5.5.25 onwards."
    ],
    "creation_ts": "2006-02-20T08:08:04Z",
    "fixes": [
      38713
    ]
  },
  {
    "id": 66471,
    "summary": "JSessionId secure attribute missing with RemoteIpFilter and X-Forwarded-Proto set to https",
    "description": "I use the org.apache.catalina.filters.RemoteIpFilter Filter behind a NGINX reverse proxy. On the NGINX I set the http header X-Forwarded-Proto to https.\n\nIf I now make a request with a Browser to the reverse proxy the JSESSIONID cookie I get back is missing the secure attribute.\n\nI have debugged the RemoteIpFilter, the isSecure flag of the wrapper request it creates, is correctly set to true. Unfortunately, the method getSession() or getSession(Boolean) is forwarded to the wrapped original request were the isSecure Flag is still not set. Therefore, the JSESSIONID cookie is missing the secure flag. See org.apache.catalina.connector.Request method doGetSession and org.apache.catalina.core.ApplicationSessionCookieConfig method createSessionCookie.\n\nAs workaround org.apache.catalina.valves.RemoteIpValve can be used, which seems to handle this correct. Also, the secure flag can be enforced by setting it in the web.xml.\n\nHowever, I would like to use RemoteIpFilter because it has some advantages over the RemoteIpValve or statically setting it in the web.xml.",
    "comments": [
      "I think I already know what bug is, but I haven't come up with a good solution yet. :|",
      "The FilterChain could register the latest request in a ThreadLocal. Which is then read to use the isSecure flag from the most inner request when creating the session cookie.",
      "(In reply to Reto Weiss from comment #2)\n\nUse of any ThreadLocal does not play well with asynchronous processing.\n\nThe information of \"whether the request was submitted via a secure channel\" belongs to the request, not to a specific thread.\n\nI think that using Request.setAttibute() may be a way to go, if other more specific API is missing.\n\nAlternatively, navigating up the wrapper chain via ServletRequestWrapper.getRequest().\n\n\nNote the in org.apache.catalina.connector.Request:\n\n1) Method Request.setSecure(boolean secure).\n\n2) How Request.setAttribute(String name, Object value) is implemented, and use of SpecialAttributeAdapter there.",
      "(In reply to Konstantin Kolinko from comment #3)\n> (In reply to Reto Weiss from comment #2)\n> \n> Use of any ThreadLocal does not play well with asynchronous processing.\n> \n> The information of \"whether the request was submitted via a secure channel\"\n> belongs to the request, not to a specific thread.\n\n+1\n> \n> I think that using Request.setAttibute() may be a way to go, if other more\n> specific API is missing.\n> \n> Alternatively, navigating up the wrapper chain via\n> ServletRequestWrapper.getRequest().\n> \n> \n> Note the in org.apache.catalina.connector.Request:\n> \n> 1) Method Request.setSecure(boolean secure).\n> \n> 2) How Request.setAttribute(String name, Object value) is implemented, and\n> use of SpecialAttributeAdapter there.\n\nI haven't come up with a better solution than this, I've already implemented it according to this solution and commit, please review it for me, thanks!",
      "Fixed in:\n- 11.0.x for 11.0.0-M3 onwards\n- 10.1.x for 10.1.6 onwards\n- 9.0.x for 9.0.72 onwards\n- 8.5.x for 8.5.86 onwards"
    ],
    "creation_ts": "2023-02-09T07:48:43Z",
    "fixes": [
      66471
    ]
  },
  {
    "id": 69634,
    "summary": "NullPointerException in JsonErrorReportValve",
    "description": "When Throwable and response message passed to org.apache.catalina.valves.JsonErrorReportValve.report(Request, Response, Throwable) are null, the implementation thows a NullPointerException.\n\nhttps://github.com/apache/tomcat/blob/791c9c3c95206e6c08e5b3fbea23e97c0e87463c/java/org/apache/catalina/valves/JsonErrorReportValve.java#L73\nhttps://github.com/apache/tomcat/blob/791c9c3c95206e6c08e5b3fbea23e97c0e87463c/java/org/apache/catalina/valves/JsonErrorReportValve.java#L86",
    "comments": [
      "Ok, I see the NPE scenario. Overall the valve was added some time ago and seems remarkably useless compared to the HTML one (it should be functionally equivalent).",
      "Fixed in 11.0.6, 10.1.40 and 9.0.103."
    ],
    "creation_ts": "2025-03-28T14:55:16Z",
    "fixes": [
      69634
    ]
  },
  {
    "id": 45317,
    "summary": "DeltaManager always reports default timeout value for receiving session state on startup",
    "description": "Hi there,\n\nIf I override the state transfer timeout:\n          <Manager className=\"org.apache.catalina.ha.session.DeltaManager\"\n                   stateTransferTimeout=\"10\"\n                   expireSessionsOnShutdown=\"false\"\n                   notifyListenersOnReplication=\"true\"/>\n\nDeltaManager continues to log the default timeout value (ie: \"This operation will timeout if no session state has been received within 60 seconds.\"):\n\n2008-07-01 14:31:30,419 WARN [org.apache.catalina.ha.session.DeltaManager] - Manager [localhost#/manager], requesting session state from org.apache.catalina.tribes.membership.MemberImpl[tcp://{10, -64, 104, -55}:15000,{10, -64, 104, -55},15000, alive=18586,id={-62 91 -70 -63 -111 50 70 -33 -104 41 -48 -32 91 34 -83 -55 }, payload={}, command={}, domain={}, ]. This operation will timeout if no session state has been received within 60 seconds. \n2008-07-01 14:31:35,310 WARN [org.apache.catalina.ha.ClusterListener] - Context manager doesn't exist:localhost#/host-manager \n\nBut it actually uses the correct timeout value (ie: \"timing out after 10,100 ms\"):\n\n2008-07-01 14:31:40,518 ERROR [org.apache.catalina.ha.session.DeltaManager] - Manager [localhost#/manager]: No session state send at 01/07/08 14:31 received, timing out after 10,100 ms. \n\nThis is only an incorrect message, but it is quite annoying especially coupled with the fact that the above configuration is only documented for tomcat 5 (where syntax is subtly different).",
    "comments": [
      "This has been fixed in trunk, and a backport has been proposed to 6.0.x branch.\nthanks for the report\n\nhttp://svn.apache.org/viewvc?rev=673487&view=rev \n\n\nFilip",
      "Fixed in 6.0.x branch, will be available in 6.0.18 onwards",
      "Applied as r790339 to TC 5.5 as well.\nWill be part of 5.5.28."
    ],
    "creation_ts": "2008-07-01T07:50:35Z",
    "fixes": [
      45317
    ]
  },
  {
    "id": 39572,
    "summary": "fixes to use CompressionFilter in WebSphere app server",
    "description": "There are a couple of small bugs in the compression filter classes that are\ntriggered by using the filter in WebSphere 5.1 or 6. Here are patches.\n\n- CompressionResponseStream should not compress the output stream if the\nresponse has been committed (because then it cannot write the Content-Encoding:\ngzip header, and the browser displays the compressed output as-is)\n- CompressionServletResponseWrapper causes a NullPointerException if you flush\nbefore writing anything",
    "comments": [
      "Created attachment 18266\npatch to not compress committed response stream",
      "Created attachment 18267\navoid NullPointerException when flushing before writing",
      "Many thanks for the patches. The NPE had already been fixed. I applied the\nremaining patch to svn and it will be included in 5.5.21 onwards."
    ],
    "creation_ts": "2006-05-12T22:28:57Z",
    "fixes": [
      39572
    ]
  },
  {
    "id": 36155,
    "summary": "tomcat chooses wrong host if using mod_jk",
    "description": "Hi,\n\nmy config is as follows:\n\ntomcat 5.5.9 knows two hosts, let's say the host \"host1\" and the host \"host2\".\nhttp://host1/ is basically a jsp-page echoing the string host1 - http://host2/\nechos the string host2.\n\napache 2.0.54 is configured with two vhost with ServerName host1 and host2. Both\nservers have a ServerAlias too - the one has ServerAlias alias1, the other has\nServerAlias alias2\n\nmod-jk 1.2.14 only knows one worker. My worker.properties looks like this:\nworker.list=worker1\nworker.worker1.type=ajp13\nworker.worker1.host=127.0.0.1\n\nA very simple config. Both apache vhosts contain a \"JkMount *.jsp worker1\"\n\nApache's UseCanonialName is on and Tomcats AJP-connector has useIPVHosts turned\non. Therefor tomcat will chose the host by the server-name that mod_jk sends.\n\nSo calling http://alias1/ results in a page containing the string host1, and\ncalling http://alias2/ results in a page containing the string host2.\n\nThe problem:\nSometimes (not always and very selden) http://alias1 returns the string host2\nand http://alias2 returns the string host1.\n\nI'm not sure, where the problem is, but i'm almost sure it's mod_jk - although i\ndon't know, what should go wrong.\n\nI now defined a second worker with the same address and each of apache's vhosts\nuse a different worker. The error didn't come up yet.",
    "comments": [
      "Dont know whether related or not.\nMigrated some old 4.0 serlvet to 4.1 with mod_jk - 1.2.0\n\nAfter I upgraded mod_jk to 1.2.15\nmy tomcat-4.1.31 start to point to wrong host.\n(the serlvet binaries are copied from another host,\n my point is Previous version did not give me problem)\n\npatricko@staff.singnet.com.sg",
      "So the problem still exists with mod_jk 1.2.15 and Tomcat 5.5.12.\n\nIf two VirtualHosts use the same worker, Tomcat receives the wrong ServerName.\nIMHO, it has something todo with some cache or some other flaw.\n(The caches are worker-wise, aren't they?)\n\nDoes somebody care about this?\n\n@Patrick: i don't know if your problem is related. For me, the problem is\nreproducable, but it does not go wrong always:\nfirst HTTP-request works, second doesn't, third works again, some random ...",
      "Patrick, I don't think your problem is related.  Try users@tomcat.apache.org for\nhelp.  Sven, I can't reproduce your problem.  If you're still experiencing it\nand can post the configuration files for Apache, Tomcat, mod_jk, please do.",
      "I'll do my best, to reproduce it with a small testcase.",
      "Created attachment 17404\ntestcase for the problem i described\n\nThere are two hosts in tomcat: host1 and host2\nThey point to /tmp/host1 and /tmp/host2 (which is also in the tgz)\nThere are two hosts in apache: host1/alias1 and host2/alias2\nThere are two workers defined, but only one is in use from both virtualhosts\nPut the line \"127.0.0.1 host1 host2 alias1 alias2\" in /etc/hosts\n\nIf you run \"./test.sh alias1\" and \"./test.sh alias2\" in two terminals you\nshould see only \"host1\" in one window, and \"host2\" in the other window.\n\nWhat i experience is, that \"./test.sh alias2\" output \"host1\" sometimes - or\n\"./test.sh alias1\" outputs \"host2\". When i change apache's virtualhosts to use\ntwo different workers, the problem is gone.",
      "you can also start \"./test.sh host1\" and \"./test.sh host2\" with the same strange\nresult: \"./test.sh host1\" sometimes outputs \"host2\", and \"./test.sh host2\"\nsometimes outputs \"host1\"",
      "Sven,\n Both workers on the same port? Why not match the \"host\" name in\n workers.properties to the \"host\" container name in server.xml?  Why point\n both at 127.0.0.1?\n\n Seems the proper config is to use names for the workers' host values instead\n of the same (port and) ip addy in both cases.\n\n-Dan",
      "@Dan: i want to use only one worker - and the config attached to this bug only\nuses one worker - though two are declared.\nUsing two workers that point to the same tomcat is a workaround for me, so that\nthe bug described here doesn't rise.\nI don't understand, what you mean with \"using names\" in the worker-file. That\ndoesn't make sense to me since the proper DNS-name would be \"localhost\" in both\ncases. The AJP-Connector only listenes on localhost. The names used in the\nworker-file are _not_ sent to Tomcat by mod_jk, AFAIK.",
      "The comment by Dan sounded much like \"your config cannot work at all\". So i\nthink i need to explain a little more:\n\nThe config does work, if you:\n- restart apache, then run only \"./test.sh alias1\": you will only see host1 on\nthe console\n- restart apache, then run only \"./test.sh alias2\": you will only see host2 on\nthe console\n- use worker1 for the one virtualhost, and use worker2 for the other, then run\n\"./test.sh alias1\" and \"./test.sh alias2\" in parallel: both scripts return the\nright results.\n\nI hope that you agree with me, that tomcat chooses the hosts like it should.\nNote, that the server.xml says useIPVHosts=\"true\" - so tomcat does AFAIK not\nlook at the host-header, but at some other information that mod_jk sends. Since\ni also use \"UseCanonicalName On\" for apache, mod_jk is supposed to send the\nServerName declared for the virtualhost.\n\nThe config does not work, if you use the same worker for both virtualhosts -\nwhich is \"the right thing\" IMHO since there is also only one tomcat running.\nWhat do i mean, with \"it does not work\" - well:\nStart \"./test.sh alias1\" and \"./test.sh alias2\" in parallel. If you're lucky, it\nworks for 10 requests and you see what you should: \"host1\" returned by the first\ncommand, and \"host2\" returned by the second command.\n\nThe result changes for me, and the at least one command \"goes crazy\" and returns\nsomething else: either the command only returns host1 instead of host2 (or vice\nversa of course) or sometimes i even get an alternating sequence of host1 and\nhost2 by one of the commands - or even by both.\n\nEspecially the alternating output is a case, that should not occur. The choice\nmade by tomcat is deterministic AFAIK and tomcat is only considering the data\nthat it gets by mod_jk, so how can there be an alternating sequence?\n\nMy conclusion is, that mod_jk sends the wrong servername, or perhaps sending the\nservername is optional and tomcat just \"reuses\" the information it has been\ngiven by a former AJP-request on the same connection - but i have no clue about\nthose internal things.",
      "I was not able to reproduce the problem.\nWith your test files and mod_jk from SVN it works OK.",
      "I found the bug.\nIt's still present in Tomcat 6.0.10.\nI will supply details soon, as well as a patch.",
      "So the bug is in the class org.apache.tomcat.util.buf.MessageBytes.\n\nThe method setBytes doesn't clear the char-buffer. And the method setChars\ndoesn't clear the byte-buffer.\n\nIf useIPVHosts is enabled, then the parameter \"host\" of the\norg.apache.tomcat.util.http.mapper.map()-method is a MessageBytes-Object of the\ntype T_BYTES. The method MessageBytes.toChars()-method is called. But this\nmethod exists, if the charbuffer is already filled.\n\nAnd in deed, the char-buffer is already filled. While the byte-buffer contains\nthe value \"host1\", the char-buffer may still contain the value \"host2\" because\nthe MessageBytes objects are reused. And instead of converting the\nbyte-buffer-value \"host1\" to chars, the old value \"host2\" is used. This resulted\nin the bug.\n\nSo the following patch fixes the problem.\n\n\nWith your permission, i would like to clean up the class MessageBytes.\nIt really needs it - IMHO.",
      "Created attachment 19659\npatch for this bug\n\nThe patch should apply cleanly to Tomcat 6.0.10",
      "I discovered, that calling byteC.recycle() also resets the Encoding that might\nhave been set. But actually the setEncoding() method is used nowhere.\nAnd calling byteC.reset() doesn't work, because the reset()-method leaves the\nByteChunk in an illegal state:  the array-pointer is set to null, but the\ninternal \"isSet\" which controlls the result of isNull() is not reset to false.\n\nI'm quite unhappy with the class MessageBytes. For example setInt/setLong also\nforget to clear the char-buffer. toBytes() ignores the charset. In many cases i\ndiscovered strange handeling of non-ASCII characters. So i don't aim to clean it\nup. There are too many side-effects that might be hurt by any modification.",
      "-1 for the patch. If the problem exists (I really doubt it), a better solution\nwill have to be found.",
      "(In reply to comment #15)\n> -1 for the patch. If the problem exists (I really doubt it), a better solution\n> will have to be found.\n\nSimply one question: Why?\nsetBytes() invalidates everything - except the value within charC is kept.\n\nAnyway: there might be one missing recycle call somewhere. I'm already looking\nfor it.",
      "So in org.apache.coyote.Request.recylce(), this.localNameMB.recycle() is not\ncalled. If i add that call, the problem is gone too (my first patch has been\nreverted before testing).\n\nThe problem is: remoteAddrMB.recycle(), remoteHostMB.recycle(),\nlocalAddrMB.recycle() is also not called. And i have no clue why not or is it\nshould actually be called.\n\n\nAnyway: At least localNameMB gets reused without being recycled. So the internal\ncharC contains an old value. setBytes() doesn't clear internal the charC-cache.\ntoChars() reuses the old value. Hence the bug.\n\n\nI admit, that the semantics of the MessageBytes class are a ridle to me. I don't\nknow, why setBytes() shouldn't invalidate the charC cache (even though it\ninvalidates all other cached values).\nSomebody please explain the semantics of this class to me! And decide, whether\nsetBytes() should clear charC, or not.",
      "Additional information:\n\nthe value of localNameMB is set in AjpProcessor.prepareRequest() (line 645) by\ncalling \"requestHandlerMessage.getBytes(request.localName())\". This getBytes\nmethod calls setBytes() of localNameMB.\n\nAbove that line, remoteAddrMB and remoteHostMB are also set with the same\nmethod. And they also might not have been recycled. I don't know for sure.",
      "(In reply to comment #17)\n> And decide, whether setBytes() should clear charC, or not.\n\nIt seems you're eager to contribute and stuff, and I think that's good, but if I\nsaid -1 to your patch, this means the answer to this question is \"no\". This will\ncause problems, and is also inefficient.\n\nI think this is a special case with AJP, where recycle should possibly be called\non the localName MessageBytes before reading the localName field (it should be\nfairly explicit that the localName/Addr are otherwise never recycled in the\nRequest object). This is indeed a special case with the IP vhost feature (which\nIMO is not a very good feature, but it's another story).",
      "Do you understand, why we need to recycle the localName?\n(short reason: two ajp-requests with different localName over same AJP connection)\n\n\nSo i have the feeling, that you want this fix to be AJP specific.\nI will try to fix it in that way.\n\nI tried to fix AjpProcessor/AjpAprProcessor. But the fix only worked, when i did\nit in JkCoyoteHandler. I simply changed the code from\n  request.recycle();\nto\n  request.recycle();\n  request.localName().recycle();\n\n\nI don't feel well leaving the other 3 fields (remoteAddr, remoteHost, localAddr)\nunrecycled. Somehow i feel, like this issue also applies to the other fields.\nBut i don't have enough knowledge to be sure. So i leave this up to you.\n\n\nNow i will attach a new patch. Maybe you like it :-)",
      "Created attachment 19660\nnew patch",
      "I've committed a more general fix for the JK Connector (i.e. \nJkCoyoteHandler).  I can port it to the APR and AJP Connectors if/when Remy \nand Mladen doen't veto it.",
      "> I've committed a more general fix for the JK Connector (i.e. \n> JkCoyoteHandler).  I can port it to the APR and AJP Connectors if/when Remy \n> and Mladen doen't veto it.\n\nThanks a lot!\n\nI took a look at your commits. I think, the JK Connector is fixed now. I will\ntest it soon. (At the moment, i don't have much time).",
      "(In reply to comment #23)\n> I took a look at your commits. I think, the JK Connector is fixed now. I will\n> test it soon. (At the moment, i don't have much time).\n\nI ran my tests, and yes: it's fixed.\n\nSweet!",
      "So William has made a start. His patch works, and could be ported to the other 2\nconnectors.\n\nBut i think he's waiting for some reaction by Remy and Mladen.\n(see comment #22)\n\nLet's get this done, so this can be marked fixed.",
      "I think this is as fixed as it's ever going to get (and the connectors have moved on a lot since this was raised)."
    ],
    "creation_ts": "2005-08-12T05:08:52Z",
    "fixes": [
      36155
    ]
  },
  {
    "id": 67666,
    "summary": "TLSCertificateReloadListener does not detect all certificates to reload",
    "description": "Tested with 9.0.82-dev, but I guess this happens on all versions\n\nCreated one certificate:\nopenssl req -x509 -newkey rsa:4096 -keyout key.crt -out cert.crt -sha256 -days 5 -passout file:key-password\nopenssl pkcs12 -export -in cert.crt -inkey key.crt -out keystore.p12 -name \"localhost\" -passin file:key-password -passout file:keystore-password\n\nDeclared in server.xml:\n<Listener className=\"org.apache.catalina.security.TLSCertificateReloadListener\" checkPeriod=\"120\" daysBefore=\"360\" />\n\nand \n\n    <Connector port=\"20001\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\"\n               maxParameterCount=\"1000\"\n               sslImplementationName=\"org.apache.tomcat.util.net.jsse.JSSEImplementation\">\n        <SSLHostConfig>\n            <Certificate certificateKeyFile=\"conf/certs-localhost/key.crt\"\n                         certificateFile=\"conf/certs-localhost/cert.crt\"\n                         certificateChainFile=\"conf/cacerts.crt\"\n                         type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\n    <Connector port=\"20002\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\"\n               maxParameterCount=\"1000\"\n               sslImplementationName=\"org.apache.tomcat.util.net.jsse.JSSEImplementation\">\n        <SSLHostConfig>\n            <Certificate certificateKeystoreFile=\"conf/certs-localhost/keystore.p12\"\n                         certificateKeyAlias=\"localhost\"\n                         type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\n    <Connector port=\"20003\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\"\n               maxParameterCount=\"1000\"\n               sslImplementationName=\"org.apache.tomcat.util.net.openssl.OpenSSLImplementation\">\n        <SSLHostConfig>\n            <Certificate certificateKeyFile=\"conf/certs-localhost/key.crt\"\n                         certificateFile=\"conf/certs-localhost/cert.crt\"\n                         certificateChainFile=\"conf/cacerts.crt\"\n                         type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\n    <Connector port=\"20004\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\"\n               maxParameterCount=\"1000\"\n               sslImplementationName=\"org.apache.tomcat.util.net.openssl.OpenSSLImplementation\">\n        <SSLHostConfig>\n            <Certificate certificateKeystoreFile=\"conf/certs-localhost/keystore.p12\"\n                         certificateKeyAlias=\"localhost\"\n                         type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\n    <Connector port=\"30001\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\"\n               maxParameterCount=\"1000\">\n        <SSLHostConfig>\n            <Certificate certificateKeyFile=\"conf/certs-localhost/key.crt\"\n                         certificateFile=\"conf/certs-localhost/cert.crt\"\n                         certificateChainFile=\"conf/cacerts.crt\"\n                         type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\n    <Connector port=\"30002\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\"\n               maxParameterCount=\"1000\">\n        <SSLHostConfig>\n            <Certificate certificateKeystoreFile=\"conf/certs-localhost/keystore.p12\"\n                         certificateKeyAlias=\"localhost\"\n                         type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\nStarting Tomcat:\n10-Oct-2023 20:21:25.310 INFORMATION [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"https-jsse-nio-20001\"]\n10-Oct-2023 20:21:25.802 SCHWERWIEGEND [main] org.apache.catalina.util.LifecycleBase.handleSubClassException Failed to initialize component [Connector[\"https-jsse-nio-20001\"]]\n        org.apache.catalina.LifecycleException: Protocol handler initialization failed\n                at org.apache.catalina.connector.Connector.initInternal(Connector.java:1011)\n                at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:127)\n                at org.apache.catalina.core.StandardService.initInternal(StandardService.java:554)\n                at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:127)\n                at org.apache.catalina.core.StandardServer.initInternal(StandardServer.java:1039)\n                at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:127)\n                at org.apache.catalina.startup.Catalina.load(Catalina.java:724)\n                at org.apache.catalina.startup.Catalina.load(Catalina.java:746)\n                at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n                at java.base/java.lang.reflect.Method.invoke(Method.java:578)\n                at org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:307)\n                at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:477)\n        Caused by: java.lang.IllegalArgumentException: PBE parameter parsing error: expecting the object identifier for AES cipher\n                at org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:107)\n                at org.apache.tomcat.util.net.AbstractJsseEndpoint.initialiseSsl(AbstractJsseEndpoint.java:71)\n                at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:236)\n                at org.apache.tomcat.util.net.AbstractEndpoint.bindWithCleanup(AbstractEndpoint.java:1326)\n                at org.apache.tomcat.util.net.AbstractEndpoint.init(AbstractEndpoint.java:1339)\n                at org.apache.coyote.AbstractProtocol.init(AbstractProtocol.java:654)\n                at org.apache.coyote.http11.AbstractHttp11Protocol.init(AbstractHttp11Protocol.java:75)\n                at org.apache.catalina.connector.Connector.initInternal(Connector.java:1009)\n                ... 11 more\n        Caused by: java.io.IOException: PBE parameter parsing error: expecting the object identifier for AES cipher\n                at java.base/com.sun.crypto.provider.PBES2Parameters.parseES(PBES2Parameters.java:324)\n                at java.base/com.sun.crypto.provider.PBES2Parameters.engineInit(PBES2Parameters.java:240)\n                at java.base/java.security.AlgorithmParameters.init(AlgorithmParameters.java:311)\n                at java.base/sun.security.x509.AlgorithmId.decodeParams(AlgorithmId.java:149)\n                at java.base/sun.security.x509.AlgorithmId.<init>(AlgorithmId.java:131)\n                at java.base/sun.security.x509.AlgorithmId.parse(AlgorithmId.java:416)\n                at java.base/javax.crypto.EncryptedPrivateKeyInfo.<init>(EncryptedPrivateKeyInfo.java:105)\n                at org.apache.tomcat.util.net.jsse.PEMFile$Part.toPrivateKey(PEMFile.java:245)\n                at org.apache.tomcat.util.net.jsse.PEMFile.<init>(PEMFile.java:178)\n                at org.apache.tomcat.util.net.jsse.PEMFile.<init>(PEMFile.java:107)\n                at org.apache.tomcat.util.net.SSLUtilBase.getKeyManagers(SSLUtilBase.java:355)\n                at org.apache.tomcat.util.net.SSLUtilBase.createSSLContext(SSLUtilBase.java:268)\n                at org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:105)\n                ... 18 more\n10-Oct-2023 20:21:25.806 INFORMATION [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"https-jsse-nio-20002\"]\n10-Oct-2023 20:21:25.953 INFORMATION [main] org.apache.tomcat.util.net.AbstractEndpoint.logCertificate Connector [https-jsse-nio-20002], TLS virtual host [_default_], certificate type [RSA] configured from keystore [conf/certs-localhost/keystore.p12] using alias [localhost] with trust store [null]\n10-Oct-2023 20:21:25.986 INFORMATION [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"https-openssl-nio-20003\"]\n10-Oct-2023 20:21:26.013 INFORMATION [main] org.apache.tomcat.util.net.openssl.OpenSSLUtil.getKeyManagers The certificate [conf/certs-localhost/cert.crt] or its private key [conf/certs-localhost/key.crt] could not be processed using a JSSE key manager and will be given directly to OpenSSL\n10-Oct-2023 20:21:26.117 INFORMATION [main] org.apache.tomcat.util.net.AbstractEndpoint.logCertificate Connector [https-openssl-nio-20003], TLS virtual host [_default_], certificate type [RSA] configured from key [conf/certs-localhost/key.crt], certificate [conf/certs-localhost/cert.crt] and certificate chain [conf/cacerts.crt] with trust store [null]\n10-Oct-2023 20:21:26.119 INFORMATION [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"https-openssl-nio-20004\"]\n10-Oct-2023 20:21:26.141 INFORMATION [main] org.apache.tomcat.util.net.AbstractEndpoint.logCertificate Connector [https-openssl-nio-20004], TLS virtual host [_default_], certificate type [RSA] configured from keystore [conf/certs-localhost/keystore.p12] using alias [localhost] with trust store [null]\n10-Oct-2023 20:21:26.143 INFORMATION [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"https-openssl-apr-30001\"]\n10-Oct-2023 20:21:26.157 INFORMATION [main] org.apache.tomcat.util.net.openssl.OpenSSLUtil.getKeyManagers The certificate [conf/certs-localhost/cert.crt] or its private key [conf/certs-localhost/key.crt] could not be processed using a JSSE key manager and will be given directly to OpenSSL\n10-Oct-2023 20:21:26.209 INFORMATION [main] org.apache.tomcat.util.net.openssl.OpenSSLUtil.getKeyManagers The certificate [conf/certs-localhost/cert.crt] or its private key [conf/certs-localhost/key.crt] could not be processed using a JSSE key manager and will be given directly to OpenSSL\n10-Oct-2023 20:21:26.210 INFORMATION [main] org.apache.tomcat.util.net.AbstractEndpoint.logCertificate Connector [https-openssl-apr-30001], TLS virtual host [_default_], certificate type [RSA] configured from key [conf/certs-localhost/key.crt], certificate [conf/certs-localhost/cert.crt] and certificate chain [conf/cacerts.crt] with trust store [null]\n10-Oct-2023 20:21:26.212 INFORMATION [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"https-openssl-apr-30002\"]\n10-Oct-2023 20:21:26.248 INFORMATION [main] org.apache.tomcat.util.net.AbstractEndpoint.logCertificate Connector [https-openssl-apr-30002], TLS virtual host [_default_], certificate type [RSA] configured from keystore [conf/certs-localhost/keystore.p12] using alias [localhost] with trust store [null]\n10-Oct-2023 20:21:26.250 INFORMATION [main] org.apache.catalina.startup.Catalina.load Server initialization in [2178] milliseconds\n\nWe will ignore 20001 for now because Java does not support DES-encrypted private keys, only AES.\n\nWaiting for the listener:\n10-Oct-2023 20:35:11.441 INFORMATION [Catalina-utility-1] org.apache.tomcat.util.net.AbstractEndpoint.logCertificate Connector [https-jsse-nio-20002], TLS virtual host [_default_], certificate type [RSA] configured from keystore [conf/certs-localhost/keystore.p12] using alias [localhost] with trust store [null]\n10-Oct-2023 20:35:11.442 INFORMATION [Catalina-utility-1] org.apache.catalina.security.TLSCertificateReloadListener.checkCertificatesForRenewal [Connector[\"https-jsse-nio-20002\"]], TLS virtual host [_default_] reloaded TLS configuration\n10-Oct-2023 20:35:11.442 WARNUNG [Catalina-utility-1] org.apache.catalina.security.TLSCertificateReloadListener.checkCertificatesForRenewal [Connector[\"https-jsse-nio-20002\"]], TLS virtual host [_default_] with name [CN=localhost, OU=IN IT IN, O=Siemens, L=Berlin, ST=Berlin, C=DE] that expires on [2023-10-15T17:20:55Z] is overdue for renewal\n10-Oct-2023 20:35:11.456 INFORMATION [Catalina-utility-1] org.apache.tomcat.util.net.AbstractEndpoint.logCertificate Connector [https-openssl-nio-20004], TLS virtual host [_default_], certificate type [RSA] configured from keystore [conf/certs-localhost/keystore.p12] using alias [localhost] with trust store [null]\n10-Oct-2023 20:35:11.457 INFORMATION [Catalina-utility-1] org.apache.catalina.security.TLSCertificateReloadListener.checkCertificatesForRenewal [Connector[\"https-openssl-nio-20004\"]], TLS virtual host [_default_] reloaded TLS configuration\n10-Oct-2023 20:35:11.457 WARNUNG [Catalina-utility-1] org.apache.catalina.security.TLSCertificateReloadListener.checkCertificatesForRenewal [Connector[\"https-openssl-nio-20004\"]], TLS virtual host [_default_] with name [CN=localhost, OU=IN IT IN, O=Siemens, L=Berlin, ST=Berlin, C=DE] that expires on [2023-10-15T17:20:55Z] is overdue for renewal\n10-Oct-2023 20:35:11.476 INFORMATION [Catalina-utility-1] org.apache.tomcat.util.net.AbstractEndpoint.logCertificate Connector [https-openssl-apr-30002], TLS virtual host [_default_], certificate type [RSA] configured from keystore [conf/certs-localhost/keystore.p12] using alias [localhost] with trust store [null]\n10-Oct-2023 20:35:11.476 INFORMATION [Catalina-utility-1] org.apache.catalina.security.TLSCertificateReloadListener.checkCertificatesForRenewal [Connector[\"https-openssl-apr-30002\"]], TLS virtual host [_default_] reloaded TLS configuration\n10-Oct-2023 20:35:11.477 WARNUNG [Catalina-utility-1] org.apache.catalina.security.TLSCertificateReloadListener.checkCertificatesForRenewal [Connector[\"https-openssl-apr-30002\"]], TLS virtual host [_default_] with name [CN=localhost, OU=IN IT IN, O=Siemens, L=Berlin, ST=Berlin, C=DE] that expires on [2023-10-15T17:20:55Z] is overdue for renewal\n\nConnectors for ports 20003 and 30001 do not appear because they use at some point \"X509KeyManager x509KeyManager = certificate.getCertificateKeyManager();\" returns null, thus \"X509Certificate[] certificates = sslContext.getCertificateChain(alias);\" is null and certificatesExpiringBefore() returns an empty set.\n\nI assume that the code needs refinement, I guess that renew bots will create OpenSSL-style cert and key this listener won't be usable for people at the moment.",
    "comments": [
      "Before reload:\n$ for port in 20001 20002 20003 20004 30001 30002 ; do echo $port; echo -n Q | openssl s_client -connect localhost:$port 2>/dev/null | openssl x509 -noout -dates; done\n20001\nnotBefore=Oct 11 07:32:31 2023 GMT\nnotAfter=Oct 16 07:32:31 2023 GMT\n20002\nnotBefore=Oct 11 07:32:31 2023 GMT\nnotAfter=Oct 16 07:32:31 2023 GMT\n20003\nnotBefore=Oct 11 07:32:31 2023 GMT\nnotAfter=Oct 16 07:32:31 2023 GMT\n20004\nnotBefore=Oct 11 07:32:31 2023 GMT\nnotAfter=Oct 16 07:32:31 2023 GMT\n30001\nnotBefore=Oct 11 07:32:31 2023 GMT\nnotAfter=Oct 16 07:32:31 2023 GMT\n30002\nnotBefore=Oct 11 07:32:31 2023 GMT\nnotAfter=Oct 16 07:32:31 2023 GMT\n\nAfter reload:\nosipovmi@md2pcvtc MINGW64 ~\n$ for port in 20001 20002 20003 20004 30001 30002 ; do echo $port; echo -n Q | openssl s_client -connect localhost:$port 2>/dev/null | openssl x509 -noout -dates; done\n20001\nnotBefore=Oct 11 08:17:18 2023 GMT\nnotAfter=Oct 10 08:17:18 2024 GMT\n20002\nnotBefore=Oct 11 08:17:18 2023 GMT\nnotAfter=Oct 10 08:17:18 2024 GMT\n20003\nnotBefore=Oct 11 07:32:31 2023 GMT\nnotAfter=Oct 16 07:32:31 2023 GMT\n20004\nnotBefore=Oct 11 08:17:18 2023 GMT\nnotAfter=Oct 10 08:17:18 2024 GMT\n30001\nnotBefore=Oct 11 08:17:18 2023 GMT\nnotAfter=Oct 10 08:17:18 2024 GMT\n30002\nnotBefore=Oct 11 08:17:18 2023 GMT\nnotAfter=Oct 10 08:17:18 2024 GMT\n\nVery weird...I certain this needs more testing/anaylsis...",
      "The fix for BZ 67667 addressed most of the errors. The remaining issue has been fixed.\n\nReloading isn't going to work for PEM files that are passed directly to OpenSSL although with BZ 67667 those should be few and far between. And we should be able to add handling for them once the PEM format (primarily the KDF and cipher) are known. When reloading isn't going to work, a warning will be logged as there are a few management/monitoring features that won't work.\n\nFixed in:\n- main for 11.0.0-M13 and onwards\n- 10.1.x for 10.1.16 and onwards\n- 9.0.x  for 9.0.83 and onwards\n- 8.5.x for 8.5.96 and onwards",
      "Sorry, wrong bug reference. It was bug 67675.",
      "Just build Tomcat from bec7a51d7fc3fb913c755b258169d1816b77bea5. I can confirm that is works now."
    ],
    "creation_ts": "2023-10-10T18:40:41Z",
    "fixes": [
      67666
    ]
  },
  {
    "id": 66554,
    "summary": "tomcat shutdown error in log",
    "description": "Good morning,\n\nibm i platform, but I think on windows or linux there would be the same error.\n\nI only encounter the problem on one application and not the others, when tomcat stops an error is written in the log, I do not encounter any problem with tomcat 9.10\n\nerror : \n\n04-Apr-2023 14:27:08.822 AVERTISSEMENT [http-nio-81-exec-7] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads L'application web [planning] semble avoir d\u00e9marr\u00e9 un thread nomm\u00e9 [SeedGenerator Thread] mais ne l'a pas arr\u00eat\u00e9, ce qui va probablement cr\u00e9er une fuite de m\u00e9moire ; la trace du thread est : \n java.base/java.lang.Object.wait(Native Method)\n java.base/java.lang.Object.wait(Object.java:190)\n java.base/sun.security.provider.SeedGenerator$ThreadedSeedGenerator.run(SeedGenerator.java:332)\n java.base/java.lang.Thread.run(Thread.java:839)\n\nCordially.",
    "comments": [
      "It's mostly a warning (which can be disabled). This thread was apparently started while the context CL was set to the app's, and so that causes a leak if you reload the said app. This can happen if somehow the random has not been used before going into the app and it uses it first, and if the internal seed provider is being used.\n\nI don't quite understand how that can happen since the default manager will initialize and use the session id generator on start. The thread should be started at that point. Please provide the Tomcat configuration used (server.xml).\n\n\"I think on windows or linux there would be the same error\"\nActually, it would be far more likely to rely on OS provided features in that case (you can read the JDK sources), so no I don't think the issue will occur.",
      "Created attachment 38531\nserver.xml",
      "(In reply to SESAME from comment #2)\n> Created attachment 38531 [details]\n> server.xml\n\nThanks. So after reviewing it, the issue is caused by the fact that the session id generator is always created during start in the webapp classloader context (other platforms won't see any issue since they would simply use the system seed, it seems yours would not and creates that seed thread). While it would be possible to make the context switch more precise, it is mostly a waste of time IMO.\n\nThe most reasonable option would be to init this ahead of time. Maybe something like getting some bytes from a Random in StandardServer.initInternal, or something like that, would be the best plan.",
      "This can be initialized early by using the SecureRandom to generate a seed. I added an initSeedGenerator attribute on the JreMemoryLeakPreventionListener (set it to true) to do that. I don't know exactly which platforms would need it. Let me know if this is not fixed.\n\nThe change will be in 11M5, 10.1.8, 9.0.74 and 8.5.88.",
      "Thank you for your answer, I will wait for the release of version 9.0.74, do you have a date ?",
      "Please do not re-open fixed issues.",
      "(In reply to SESAME from comment #5)\n> Thank you for your answer, I will wait for the release of version 9.0.74, do\n> you have a date ?\n\nHave a look at the release history for Tomcat 9 and set your expectations accordingly."
    ],
    "creation_ts": "2023-04-05T07:18:00Z",
    "fixes": [
      66554
    ]
  },
  {
    "id": 69447,
    "summary": "Tomcat 9.0.97 fails to load classes due to the newly added ConcurrentLruCache",
    "description": "# Reproduction # \n1. Tomcat 9.0.97 with enabled notFoundClassResourceCache\n2. The webapp adds classes/jars (an externalRepostitory) by calling WebappClassLoaderBase.addURL() that are outside of the WEB-INF/classes-folder\n3. The webapp tries (and fails) to load a class from an externalRepostitory when using WebappClassLoaderBase.getResourceAsStream()\n\n## Expected behavior ## \nWebappClassLoaderBase checks externalRepostitories before marking the class as \"cannot be found\" \n\n## Actual behavior ## \nWebappClassLoaderBase marks a class as \"cannot be found\" after only looking in the WEB-INF/classes folder\n\n# Analysis # \nWhen WebappClassLoaderBase.findClass() is called, it tries to load the class by calling WebappClassLoaderBase.findClassInternal(). \nWebappClassLoaderBase.findClassInternal() only looks for classes in /WEB-INF/classes. When the requested class is not found by findClassInternal(), the class is erroneously added to notFoundClassResources before checking externalRepostitories. \n\nThe bug was introduced in this commit: https://github.com/apache/tomcat/commit/3dbe41a",
    "comments": [
      "Do NOT add Tomcat committers to the CC list of ANY Tomcat bug.\n\nTomcat committers automatically get all updates to a Bugzilla issue via the Tomcat dev list.\n\nAdding Tomcat committers to the explicit CC list of any bug will be treated as abuse and is likely to result in your account being blocked.",
      "You can work around this by setting notFoundClassResourceCacheSize=\"0\" on the Context.",
      "Fixed in:\n- 11.0.x for 11.0.2 onwards\n- 10.1.x for 10.1.34 onwards\n-  9.0.x for  9.0.98 onwards",
      "Thank you :)\n\nI will test your patch when tomcat 9.0.98 is released.",
      "I can also confirm, that the workaround works fine for 9.0.97. Thanks!"
    ],
    "creation_ts": "2024-11-15T14:43:40Z",
    "fixes": [
      69447
    ]
  },
  {
    "id": 63627,
    "summary": "Implement more fine-grained handling in RealmBase#authenticate(GSSContext, boolean)",
    "description": "We maintain a custom RealmBase#authenticate(GSSContext, boolean) implementation because the given one as a few shortcomings I'd like to address this in a PR:\n\n* Move stripping right before #getPrincipal() to log a fully qualified GSS name\n* Issue a warning instead of a debug if #getDelegCred() has failed. Justification: the context indicates that there is a credential and the developer has configured to store them, but this failed. A debug will be unnoticed in a production system. The admin should see this and take action.\n* If storeCreds is requested, but the credentials arent't log this in debug for traceability.\n\nCustom impl: http://tomcatspnegoad.sourceforge.net/xref/net/sf/michaelo/tomcat/realm/ActiveDirectoryRealm.html#L229",
    "comments": [
      "Fixed in:\n- master for 9.0.23 onwards\n- 8.5.x for 8.5.44 onwards\n- 7.0.x for 7.0.97 onwards"
    ],
    "creation_ts": "2019-08-02T11:37:29Z",
    "fixes": [
      63627
    ]
  },
  {
    "id": 65785,
    "summary": "HTTP/2.0 non US-ASCII header names should be rejected",
    "description": "Issue summary\n=============\n\nTomcat does not follows HTTP/2.0 header name specification : Header names should be US-ASCII encoded but Tomcat : \n- does not check their encoding, \n- allows non US-ASCII encoded\n- corrupts non US-ASCII characters by suffixing them with \"0xff\", example : \"0xf0\" -> \"0xf0 0xff\"\n\nExpected behaviour would be : to reject the HTTP/2.0 request as ill-formatted with a HTTP 400 error code.\n\nThe specifications\n==================\n\nHTTP/2.0\n--------\n\nThe HTTP/2.0 specification (https://datatracker.ietf.org/doc/html/rfc7540#section-8.1.2) says: \n> Just as in HTTP/1.x, header field names are strings of ASCII\n> characters that are compared in a case-insensitive fashion.  However,\n> header field names MUST be converted to lowercase prior to their\n> encoding in HTTP/2.  A request or response containing uppercase\n> header field names MUST be treated as malformed (Section 8.1.2.6).\n\nHTTP/1.1\n--------\n\nThe HTTP/1.1 specification () says : \n> A recipient MUST parse an HTTP message as a sequence of octets in an\n> encoding that is a superset of US-ASCII [USASCII].  Parsing an HTTP\n> message as a stream of Unicode characters, without regard for the\n> specific encoding, creates security vulnerabilities due to the\n> varying ways that string processing libraries handle invalid\n> multibyte character sequences that contain the octet LF (%x0A).\n\nHPACK\n-----\n\nHPACK specification (https://www.rfc-editor.org/rfc/rfc7541.html#section-1.1) says:\n> The format defined in this specification treats a list of header\n> fields as an ordered collection of name-value pairs that can include\n> duplicate pairs.  Names and values are considered to be opaque\n> sequences of octets, and the order of header fields is preserved\n> after being compressed and decompressed.\n\n\nProblem description\n===================\n\nTomcat does not reject non-ascii HTTP/2.0 header names, and its HPACK implementation casts the received bytes into chars so that \"0xf0\" becomes \"0xf0 0xff\".\nIt looks like the HPACK algorithm corrupts the header name, and the HTTP/2.0 implementation is then not able to reject this invalid header value (an US-ASCII character is coded with 7 bits, so the first bit MUST be always 0 and obviously \"0xf0\" has its first bit to 1).\n\nAs seen in the previous parts, HPACK algorithm should treat its input as \"opaque sequence of octets\" and thus should not try to convert them to String directly without knowing their encoding.\nThen the HTTP/2.0 implementation should verify that the header names bytes are using only 7 bits (and thus can be safely decoded as ASCII characters).\n\n\nHTTP/1.1 comparison\n===================\n\nTomcat handles an invalid HTTP/1.1 header correctly, returning a HTTP 400 with this message : \"The HTTP header line [0xf0: aa] does not conform to RFC 7230 and has been ignored.\"\n\n\nComparison with other products\n==============================\n\n- Netty (tested with 4.1.72) handles it badly too, but the header name \"0xf0\" is corrupted into \"0x00 0xf0\" (which is different from what tomcat does : \"0xf0 0xff\")\n\nReproducer\n==========\n- A fresh install of Tomcat (tested with 9 but I guess it will work out with any version of tomcat handling HTTP/2.0)\n- the HTTP/2.0 connector configured (`<UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />`)\n- A simple servlet\n- run this command : `$ curl -v http://localhost:8080/static --http2-prior-knowledge -H \"\ufdd0[U+1F631]\ufdd1: aa\"`\nThe request should be rejected with HTTP 400 error because the header name is not US-ASCII encoded.",
    "comments": [
      "Fixed in:\n- 10.1.x for 10.1.0-M9 onwards\n- 10.0.x for 10.0.15 onwards\n- 9.0.x for 9.0.57 onwards\n- 8.5.x for 8.5.74 onwards",
      "Thanks a lot for this quick answer (and fix !)\n\nSince I had hard time to find the changes in github an in case someone is interested in reading it, here is the associated commit : https://github.com/apache/tomcat/commit/d909c709b639e9670edce2581293afb9626d7b5e"
    ],
    "creation_ts": "2022-01-06T11:35:45Z",
    "fixes": [
      65785
    ]
  },
  {
    "id": 55799,
    "summary": "[websocket] Stability issues when concurrently sending large messages",
    "description": "Created attachment 31055\nTest case (modifications to the Chat example)\n\nHi,\n\na thread on the Users List [1] described that problems can occur when sending large messages over a WebSocket connection using getBasicRemote().sendText(String).\n\nThe ChatAnnotation class does not synchronize when using this method, which means that multiple threads could call RemoteEndpoint.Basic#sendText() concurrently.\n\nThe JavaDoc of RemoteEndpoint.Basic says:\n\n\"If the websocket connection underlying this RemoteEndpoint is busy sending a message when a call is made to send another one, for example if two threads attempt to call a send method concurrently, or if a developer attempts to send a new message while in the middle of sending an existing one, the send method called while the connection is already busy may throw an IllegalStateException.\"\n\n(I thought I had read earlier that the implementation should synchronize calls to methods of RemoteEndpoint.Basic instead of throwing an ISE, but maybe that has changed).\n\n\nWhen sending large Messages over Websocket using RemoteEndpoint.Basic from different threads without or with synchronization, some problems happen like:\na) The WebSocket connection is suddenly closed (I guess the browser\n   actually aborts the connections due to data corruption or Timeout errors,\n   but I have not examined the raw data sent over TCP)\nb) Various Exceptions occur (see below)\nc) Sometimes when I open the chat.xhtml example in my browser, it shows what\n   seems to be a raw WebSocket response instead of the .xhtml file (see\n   added screenshots)\n\nThese issues also happen after synchronizing calls to RemoteEndpoint.Basic#sendText(), but are then harder to reproduce.\n\n\n\nTo reproduce: \n1) Checkout Tomcat 8 trunk (r1543467) and apply the attached patch. It applies some modifications to the Chat Websocket Example, so that the Javascript sends messages in a regular interval (50 ms), and the ChatAnnotation modifies the message to be 256 times as large as the original message, and sends it back using session.getBasicRemote()#sendText(msg). \n\n2) Build Tomcat and run it on a Windows machine (I used Windows 8.1 x64, Java 1.7.0_45 x64), using the NIO HTTP connector (default configuration).\n\n3) Open Firefox and IE 11. With both browsers, open the Chat example (http://localhost:8080/examples/websocket/chat.xhtml).\n\n4) Repeat the following actions in a regular interval:\n   a) Wait several seconds (it might be that Tomcat already closes one of\n      the two WebSocket connections in that time).\n   b) On one of the browsers (e.g. IE), press F5 several times.\n\n5) After some time, you can see that in one of the browsers, the WebSocket connection is suddenly closed. Tomcat will show one or more of the following exceptions (I think the IOException and ClosedChannelException are expected if the browser aborts the connection):\n\n\n19-Nov-2013 23:18:39.809 SEVERE [http-nio-8080-ClientPoller-0] org.apache.tomcat.util.net.NioEndpoint.processSocket Error allocating socket processor\n java.lang.NullPointerException\n\tat org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:624)\n\tat org.apache.tomcat.util.net.NioEndpoint$Poller.processKey(NioEndpoint.java:1165)\n\tat org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1122)\n\tat java.lang.Thread.run(Thread.java:744)\n\n\n19-Nov-2013 23:32:16.601 SEVERE [http-nio-8080-exec-3] websocket.chat.ChatAnnotation.onError Chat Error: java.nio.channels.ClosedChannelException\n java.nio.channels.ClosedChannelException\n\tat sun.nio.ch.SocketChannelImpl.ensureReadOpen(SocketChannelImpl.java:252)\n\tat sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:295)\n\tat org.apache.tomcat.util.net.NioChannel.read(NioChannel.java:136)\n\tat org.apache.coyote.http11.upgrade.NioServletInputStream.fillReadBuffer(NioServletInputStream.java:136)\n\tat org.apache.coyote.http11.upgrade.NioServletInputStream.doIsReady(NioServletInputStream.java:49)\n\tat org.apache.coyote.http11.upgrade.AbstractServletInputStream.isReady(AbstractServletInputStream.java:62)\n\tat org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:44)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:192)\n\tat org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:180)\n\tat org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:95)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:640)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\n\n\n19-Nov-2013 23:32:19.658 SEVERE [http-nio-8080-exec-2] websocket.chat.ChatAnnotation.onError Chat Error: java.lang.IllegalArgumentException: java.lang.reflect.InvocationTargetException\n java.lang.IllegalArgumentException: java.lang.reflect.InvocationTargetException\n\tat org.apache.tomcat.websocket.pojo.PojoMessageHandlerWholeBase.onMessage(PojoMessageHandlerWholeBase.java:82)\n\tat org.apache.tomcat.websocket.WsFrameBase.sendMessageText(WsFrameBase.java:369)\n\tat org.apache.tomcat.websocket.WsFrameBase.processDataText(WsFrameBase.java:468)\n\tat org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:272)\n\tat org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:116)\n\tat org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:55)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:192)\n\tat org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:180)\n\tat org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:95)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:640)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.GeneratedMethodAccessor38.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.apache.tomcat.websocket.pojo.PojoMessageHandlerWholeBase.onMessage(PojoMessageHandlerWholeBase.java:80)\n\t... 15 more\nCaused by: java.nio.charset.CoderMalfunctionError: java.nio.BufferOverflowException\n\tat java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:565)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.write(WsRemoteEndpointImplBase.java:624)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendPartialString(WsRemoteEndpointImplBase.java:197)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendString(WsRemoteEndpointImplBase.java:154)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointBasic.sendText(WsRemoteEndpointBasic.java:37)\n\tat websocket.chat.ChatAnnotation.broadcast(ChatAnnotation.java:96)\n\tat websocket.chat.ChatAnnotation.incoming(ChatAnnotation.java:83)\n\t... 19 more\nCaused by: java.nio.BufferOverflowException\n\tat java.nio.Buffer.nextPutIndex(Buffer.java:513)\n\tat java.nio.HeapByteBuffer.put(HeapByteBuffer.java:163)\n\tat org.apache.tomcat.util.buf.Utf8Encoder.encodeNotHasArray(Utf8Encoder.java:177)\n\tat org.apache.tomcat.util.buf.Utf8Encoder.encodeLoop(Utf8Encoder.java:40)\n\tat java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:561)\n\t... 25 more\n\n\n19-Nov-2013 23:32:23.353 SEVERE [http-nio-8080-exec-10] websocket.chat.ChatAnnotation.onError Chat Error: java.io.IOException: Eine vorhandene Verbindung wurde vom Remotehost geschlossen\n java.io.IOException: Eine vorhandene Verbindung wurde vom Remotehost geschlossen\n\tat sun.nio.ch.SocketDispatcher.read0(Native Method)\n\tat sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:43)\n\tat sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)\n\tat sun.nio.ch.IOUtil.read(IOUtil.java:197)\n\tat sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:379)\n\tat org.apache.tomcat.util.net.NioChannel.read(NioChannel.java:136)\n\tat org.apache.coyote.http11.upgrade.NioServletInputStream.fillReadBuffer(NioServletInputStream.java:136)\n\tat org.apache.coyote.http11.upgrade.NioServletInputStream.doRead(NioServletInputStream.java:80)\n\tat org.apache.coyote.http11.upgrade.AbstractServletInputStream.read(AbstractServletInputStream.java:124)\n\tat org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:46)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:192)\n\tat org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:180)\n\tat org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:95)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:640)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\n\n\nIf you try to press F5, then it might be that the Websocket connection is closed as soon as it was opened, or that the browser doesn't get a response for the request to chat.xhtml.\n\n\n\nNow, add synchronization by modifying ChatAnnotation's broadcast() method:\n\n    private static void broadcast(String msg) {\n        for (ChatAnnotation client : connections) {\n            synchronized (client) {\n                try {\n                    client.session.getBasicRemote().sendText(msg);\n                } catch (Exception e) {\n    \n                }\n            }\n        }\n    }\n\nand repeat the above steps.\n\nNow, if you open chat.xhtml with both IE and Firefox and do nothing, the WebSocket connection will not be closed. Even if you start to repeatedly press F5, most of the time everything will appear normal (besides getting IOExceptions and ClosedChannelExceptions).\n\nHowever, after I tried this several minutes, I still got the problems that the WebSocket connections are closed just after opening it (or after some time), or that the browser didn't get a response to its HTTP request, or that the browser got a raw WebSocket reply instead of the XHTML page reply (see added screenshots).\n\nI also got these exceptions:\n\n20-Nov-2013 00:18:20.037 SEVERE [http-nio-8080-exec-9] websocket.chat.ChatAnnotation.onError Chat Error: java.io.IOException: java.util.concurrent.ExecutionException: java.io.IOException: Key must be cancelled\n java.io.IOException: java.util.concurrent.ExecutionException: java.io.IOException: Key must be cancelled\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:226)\n\tat org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:476)\n\tat org.apache.tomcat.websocket.WsSession.onClose(WsSession.java:439)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.close(WsHttpUpgradeHandler.java:172)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.access$200(WsHttpUpgradeHandler.java:45)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:194)\n\tat org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:180)\n\tat org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:95)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:640)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\nCaused by: java.util.concurrent.ExecutionException: java.io.IOException: Key must be cancelled\n\tat org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:102)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:222)\n\t... 14 more\nCaused by: java.io.IOException: Key must be cancelled\n\tat org.apache.coyote.http11.upgrade.NioServletOutputStream.doWriteInternal(NioServletOutputStream.java:83)\n\tat org.apache.coyote.http11.upgrade.NioServletOutputStream.doWrite(NioServletOutputStream.java:60)\n\tat org.apache.coyote.http11.upgrade.AbstractServletOutputStream.writeInternal(AbstractServletOutputStream.java:118)\n\tat org.apache.coyote.http11.upgrade.AbstractServletOutputStream.write(AbstractServletOutputStream.java:85)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:94)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:81)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:362)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:259)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:217)\n\t... 14 more\n\n\n20-Nov-2013 00:32:53.483 SEVERE [http-nio-8080-exec-3] org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun \n java.lang.NullPointerException\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:593)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\n\n\n20-Nov-2013 00:35:19.333 SEVERE [http-nio-8080-exec-15] org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.destroy Failed to close WebConnection while destroying the WebSocket HttpUpgradeHandler\n java.lang.NullPointerException\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.destroy(WsHttpUpgradeHandler.java:143)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:715)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\n\n\n20-Nov-2013 00:35:19.327 SEVERE [http-nio-8080-exec-15] org.apache.coyote.http11.AbstractHttp11Processor.process Error processing request\n java.lang.IllegalArgumentException\n\tat java.nio.Buffer.position(Buffer.java:236)\n\tat sun.nio.ch.IOUtil.write(IOUtil.java:68)\n\tat sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:487)\n\tat org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:123)\n\tat org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)\n\tat org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:174)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:140)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.addToBB(InternalNioOutputBuffer.java:198)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.commit(InternalNioOutputBuffer.java:178)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:739)\n\tat org.apache.coyote.Response.action(Response.java:180)\n\tat org.apache.coyote.Response.sendHeaders(Response.java:368)\n\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:335)\n\tat org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:290)\n\tat org.apache.catalina.connector.Response.finishResponse(Response.java:411)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:560)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1015)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:642)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\n\n\n\n\n[1] http://markmail.org/message/ee3jch4zj2orltzs",
    "comments": [
      "Created attachment 31056\nScreenshot of FF getting a raw websocket respone (1)",
      "Created attachment 31057\nScreenshot of FF getting a raw websocket respone (2)",
      "Note: When using Google Chrome and when the WebSocket connection fails, Chrome reports one of the following errors in the console:\n\nWebSocket connection to 'ws://localhost:8080/examples/websocket/chat' failed: Status line contains embedded null\n\nWebSocket connection to 'ws://localhost:8080/examples/websocket/chat' failed: Received unexpected continuation frame.",
      "I can see one problem immediately. While the code does check for concurrent messages (which will trigger an IllegalStateException) text messages are converted to bytes before that check in a single buffer. Therefore, multiple threads could access that buffer and that will cause corruption. I'll take a look.",
      "I've hopefully fixed this in trunk. If you can provide some feedback on the fix that would be great.\n\nI'm leaving this open as I have a little clean-up still to do in trunk for this fix and I also want to back-port the changes to 7.0.x.",
      "Created attachment 31060\nUpdated Test case (modifications to the Chat example)\n\nHi Mark,\n\nI updated my working copy of Tomcat 8 trunk to r1543817 and have the changes applied from the attached patch. It modifies the Chat example in the same way as the previous test case (and it changes the catch (IOException e) to catch (Exception e) to also catch ISE, and do not remove a client in this catch block - instead wait for the onClose method to be called).\n\nUnfortunately, even with the fix and the added synchronized() block in the Chat's broadcast() method, I still see the same problems as before (WebSocket connection is closed soon after it is opened, Chrome displays \"Unexpected continuation frame\" error, browser receives raw websocket response instead of the requested chat.xhtml file).\n\nI also got following exceptions (Note: One of the NPEs is probably the same that I once observed with the DrawBoard example and the NIO connector when repeatedly pressing F5):\n\n\nException in thread \"WebSocketServer-localhost-/examples-1\" java.lang.IllegalStateException: Unexpected state. Please report a bug. Message will not be sent because the WebSocket session is currently sending another message\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:272)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.write(WsRemoteEndpointImplBase.java:643)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.onResult(WsRemoteEndpointImplBase.java:653)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.endMessage(WsRemoteEndpointImplBase.java:305)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$EndMessageHandler.onResult(WsRemoteEndpointImplBase.java:453)\n        at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer$OnResultRunnable.run(WsRemoteEndpointImplServer.java:234)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:744)\n\n\n20-Nov-2013 15:25:04.759 SEVERE [http-nio-8080-exec-4] websocket.chat.ChatAnnotation.onError Chat Error: java.lang.NullPointerException\n java.lang.NullPointerException\n\tat org.apache.coyote.http11.upgrade.AbstractServletOutputStream.onWritePossible(AbstractServletOutputStream.java:134)\n\tat org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:97)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:640)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1551)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\n\n\n20-Nov-2013 15:30:49.345 SEVERE [http-nio-8080-ClientPoller-1] org.apache.tomcat.util.net.NioEndpoint.processSocket Error allocating socket processor\n java.lang.NullPointerException\n\tat org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:624)\n\tat org.apache.tomcat.util.net.NioEndpoint$Poller.processKey(NioEndpoint.java:1165)\n\tat org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1122)\n\tat java.lang.Thread.run(Thread.java:744)\n\n\n20-Nov-2013 15:32:33.070 SEVERE [http-nio-8080-exec-5] org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun \n java.lang.NullPointerException\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:593)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\n\n\n20-Nov-2013 15:32:53.378 SEVERE [http-nio-8080-exec-23] org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process Error reading request, ignored\n java.lang.IllegalStateException: Unexpected state. Please report a bug. Message will not be sent because the WebSocket session is currently sending another message\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:272)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.write(WsRemoteEndpointImplBase.java:643)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.onResult(WsRemoteEndpointImplBase.java:653)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.endMessage(WsRemoteEndpointImplBase.java:305)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase$EndMessageHandler.onResult(WsRemoteEndpointImplBase.java:453)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.clearHandler(WsRemoteEndpointImplServer.java:206)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:102)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsWriteListener.onWritePossible(WsHttpUpgradeHandler.java:238)\n\tat org.apache.coyote.http11.upgrade.AbstractServletOutputStream.onWritePossible(AbstractServletOutputStream.java:167)\n\tat org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:97)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:640)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1551)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\n\n\n20-Nov-2013 15:24:55.951 SEVERE [http-nio-8080-exec-9] websocket.chat.ChatAnnotation.onError Chat Error: java.io.IOException: java.util.concurrent.ExecutionException: java.io.IOException: Key must be cancelled\n java.io.IOException: java.util.concurrent.ExecutionException: java.io.IOException: Key must be cancelled\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:245)\n\tat org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:476)\n\tat org.apache.tomcat.websocket.WsSession.onClose(WsSession.java:439)\n\tat org.apache.tomcat.websocket.WsFrameBase.processDataControl(WsFrameBase.java:316)\n\tat org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:270)\n\tat org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:116)\n\tat org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:55)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:192)\n\tat org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:180)\n\tat org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:95)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:640)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\nCaused by: java.util.concurrent.ExecutionException: java.io.IOException: Key must be cancelled\n\tat org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:102)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:241)\n\t... 16 more\nCaused by: java.io.IOException: Key must be cancelled\n\tat org.apache.coyote.http11.upgrade.NioServletOutputStream.doWriteInternal(NioServletOutputStream.java:83)\n\tat org.apache.coyote.http11.upgrade.NioServletOutputStream.doWrite(NioServletOutputStream.java:60)\n\tat org.apache.coyote.http11.upgrade.AbstractServletOutputStream.writeInternal(AbstractServletOutputStream.java:118)\n\tat org.apache.coyote.http11.upgrade.AbstractServletOutputStream.write(AbstractServletOutputStream.java:85)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:94)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:81)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:378)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:279)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:236)\n\t... 16 more\n\n\t\n[Probably expected, when the browser aborts the connection:]\n20-Nov-2013 15:25:24.777 SEVERE [http-nio-8080-exec-8] websocket.chat.ChatAnnotation.onError Chat Error: java.io.IOException: java.util.concurrent.ExecutionException: java.nio.channels.ClosedChannelException\n java.io.IOException: java.util.concurrent.ExecutionException: java.nio.channels.ClosedChannelException\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:245)\n\tat org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:476)\n\tat org.apache.tomcat.websocket.WsSession.onClose(WsSession.java:439)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.close(WsHttpUpgradeHandler.java:172)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.access$200(WsHttpUpgradeHandler.java:45)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:194)\n\tat org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:180)\n\tat org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:95)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:640)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1555)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:744)\nCaused by: java.util.concurrent.ExecutionException: java.nio.channels.ClosedChannelException\n\tat org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:102)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:241)\n\t... 14 more\nCaused by: java.nio.channels.ClosedChannelException\n\tat sun.nio.ch.SocketChannelImpl.ensureWriteOpen(SocketChannelImpl.java:265)\n\tat sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:474)\n\tat org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:123)\n\tat org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:185)\n\tat org.apache.coyote.http11.upgrade.NioServletOutputStream.doWriteInternal(NioServletOutputStream.java:93)\n\tat org.apache.coyote.http11.upgrade.NioServletOutputStream.doWrite(NioServletOutputStream.java:60)\n\tat org.apache.coyote.http11.upgrade.AbstractServletOutputStream.writeInternal(AbstractServletOutputStream.java:118)\n\tat org.apache.coyote.http11.upgrade.AbstractServletOutputStream.write(AbstractServletOutputStream.java:85)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:94)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:81)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:378)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:279)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:236)\n\t... 14 more",
      "I'm not seeing the errors you are seeing but I did spot a possible failure mode which I have now fixed. Could you re-test 8.0.x please.",
      "Hi Mark,\n\n(In reply to Mark Thomas from comment #7)\n> I'm not seeing the errors you are seeing but I did spot a possible failure\n> mode which I have now fixed. Could you re-test 8.0.x please.\n\nThanks a lot. I updated to r1543948 and cannot reproduce the main problems any more (like websocket connection suddenly closes, wrong response sent to the browser). I think it is fixed now.\n\nI also don't get NPEs or IllegalArgumentExceptions any more. I still do see IOExceptions (\"Software caused connection abort\" / \"Key must be cancelled\") and ClosedChannelExceptions reported through the ChatAnnotation's onError method, but these are probably expected due to the browser aborting the connection when repeatedly pressing F5.\n\nI also still see the following exception:\n\nException in thread \"WebSocketServer-localhost-/examples-14\"\njava.lang.IllegalStateException: Message will not be sent because the WebSocket session has been closed\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:306)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:273)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.write(WsRemoteEndpointImplBase.java:637)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.onResult(WsRemoteEndpointImplBase.java:649)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.endMessage(WsRemoteEndpointImplBase.java:299)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$EndMessageHandler.onResult(WsRemoteEndpointImplBase.java:447)\n        at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer$OnResultRunnable.run(WsRemoteEndpointImplServer.java:234)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:744)",
      "(In reply to Konstantin Prei\u00dfer from comment #8)\n> I also still see the following exception:\n\nActually I meant the following exception here (but the other one also occurs):\n\nException in thread \"WebSocketServer-localhost-/examples-1\" java.lang.IllegalStateException: Unexpected state. Please report a bug. Message will not be sent because the WebSocket session is currently sending another message\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:266)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.write(WsRemoteEndpointImplBase.java:637)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$TextMessageSendHandler.onResult(WsRemoteEndpointImplBase.java:649)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.endMessage(WsRemoteEndpointImplBase.java:299)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$EndMessageHandler.onResult(WsRemoteEndpointImplBase.java:447)\n        at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer$OnResultRunnable.run(WsRemoteEndpointImplServer.java:234)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:744)",
      "(In reply to Konstantin Prei\u00dfer from comment #8)\n> Thanks a lot. I updated to r1543948 and cannot reproduce the main problems\n> any more (like websocket connection suddenly closes, wrong response sent to\n> the browser). I think it is fixed now.\n\nAfter some additional testing, the problem that the browser could not establish a WebSocket connection / Websocket connection is closed a few seconds after opening it happened again on Google Chrome, the console displayed the following:\n\nWebSocket connection to 'ws://localhost:8080/examples/websocket/chat' failed: Received new data frame but previous continuous frame is unfinished.",
      "OK. Getting better but maybe not quite there yet. Because WebSocket has the potential for multiple threads to be working with a socket concurrently (one read, one write) there is a world of opportunity for weird and wonderful failure modes. It is possible that that is what we are seeing here but I'd like to at least understand each class of exceptions you are seeing.\n\nThe IOExceptions and ClosedChannelExceptions are expected when the client drops the connection. I'm not worried about these.\n\nThe IllegalStateException (closed) might be OK but I need to confirm.\n\nThe IllegalStateException (report a bug) shouldn't happen so I want to look at this some more.\n\nThe \"Received new data frame but previous continuous frame is unfinished.\" definitely shouldn't happen. Need to look into that as well.",
      "(In reply to Mark Thomas from comment #11)\n> The IllegalStateException (closed) might be OK but I need to confirm.\n\nIt is OK but could be handled better so I have improved the handling of this.\n\n> The IllegalStateException (report a bug) shouldn't happen so I want to look\n> at this some more.\n\nThe logic was wrong here so it has been fixed.\n\n> The \"Received new data frame but previous continuous frame is unfinished.\"\n> definitely shouldn't happen. Need to look into that as well.\n\nI suspect that these were a result of the logic errors.\n\n8.0.x has been updated. As I still can't reproduce this I'd again appreciate your help with testing.",
      "Hi Mark,\n\n(In reply to Mark Thomas from comment #12)\n> 8.0.x has been updated. As I still can't reproduce this I'd again appreciate\n> your help with testing.\n\nI updated to r1544165 and I'm now unable to reproduce the Exceptions (besides the expected IOException) and the frame error that Google Chrome's console had shown, so I think it is now fixed. Thanks!\n\n(The only problem I got was that it took several minutes for Tomcat to shutdown after testing - it did not close the Websocket Connections and even after closing all browsers it took some minutes for Tomcat to complete shutdown.)",
      "Thanks for the testing.\n\nThe slow shutdown could be caused by not correctly handling an IOException. That is something to follow-up in a separate BZ issue.",
      "REOPENING, there is a regression\n\nSee thread on users@,\n\"IllegalStateException sending WebSocket message that worked a few months ago\"\nhttp://tomcat.markmail.org/thread/75uisvwve2l2u3n2\n\nApparently using an OutputStream obtained via WsRemoteEndpointImplBase.getSendStream() is broken.\n\n\nThere is a test case for a writer, TestWsRemoteEndpoint.doTestWriter(..). It seems that there is no test case for a stream.\n\nThere is a small difference in implementation between doWrite() methods of WsRemoteEndpointImplBase$WsWriter and WsRemoteEndpointImplBase$WsOutputStream:\n\nThe writer calls a package-visible method that does not perform a state check.\nThe stream calls a public method that performs a state check and fails.",
      "I've fixed the regression and added a test case for Stream messages to trunk and 7.0.x.",
      "Created attachment 31078\nSample project to replicate regression\n\nSomething still isn't quite right. I've attached a sample project. It's silly-looking, I know, but it's simple and it demonstrates the problem reliably every time. Steps:\n\n1. Compile it and deploy to /cluster.\n2. Go to http://localhost:8080/cluster/clusterNode1. The browser should display \"OK\" and there should be some diagnostic output in stdout.\n3. Go to http://localhost:8080/cluster/clusterNode2. The browser should display \"OK\" and there should be a lot more diagnostic output in stdout.\n\n-- Step 3 is where it failed two days ok. You never saw \"OK\" and the diagnostic output. You just got the exception in the browser. After Mark's changes last night / this morning, step 3 succeeds.\n\n4. Go back to http://localhost:8080/cluster/clusterNode1. The exception is back.\n5. Go back to http://localhost:8080/cluster/clusterNode2. The exception is back there, tee.",
      "Should be fixed now. Test case appears to work. (No errors reported)",
      "Confirmed. Looks like it is working now. Thanks!"
    ],
    "creation_ts": "2013-11-20T00:01:34Z",
    "fixes": [
      55799
    ]
  },
  {
    "id": 40150,
    "summary": "Incorrect User/Role classnames are silently ignored.",
    "description": "org.apache.catalina.realm.JAASRealm does not verify any of the class names that\nare set through setRoleClassNames() and setUserClassNames().\n\nIf an incorrect class name (e.g. a typo) is configured in context.xml, this is\nunnoticed by JAASRealm. The result is that during authentication, when the\nsubject's principals are checked against the configured class names, the\nprincipals are not recognised, and therefore not added to the subject.\n\nThe fact an incorrect configured class name is currently not detected and logged\nmakes it very hard to find the source of the problem. It can be easily fixed by\nchecking the class names in the two methods mentioned above. The class must\nexist, and it must implement java.security.Principal, which is currently not\nenforced/checked by the code.",
    "comments": [
      "Created attachment 18668\nProposed fixed version of JAASRealm.\n\nThis version of JAASRealm validates the class names for setUserClassNames and\nsetRoleClassNames. It verifies if the class exists, and if it implements\njava.security.Principal. If not, it logs a message (severe), that allows users\nto detect the incorrect class name.\n\nIt might even be better if it threw an exception.\n\nI've also restructured the code to parse the comma-delimited class name string,\nas it was rather inefficient. It uses a StringTokenizer now.",
      "Created attachment 18669\nImproved version of the patch\n\nNo longer using StringTokenizer, but String.split, as StringTokenizer is\nconsidered legacy. Thanks to Sameer Acharya.",
      "This looks like a good idea to enhance.  However, please submit your patch in\ndiff  format rather than the whole file, that would make its review and\napplication much faster: http://www.apache.org/dev/contributors.html#patches\nprovides more details.",
      "Created attachment 19306\nPatch of JAASRealm.java (in diff format)",
      "Tom, thanks for providing this patch in diff form.  I've applied it to the\nTomcat 5.5 and 6.0 trunks, I really like it.  Sorry it took so long.",
      "While this patch might have improved feedback when an incorrect classnames are\nprovided, it actually fully *breaks* JAASRealm usage when correct classnames are\nprovided but need to be accessed through a ContextClassLoader.\n\nWe at Apache Jetspeed-2 use the useContextClassLoader=true setting for hooking\nup our own custom Principal classes as these are provided through the portal\napplication itself, not from a common/shared classloader.\n\nBecause the new parseClassNames only does a simple Class.forName() check this\nnow fails to validate our classnames for Tomcat 5.5.24 and later and thereby\nbreaking our JAAS based security :(\n\nI suggest this to be solved by either:\n- reverting the patch\n- keep the current patch but *ignore* a ClassNotFoundException except for\nlogging that it happened\n- run this method in the appropriate ContextClassLoader for the web app if possible\n\nFYI: we have a Jetspeed JIRA issue opened on this bug with some additional\ninformation: https://issues.apache.org/jira/browse/JS2-828\n\nHopefully this issue can be resolved quickly as right now we cannot run Jetspeed\non Tomcat >= 5.5.24\n\nRegards, Ate",
      "See http://issues.apache.org/bugzilla/show_bug.cgi?id=44084 for the Tomcat 6\nversion of this issue.  This has been fixed in the Tomcat SVN trunk, and should\nbe integrated into the next 5.5 and 6 releases.",
      "This has been fixed as per the comments in 44084."
    ],
    "creation_ts": "2006-08-01T08:52:32Z",
    "fixes": [
      40150
    ]
  },
  {
    "id": 65244,
    "summary": "annotations from @HandlesTypes are checked only at class level when scanning",
    "description": "I have a test WAR, where one of the detected SCIs has this @HandlesTypes (for testing purpose only):\n\n@HandlesTypes({ Deprecated.class })\n\nThen, in the same WAR, I have a servlet with this dummy field:\n\n@Deprecated\npublic Object dummy;\n\n`org.apache.tomcat.util.bcel.classfile.JavaClass#getAnnotationEntries()` returns null for this servlet class inside `org.apache.catalina.startup.ContextConfig#checkHandlesTypes()`\n\nI know it's artificial and I (later, after scanning) get a list of these classes passed to SCI:\n\n{org.ops4j.pax.web.samples.war.scis.SCIFromTheWab1@2927}  -> {java.util.HashSet@3017}  size = 9\n key: org.ops4j.pax.web.samples.war.scis.SCIFromTheWab1  = {org.ops4j.pax.web.samples.war.scis.SCIFromTheWab1@2927} \n value: java.util.HashSet  = {java.util.HashSet@3017}  size = 9\n  0 = {@3023} \"class javax.faces.component.UIViewRoot$ViewScope\"\n  1 = {@3024} \"class org.apache.myfaces.view.facelets.tag.jsf.ComponentHandler\"\n  2 = {@3025} \"class org.apache.myfaces.view.facelets.tag.jsf.ConvertHandler\"\n  3 = {@3026} \"class javax.faces.view.facelets.ResourceResolver\"\n  4 = {@3027} \"class org.apache.myfaces.application.StateCacheFactory\"\n  5 = {@3028} \"class org.apache.myfaces.shared.taglib.UIComponentTagUtils\"\n  6 = {@3029} \"interface javax.faces.bean.package-info\"\n  7 = {@3030} \"class org.apache.myfaces.view.facelets.tag.jsf.ValidateHandler\"\n  8 = {@3031} \"class org.apache.myfaces.view.facelets.tag.MetaRule\"\n\nEach of the classes are annotated with @Deprecated.\n\nThe problem (?) I found is that chapter \"8.2.4 Shared libraries / runtimes pluggability\" of Servlet 4 specification says:\n\n> In addition to the ServletContainerInitializer we also have an annotation -\nHandlesTypes. The HandlesTypes annotation on the implementation of the\nServletContainerInitializer is used to express interest in classes that may\nhave annotations ___(type, method or field level annotations)___ specified in the value of\nthe HandlesTypes or if it extends / implements one those classes anywhere in the\nclass\u2019 super types.\n\nSo either something's wrong in Tomcat, in TCK, or Servlet spec is too permissive...",
    "comments": [
      "Looks like a Tomcat bug to me. That no-one has hit this bug in the 10+ years since the first Tomcat 7 release (where support for this was first added) suggests it is a very rarely used feature but we should still aim to fix it.",
      "I don't think TCK tests this - otherwise it'd be caught.\nIn my personal opinion, annotations from @HandlesTypes should be checked only at class level, not at the method level.\n\nOn the other hand, \"8.1 Annotations and pluggability\" mentions annotations like @javax.annotation.PreDestroy, which suggests deep scanning.\n\nHowever Tomcat (org.apache.catalina.startup.ContextConfig#processClass()) checks only 3 class-level annotations: @WebServlet, @WebFilter and @WebListener (which are the only MUST-be-supported annotations).\n\nPersonally, I would rather change the specification than Tomcat (and potentially Jetty and other containers) and TCK ;)",
      "(In reply to Mark Thomas from comment #1)\n> Looks like a Tomcat bug to me. That no-one has hit this bug in the 10+ years\n> since the first Tomcat 7 release (where support for this was first added)\n> suggests it is a very rarely used feature but we should still aim to fix it.\n\nI would also think it would be in the spirit of HandlesTypes to do field and method annotations since it's a way for frameworks to say \"gimme anything that has my annotation\".\n\nThis is not implemented at the moment for fields or methods since:\n- https://github.com/apache/tomcat/blob/master/java/org/apache/catalina/startup/ContextConfig.java#L2429 only gets the annotations on the class\n- https://github.com/apache/tomcat/blob/master/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java#L232 does not read any field or methods attributes including the annotations\nDoing it would probably make scanning a bit slower, and would require expanding this stuff.",
      "Hi,\n\nNot sure it changed in last release but since javaee 6 (to at least EE8) it was only about types: https://docs.oracle.com/javaee/6/api/javax/servlet/annotation/HandlesTypes.html:\n\n> Set of application classes that extend, implement, or have been annotated with the class types listed\n\nSeems it means \"the type is annotated\" and not \"one of its member\".\n\nSo it excludes fields and methods AFAIK.",
      "Javadoc comment:\n\n> application classes that extend, implement,\n> or have been annotated with the class types listed by this annotation\n\ncan be ambiguous (\"class is annotated with\" may mean \"has class level annotation\" or \"has either members with annotations or is itself annotated\") - though it sounds more like only class-level annotations are considered.\n\nOn the other hand, the specification is clear... I'd also worry a bit about performance loss.",
      "If it helps:\n\n1. TomEE already does it and cost of reading the full class can be limited by adjusting well the buffer size\n2. Never use a real use case for \"not class\" level and worse cases frameworks can add a @MarkClass\n3. Maybe something to clarify at spec level before changing in tomcat since it will break app (clazz.getAnnotation(MyMarker.class).value() == NPE if changed)?",
      "Although not urgent at all, the specification seems very clear now that I have reviewed it (annotations on fields and method do count). I'll try to do something about it next week to see how it can work.",
      "I've been thinking about implementation options. It looks relatively simple although there is potential complexity depending on the extent to which we are concerned about retaining current behaviour of existing internal method calls in case anyone is using them directly.\n\nMy biggest concern is performance. I have set up a simple test to scan the WEB-INF/lib dir from Jira 8.15.0. I plan to use that to track relative performance.\n\nMy current thinking is implement the additional scanning, look at the relative performance and then discuss what, if anything, we should optimise.\n\nWe'll want to back-port this to 9.0.x and 8.5.x but I think we'll want to do that slowly in case of regressions.",
      "Maybe it is an opportunity to make it properly pluggable. Most tomcat integrators drops that part to use their own scanner (tomee uses xbean, pax uses osgi flavor of xbean, others bypasses it, some use jandex, etc). Can be good to make it properly pluggable if changed no?\n\nOnce done having a classscanner and deepscanner (fields, methods, hierarchy) sounds trivial and will enable to not break apps or quickly disable the new behavior when breaking.",
      "I like it. That does almost certainly mean one breaking change now to introduce the pluggable API. Would we consider ServiceLoader for this?",
      "Context or contextconfig configuration is fine since most integrations have listeners already no?",
      "I added simple code in 10 to handle this. If it works ok without regressions, even unintended ones, it can be backported.",
      "Using my Jira based test the impact of this change is an increase in scan time of ~2.3%. That is a lot lower than I expected and small enough that I'd have no objection to the patch standing as is.\n\nI really like that the patch achieved this while retaining backwards compatibility.",
      "Hi Mark and R\u00e9my,\n\nI'm not sure I got your last comment since the patch on 10.0.6-dev breaks the backward compatibility as such (ie you run a working app on 10.0.5 and then upgrade on 1.0.0.6-dev and the app does not start anymore).\nIs the toggle still planned?\n\nJust to make it clear here is a sample: https://gist.github.com/rmannibucau/7ff2bea1e4ca1f3204a16e84afee5f87",
      "I see no need to make this configurable at this point.\n\nMy default position for specification compliance related issues such as this is that it is better for applications to fix their bugs than for Tomcat to add a configuration option to allow the non-compliance to continue. I'd make an exception if the bug was in a widely used library and that library refused to fix the bug - but that seems unlikely in this case.",
      "Ok, let's do it in lazy mode (can it be highlighted in the release announce mail though please?)",
      "By the way, I checked that in Jetty there are org.eclipse.jetty.annotations.AnnotationParser.MyFieldVisitor/MyMethodVisitor/MyClassVisitor visitors that handle each case.",
      "(In reply to romain.manni-bucau from comment #14)\n> Hi Mark and R\u00e9my,\n> \n> I'm not sure I got your last comment since the patch on 10.0.6-dev breaks\n> the backward compatibility as such (ie you run a working app on 10.0.5 and\n> then upgrade on 1.0.0.6-dev and the app does not start anymore).\n> Is the toggle still planned?\n> \n> Just to make it clear here is a sample:\n> https://gist.github.com/rmannibucau/7ff2bea1e4ca1f3204a16e84afee5f87\n\nThat's a good test case idea actually. I'll see if I can do something about adding this to the testsuite.\n\nI would also vote to not add a flag for 10 even though it's incompatible, since it's a bug. Maybe for 9 depending on further feedback. Adding the flag is very easy to do if needed.",
      "Hmm, another observation. I've added java.util.EventListener.class to @HandlesTypes and I got ... a lot of stuff, including:\n\n```\n1 = {@3229} \"interface javax.faces.validator.Validator\"\n...\n3 = {@3230} \"interface javax.faces.event.SystemEventListener\"\n...\n5 = {@3232} \"interface javax.faces.event.BehaviorListener\"\n```\n\nSo I got back to the spec:\n\n> The HandlesTypes annotation on the implementation of the\n> ServletContainerInitializer is used to express interest in classes that may\n> have annotations (type, method or field level annotations) specified in the value of\n> the HandlesTypes or if it extends / implements one those classes anywhere in\n> the class\u2019 super types.\n\nI don't think I should get `interface javax.faces.validator.Validator` which exten ds `java.util.EventListener`, because it's not a class - it's an interface.\n\nThis may be more difficult to interpret, but if both classes and interfaces were needed, the spec would say \"types\" or \"java.lang.Class\" instances...\n\nJavadoc says about:\n\n> the Set of application classes that extend, implement, or have been annotated [...]\n\nThis time I checked that Jetty (9.4.40) also passes interfaces.\n\nWhat do you think?",
      "(In reply to Grzegorz Grzybek from comment #19)\n> What do you think?\n\nThat it would be a separate issue.\n\nI would say interfaces are not supposed to be there.",
      "(In reply to Remy Maucherat from comment #20)\n> (In reply to Grzegorz Grzybek from comment #19)\n> > What do you think?\n> \n> That it would be a separate issue.\n> \n> I would say interfaces are not supposed to be there.\n\nHere's the new issue: https://bz.apache.org/bugzilla/show_bug.cgi?id=65256\n\nThough I don't claim that the spec forbids interfaces. However Tomcat explicitly ignores annotation types in org.apache.catalina.startup.ContextConfig#checkHandlesTypes:\n\n> if ((javaClass.getAccessFlags() &\n>         org.apache.tomcat.util.bcel.Const.ACC_ANNOTATION) != 0) {\n>     // Skip annotations.\n>     return;\n> }",
      "So the fix will be in 10.0.6, will see if/when/how it can be backported to 9 and 8.5.",
      "(In reply to Remy Maucherat from comment #22)\n> So the fix will be in 10.0.6, will see if/when/how it can be backported to 9\n> and 8.5.\n\nShould I backport now or should it be tested in 10.0.6 before being included in the 8.5 and 9 releases ?",
      "I have no objection to a back-port now.",
      "The fix will be in 9.0.46 and 8.5.66."
    ],
    "creation_ts": "2021-04-15T08:39:32Z",
    "fixes": [
      65244
    ]
  },
  {
    "id": 56029,
    "summary": "Ternary operator doesn't work as expected inside attributes in jspx pages",
    "description": "The following JSPX file worked upto Tomcat 7.0.47:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jsp:root xmlns:jsp=\"http://java.sun.com/JSP/Page\" version=\"2.1\"\n\txmlns:c=\"http://java.sun.com/jsp/jstl/core\" \n\txmlns:fmt=\"http://java.sun.com/jsp/jstl/fmt\"\t\n>\n\t<jsp:directive.page contentType=\"text/html; charset=utf-8\"  pageEncoding=\"UTF-8\" />\n\t<jsp:directive.page session=\"false\" />\n\t<jsp:output omit-xml-declaration=\"true\" />\n\t<div>\t\n\t\t<span id=\"mainNavNews\" class=\"${currentController eq 'News' ? 'selectedItem' : ''}\">foobar</span>\t\n\t</div>\t\n</jsp:root>\n\nWith tomcat 7.0.50 it fails with the following exception:\n\norg.apache.jasper.JasperException: /WEB-INF/views/layouts/mainNavigation.jspx (line: 10, column: 87) \"${currentController eq 'News' ? 'selectedItem' : ''}\" contains invalid expression(s): javax.el.ELException: Failed to parse the expression [${currentControllereq'News'?'selectedItem':''}]\n\tat org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42)\n\tat org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:443)\n\tat org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:199)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.getJspAttribute(Validator.java:1399)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:772)\n\tat org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2427)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:779)\n\tat org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2427)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:529)\n\tat org.apache.jasper.compiler.Node$JspRoot.accept(Node.java:564)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2427)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2433)\n\tat org.apache.jasper.compiler.Node$Root.accept(Node.java:474)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)\n\tat org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1817)\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:217)\n\tat org.apache.jasper.compiler.Compiler.__compile(Compiler.java:373)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)\n\tat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:657)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)\n\tat org.apache.jasper.servlet.JspServlet._serviceJspFile(JspServlet.java:390)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)\n\nIt works when the ternary operation doesn't appear inside an attribute or instead of eq '==' is used.",
    "comments": [
      "Happens with all named operators\n\n<span class=\"${foo == 'bar' and 1==1 ? 'bar-span' : 'other-span'}\">span</span>\t\n\n\nwill break as well.\n\nIf used in jspx it only works now as \n\n<span class=\"${foo == 'bar' &amp;&amp; 1==1 ? 'bar-span' : 'other-span'}\">span</span>\t\n\nwhich is not a really acceptable solution.",
      "Ack. Reproducible with your sample file from Comment 0 minus the 'xmlns:c' and 'xmlns:fmt' attributes.\n\n\n> javax.el.ELException: Failed to parse the expression [${currentControllereq'News'?'selectedItem':''}]\n\nNotes:\n\n1. \"currentControllereq\" is printed without spaces in the above message. Also the rest of whitespaces are also missing in the message.\n\n2. A workaround is to add braces around the variable name.\nThe following does work:\n\n... class=\"${(currentController) eq 'News' ? 'selectedItem' : ''}\" ...\n\n\n3. This issue happens when EL in the value of a tag attribute.\n\nThis issue does not happen when EL is in the plain text (body of a tag).\nThe following does work successfully:\n\n<jsp:root version=\"2.0\" xmlns:jsp=\"http://java.sun.com/JSP/Page\"\n><jsp:directive.page contentType=\"text/plain\"/>\n${currentController eq 'News' ? 'selectedItem' : ''}</jsp:root>",
      "(In reply to Konstantin Kolinko from comment #2)\n> Ack. Reproducible with your sample file from Comment 0 minus the 'xmlns:c'\n> and 'xmlns:fmt' attributes.\n> \n\nReproducible in 8.0-RC10 and 6.0.38 (release candidate) as well.",
      "I suspected when I read this report that it was a regression caused by the fix for Bug 55198 and given the versions of Tomcat affected it looks to be very much the case (although I haven't confirmed it yet).",
      "Fixed in 8.0.x for 8.0.0 onwards and in 7.0.x for 7.0.51 onwards.\n\nProposed for 6.0.x.",
      "*** Bug 56031 has been marked as a duplicate of this bug. ***",
      "Konstantin: Your addendum is fully correct, i can confirm this.\n\nThanks for your kind reply and the quick solution, highly appreciated. Also thanks for the workaround, but i guess i'll wait to 7.0.51.",
      "Created attachment 31231\ntest.jspx - Failure to trim leading space from fn prefix\n\nRe: r1559555\n\nNot yet.\n\nTesting current 7.0.x (at r1559663) I see the following error\n1. Place attached test.jspx into webapps/examples\n2. Access http://localhost:8080/examples/test.jspx\n3. Expected: \"[1]\". Actual:\n\norg.apache.jasper.JasperException: /test.jspx (line: 7, column: 63) The attribute prefix  fn does not correspond to any imported tag library\n org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42)\n org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:443)\n org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:149)\n org.apache.jasper.compiler.Validator$ValidateVisitor$1FVVisitor.visit(Validator.java:1563)\n ...\n org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)\n org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1817)\n org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:217)\n ...\n\nIn the message the prefix is printed as \" fn\" with leading whitespace.\nThe expression on the page is ${1 + fn:length(list)}",
      "If fixed the white space issue in 8.0.x and 7.0.x and added it to the proposal for 6.0.x",
      "This has been fixed in 6.0.x and will be included in 6.0.39 onwards.",
      "*** Bug 56124 has been marked as a duplicate of this bug. ***",
      "It seems this issue is fixed now. Can anyone advice in which 7.0.x version can I expect the fix to be delivered?",
      "(In reply to Santosh from comment #12)\n> It seems this issue is fixed now. Can anyone advice in which 7.0.x version\n> can I expect the fix to be delivered?\n\nSantosh,\n\nMark Thomson mentioned that will be in 8.0.0 and 7.0.51 onwards. Not sure when will the 7.0.51 be available.. :-)"
    ],
    "creation_ts": "2014-01-18T12:42:47Z",
    "fixes": [
      56029
    ]
  },
  {
    "id": 69439,
    "summary": "ExpiresFilter - improper handling of conflicting cache-control directives",
    "description": "Since multiple Cache-Control headers are allowed (via #addHeader), then conflict may happen.\n\nCurrently ExpiresFilter pickup the first-added cache-control header as the effective field, cause follow-up directives (like no-store or max-age) to be ignored.\n\nrfc9111 - 4.2.1 - If directives conflict (e.g., both max-age and no-cache are present), the most restrictive directive should be honored.",
    "comments": [
      "Fixed in:\n- 11.0.x for 11.0.2 onwards\n- 10.1.x for 10.1.34 onwards\n-  9.0.x for  9.0.98 onwards"
    ],
    "creation_ts": "2024-11-12T06:27:38Z",
    "fixes": [
      69439
    ]
  },
  {
    "id": 65390,
    "summary": "Problem in the code generated by jasper",
    "description": "Created attachment 37908\nMinimum Sample\n\nWe make heavy use of JSP-Taglibs, both java-based and tag-file-based.\n\nSince Version 9.0.48 there is a Problem when using a combination of the following:\n\n * A java-based tagfile which implements \"javax.servlet.jsp.tagext.TryCatchFinally\"\n * A regular tag-file with \"scriptless\" body content\n * A JSP-Include directive\n\nWith the minimum sample provided, Jasper generates an inner class \"Helper\" which uses wrong variable names.\n\n\nWe have noticed, that Jasper 9.0.48 adds a suffix to many variables, which 9.0.46 does not.\nThis is most likely the cause.\n\nThe attached minimum sample compiles with Jasper 9.0.46 und ist broken with 9.0.48.\n\nI have also attached the generated java-files for quick comparison of the generated code.\n\n=======\nThe error is:\n\n[...]Failing_jsp.java:254: error: cannot find symbol\n      if (_jspx_meth_st_005ftagwithbody_005f1(_jspx_parent, _jspx_page_context, _jspx_push_body_count_st_005fwrapper_005f0))\n                                                                                ^\n  symbol:   variable _jspx_push_body_count_st_005fwrapper_005f0\n  location: class Failing_jsp.Helper",
    "comments": [
      "*** This bug has been marked as a duplicate of bug 65387 ***",
      "Can't be a duplicate as this impacts 9.0.x and the change that triggered 65387 was not back-ported to 9.0.x.",
      "(In reply to Mark Thomas from comment #2)\n> Can't be a duplicate as this impacts 9.0.x and the change that triggered\n> 65387 was not back-ported to 9.0.x.\n\nGood catch, I mostly stopped reading after TryCatchFinally since I was looking at it at the same time. I haven't found the root cause of this issue yet however.",
      "This is the problematic commit\nhttps://github.com/apache/tomcat/commit/9f2d78449\n\nI've reviewed the reason the code as removed and it was removed (by me) in error. I'll restore the code shortly.",
      "Thanks for the report and especially for the test case. A working test case makes it so much easier to track down the root cause.\n\nFixed in:\n- 10.1.x for 10.1.0-M2 onwards\n- 10.0.x for 10.0.8 onwards\n- 9.0.x for 9.0.49 onwards\n- 8.5.x for 8.5.69 onwards",
      "Just following up in this as we'd really like to catch regressions like this in the ~3 working day window between the release candidate being available and the release vote concluding.\n\nIt is great that you are using the latest Tomcat release as soon as it as available but what would we, the Tomcat team, need to do for you to be able to test the release candidate as soon as it as available rather than you waiting for the release?",
      "Hallo Mark,\n\nfirst I\u2019d like to thank you for your very fast response on our bug report :)\n\nWe use tomcat-embedded and pull it from a maven repository.\nIf you made your release candidates available via a public maven repository which always hosted the current release or upcoming patch, e.g. \n\n\"org.apache.tomcat:tomcat-catalina:9.0.next_or_rc\"\n\nour nightly could pick that up.\n\nOf course you\u2019d need to do that for all artifacts.\n\nTank you!",
      "If you are willing to update your nightly build then that could provide us with valuable feedback.\n\nYou have a couple of choices:\n\nSnapshots that are updated with each CI build are available at:\nhttps://repository.apache.org/content/repositories/snapshots/\n\nStaging that is updated when we create a release candidate is available at:\nhttps://repository.apache.org/content/groups/staging/\n\nEither option would enable us to catch issues before a formal release. Obviously the snapshot repo would catch issues earlier but with the risk that the snapshots are not quite as stable (if the build compiles, the snapshot gets uploaded whether the test suite passes or not).",
      "*** Bug 65407 has been marked as a duplicate of this bug. ***",
      "Note that release candidate binaries are available for Tomcat 10.1.0-M2, 10.0.8, 9.0.50, and 8.5.69.\n\nSee \"[VOTE]\" threads on the dev@ mailing list for links.\nhttps://tomcat.apache.org/lists.html#tomcat-dev",
      "Thank you for pointing us to those repositories!\n\nOur nightlies have been adjusted and I can confirm, that the fix provided with upcoming 9.0.50 works for all our JSPs :)",
      "*** Bug 65413 has been marked as a duplicate of this bug. ***",
      "*** Bug 65414 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2021-06-18T12:46:33Z",
    "fixes": [
      65390
    ]
  },
  {
    "id": 57476,
    "summary": "Incomplete html pages",
    "description": "Hello,\nI upgrade Tomcat from 8.0.15 to 8.0.17.\nI'm using SSL on tomcat server and I disabled port 80. \nwith version 8.0.15 everything is fine\nwith version 8.0.17 for my applications a lot of html pages are incomplete, and some applications stop responding after using them some minutes.\nI downgrade to 8.0.15 to have no problem. \nNothing in tomcat logs.\nI don't know where is the problem (tomcat, my applications, ...), just want to give you this information.\nThank you, Kind regards,\nAlexandre.",
    "comments": [
      "Which connector are you using? Does the problem stop if you switch connectors?\n\nIs sendFile enabled? If yes, does the problem stop if sendFile is disabled?\n\nThread dump (ideally 3, ~10s apart) when the application stops responding?\n\nPlease provide the logs from the time the issue occurs. They may tell us something they don't tell you.",
      "Hello,\n\nsame problem.\nAfter a last jsp:include in a jsp site the html content is not shown.\nNo errors in tomcat log. Default Tomcat with port 8080.",
      "I have a single JSP running on 8.0.17 with 4 includes, and the page works just fine. Can you give more information about your environment? There's also a thread on the dev list if you want to discuss.",
      "I make a little test. I add a <%out.flush();%> at the end of the jsp file and the html content is correct. Without the <%out.flush();%> the html content is broken.",
      "I'm seeing similar issues with version 8.0.17 as well. Downgrading back to 8.0.15 made the problems go away for me, so it seems like something introduced between these versions is causing this.\n\nSo far I've only noticed this problem with JSP files. Static content seems unaffected. Also, I'm seeing this happen through both HTTP and HTTPS.\n\nWhen the response is being truncated, the resulting size is always multiples of 8192 bytes. But this seems to only happen only if the resulting size is anything greater than 16KB. Examples of what I'm seeing:\n\nExpected size / Actual response size\nanything less than 16 KB -> the response is fine\n17 KB -> 8 KB\n25 KB -> 16 KB\n39 KB -> 24 KB\n44 KB -> 32 KB\n50 KB -> 40 KB\n\nSo it seems like the last remaining block (or 2?) isn't being written out... assuming the buffer size is 8 KB. And yes, when I call out.flush(), this problem goes away for me too.\n\nHere's some information about my environment:\nJava(TM) SE Runtime Environment (build 1.8.0_25-b17)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\nOS X Yosemite 10.10.1",
      "I'm facing exactly the same issue. I've noticed that putting <% out.flush() %> at the end of the JSP file, everything was OK, but It's not good to assume that it's the goal to solve that.",
      "This still lacks a reproduction recipe.\n\nThus far I tried the following simple tests with 8.0.17, and all of them are working (except a minor issue filed as bug 57481)\n\n- static files (Tomcat binaries)\n- examples webapp (mostly useless, as those pages are small)\n- simple jsp with a lot of text  (200Kb)\n- jsp with jsp:include with a lot of text (200Kb, 800Kb)\n- simple jsp with EL (122Kn)\n- simple jsp with tags (164Kb)\n\nI tested\nHTTP + (bio,nio,apr) + (with Executor or without Executor)\nHTTPS + (bio,nio) + without Executor\n\nI am using JDK 7u72 (32-bit) on Windows 7.\n\nNo truncations noted.\n\nSomething else is needed to reproduce this.",
      "Okay, after some debugging, I think I found how to duplicate this rather easily. The original project where this was happening for me was a Spring MVC project. I wasn't able to duplicate it in a non-Spring MVC project at first, so I went back to my original project and followed the path from beginning to end to get more clues as to what was happening. I found that the bug seems to only occur when requests are forwarded. After realizing that, I was able to create a minimal example that shows the problem:\n\n1. Download a fresh stock 8.0.17 build\n2. Drop in two JSP files in webapps/ROOT (the Tomcat welcome screen project is perfectly fine). For example: page1.jsp and page2.jsp\n3. Put <% request.getRequestDispatcher(\"page2.jsp\").forward(request, response); %> in page1.jsp\n4. Put a bunch of plain text (you don't need dynamic content) in page2.jsp so that the response will be over 16 KB.\n5. Now visit localhost:8080/page1.jsp in your browser, and notice the content being truncated.\n\nAlso, note that going to localhost:8080/page2.jsp directly does NOT truncate the data because there is no forwarding happen there.\n\nI was able to duplicate this on 2 separate machines (Mac and Windows).",
      "Thanks for the extra info. I (and I suspect a few other committers as well) am looking at this now...",
      "Reprodcued every time. Many thanks. Looking for the root cause at the moment...",
      "I've found the root cause. It was triggered by r1643210 but I think all that did was uncover a different bug.\n\nIt is easier to see if you go back to Tomcat 6 as that is before async was added. If you look at StandardHostValve line 136 [1] you'll see that the response is unsuspended unconditionally although the comment suggests it is being unsuspended for error handling (which may need to write to the response).\n\nIn r1643210 that code was modified so the response was only unsuspended if there was an error to handle.\n\nThis triggered the problem because the RequestDispatcher did not flush the response before calling finish(). Calling finish() sets suspended to true. The sequence was:\na) page 1 forwards to page 2\nb) page 2 writes response leaving some data in buffer\nc) RD calls finish which suspends response\nd) StandardHostValve unsuspends response\ne) normal end handling for page 1 flushes and closes the response\n\nr1643210 removed step d) which in turn prevented the flush in step e).\n\nSection 9.4 of the Servlet 3.1 spec says:\n<quote>\nBefore the forward method of the RequestDispatcher interface returns without exception, the response content must be sent and committed, and closed by the servlet container, unless the request was put into the asynchronous mode.\n</quote>\n\nMy reading of the spec is that we should be calling response.flushBuffer() before we call finish() in the RequestDispatcher.\n\nI am going to apply a patch to that effect to trunk, 8.0.x and 7.0.x shortly. I then intend to start an 8.0.x release.\n\n\n[1] http://svn.eu.apache.org/viewvc/tomcat/tc6.0.x/trunk/java/org/apache/catalina/core/StandardHostValve.java?view=annotate#l136",
      "Thank you! Reproduced based on recipe from Comment 8.\n\nMy example:\n1) webapps/examples2/numberwriter2.jsp:\n[[[\nForward to numberwriter.txt\n<jsp:forward page=\"numberwriter.txt\" />\n]]]\n\n2) webapps/examples2/numberwriter.txt:\nCopied output of numberwriter example\n(10000 lines with numbers from 00000000000000000001 up to 00000000000000010000,\n210000 bytes total (EOL = LF))\n\nI request /examples2/numberwriter2.jsp with wget.\nI observe the following pairs of requests in access log file:\n\n127.0.0.1 - - [22/Jan/2015:14:32:00 +0300] \"GET /examples2/numberwriter2.jsp HTTP/1.0\" 200 204800\n127.0.0.1 - - [22/Jan/2015:14:32:20 +0300] \"GET /examples2/numberwriter2.jsp HTTP/1.0\" 206 5200\n\nThat is the first GET request hangs after transferring 204800 bytes. After waiting for 20 seconds wget aborts connection. It repeats request asking for a range of bytes,  and receives remaining 5200 bytes of the file.\n\nThis happens in the same way for all connectors that I tested (those mentioned in Comment 7).",
      "Created attachment 32391\nBuffer test .war as requested by Mark\n\nMark,\nJust in case you still need a test .jsp for this issue.\nrowsToPrint in index.jsp is set to break right now.",
      "This has been fixed in trunk, 8.0.x (for 8.0.18 onwards) and in 7.0.x. Note that the fix that introduced this regression has not been included in a 7.0.x release so no 7.0.x release is affected by this bug."
    ],
    "creation_ts": "2015-01-21T15:29:30Z",
    "fixes": [
      57476
    ]
  },
  {
    "id": 58590,
    "summary": "org.apache.catalina.realm.MemoryRealm can use backgroundProcess() to reload tomcat-users.xml when it changes",
    "description": "Based on a derived class that I created and tested successfully with Tomcat 8, I suggest the following lines be added to MemoryRealm in order to give it this capability:\n\n\n    private Date _lastUpdate = null;\n    private File _usersFile = null;\n\n\n    public MemoryRealm()\n    {\n        _lastUpdate = new Date();\n        _usersFile = new File( getPathname() );\n    }\n\n\n    /**\n     * The default 10 second value for the Engine's backgroundProcessorDelay XML attribute\n     * will cause this method to be called that often.\n     */\n    @Override\n    public void backgroundProcess()\n    {\n        try {\n            // only reload if file has changed since we last loaded it\n            if( _lastUpdate.getTime() < _usersFile.lastModified() ) {\n                _lastUpdate = new Date();\n\n                log.info( \"reloading \" + getPathname() );\n\n                stop();\n                principals.clear();\n                start(); // trigger a repopulation (from tomcat-users.xml)\n            }\n        }\n        catch( Exception ex ) {\n            log.error( \"Failed to re-initialise realm: \", ex );\n        }\n    }",
    "comments": [
      "1. Code conventions:\nhttp://tomcat.apache.org/getinvolved.html\n\nActually Sun's conventions but with spaces instead of tabs.\n\n2. backgroundProcess() runs frequently. I see no need to perform this work on each run.\n\n3. It shall work without stopping and starting the realm. Users should not be locked from the system while it reloads.\n\n4. MemoryRealm is rarely used.  The usual configuration uses UserDatabaseRealm + MemoryUserDatabase (created by MemoryUserDatabaseFactory).\n\n5. It should be possible to turn this feature on or off.\n\nI do not know what the default should be.\nOn one hand we already have <Host autoDeploy=\"true\"> so we are already checking hard drive by default.\n\nOn other hand, on production systems such setting is likely to be off by default (as there is an expectation that nobody will ever update that file).\n\n6. There shall be an explicit method to reload and an explicit method to perform an up-to-date check - so that it were possible to call them via JMX.",
      "(In reply to Konstantin Kolinko from comment #1)\n\nHi Konstantin,\n\n> 1. Code conventions:\n> http://tomcat.apache.org/getinvolved.html\n> \n> Actually Sun's conventions but with spaces instead of tabs.\n\nOk, I can edit to conform with that.\n\n> 2. backgroundProcess() runs frequently. I see no need to perform this work\n> on each run.\n\nEvery 10 seconds for this container, by default, I believe - that doesn't seem too often to merely check the modified date of a file.\n\n> 3. It shall work without stopping and starting the realm. Users should not\n> be locked from the system while it reloads.\n\nOK, fair point, I can try to address that.\n\n> 4. MemoryRealm is rarely used.  The usual configuration uses\n> UserDatabaseRealm + MemoryUserDatabase (created by\n> MemoryUserDatabaseFactory).\n\nTrue, but it wasn't clear to me how to effect the same change in UserDatabaseRealm and I was a bit pushed for time.\n\n> 5. It should be possible to turn this feature on or off.\n\nAs I wasn't proposing this change for the default Realm I didn't think that was necessary.\n\n> I do not know what the default should be.\n> On one hand we already have <Host autoDeploy=\"true\"> so we are already\n> checking hard drive by default.\n> \n> On other hand, on production systems such setting is likely to be off by\n> default (as there is an expectation that nobody will ever update that file).\n\nI think that setting only relates to .war files ?? AFAIK there is currently no mechanism to force re-reading of tomcat-users.xml without a restart. But I accept that if a user requires runtime user/role loading then they should probably use a JNDI or JDBC-based realm instead. However, I think it's nice to have an out-of-the-box alternative that has this capability. \nI wrote this patch at the bank where I work where we use Tomcat (with the APR) to serve several hundred internal users 24x5. We rarely update tomcat-users.xml but when we do we have to perform a disruptive restart. The patch fixes that, at least.\n \n> 6. There shall be an explicit method to reload and an explicit method to\n> perform an up-to-date check - so that it were possible to call them via JMX.\n\nI hadn't thought of that. But as cool and useful as JMX is, it's beyond a lot of the casual users whom this patch is aimed at, I suspect.\n\nHaving said all that, I'm happy to rework it as best I can in order to address all your points or for you to simply reject it.\n\nKind Regards,\nAidan",
      "Two things:\n\n1. If possible, look at the UserDatabase class to see if you can get that to reload instead of the Realm. If you think about e.g. DatsSourceRealm, it makes more sense to \"reload\" the data source and not the realm itself.\n\n2. Instead of calling _lastUpdate.getTime() each time, why not just store the native long value returned by it? (Also, you can then simply store the value of _usersFile.lastModified instead of creating a new Date object).\n\nAs for Konstantin being picky about your implementation... we get to be as picky about patch submissions as the submitters are willing to tolerate. Since you are motivated to get your patch accepted, we just want to make sure it's as high-quality as possible.\n\nThanks for your contributions!",
      "Implemented in trunk for 9.0.13 onwards.\n\nNot back-ported as it would require changing the UserDatabase API as Java 7 doesn't support default method implementations.",
      "I just switch tomcat version from apache-tomcat-9.0.11 to apache-tomcat-9.0.13,\nand then I found the tomcat instance could not work well again.\n\nThe error log shown:\norg.apache.tomcat.jni.Error: 24: Too many open files\n\nAnd here is the data from lsof:\n\n[root@localhost versions]# lsof|grep \"java\"|wc -l\n194186\n[root@localhost versions]# lsof|grep \"java\"|grep \"conf/tomcat-users.xml\"|wc -l\n152991\n\nWe can see there are too many handles from tomcat about \"tomcat-users.xml\",\nso is there any wrong about apache-tomcat-9.0.13 on this case?",
      "See bug 62924."
    ],
    "creation_ts": "2015-11-05T17:30:13Z",
    "fixes": [
      58590
    ]
  },
  {
    "id": 66388,
    "summary": "Classpath resource having a name containing a space can't be read anymore by ClassLoader.getResources(String name)",
    "description": "We are trying to upgrade from Tomcat 9.0.69 to 9.0.70.\n\nBooting our application on 9.0.70 fails because we are trying to read a the content of a classpath resource (sql file) having name containing a space.\nThe file name is: 'com/aqme/product/database/migration/sql/_443/V443_17_36495__some name.sql'\n\nI think this is caused by https://github.com/apache/tomcat/commit/2a03ff1b778e6f4d05a60c3a9597b42ed4176aed#diff-019a2ddbffcf645220f667a8344672adca68f474f437195916ff157adb955fadR129 aka \"Refactor code base to replace use of URL constructors. While they are deprecated in Java 20 onwards, the reasons for deprecation are valid for all versions so move away from them now.\" .\n\nAccording to my test, the URI constructor considers a space character as illegal:\n\n\n>import java.net.URISyntaxException;\n\n>class Scratch {\n>\tpublic static void main(String[] args) throws URISyntaxException {\n>\t\tnew >java.net.URI(\"com/aqme/product/database/migration/sql/_443/V443_17_36495__some name.sql\");\n>\t}\n>}\n\n>Exception in thread \"main\" java.net.URISyntaxException: Illegal character in >path at index 65: >com/aqme/product/database/migration/sql/_443/V443_17_36495__some name.sql\n>\tat java.base/java.net.URI$Parser.fail(URI.java:2974)\n>\tat java.base/java.net.URI$Parser.checkChars(URI.java:3145)\n>\tat java.base/java.net.URI$Parser.parseHierarchical(URI.java:3227)\n>\tat java.base/java.net.URI$Parser.parse(URI.java:3186)\n>\tat java.base/java.net.URI.<init>(URI.java:623)\n>\tat Scratch.main(scratch_11.java:5)\n\nSo my guess is that since https://github.com/apache/tomcat/commit/2a03ff1b778e6f4d05a60c3a9597b42ed4176aed#diff-019a2ddbffcf645220f667a8344672adca68f474f437195916ff157adb955fadR129 any resource name containing a space will be unreachable.\n\nIs it forbidden (from the Java Spec) to ask a ClassLoader for a resource name containing a space? If yes, could you please push back this breaking change to a new Tomcat major version?",
    "comments": [
      "Just a quick word to add that this code change was also pushed to tomcat 10.1.3 and so it affect both the tomcat 9.0 and tomcat 10.1 branches.",
      "Please note that the classloader involved in junit automatic tests (I suppose a java native one) is able to retrieve the resource URI without any issue with the space character:\n\n> @Test\n>  void test() throws URISyntaxException {\n>\t  System.out.println(getClass()\n>\t\t\t  .getResource(\n>\t\t\t\t\t  \"/com/aqme/product/database/migration/sql/_443/V443_17_36495__some name.sql\")\n>\t\t\t  .toURI());\n>  }\n\nproduces:\n\n> file:/home/rhousni/projects/center/core/common/target/classes/com/cos/center/database/migration/sql/_443/V443_17_36495__add_equipment_misc_and%20tag_in_inventory.sql\n\n> Process finished with exit code 0\n\nAs you can see, the space has been replaced with '%20'",
      "The following trivial JSP works as expected:\n\n<%\njava.net.URL u = this.getClass().getClassLoader().getResource(\"test/a a.txt\");\n%>\n<p><%=u.toString()%></p>\n\nPlease provided the simplest test case that demonstrates the issue you are seeing.",
      "Hi Mark Thomas, \n\nPlease find the simplest reproducer at https://github.com/Cosium/tomcat-bug-66388/tree/2ee61392f805895c8e6cda61a5ab518a74de3084 .",
      "Tx. That clarifies things. The issue is when resources are packaged in JARs. Looking now...",
      "Fixed in:\n- 11.0.x for 11.0.0-M2 onwards\n- 10.1.x for 10.1.5 onwards\n-  9.0.x for  9.0.71 onwards\n-  8.5.x for  8.5.85 onwards",
      "*** Bug 66409 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2022-12-13T21:02:49Z",
    "fixes": [
      66388
    ]
  },
  {
    "id": 44312,
    "summary": "Warn when overwritting docBase of the default Host, with docBase of an alias with the same name..",
    "description": "On a system running tomcat 6.0.14 we encountered the problem, that the specified\ndocBase of the default Host of an Engine is being overwritten, when an Alias\nwith the same name (as the default Host) is defined on a different Host of the\nsame Engine.\n\nThe user should be warned if the docBase of the default Host is being changed to\nthe one of an Alias.\n\nWhen using tomcat 6.0.13 this problem didn't occur; means that the docBase of\nthe default Host remained the same for an equal configuration.\n\nAre there any future plans on providing such a warning?\n\nBest regards, Jan",
    "comments": [
      "There are so many ways to do bad things with the configuration files I am not\nsure we could reasonably catch them all or should even try.\n\nThat said, if you want to provide a patch it will be considered. Keep in mind\nthat the more invasive the patch, the less likely it is to be considered.",
      "I guess this only thing needed is to utter a \"SEVERE\" warning when\norg.apache.tomcat.util.http.mapper.Mapper.Context.extensionWrappers are created\nthat overwrite a pre-existing one...",
      "No patch has been provided for consideration.",
      "Reopening.\n\nFrom looking into this, I think messing up host and alias names can really be a surprise for a sloppy admin.\n\nIn the Mapper class the hosts and aliases are in the same list. Duplicates are silently prevented by Mapper.insertMap() with the \"first come, first served\" behaviour. The results may be surprising.\n\n\nI have a patch for this.\n\nA test case:\nConfigure the following hosts in server.xml:\n\n[[[\n      <Host name=\"localhost\"  appBase=\"webapps\">\n        <!-- Alias equal to the name of its own Host is OK. -->\n        <Alias>localhost</Alias>\n      </Host>\n      <Host name=\"second\"  appBase=\"secondwebapps\">\n        <Alias>localhost</Alias>\n      </Host>\n      <Host name=\"third\"  appBase=\"thirdwebapps\">\n        <Alias>fourth</Alias>\n      </Host>\n      <Host name=\"fourth\"  appBase=\"fourthwebapps\">\n        <Alias>localhost</Alias>\n        <Alias>second</Alias>\n      </Host>\n]]]\n\nThere is also a bug in Mapper.removeHost(name):\nIf host with such name is not registered in the mapper, it results in NPE at  \"if (newHosts[i].object == host)\" line.\n(The find() method returns the closest match. To check that the correct item was found, one has to compare names).",
      "Fixed in Tomcat 8 by r1604066 and will be in 8.0.10 onwards.",
      "(In reply to Konstantin Kolinko from comment #4)\n\n> There is also a bug in Mapper.removeHost(name):\n> If host with such name is not registered in the mapper, it results in NPE\n> at  \"if (newHosts[i].object == host)\" line.\n\nFor a record:\nThe bug in removeHost(), removeHostAlias() that was fixed here is more serious than just an NPE.\n\nThe bug is that those methods may remove a wrong host.\n\nThey remove whatever host is located at hosts[pos], but the find() method does not return the exact name match, but closest name.",
      "Fixed in Tomcat 7 by r1604895  and will be in 7.0.55 onwards.",
      "Created attachment 31744\n2014-06-23_tc6_44312.patch\n\nPatch that will be proposed for Tomcat 6.\n\nTestMapper includes test case for bug 56653 (testContextListConcurrencyBug56653)",
      "Tomcat 6 reached EOL without this patch being applied."
    ],
    "creation_ts": "2008-01-28T08:31:40Z",
    "fixes": [
      44312
    ]
  },
  {
    "id": 66512,
    "summary": "File downloads render as empty if access to Tomcat based application is delegated via AJP",
    "description": "Hi there,\n\nI would like to place a report about an issue we are struggling with since we installed latest security patches for Apache Tomcat and Apache HTTPD on our hosting servers.\n\nWe - Plunet GmbH - develop a Java based application and our inbuilt file manager is using a Java Servlet for the file exchange. Our application only supports Java 8. There are plans to support 11 or 17 but we will need time for this unfortunately so we can not just update Java in case this might help.\n\nWe see that since the latest updates of Tomcat users complaint that files with Non-Unicode characters are downloaded as empty files. Such characters are for instance greek, kyrillic or hebrew characters.\n\nWe see the following error in the stderror.log of Tomcat\n01-Mar-2023 17:59:39.100 SCHWERWIEGEND [ajp-nio-127.0.0.1-9129-exec-3] org.apache.coyote.ajp.AjpProcessor.service Error processing request\njava.lang.IllegalArgumentException: Das Unicode Zeichen [\u03a0] an Code Punkt [928] kann nicht kodiert werden, da es au\u00dferhalb des erlaubten Bereiches von 0 bis 255 ist.\nat org.apache.tomcat.util.buf.MessageBytes.toBytesSimple(MessageBytes.java:292)\n\nWe are aware that this issue happens since Tomcat 9.0.71 and also 9.0.73 did not resolve it as we hoped to I am afraid so it is definitely related with one of the latest changes in the MessageBytes implementation of the Tomcat Util library as I could see them in the code history of this file.\nThis issue happens though ONLY if - as it is done on our SaaS servers - the access to our application is delegated via AJP connectors. This is done because all instances on a shared server access it via virtual hosting on ports 80 and 443.\n\nCurrently we have two possible fixing options which both work as we can confirm:\n1. We replace the tomcat-util.jar in Tomcat's lib directory with one from an older Tomcat 9.x release. (this is not very practical though)\n2. We change the delegation via mod_ajp to delegation via mod_proxy (this is huge effort to change it for hundreds of instances)\n\nWe therefore wonder if this is considered to be a bug of maybe just a planned change and we have to maybe change something in the config of server.xml or so. But for me it rather feels like a bug, especially since it only happens in this special scenario. I did some research in the web yet but I did not find anyone who reported the same issue yet so I am putting it into this bugtracker.\n\nLet me know in case you need more information for addressing my issue.\n\nThank you very much!\n\nCheers!\n\nAlex",
    "comments": [
      "That error message would have included a stack trace. Can you provided it please.",
      "Hi Mark,\n\nthanks for getting back to me so fast! Appreciate it.\nPlease see below a complete sample of a stacktrace:\n\n#----------------------------------------------------------\n\n28-Feb-2023 22:46:47.393 SEVERE [ajp-nio-127.0.0.1-9004-exec-35] org.apache.coyote.ajp.AjpProcessor.service Error processing request\n\tjava.lang.IllegalArgumentException: The Unicode character [\u039a] at code point [922] cannot be encoded as it is outside the permitted range of 0 to 255\n\t\tat org.apache.tomcat.util.buf.MessageBytes.toBytesSimple(MessageBytes.java:292)\n\t\tat org.apache.tomcat.util.buf.MessageBytes.toBytes(MessageBytes.java:261)\n\t\tat org.apache.coyote.ajp.AjpMessage.appendBytes(AjpMessage.java:172)\n\t\tat org.apache.coyote.ajp.AjpProcessor.prepareResponse(AjpProcessor.java:1011)\n\t\tat org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:374)\n\t\tat org.apache.coyote.Response.action(Response.java:209)\n\t\tat org.apache.coyote.Response.sendHeaders(Response.java:434)\n\t\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:292)\n\t\tat org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:252)\n\t\tat org.apache.catalina.connector.Response.finishResponse(Response.java:445)\n\t\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:391)\n\t\tat org.apache.coyote.ajp.AjpProcessor.service(AjpProcessor.java:433)\n\t\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\n\t\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)\n\t\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)\n\t\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\t\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n\t\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n\t\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\t\tat java.lang.Thread.run(Thread.java:750)\n\n\n#----------------------------------------------------------\n\nLet me know if you need something else.\n\nCheers!\n\nAlex",
      "Hi,\n\nto clarify:\nIt is about the non-unicode characters in the FILE NAMES - I guess this was not clear in my initial report!\n\nFor instance one of our clients from Greece struggled with a file named\n5_\u03a0\u03a1\u039f\u03a3 EL.pdf\n\nCheers!\n\nAlex",
      "Thanks. It looks like a UTF-8 value is being put into an HTTP header. Prior to the refactoring of MessageBytes, that would have resulted in a corrupted header. Now it triggers an error to make the problem more obvious. That behavioural change was intentional.\n\nThe reason you see the issue with AJP but not HTTP is that HTTP is coded more defensively. HTTP logs the problematic header with a warning and carries on. AJP fails the request.\n\nHTTP headers are expected to be US-ASCII. Non US-ASCII values should be encoded as per RFC 8187. To what extent that is an application responsibility vs a container responsibility is not made clear in the Servlet spec.\n\nI can look at making the AJP code more robust since it needs to be consistent with the HTTP code but that doesn't feel like a proper fix. It should also trigger quite a few warning messages in the logs which you would probably prefer not to see.\n\nGiven that the application works either when the header is corrupted (using an old tomcat-util.jar) or when the header is missing (current HTTP code) that suggests whatever header is being set isn't necessary. Is not setting whatever header is causing the problem an option? (Assuming Tomcat is not setting it).",
      "Hi Mark,\n\nI am open for any solution for our issue.\n\nTo underline, we are using the given config for AJP + Apache Tomcat for years without changes and never saw issues like this. The only thing that changes\nIf desired I can send sample context.xml, server.xml and web.xml of our Tomcats and also the virtual host config for Apache HTTPD so you can get an idea of our setup.\n\nLet me know whatever you will need for helping me (and maybe also others) with this matter and I will see what I can do.\n\nCheers!\n\nAlex",
      "That there have been corrupted header values for years without issue supports the view that the header is probably not required.\n\nWhat would be useful for confirmation is the HTTP response headers. For a request that fails with AJP, repeat the same request in a configuration that uses an older version to tomcat-util.jar and provide the response headers. I want to see if I can figure out what is setting the header.",
      "Hey Mark,\n\nI am not 100% sure what you want me to do but I guess you would like me to track a click on a file(i.e. a download link)in the file manager on a system where it works and not works each and show output in browser debug tools right?\n\nThere are huge differences.\nIn a working system we have this:\n\n#----------------------------------------------------------\nHTTP/2 200 OK\nstrict-transport-security: max-age=0\nx-frame-options: DENY\nx-content-type-options: nosniff\nx-xss-protection: 1; mode=block\ncontent-security-policy: default-src 'self'; script-src 'self' 'unsafe-eval' 'unsafe-inline'; connect-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com;font-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com;frame-ancestors 'self'; form-action 'self'\nreferrer-policy: strict-origin-when-cross-origin, no-referrer-when-downgrade\nfeature-policy: autoplay 'none'; camera 'none'; encrypted-media 'none'; fullscreen 'none'; geolocation 'none'; microphone 'none'; midi 'none'; payment 'none';\ncache-control: private, must-revalidate\npragma: private, must-revalidate\ncontent-disposition: inline; filename=\"5_???? EL.pdf\"; filename*=UTF-8''5_%CE%A0%CE%A1%CE%9F%CE%A3%20EL.pdf\ncontent-length: 53923\nvary: User-Agent\ncontent-type: application/pdf\ndate: Mon, 06 Mar 2023 16:25:51 GMT\nserver: Apache\nX-Firefox-Spdy: h2\n#----------------------------------------------------------\n\n\nIn a non working system it seems nothing goes really through:\n#----------------------------------------------------------\nHTTP/2 200 OK\ncontent-length: 0\ncontent-type: application/pdf\ndate: Mon, 06 Mar 2023 16:25:00 GMT\nserver: None\nX-Firefox-Spdy: h2\n#----------------------------------------------------------\n\nI did both tests with Mozilla Firefox and extracted the information from the networking tab by clicking on the triggered GET request. Is it that what you need? Else please guide me a little bit more.\n\nIt is also not an issue for us to give you access to a test system on our side (at least from the web perspective). If it needs to be something that grants you server-side access via remote desktop or so I had to check this with my team if we can provide such things.\n\nThanks!\n\nCheers!\n\nAlex",
      "P.S:\n\nI am also on Skype so also screen sharing on Skype are absolutely no problem if you are willing to, but I definitely do not expect that from you, it is just a kind offer I would like to make in case you might think that this will be beneficial.\n\n(I just read your profile on Apache Home so I thought I should mention it :) )",
      "Alexander, have a look at this StackOverflow question and answer:\n\nhttps://stackoverflow.com/questions/93551/how-to-encode-the-filename-parameter-of-content-disposition-header-in-http\n\nI suspect your \"download servlet\" is manually-setting the Content-Disposition header in order to transmit the filename of the file back to the client. You are also setting the \"filename\" header as well (as seen in your HTTP response headers).\n\nTry setting the contents of the \"filename\" attribute of the Content-Disposition header to an encoded value in the same way that the \"filename\" header is being encoded.\n\nThe sample code in the highest-voted answer uses C# but you should be able to adapt it to Java code easily.",
      "Hi Mark,\n\nI am not a developer at my company but I found a suspicious piece of code in our codebase that would underline your assumption:\n\nhttps://pastebin.com/m74V3qHx\n\n\nI suppose what you want us to do is to replace this (please confirm):\n\n#----------------------------------------------------------\n                response.setHeader ( \"Content-Disposition\",\n                        forceDownload+\"; filename=\\\"\" + originalFileName + \"\\\"; filename*=UTF-8''\" +\n                                SysFacade.encodeFilename_for_HttpUrlAccess ( originalFileName ) );\n\n#----------------------------------------------------------\n\nwith this:\n\n#----------------------------------------------------------\nString encodedFilename = SysFacade.encodeFilename_for_HttpUrlAccess(originalFileName);\n                response.setHeader ( \"Content-Disposition\",\n                        forceDownload+\"; filename=\\\"\" + encodedFilename + \"\\\"; filename*=UTF-8''\" +\n                                encodedFilename);\n#----------------------------------------------------------\n\nI have access to our codebase and could build a test build with this change, that is not an issue but I must say that a code change would not be the best solution for us because it will mean that we will have to deploy updates for all affected customers.\n\nDo you think this is the only option we have?\n\nLet me know your thoughts!\n\nCheers!\n\nAlex",
      "Alex,\n\nYou might want to test an updated header as if you look at the \"working\" one:\n\ncontent-disposition: inline; filename=\"5_???? EL.pdf\"; filename*=UTF-8''5_%CE%A0%CE%A1%CE%9F%CE%A3%20EL.pdf\n\nthe filename is corrupted (the ???? characters).\n\nFixing the header is (in my view) the best/correct long term option.\n\nThe next Tomcat release round (April) will contain a fix that aligns AJP behaviour with HTTP behaviour (at least I am intending to include such a fix and will link it to this bug when I do). Given you said that mod_proxy_http worked, that should address this issue. I would caution you to test that before relying on it as my expectation is that it will cause the content-disposition header to be dropped.",
      "Hi Mark,\n\nthanks so much for all your help with this matter.\nI am impressed that you are more responsive than any paid support agent :)\n\nI will test the code change on our side and see if this also helps.\nI am also happy to test your change in the Tomcat source code.\n\nWe would need Windows binaries therefore as we download them from the download site of Tomcat.\nSince I can not yet estimate how urgent we need the fix in our header implementation I would love to test your fix asap too. Any chance to get a Windows binary earlier than April? Before I wrote this ticket (i.e. before 9.0.73 was released) I also had a look for pre-built nightly or alpha builds for testing purposes but it seems there are none available in the download archive. But I still dare to ask :)\n\nThanks and have a nice day!\nMy day ends now (actually ended hours ago :D ). I will reply to you from tomorrow again.\n\nEnjoy your evening!\n\nCheers!\n\nAlex",
      "(In reply to Alexander Sch\u00fc\u00dfler from comment #10)\n> I am not a developer at my company but I found a suspicious piece of code in\n> our codebase that would underline your assumption:\n\nThat does indeed look \"suspicious\". I would bet that the original developer was trying to accommodate both clients who do and do not understand RFC 5987-encoded strings simultaneously. I wonder how that would actually behave with each kind of client.\n\nI would indeed change the code, but I would only use a single filename:\n\n    response.setHeader ( \"Content-Disposition\",\n            forceDownload\n            + \"; filename*=UTF-8''\"\n            + SysFacade.encodeFilename_for_HttpUrlAccess ( originalFileName ) );\n\nOr, generate a \"clean\" version of your original filename that is known not to contain any non-ASCII characters. I'll leave that as an exercise for the reader ;)",
      "Dev build for evaluation available from:\nhttps://people.apache.org/~markt/dev/v9.0.74-dev/\n\nUsual caveats apply:\n- this is not an official release\n- use it at your own risk",
      "Dear Mark and Christopher,\n\nin a nutshell:\nBoth attempts will resolve the issue indeed. The Tomcat Dev build resolves the issue but also if I compile our application to a build with a fixed encoding.\n\nWe are thinking about working with https://cxf.apache.org/javadoc/latest-3.1.x/org/apache/cxf/attachment/Rfc5987Util.html in the future.\n\nFYI already 2016 the developer said that we should be RFC compliant but we are still using an own implementation. The original reason why it has been implemented like this was, that apparently on download of files with some special characters the file name was changed after download.\n\nE.g., \"35173 J&J SOPs ED.log\" was then downloaded as \"35173%20j%26j%20sops%20ed.log\".\n\nIt seems though that currently even with the proposal suggested by Christopher the latter issue does not happen anymore, so I guess we can change it here.\n\nThanks so much again for all your help. This was very efficient. Appreciate it.\n\nCheers!\n\nAlex",
      "Fixed in:\n- 11.0.x for 11.0.0-M5 onwards\n- 10.1.x for 10.1.8 onwards\n-  9.0.x for  9.0.74 onwards\n-  8.5.x for  8.5.88 onwards"
    ],
    "creation_ts": "2023-03-06T14:53:10Z",
    "fixes": [
      66512
    ]
  },
  {
    "id": 64771,
    "summary": "Windows CPU processor always running by a thread reading request body from https connection",
    "description": "Created attachment 37472\nJava Thread Dump\n\nThe problem started with windows CPU always keep at 25%, but it should be around 2-7% is there is no request.\n\nI use windows ProcessExplorer identified that one thread is reading request body from an https connection but there is no request at that time based on the audit logs, and the thread has been running more than 2 hours.\n\nI use windows ProcessExplorer and jdk jstack identified the thread \"0xd14\" is always keep running even there is no request to Tomcat.\n\n\n\"boundedElastic-90\" #434 daemon prio=5 os_prio=0 tid=0x0000000021055000 nid=0xd14 runnable [0x000000004383d000]\n   java.lang.Thread.State: RUNNABLE\n\tat org.apache.tomcat.util.net.openssl.OpenSSLEngine.unwrap(OpenSSLEngine.java:603)\n\t- locked <0x0000000608ad2bf0> (a org.apache.tomcat.util.net.openssl.OpenSSLEngine)\n\tat javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:624)\n\n\n\"I/O dispatcher 3\" #30 prio=5 os_prio=0 tid=0x00000000208d2800 nid=0x17e8 waiting for monitor entry [0x0000000024ace000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n\tat org.apache.tomcat.util.net.openssl.OpenSSLEngine.wrap(OpenSSLEngine.java:391)\n\t- waiting to lock <0x0000000608ad2bf0> (a org.apache.tomcat.util.net.openssl.OpenSSLEngine)\n\tat javax.net.ssl.SSLEngine.wrap(SSLEngine.java:469)\n\tat org.apache.tomcat.util.net.SecureNioChannel.write(SecureNioChannel.java:802)\n\n\n\nI try to understand the source \"OpenSSLEngine\" based on the thread logs, it seems that the reading request body is not yet fully completed but the request connection is closed by the caller.\n\nI need help to have a fix to prevent this kind of problem happen in Tomcat to prevent such problem happen in production.",
    "comments": [
      "It is starting from \tat com.ncs.secureconnect.webflux.common.gateway.context.DefaultContext.bufferBody(DefaultContext.java:173)",
      "Could you please provide the full stack traces for these two threads ?",
      "\"boundedElastic-90\" #434 daemon prio=5 os_prio=0 tid=0x0000000021055000 nid=0xd14 runnable [0x000000004383d000]\n   java.lang.Thread.State: RUNNABLE\n\tat org.apache.tomcat.util.net.openssl.OpenSSLEngine.unwrap(OpenSSLEngine.java:603)\n\t- locked <0x0000000608ad2bf0> (a org.apache.tomcat.util.net.openssl.OpenSSLEngine)\n\tat javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:624)\n\tat org.apache.tomcat.util.net.SecureNioChannel.read(SecureNioChannel.java:617)\n\tat org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.fillReadBuffer(NioEndpoint.java:1228)\n\tat org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.read(NioEndpoint.java:1140)\n\tat org.apache.coyote.http11.Http11InputBuffer.fill(Http11InputBuffer.java:780)\n\tat org.apache.coyote.http11.Http11InputBuffer.available(Http11InputBuffer.java:668)\n\tat org.apache.coyote.http11.Http11Processor.available(Http11Processor.java:1185)\n\tat org.apache.coyote.AbstractProcessor.isReadyForRead(AbstractProcessor.java:825)\n\tat org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:574)\n\tat org.apache.coyote.Request.action(Request.java:432)\n\tat org.apache.catalina.connector.InputBuffer.isReady(InputBuffer.java:305)\n\tat org.apache.catalina.connector.CoyoteInputStream.isReady(CoyoteInputStream.java:201)\n\tat org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(ServletServerHttpRequest.java:290)\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher.changeToDemandState(AbstractListenerReadPublisher.java:222)\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher.access$1000(AbstractListenerReadPublisher.java:48)\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher$State$2.request(AbstractListenerReadPublisher.java:333)\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher$ReadSubscription.request(AbstractListenerReadPublisher.java:260)\n\tat reactor.core.publisher.MonoReduce$ReduceSubscriber.onSubscribe(MonoReduce.java:78)\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher$State$1.subscribe(AbstractListenerReadPublisher.java:301)\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher.subscribe(AbstractListenerReadPublisher.java:105)\n\tat reactor.core.publisher.FluxSource.subscribe(FluxSource.java:65)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4213)\n\tat reactor.core.publisher.Mono.subscribeWith(Mono.java:4324)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4184)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4120)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4067)\n\tat com.bac.bacconnect.webflux.common.gateway.context.DefaultContext.bufferBody(DefaultContext.java:173)\n\tat com.bac.bacconnect.commons.filters.SecurityFilter.e(SecurityFilter.java:205)\n\tat com.bac.bacconnect.commons.filters.SecurityFilter.doFilterInternally(SecurityFilter.java:132)\n\tat com.bac.bacconnect.commons.filters.SecurityFilter.doFilter(SecurityFilter.java:106)\n\tat com.bac.bacconnect.commons.common.filter.FilterChain.doFilter(FilterChain.java:42)\n\tat com.bac.bacconnect.igw.webflux.controller.Api.a(Api.java:102)\n\tat com.bac.bacconnect.igw.webflux.controller.Api$$Lambda$417/1031507663.accept(Unknown Source)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\n\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\n\tat reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)\n\tat reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)\n\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)\n\tat reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)\n\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)\n\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)\n\tat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)\n\tat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\n\tat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)\n\tat reactor.core.publisher.MonoZip$ZipInner.onSubscribe(MonoZip.java:318)\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)\n\tat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4213)\n\tat reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\n\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)\n\tat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\n\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\n\tat reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)\n\tat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)\n\tat reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)\n\tat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2026)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)\n\tat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4213)\n\tat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)\n\tat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:211)\n\tat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)\n\tat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\n\tat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4213)\n\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:292)\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:292)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:141)\n\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\n\tat reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)\n\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)\n\tat reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)\n\tat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)\n\tat reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)\n\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:114)\n\tat reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)\n\tat reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:845)\n\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\n\tat reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)\n\tat reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.tryEmitScalar(FluxFlatMap.java:480)\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:413)\n\tat reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)\n\tat reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)\n\tat reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)\n\tat reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:137)\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:363)\n\tat reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:171)\n\tat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)\n\tat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4213)\n\tat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)\n\tat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:211)\n\tat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)\n\tat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4213)\n\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)\n\tat reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4213)\n\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)\n\tat reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)\n\tat reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:931)\n\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78)\n\tat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2346)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2026)\n\tat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4213)\n\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)\n\tat reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96)\n\tat reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:838)\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:600)\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:580)\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:457)\n\tat reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:270)\n\tat reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:289)\n\tat reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)\n\tat reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:137)\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:363)\n\tat reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:171)\n\tat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)\n\tat reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\n\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)\n\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:100)\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)\n\tat reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)\n\tat reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:262)\n\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1783)\n\tat reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:320)\n\tat reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:337)\n\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)\n\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)\n\tat reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription.run(FluxSubscribeOnCallable.java:249)\n\tat reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)\n\tat reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\t\n\t\n\t\n\n\"I/O dispatcher 3\" #30 prio=5 os_prio=0 tid=0x00000000208d2800 nid=0x17e8 waiting for monitor entry [0x0000000024ace000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n\tat org.apache.tomcat.util.net.openssl.OpenSSLEngine.wrap(OpenSSLEngine.java:391)\n\t- waiting to lock <0x0000000608ad2bf0> (a org.apache.tomcat.util.net.openssl.OpenSSLEngine)\n\tat javax.net.ssl.SSLEngine.wrap(SSLEngine.java:469)\n\tat org.apache.tomcat.util.net.SecureNioChannel.write(SecureNioChannel.java:802)\n\tat org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1268)\n\tat org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:764)\n\tat org.apache.tomcat.util.net.SocketWrapperBase.flushNonBlocking(SocketWrapperBase.java:735)\n\tat org.apache.tomcat.util.net.SocketWrapperBase.flush(SocketWrapperBase.java:709)\n\tat org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.flush(Http11OutputBuffer.java:564)\n\tat org.apache.coyote.http11.filters.IdentityOutputFilter.flush(IdentityOutputFilter.java:117)\n\tat org.apache.coyote.http11.Http11OutputBuffer.flush(Http11OutputBuffer.java:217)\n\tat org.apache.coyote.http11.Http11Processor.flush(Http11Processor.java:1179)\n\tat org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:399)\n\tat org.apache.coyote.Response.action(Response.java:209)\n\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:305)\n\tat org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:272)\n\tat org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:118)\n\tat org.springframework.http.server.reactive.ServletServerHttpResponse.flush(ServletServerHttpResponse.java:198)\n\tat org.springframework.http.server.reactive.ServletServerHttpResponse.access$500(ServletServerHttpResponse.java:50)\n\tat org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyFlushProcessor.flush(ServletServerHttpResponse.java:316)\n\tat org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$3.writeComplete(AbstractListenerWriteFlushProcessor.java:288)\n\tat org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$WriteResultSubscriber.onComplete(AbstractListenerWriteFlushProcessor.java:434)\n\tat org.springframework.http.server.reactive.WriteResultPublisher$State.publishComplete(WriteResultPublisher.java:256)\n\tat org.springframework.http.server.reactive.WriteResultPublisher.publishComplete(WriteResultPublisher.java:84)\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor.changeStateToComplete(AbstractListenerWriteProcessor.java:280)\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor.access$300(AbstractListenerWriteProcessor.java:46)\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$3.onWritePossible(AbstractListenerWriteProcessor.java:368)\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onWritePossible(AbstractListenerWriteProcessor.java:153)\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor.writeIfPossible(AbstractListenerWriteProcessor.java:293)\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor.changeStateToReceived(AbstractListenerWriteProcessor.java:272)\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor.access$400(AbstractListenerWriteProcessor.java:46)\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$2.onComplete(AbstractListenerWriteProcessor.java:359)\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onComplete(AbstractListenerWriteProcessor.java:141)\n\tat org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onComplete(ChannelSendOperator.java:231)\n\tat reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onComplete(FluxContextStart.java:115)\n\tat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:359)\n\tat reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:211)\n\tat reactor.core.publisher.FluxTake$TakeFuseableSubscriber.onSubscribe(FluxTake.java:370)\n\tat reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)\n\tat reactor.core.publisher.InternalFluxOperator.subscribe(InternalFluxOperator.java:62)\n\tat org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:77)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4213)\n\tat reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:199)\n\tat reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:57)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\n\tat reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:156)\n\tat com.bac.bacconnect.igw.webflux.controller.Api.a(Api.java:113)\n\tat com.bac.bacconnect.igw.webflux.controller.Api$$Lambda$424/723410695.handle(Unknown Source)\n\tat com.bac.bacconnect.commons.common.filter.FilterChain.doFilter(FilterChain.java:36)\n\tat com.bac.bacconnect.commons.common.filter.FilterChain.a(FilterChain.java:48)\n\tat com.bac.bacconnect.commons.common.filter.FilterChain$$Lambda$429/662427353.handle(Unknown Source)\n\tat com.bac.bacconnect.igw.services.proxy.DefaultProxyService.decrypt(DefaultProxyService.java:48)\n\tat com.bac.bacconnect.commons.filters.DecryptionFilter.doFilter(DecryptionFilter.java:31)\n\tat com.bac.bacconnect.commons.common.filter.FilterChain.doFilter(FilterChain.java:42)\n\tat com.bac.bacconnect.commons.common.filter.FilterChain.a(FilterChain.java:48)\n\tat com.bac.bacconnect.commons.common.filter.FilterChain$$Lambda$429/662427353.handle(Unknown Source)\n\tat com.bac.bacconnect.commons.services.common.agent.async.AsyncClientAgent.a(AsyncClientAgent.java:220)\n\tat com.bac.bacconnect.commons.services.common.agent.async.AsyncClientAgent$$Lambda$441/412883409.accept(Unknown Source)\n\tat java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:760)\n\tat java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:736)\n\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:474)\n\tat java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1962)\n\tat com.bac.bacconnect.commons.services.common.agent.async.d.a(AsyncResponseCallback.java:118)\n\tat com.bac.bacconnect.commons.services.common.agent.async.d.completed(AsyncResponseCallback.java:24)\n\tat org.apache.http.concurrent.BasicFuture.completed(BasicFuture.java:122)\n\tat org.apache.http.impl.nio.client.DefaultClientExchangeHandlerImpl.responseCompleted(DefaultClientExchangeHandlerImpl.java:181)\n\tat org.apache.http.nio.protocol.HttpAsyncRequestExecutor.processResponse(HttpAsyncRequestExecutor.java:448)\n\tat org.apache.http.nio.protocol.HttpAsyncRequestExecutor.inputReady(HttpAsyncRequestExecutor.java:338)\n\tat org.apache.http.impl.nio.DefaultNHttpClientConnection.consumeInput(DefaultNHttpClientConnection.java:265)\n\tat org.apache.http.impl.nio.client.InternalIODispatch.onInputReady(InternalIODispatch.java:81)\n\tat org.apache.http.impl.nio.client.InternalIODispatch.onInputReady(InternalIODispatch.java:39)\n\tat org.apache.http.impl.nio.reactor.AbstractIODispatch.inputReady(AbstractIODispatch.java:114)\n\tat org.apache.http.impl.nio.reactor.BaseIOReactor.readable(BaseIOReactor.java:162)\n\tat org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvent(AbstractIOReactor.java:337)\n\tat org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvents(AbstractIOReactor.java:315)\n\tat org.apache.http.impl.nio.reactor.AbstractIOReactor.execute(AbstractIOReactor.java:276)\n\tat org.apache.http.impl.nio.reactor.BaseIOReactor.execute(BaseIOReactor.java:104)\n\tat org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor$Worker.run(AbstractMultiworkerIOReactor.java:591)\n\tat java.lang.Thread.run(Thread.java:748)",
      "There is insufficient information in the stack trace to identify a bug in Tomcat.\n\nI suspect that the application is retaining references to request/response objects beyond the completion of the response.\n\nI'd recommend re-testing without the Tomcat Native library. If you can reproduce the issue with a pure Java stack it will be easier to debug.\n\nWhat we really need is a *minimal* test case that reproduces this issue on a clean install of the latest 9.0.x release.",
      "Two months have passed and we still don't have a minimal WAR that reproduces this issue. I'll leave this open another month but without a test case to investigate this will get closed.",
      "Resolving as per previous comment.",
      "I believe I have hit this same issue.\n\nI reported a bug against Spring as https://github.com/spring-projects/spring-framework/issues/26407\n\nI have created a standalone application that can be used to reproduce the problem.  The app is linked from the description of the spring issue.\n\nThere is definitely a case where OpenSSLEngine.unwrap gets into an infinite loop.  It would be great if someone familiar with OpenSSLEngine can take a look.  It is not clear if the problem is in tomcat or spring.\n\nCan this tomcat issue be reopened?  Or should I file a new issue?",
      "That doesn't look good, it seems the state of the destination buffer is changing concurrently (suddenly, no remaining bytes although the capacity is still there), which then breaks the algorithm. Maybe this loop should be safer, but it probably means there's missing sync somewhere else [given the report the threading could be funky, async does not allow to do *anything*]. It could be a good idea to add a safety check in unwrap, but then the data read is already corrupted and that request is not going to end well.\n\n--- a/java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java\n+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java\n@@ -600,6 +600,10 @@\n             }\n             if (capacity == 0) {\n                 break;\n+            } else if (idx == endOffset) {\n+                // Avoid loop which could be caused by an unexpected state\n+                // change of the destination buffers and report an error\n+                throw new IllegalArgumentException(\"BAAAAAAAD\");\n             } else if (pendingApp == 0) {\n                 pendingApp = pendingReadableBytesInSSL();\n             }",
      "RE-opening this issue while I look at the test case...",
      "(In reply to Mark Thomas from comment #9)\n> RE-opening this issue while I look at the test case...\n\nThe use of non container threads doing ??? seems to be the root cause of the problems here. Also the behavior of available() could be a contributor, and you did change that for the better very recently. So you might not be able to reproduce.\n\nOTOH, I would still like to add a ISE exit for the loop in OpenSSLEngine.unwrap, in case the state becomes inconsistent.",
      "The reproducer provided in the Spring issue uses Tomcat 9.0.41 and that has the available() fixes.\n\nBug 65001 might be a factor and that is a post 9.0.41 fix but since I can't reproduce the issue, I can't test that. I'll point the OP of the Spring issue to the snapshots to see if that helps.\n\nMy current thoughts are this is not a Tomcat issue as per my comment on the Spring issue.\n\nI agree with your ISE suggestion to catch his state. Async code is easy to get wrong and we should be defensive where practical.",
      "R\u00e9my has added the defensive code.\n\nI'm moving this to NEEDINFO while the Spring team continue to investigate.",
      "As per the update to the spring issue (https://github.com/spring-projects/spring-framework/issues/26407) 9.0.x now contains a fix that may help with this. Currently waiting for user feedback.",
      "A further issue was identified and fixed. Awaiting user feedback.",
      "OP confirms that the issue is fixed."
    ],
    "creation_ts": "2020-09-26T17:19:24Z",
    "fixes": [
      64771
    ]
  },
  {
    "id": 43887,
    "summary": "StandardWrapper.registerJMX() doesn't log exceptions correctly",
    "description": "I was getting some rather unhelpful error messages when trying to deploy a\nweb.xml that included illegal servlet names. I tracked them down to this part of\n/org/apache/catalina/core/StandardWrapper.java:\n\n        } catch( Exception ex ) {\n            log.info(\"Error registering servlet with jmx \" + this);\n        }\n\nThis should probably be changed to:\n\n            log.info(\"Error registering servlet with jmx \" + ex);\n\nSame thing for the catch block ten lines below this one.\n\n\nI first noticed this in 5.5.23, but this code is still present in 6.0 trunk.",
    "comments": [
      "I have fixed this (with a slightly different patch) in trunk and proposed it for\ninclusion in 6.0.x and 5.5.x",
      "Fixed in 6.0.x.",
      "Fixed in 5.5.x and will be included in 5.5.26 onwards."
    ],
    "creation_ts": "2007-11-16T15:31:21Z",
    "fixes": [
      43887
    ]
  },
  {
    "id": 49865,
    "summary": "ExceptionUtils throw NoClassDefFoundError during startup",
    "description": "Remove conf/catalina.properties and get:\n\nSEVERE: Class loader creation threw exception\njava.lang.NoClassDefFoundError: org/apache/tomcat/util/ExceptionUtils\n        at org.apache.catalina.startup.CatalinaProperties.loadProperties(CatalinaProperties.java:112)\n        at org.apache.catalina.startup.CatalinaProperties.<clinit>(CatalinaProperties.java:52)\n        at org.apache.catalina.startup.Bootstrap.createClassLoader(Bootstrap.java:110)\n        at org.apache.catalina.startup.Bootstrap.initClassLoaders(Bootstrap.java:93)\n        at org.apache.catalina.startup.Bootstrap.init(Bootstrap.java:207)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:392)\nCaused by: java.lang.ClassNotFoundException: org.apache.tomcat.util.ExceptionUtils\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:200)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:303)\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:316)\n\norg.apache.tomcat.util.ExceptionUtils is not available for the class loader during this early stage.\n\nObserved in r991965, added TODO marks in CatalinaProperties.java.",
    "comments": [
      "Fixed in trunk and will be included in 7.0.3 onwards."
    ],
    "creation_ts": "2010-09-02T12:52:49Z",
    "fixes": [
      49865
    ]
  },
  {
    "id": 63949,
    "summary": "ERR_INCOMPLETE_CHUNKED_ENCODING errors when using NIO Connector with HTTPS",
    "description": "Created attachment 36892\npatch for NioEndpoint to use pool writes when blocking & non-blocking\n\nProduct: Tomcat 9.0.20+\nComponent: tomcat/java/org/apache/tomcat/util/net/NioEndpoint.java\nPlatform: macOS Mojave 10.14.6\nJava version: 1.8.0_202 (Oracle Corporation)\n\nUsing the NIO Connector with SSL, I am seeing issues with the chunked responses. It's been sporadic, but repeatable with my application within 20 attempts (though usually just the first after a fresh start is enough). Tried on 8.5.40 and 8.5.47, and did not experience the issue. \n\nIt shows up in Chrome as: \n\n> net::ERR_INCOMPLETE_CHUNKED_ENCODING\n\nGoing back to older Tomcat versions, we were able to narrow it down to 9.0.20 being the first version with the issue, specifically this commit: \n\nhttps://github.com/apache/tomcat/commit/4377d2db40\n\nWith the move to a straight write during non-blocking writes, the case for a non-blocking write with a shared selector is different. By reverting back to a pool write, I was able to make fix the issue. \n\nAttached patch applies to master branch, commit 0872b1a498610b008acbdaa719895ae15370359a.",
    "comments": [
      "-1 for the patch, you're doing a blocking write, so it \"works\". We'll examine the issue eventually, but it most likely works fine as is.\nIf it is non blocking, the \"selector\" was not doing any magic, it simply does a non blocking write, hence the patch.",
      "The previous code was using a write loop, that's the only difference I can see and you can try it.\nSuch as:\n--- a/java/org/apache/tomcat/util/net/NioEndpoint.java\n+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java\n@@ -1273,9 +1273,13 @@\n                 // registered for write once as both container and user code can trigger\n                 // write registration.\n             } else {\n-                if (socket.write(from) == -1) {\n-                    throw new EOFException();\n-                }\n+                int n = 0;\n+                do {\n+                    n = socket.write(from);\n+                    if (n == -1) {\n+                        throw new EOFException();\n+                    }\n+                } while (n > 0 && from.hasRemaining());\n             }\n             updateLastWrite();\n         }\n\nIf you are still experiencing an issue, please provide a test case (there's an extensive non blocking write test in the Tomcat testsuite, which is not failing).",
      "Made that change, and don't have the problem anymore. \n\nWould adding that write loop back in be a possibility? \n\nThanks,\nJustin",
      "Ok, sorry for the trouble, the loop seemed only useful for blocking mode so I didn't add it. The fix will be in Tomcat 9.0.30.",
      "Thanks for the fast turn around!"
    ],
    "creation_ts": "2019-11-21T17:58:51Z",
    "fixes": [
      63949
    ]
  },
  {
    "id": 68862,
    "summary": "InputBuffer#handleReadException breaks FailedRequestFilter",
    "description": "InputBuffer#handleReadException calls (since e77176c) Response#sendError.\n\nIf you use FailedRequestFilter and a SocketTimeoutException occurs while parsing request parameters, this change leads to an IllegalStateException in org.apache.catalina.connector.ResponseFacade.checkCommitted: java.lang.IllegalStateException: Cannot call sendError() after the response has been committed",
    "comments": [
      "Correction of my description: InputBuffer calls Response#sendError since https://github.com/apache/tomcat/commit/700d582b508d899aa6dd2d1cc1e42c12e9f47ba0",
      "Ok, it is better to fallback when there's a NPE due to commit. The fix will be in 11.0.0-M19, 10.1.21 and 9.0.88.",
      "I don't think that this commit (https://github.com/apache/tomcat/commit/e7f902bb73c15a75e153c4a25036eabe788d3bb6)  fixes the error to the full extent.\nIn my use case, the IllegalStateException is thrown when FailedRequestFilter calls Response#sendError.",
      "What is FailedRequestFilter ?",
      "org.apache.catalina.filters.FailedRequestFilter",
      "This code was removed, so I forgot about it. I added a catch ISE for now in FailedRequestFilter."
    ],
    "creation_ts": "2024-04-05T11:27:15Z",
    "fixes": [
      68862
    ]
  },
  {
    "id": 65506,
    "summary": "Wrong conditional on WsSession checkExpiration",
    "description": "Created attachment 37983\nBuggy conditional\n\nThere's a invalid conditional on WsSession checkExpiration method.\n\nThe conditional that checks if the write timeout expired, is checking if the diff of now and lastActiveWrite is bigger than \"timeoutRead\".\n\nelse if (timeoutWrite > 0 && (currentTime - lastActiveWrite) > timeoutRead)\n\nThe comparison should check if is bigger than \"timeoutWrite\" not \"timeoutRead\".\n\nThe correct behavior should be the following:\n\nelse if (timeoutWrite > 0 && (currentTime - lastActiveWrite) > timeoutWrite)\n\nThank you.",
    "comments": [
      "Ok, I will fix that.",
      "Thanks, the fix will be in 10.1.0-M5, 10.0.11, 9.0.53, 8.5.71."
    ],
    "creation_ts": "2021-08-18T13:18:45Z",
    "fixes": [
      65506
    ]
  },
  {
    "id": 64202,
    "summary": "Upload is broken in version 9.0.31",
    "description": "Created attachment 37067\nThe sample example that demonstrates the breakage\n\nJersey Multi-part upload is broken when using Mac OS 10.14.6 browsers and CenOS 6/Ubuntu 16 server with Tomcat version 9.0.31 over HTTPS for binary content. \nThe upload is working with Tomcat version 9.0.30 for the same client and server.\nTo reproduce, unzip the sample attached and follow the steps.\nThe upload is known to work:\n* locally\n* over HTTP\n* for text content such as CSV and JSON",
    "comments": [
      "The upload fails with 400 status code error in org.jvnet.mimepull.MIMEParser.\nDepending on the browser used it can be:\n* Reached EOF, but there is no closing MIME boundary.\n* Missing start boundary",
      "Do you think you could provide a wire dump of the multipart message?",
      "I can't repeat this with the provided sample application. I suspect you are hitting an edge case somewhere in the I/O code.\n\nPlease can you provide:\n- exact version of browser used\n- exact version of Java used\n- a file known to trigger the issue.",
      "If you could also test the current 9.0.32 release candidate that would be useful as well.",
      "I suppose we can leave it for now but it looks like an obvious duplicate of 64195.",
      "Created attachment 37068\nThe file known to trigger an issue",
      "The issue happens with the following browsers on Mac OS Mojave 10.14.6 (18G3020):\n* Firefox 73.0.1 (64-bit)\n* Chrome 80.0.3987.122 (Official Build) (64-bit)\nand the following JDK versions\n* CentOS 7 (Core) openjdk 11.0.6 2020-01-14\n* Ubuntu 16.04.6 LTS (Xenial Xerus) openjdk 11.0.1 2018-10-16\nLet me get wire dump or curl to reproduce",
      "(In reply to ishaigorodsky from comment #6)\n> Created attachment 37068 [details]\n> The file known to trigger an issue\n\nThat a PNG and not a multipart request. Are you certain?",
      "I can now recreate the issue using 9.0.31 and the sample application. Using separate machines for client and server appears to be key. Exact Java / OS / browser versions seem less important at this stage. Possibly packet size or latency related.\n\nI'm working on isolating the root cause.",
      "Switching to Http11Nio2Protocol as suggested in the other ticket fixes the issue.",
      "*** Bug 64195 has been marked as a duplicate of this bug. ***",
      "I can confirm that this issue is fixed in 9.0.32.\n\nFurther the commit that fixed this was, as we suspected:\nhttps://github.com/apache/tomcat/commit/6e60713c75141bc00f03f08f759df993a6416c71\n\nI'm leaving this open for now as I want to dig into this a little further to see what the root cause was.",
      "Great. It is timing related. If I enable TLS debug logging the problem is no longer reproducible.",
      "(In reply to Mark Thomas from comment #12)\n> I can confirm that this issue is fixed in 9.0.32.\n> \n> Further the commit that fixed this was, as we suspected:\n> https://github.com/apache/tomcat/commit/\n> 6e60713c75141bc00f03f08f759df993a6416c71\n> \n> I'm leaving this open for now as I want to dig into this a little further to\n> see what the root cause was.\n\nOk, can you see if the latch version of the same thing works better ? [the now removed block poller used that]\n\nIt would be good to have a \"reliable\" POST test case since this is an often reported issue and it's not practical to test it manually.",
      "Found the issue.\n\nThe read needs to be in a loop.\n\nA TLS Network read can result in zero application bytes. Therefore you have to keep reading until you get a timeout, EOF or data. The original patch read a second time but did not handle the case of that read also resulting in zero byte. The current code also keeps track of the remaining read timeout int he case of multiple reads which adds a little complexity.\n\nI haven't looked a write. It is possible a similar issue exists there.\n\nMarking this as FIXED since the commit that triggered this has been reverted.",
      "Thanks ! So annoying ... I was 100% certain the problem was some thread safety problem, so since I couldn't reproduce I got nowhere. I'll revert the change to use a latch since it is likely useless.\n\nNo problem for write, it already loops since it must write the whole buffer.\n\nI probably won't make a change to keep track of the overall timeout at this time, the timeout is the IO timeout and something did happen. So this would be a deviation from the 9 behavior but it's not necessarily a bad thing. Up for discussion I guess ... If the timeout becomes the overall timeout then the write must be modified as well.",
      "*** Bug 64218 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2020-03-07T02:59:36Z",
    "fixes": [
      64202
    ]
  },
  {
    "id": 56661,
    "summary": "ServletRequest#getLocalAddr() returns the hostname, not the IP address",
    "description": "request.getLocalAddr() does not return an IP-address, but the host name from the http header. \n\nAccessing http://127.0.0.1:8080/ will make getLocalAddr() return 127.0.0.1\nAccessing http://localhost:8080/ will make getLocalAddr() return localhost\nAccessing http://localhost/ using mod_jk/ajp13 will also make getLocalAddr() return localhost\n\nI see this on java7 using MacOS and FreeBSD.",
    "comments": [
      "Not yet verified (by me), but the Servlet API Javadoc pretty clearly says this method should return an IP address (and not a hostname).",
      "Tested with 7.0.x and 8.0.x on OSX and request.getLocalAddr() returns an IP address when accessed via http://localhost:8080/...",
      "I do get 0:0:0:0:0:0:0:1 when accessing http://localhost:8080/ now, that might just have been a mistake.\n\nIt seems that the problem is with the AJP Connector?\n\n$ cat foo.jsp \n\t<%= request.getLocalAddr() %>\n$ curl  http://localhost/foo.jsp\n\tlocalhost\n$ curl -k https://localhost/foo.jsp\n\tlocalhost\n\nThis holds true for tomcat 7.0.54 on FreeBSD and Mac OS X.",
      "Hi,\n\nI can confirm that this problem happens with Tomcat 8.0.9 when using AJP NIO connector (I used the ISAPI Redirector with IIS).\nIn this case, request.getLocalAddr() returns the name of the \"Host\" header instead of an IP address, e.g. \"localhost\".\n\nIf using the HTTP NIO connector, the problem does not occur; request.getLocalAddr() will return an IP address in this case, e.g. \"0:0:0:0:0:0:0:1\".",
      "All AJP connectors behave this way and have done since getLocalAddr() was added in Servlet 2.4.\n\nThe problem is that the AJP protocol passes the remoteAddr, remoteHost, localName and localPort but *NOT* the localAddr.\n\nlocalAddr should be the IP address the client used to contact the server and this simply is not available - hence why the host name was used.\n\nPossible solutions include modifying the AJP protocol but this is non-trivial.\n\nA simple work-around would be to have the reverse proxy add a custom header with the localAddr information and then have a Valve / Filter read that header value and then present it to the application.\n\nI'm leaning towards resolving this as WONTFIX.",
      "Technically, this shouldn't require a change to the AJP protocol, as arbitrary HTTP headers can be sent just by modifying the configuration.\n\nUnfortunately, the CGI spec does not specify anything like \"localAddr\"... the closest thing available is SERVER_NAME which ... comes from the client's \"Host\" header. I suspect this is what is being used for getLocalAddr, here.\n\nReading a bit about httpd's capabilities, I'm not sure it's actually possible to get the IP address of the server interface that accepted the request from the client. If the address *can* be obtained, sending it via an HTTP header and using something like the RemoteIpValve would probably work.",
      "I've just taken a look at the httpd docs as well and I don't see any way of obtaining the IP address of the interface that the request was received on. That reduces the choices to:\na) returning null\nb) return the hose name (current behaviour)\nc) use DNS to get the IP address\nd) return an empty string\n\nIf I was starting from a clean slate, I choose option a). However, given the current behaviour that is likely to start triggering NPEs in applications. That makes d) preferrable to a).\n\nThere are many cases where c) will not return the correct value. DNS round-robin load-balancing being one. Therefore, I don't think this apporach should be used.\n\nSo that leaves b) or d) as the possible options in this case. I don't think we should change it for 7.0.x or earlier but we could change it in 8.0x onwards.\n\nI leave it a few days before doing anything to give folks a chance to comment.",
      "Just re=read my previous comment and it isn't very clear.\n\nMy proposal is to leave 7.0.x and earlier unchanged and to change 8.0.x onwards to return the empty string by default for getLocalAddr()",
      "(In reply to Mark Thomas from comment #7)\n> I've just taken a look at the httpd docs as well and I don't see any way of\n> obtaining the IP address of the interface that the request was received on.\n\nLooking at CustomLog formats [1] it says that \"%A\" is \"Local IP-address\". Thus there should be a way.\n\nThere is also such feature as IP-based virtual hosts. [2]\n\n\n[1] http://httpd.apache.org/docs/2.4/mod/mod_log_config.html#formats\n[2] http://httpd.apache.org/docs/2.4/vhosts/ip-based.html",
      "There is such directive as\n JkOptions  +ForwardLocalAddress\n\nhttp://tomcat.apache.org/connectors-doc/webserver_howto/apache.html\n\nCommit that implemented it:\nhttp://marc.info/?l=tomcat-dev&m=111545377731908&w=2\n\n>> r->connection->local_ip",
      "As examples:\nImplementation of custom \"JK_LB_ACTIVATION\" request attribute: r1078846\nImplementation of custom \"AJP_REMOTE_PORT\" request attribute: r756926 r757223\n\nThose are the only custom header names in native/common/jk_ajp_common.h of mod_jk, so I think those are the only examples.",
      "OK. Looks like the information is available in the httpd internals but not (obviously) via config. Therefore, if mod_jk implements a new request atribute to pass this information, Tomcat can use it for getLocalAddr(). Moving this to mod_jk to get that implemented.",
      "Implemented new request attribute \"AJP_LOCAL_ADDR\" in mod_jk r1609589.\n\nWill be part of version 1.2.41.\n\nAssigning issue back to Tomcat for implementing the use of the new attribute.",
      "I added support for the new attribute to TC 8 in r1609593.\nNeeds some more testing before porting back to TC7 an probably 6.\n\nA full test needs a dev build of mod_jk r1609589 or later.\n\nAlternatively one can try in Apache:\n\nSetEnvIf Server_Addr \"(.*)\" AJP_LOCAL_ADDR=$1\nJkEnvVar AJP_LOCAL_ADDR\n\nWhich for current releases of mod_jk would send a request attribute named AJP_LOCAL_ADDR with its value set to the value of the Apache internal variable SERVER_ADDR which in turn contains the local IP address of Apache.\n\nStarting with mod_jk 1.2.41 the attribute will be set without explicit configuration.",
      "Test looked good.\nPorted by to TC 7 in r1609606 and proposed for TC 6.",
      "Forwarding the local IP address as the custom request attribute will also be part of mod_proxy_ajp in the Apache web server 2.4.10. Adding it to the next release of Apache httpd 2.2 has been proposed as well.",
      "Fixed in 6.0.x for 6.0.42 onwards.",
      "I'm a bit confused with the definition of getLocalXXX() APIs.\nShould they return the web server(intermediary in view of WAS)'s information?",
      "(In reply to Eugene Chung (TmaxSoft) from comment #18)\n> I'm a bit confused with the definition of getLocalXXX() APIs.\n> Should they return the web server(intermediary in view of WAS)'s information?\n\nI haven't checked the Spec but I don't it will clarify the behavior for that situation.\n\nOne of the major ideas behind the AJP protocol is to transport the communication data, that the intermediary saw, to the backend and let the application see that information as if the backend was placed at the position of the intermediary. One goal is to make sure, that any self-referential URL the application creates will actually point to the intermediary and not the the backend.\n\nThat's why we have chosen to return the local IP of the intermediary from the AJP connector."
    ],
    "creation_ts": "2014-06-24T00:10:58Z",
    "fixes": [
      56661
    ]
  },
  {
    "id": 68035,
    "summary": "Deploying a directory from Host appBase fails",
    "description": "I have a webapp directory \"my-webapp\" in apache-tomcat/webapps. A .war file does NOT exist. \n\nExecuting the GET request http://localhost:8080/manager/text/deploy?war=/my-webapp fails with the message \"FAIL - Failed to deploy application at context path [/my-webapp]\"\n\nStack Trace:\n31-Oct-2023 11:31:09.887 SEVERE [http-nio-8080-exec-7] org.apache.catalina.startup.ExpandWar.copy Error copying [my-webapp] to [apache-tomcat\\webapps\\my-webapp]\n        java.io.FileNotFoundException: my-webapp (The system cannot find the file specified)\n                at java.base/java.io.FileInputStream.open0(Native Method)\n                at java.base/java.io.FileInputStream.open(FileInputStream.java:216)\n                at java.base/java.io.FileInputStream.<init>(FileInputStream.java:157)\n                at org.apache.catalina.startup.ExpandWar.copy(ExpandWar.java:270)\n                at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:954)\n                at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:334)\n                at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)\n                at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\n                at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)\n                at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n                at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\n                at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n                at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n                at org.apache.catalina.filters.CorsFilter.handleNonCORS(CorsFilter.java:331)\n                at org.apache.catalina.filters.CorsFilter.doFilter(CorsFilter.java:158)\n                at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n                at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n                at org.apache.catalina.filters.HttpHeaderSecurityFilter.doFilter(HttpHeaderSecurityFilter.java:129)\n                at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n                at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n                at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\n                at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\n                at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:597)\n                at org.apache.catalina.valves.RequestFilterValve.process(RequestFilterValve.java:355)\n                at org.apache.catalina.valves.RemoteAddrValve.invoke(RemoteAddrValve.java:54)\n                at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\n                at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\n                at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673)\n                at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n                at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)\n                at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)\n                at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\n                at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)\n                at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)\n                at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                at java.base/java.lang.Thread.run(Thread.java:833)\n\n\nDocumentation I am reading is here.\nhttps://tomcat.apache.org/tomcat-10.1-doc/manager-howto.html#Deploy_a_Directory_or_War_from_the_Host_appBase",
    "comments": [
      "Another note. I have autoDeploy=\"false\" in server.xml.",
      "The deploy command is designed to copy from somewhere. So here, you simply want to deploy a webapp from its regular spot, without autodeploy.\nAlthough it is possible to handle it by not copying anything when the final path is already the origin (hence the change to an enhancement), you should be able to deploy a descriptor instead (the \"config\" parameter) which could also be useful to you thanks to the extra configuration it gives you access to.",
      "Changing this back to a bug as it is documented to work and it has worked in previous versions. It looks like it was broken by this commit:\n\nhttps://github.com/apache/tomcat/commit/1f9b47ed2a9ad9039b8a83fa77f2b5ca836f4480\n\nwhich doesn't consider the src == dest case",
      "Fixed in:\n- 11.0.x for 11.0.0-M14 onwards\n- 10.1.x for 10.1.16 onwards\n-  9.0.x for  9.0.83 onwards\n\nNote 8.5.x was not affected",
      "Tested this again in 10.1.16\n\nStill seeing an issue. Seems like it is trying to deploy the webapp from apache-tomcat/bin rather than appBase.\n\nhttps://github.com/apache/tomcat/blob/a0d5005d00719ff387408d1379ba4a2b88795cbc/java/org/apache/catalina/manager/ManagerServlet.java#L954\n\nI added some debug statements and here are the logs from manager.\n\n11-Dec-2023 09:40:24.702 INFO [http-nio-8080-exec-1] org.apache.catalina.core.ApplicationContext.log Manager: install: Installing web application '/my-webapp' from 'my-webapp'\n11-Dec-2023 09:40:24.704 INFO [http-nio-8080-exec-1] org.apache.catalina.core.ApplicationContext.log Manager: file: 'C:\\Users\\brandon.gutzmann\\Downloads\\apache-tomcat-10.1.16-windows-x64\\apache-tomcat-10.1.16\\bin\\my-webapp' local: 'C:\\Users\\brandon.gutzmann\\Downloads\\apache-tomcat-10.1.16-windows-x64\\apache-tomcat-10.1.16\\webapps\\my-webapp'\n11-Dec-2023 09:40:24.705 INFO [http-nio-8080-exec-1] org.apache.catalina.core.ApplicationContext.log Manager: not equal\n\nAnd the same error as before\n\n11-Dec-2023 09:40:24.708 SEVERE [http-nio-8080-exec-1] org.apache.catalina.startup.ExpandWar.copy Error copying [my-webapp] to [C:\\Users\\brandon.gutzmann\\Downloads\\apache-tomcat-10.1.16-windows-x64\\apache-tomcat-10.1.16\\webapps\\my-webapp]\n\tjava.io.FileNotFoundException: my-webapp (The system cannot find the file specified)",
      "The original report used ...war=/my-webapp. This is going to try and deploy the directory my-webapp located at the root of the file system which isn't what is required.\n\nThe current code will work if you use the full path to the directory in the appBase.\n\nI'll expand the previous fix so ...war=my-webapp also works as documented.",
      "Fixed in:\n- 11.0.x for 11.0.0-M16 onwards\n- 10.1.x for 10.1.18 onwards\n-  9.0.x for  9.0.85 onwards"
    ],
    "creation_ts": "2023-10-31T18:33:24Z",
    "fixes": [
      68035
    ]
  },
  {
    "id": 59823,
    "summary": "HttpServletRequest#authenticate does not invoke JASPIC SAM",
    "description": "When a JASPIC SAM is (programmatically) installed and subsequently HttpServletRequest#authenticate() is called the SAM is not actually being invoked.\n\nAccording to 3.9.3 of the JASPIC 1.1 spec the SAM should be invoked.\n\nI added a new test to the Java EE 7 samples project for this: https://github.com/javaee-samples/javaee7-samples/tree/master/jaspic/programmatic-authentication\n\nTo reproduce:\n\n* Deploy .war in submodule to Tomcat 9.0.0.M8\n* Request http://localhost:8080/jaspic-programmatic-authentication/public/authenticate\n\nThe result is:\n\nThis is a public servlet \nbefore web username: null\nbefore web user has role \"architect\": false\nrequest.authenticate outcome: false\nafter web username: null\nafter web user has role \"architect\": false\n\nBut should be:\n\nThis is a public servlet \nbefore web username: null\nbefore web user has role \"architect\": false\nrequest.authenticate outcome: true\nafter web username: test\nafter web user has role \"architect\": true",
    "comments": [
      "Thanks for the report. This is fixed in 9.0.x for 9.0.0.M10 onwards and 8.5.x for 8.5.5. onwards.",
      "Thanks for the fix Mark! :)\n\nP.s.\n\nJust wondering, as it's not clearly described in the JASPIC spec at all, but what did you use for the return values of request.authenticate?\n  \nI noticed before that GlassFish returns false when either authentication is in progress (SEND_CONTINUE returned from SAM), authentication failed or the unauthenticated caller principal was set.\n \nJBoss however returns false when authentication is in progress, but throws exception when authentication fails or the unauthenticated caller principal was set.\n\nThe only thing upon which they agree is that true is returned when authentication succeeded (non null caller principal set).",
      "true if AuthStatus.SUCCESS, otherwise false including AuthException (which is caught and logged).",
      ">true if AuthStatus.SUCCESS\n\nIs that also when a null is passed to the CallerPrincipalCallback? \n\nSince in that case the container will establish this unauthenticated identity (see http://docs.oracle.com/javaee/7/api/javax/security/auth/message/callback/CallerPrincipalCallback.html). This means HttpServletRequest.getUserPrincipal() will return a null.\n\nBut the JavaDoc for the return value of HttpServletRequest#authenticate says \"true when non-null values were or have been established as the values returned by getUserPrincipal, getRemoteUser, and getAuthType.\"",
      "It was. It isn't any more.",
      ">It was. It isn't any more.\n\nGreat! Does it return false now or is an exception thrown? (i.e. does it behave like GlassFish or like JBoss?)\n\nJBoss' behaviour is not because of some kind of bug or oversight btw. Stuart at the time said to have read the Servlet and JASPIC specs multiple times for this case and was convinced it mandated an exception to be thrown when a null principal was set.",
      "It returns false.",
      ">It returns false.\n\nOk thanks ;)\n\nI'll start a topic for this on the Servlet/JASPIC mailing lists, see if the outcome requirements can be clarified. For now I can't add a test for this either since I'm not 100% sure what the outcome should be."
    ],
    "creation_ts": "2016-07-07T17:12:18Z",
    "fixes": [
      59823
    ]
  },
  {
    "id": 63982,
    "summary": "CombinedRealm makes assumptions about principal implementation",
    "description": "Consider the following configuration:\n\n>   <Realm className=\"org.apache.catalina.realm.CombinedRealm\">\n>     <Realm className=\"CustomRealm\"\n>       ... />\n>     <Realm className=\"CustomRealm\"\n>       ... />\n>   </Realm>\n\nCustomRealm uses CustomPrincipal, not of type GenericPrincipal. Two issues arise:\n\n1. When AuthenticatorBase now invokes CombinedRealm#hasRole() it will delegate to RealmBase#hasRole() which will call RealmBase#hasRoleInternal(): it will always return false bacause CustomPrincipal is not instance of GenericPrincipal.\n2. CustomRealm#getRoles() will again delegate to RealmBase#getRoles() and will throw an exception.\n\nThus, this realm is tied to the GenericPrincipal and cannot be used generically. You have to write a CustomCombinedRealm.\n\nIt could be solved the following way:\n1. Delegate all #hasRole() calls to the underlying realms and return first true\n2. Delegate all #getRoles() calls to the underlying realms, catch exceptions, rethrow at and return the first array.\n\nUnfortunately, RealmBase throws an IllegalStateException for #getRoles(), but this is nowhere documented. If would return a null array, one could loop until the first non-null array. In my opinion, if this is not documented, it could simply return null.",
    "comments": [
      "It is obvious reading the code in the realm package that it is assumed GenericPrincipal will have to be used, so that applies to this hypothetical CustomRealm as well. Of course, there are plenty of people out there who are actively looking for trouble :)",
      "I think getRoles() can be deprecated. It isn't used anywhere now. It was added to support the failed GSoC JASPIC work.\n\nThe proposed solution for hasRole() looks reasonable to me.",
      "(In reply to Mark Thomas from comment #2)\n> I think getRoles() can be deprecated. It isn't used anywhere now. It was\n> added to support the failed GSoC JASPIC work.\n\nEven if, it has to be supported until Tomcat 10. Do you consider returning null is better here? That would make like in CombinedRealm easier.\n\n> The proposed solution for hasRole() looks reasonable to me.\n\nFine.\n\nI will work on this.",
      "(In reply to Michael Osipov from comment #3)\n> Even if, it has to be supported until Tomcat 10. Do you consider returning\n> null is better here? That would make like in CombinedRealm easier.\n\nIt has to be present until Tomcat 10. The code is unused (by Tomcat). I think it is better to leave the code as is - apart from adding a deprecation marker. I don't think now is the time to be changing the behaviour of that method.",
      "(In reply to Mark Thomas from comment #4)\n> (In reply to Michael Osipov from comment #3)\n> > Even if, it has to be supported until Tomcat 10. Do you consider returning\n> > null is better here? That would make like in CombinedRealm easier.\n> \n> It has to be present until Tomcat 10. The code is unused (by Tomcat). I\n> think it is better to leave the code as is - apart from adding a deprecation\n> marker. I don't think now is the time to be changing the behaviour of that\n> method.\n\nEven if the behavior is not documented and an implementation detail? How would you properly call #getRoles() from the CombinedRealm then?",
      "(In reply to Michael Osipov from comment #5)\n\n> Even if the behavior is not documented and an implementation detail? How\n> would you properly call #getRoles() from the CombinedRealm then?\n\nI wouldn't. I'd leave it alone. It isn't used internally in Tomcat and in case someone is using it, I don't want to change the API/behaviour. I'd just mark it as deprecated so no-one new starts using it.",
      "Fixed in:\n- master for 9.0.30 onwards\n- 8.5.x for 8.5.50 onwards\n- 7.0.x for 7.0.99 onwards",
      "I'm hit by the upcoming removal of Realm#getRoles(). I was using the Realm#getRoles() to get the Roles of a Principal. Is there an alternate way to perform this action, in regard of the upcoming removal of the function in Realm?",
      "(In reply to Ole Ostergaard from comment #8)\n> I'm hit by the upcoming removal of Realm#getRoles(). I was using the\n> Realm#getRoles() to get the Roles of a Principal. Is there an alternate way\n> to perform this action, in regard of the upcoming removal of the function in\n> Realm?\n\nDo what I do cast Principal object to your principal implementation and invoke your #getRoles() there: http://tomcatspnegoad.sourceforge.net/xref/net/sf/michaelo/tomcat/realm/ActiveDirectoryPrincipal.html#L134"
    ],
    "creation_ts": "2019-12-02T11:04:44Z",
    "fixes": [
      63982
    ]
  },
  {
    "id": 49424,
    "summary": "Using URL.ChunkedStreamingMode results in HTTP response code: 405",
    "description": "Using the URL class coupled with setChunkedStreamingMode  results in:\n\nSEVERE: java.lang.NullPointerException\n\tat org.apache.catalina.connector.Request.readChunkedPostBody(Request.java:2632)\n\nThis is true for 6.0.26.  This worked fine in 6.0.16 and the source code\nthat I have for 6.0.20 does not have the readChunkedPostBody method.\n\nAttached is a TestNG unit test demonstrating the issue.  The method\nconnectNoChunking() runs fine while the method connectWithChunking() fails.",
    "comments": [
      "Created attachment 25578\nTestNG unit test to demonstrate the issue.",
      "The header in the test case is not compatible with the Apache License v2. Please confirm how you intended this test case to be licensed.",
      "(In reply to comment #2)\n> The header in the test case is not compatible with the Apache License v2.\n> Please confirm how you intended this test case to be licensed.\n\nSorry about that, our standard header.  I'll upload the file without\nthe header and release all rights to the test case.",
      "Created attachment 25579\nTestNG unit test to demonstrate the issue.",
      "Thanks. I've converted this to a Tomcat unit test and confirmed the problem.\n\nI've fixed the bug in trunk and proposed the fix for 6.0.x",
      "(In reply to comment #5)\n> Thanks. I've converted this to a Tomcat unit test and confirmed the problem.\n> \n> I've fixed the bug in trunk and proposed the fix for 6.0.x\n\nExcellent!\n\nAny visibility on when the next point release might be?\n\nWe would like to upgrade, this is a blocker for us, and we will not be able\nto upgrade during the middle of the football season.",
      "Current plans are to start the 6.0.27 release process on Monday next week. Depending on how that goes the there could be a release by the end of next week or it could take several weeks to get to a stable release.",
      "Proposed for 5.5 as well.\n\nFixed in 6.0 in r955665 and will be in 6.0.28 and later.\nNote, that 6.0.27 does not include the fix.",
      "The fix has been applied 5.5.x and will be included in 5.5.30 onwards."
    ],
    "creation_ts": "2010-06-10T14:08:48Z",
    "fixes": [
      49424
    ]
  },
  {
    "id": 69206,
    "summary": "jdbc-pool is not returning the proxied Statement from a ResultSet",
    "description": "The proxy ResultSet returned from any of the Statement/PreparedStatement/CallableStatement implementations (executeQuery, getResultSet, getGeneratedKeys) does not intercept the getStatement call in the returned ResultSet, so the un-proxied statement is leaked to the caller.\n\nThis was discovered as part of https://hibernate.atlassian.net/browse/HHH-18325 which has highlighted that the 'equals' checks in the proxied Statement do not take into account a call to perform a comparison with a non-proxied object (e.g. performing `proxiedStatement.equals(proxiedStatement.getResultSet().getStatement())` throws an exception rather than returning a true/false value).",
    "comments": [
      "Proposed fix: https://github.com/apache/tomcat/pull/742",
      "*** Bug 65347 has been marked as a duplicate of this bug. ***",
      "Fixed in:\n- 11.0.x for 11.0.0-M23 onwards\n- 10.1.x for 10.1.27 onwards\n-  9.0.x for  9.0.92 onwards",
      "*** Bug 69601 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2024-07-18T15:46:20Z",
    "fixes": [
      69206
    ]
  },
  {
    "id": 63636,
    "summary": "Context#findRoleMapping() never called in StandardWrapper#findSecurityReference()",
    "description": "When a realm is declared within a context (context.xml) one can add role mappings with Context#addRoleMapping(). Unfortunately, these mappings are never queried when RealmBase#hasRole() is called. This should be done after  Wrapper#findSecurityReference() has been called.\n\nThis crucial when application developers use symbolic role names, but your backend store uses cryptic names like DNs or securiy IDs from Active Directory.\n\nI have a working private patch which I will enrich with tests and will create a PR for it.",
    "comments": [
      "The change has been moved to StandardWrapper#findSecurityReference() as agreed in the PR discussion in GitHub.",
      "Fixed in:\n- master for 9.0.23 onwards\n- 8.5.x for 8.5.44 onwards\n- 7.0.x for 7.0.97 onwards",
      "Fixed in:\n- master for 10.0.0-M5 and onwards\n- 9.0.x  for 9.0.35 and onwards\n- 8.5.x for 8.5.55 and onwards\n- 7.0.x for 7.0.104 and onwards",
      "(In reply to Michael Osipov from comment #3)\n> Fixed in:\n> - master for 10.0.0-M5 and onwards\n> - 9.0.x  for 9.0.35 and onwards\n> - 8.5.x for 8.5.55 and onwards\n> - 7.0.x for 7.0.104 and onwards\n\nThat was nonsense, wrong BZ issue."
    ],
    "creation_ts": "2019-08-05T13:39:08Z",
    "fixes": [
      63636
    ]
  },
  {
    "id": 64947,
    "summary": "NPE in UpgradeProcessorExternal constructor",
    "description": "When implementing a custom HttpUpgradeHandler implementation, the connection upgrade can fail with an NPE and the following stacktrace:\n\n        java.lang.NullPointerException\n                at org.apache.coyote.http11.upgrade.UpgradeProcessorExternal.<init>(UpgradeProcessorExternal.java:46)\n                at org.apache.coyote.http11.AbstractHttp11Protocol.createUpgradeProcessor(AbstractHttp11Protocol.java:1102)\n                at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:912)\n                at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1601)\n                at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n                at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n                at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                at java.base/java.lang.Thread.run(Thread.java:834)\n\nThe custom http upgrade handler attempts to customize websocket connection upgrade, but this upgrade processing is terminated by the NPE caused by the null upgradeGroupInfo object in UpgradeProcessorExternal constructor.",
    "comments": [
      "Ok, this is new code that allows collecting stats.\n\nI cannot immediately see why the UpgradeGroupInfo ends up null so more research could be useful [example code maybe ?], but there is a null check for that in UpgradeProcessorInternal (the one used most of the time), so adding it in UpgradeProcessorExternal would likely be a good plan.",
      "Sadly I don't have access to the source code (found it when setting up a third party reverse proxy product). The reason why upgradeGroupInfo is null, is because AbstractHttp11Protocol#getUpgradeGroupInfo is called with a null upgradeProtocol.\nThe reason why upgradeProtocol is null is that Request#upgrade populates it with response.getHeader(\"upgrade\"), and that is being null. Was that meant to be request.getHeader instead?",
      "(In reply to Peter Major from comment #2)\n> Sadly I don't have access to the source code (found it when setting up a\n> third party reverse proxy product). The reason why upgradeGroupInfo is null,\n> is because AbstractHttp11Protocol#getUpgradeGroupInfo is called with a null\n> upgradeProtocol.\n> The reason why upgradeProtocol is null is that Request#upgrade populates it\n> with response.getHeader(\"upgrade\"), and that is being null. Was that meant\n> to be request.getHeader instead?\n\nOk, so that makes sense, there is supposed to be a header \"upgrade\" in the response, it's mandatory in the 101 response [I suppose the client never checks it and just checks the 101 status]. But nothing checks for that missing header in Tomcat, and something has to be improved to avoid the NPE in that case.",
      "To re-phrase what R\u00e9my said, we can fix the NPE but this is still going to fail because the response header is missing. You'll just get a nicer error message.",
      "The Upgrade header does eventually show up in the response, but it looks like it happens after the call to UpgradeProcessorExternal is made (added by an async servlet). From the browser's point of view I'm getting back a 101 response with the Upgrade header, but the connection is killed pretty much immediately after that.",
      "Hmm. Tomcat's Javadocs for HttpServletRequest.upgrade() have language stating the headers must be set before the method is called. The Servlet spec API does not have that language. I wonder where that language originated? I'll dig into it.\n\nAs I reviewed the code, it occurred to me we could probably create an \"UNKNOWN\" upgrade protocol to use for the stats. Might tweak that slightly so it can't possibly clash with a valid upgrade header.",
      "I can't fund any EG discussion to support a requirement that the upgrade header is set on the response before calling HttpServletRequest.upgrade(). I'll see if can find a different way to get the protocol name.",
      "(In reply to Mark Thomas from comment #7)\n> I can't fund any EG discussion to support a requirement that the upgrade\n> header is set on the response before calling HttpServletRequest.upgrade().\n> I'll see if can find a different way to get the protocol name.\n\nThe javadoc in Tomcat for HttpServletRequest.upgrade is wrong, most likely things changed in the spec after it was added.\n\nIn section 2.3.3.5, the spec says:\n\"When an upgrade request is received, the servlet can invoke the\nHttpServletRequest.upgrade method, which starts the upgrade process. This\nmethod instantiates the given HttpUpgradeHandler class. The returned\nHttpUpgradeHandler instance may be further customized. The application prepares\nand sends an appropriate response to the client. After exiting the service method\nof the servlet, the servlet container completes the processing of all filters and marks\nthe connection to be handled by the HttpUpgradeHandler . It then calls the\nHttpUpgradeHandler 's init method, passing a WebConnection to allow the protocol\nhandler access to the data streams.\"\n\nSo the actual upgrade happens when the Servlet is done, and nothing is fully set until then, no flush or commit happens when upgrade is called.\nOverall, the behavior of Tomcat is ok except for that use of the response header.",
      "I have a fix for this locally. Just need to test it a little more.",
      "FYI if you have a PR/branch for this, I can test the fix locally.",
      "It is now in 9.0.x. Let us know how you get on.",
      "Things are looking good so far, haven't seen my websocket requests interrupted and catalina.out didn't show the NPE either.\n\nThank you for the quick turnaround.",
      "Fixed in:\n- 10.0.x for 10.0.0-M11 onwards\n- 9.0.x for 9.0.41 onwards\n- 8.5.x for 8.5.61 onwards"
    ],
    "creation_ts": "2020-12-01T15:19:48Z",
    "fixes": [
      64947
    ]
  },
  {
    "id": 64593,
    "summary": "Rewrites incorrectly 404 when there is no source context",
    "description": "If you enable rewrites, and put a rewrite.config in, where the source\nlocation does not match a valid context, the server issues a 404. The\nserver then logs a 404 in the access log for the target location.\n\nI would argue that the server should perform the rewrite and return the target's content. However, if that is not what is meant to happen, then\nthe logged 404 should be for the source URL, not the target.\n\nIn \"Bonus Step 8.\" below, you can see that the server _thinks_ the rewrite rule is present and that it has rewritten the request.\n\nStep 1. Enable Rewrite valve via\n\n<Valve className=\"org.apache.catalina.valves.rewrite.RewriteValve\" />\n\nStep 2. Add a rewrite.config to conf/Catalina/localhost containing:\n\nRewriteRule ^/source/(.*)$ /target/$1 [L]\n\nStep 3. Delete all webapps\n\nrm -rf webapps/*\n\nStep 4. Create webapps/target/index.html\n\nStep 5. Start server\n\nStep 6. Test Rewrite\n\ncurl -I http://localhost:8080/source/index.html\nHTTP/1.1 404\n\nStep 7. Observe rewritten path in logs:\n\n0:0:0:0:0:0:0:1 - - [10/Jul/2020:18:44:06 +0100] \"HEAD /target/index.html HTTP/1.1\" 404 -\n\nBonus Step 8. Enable FINE logging, and we get the following lines:\n\n10-Jul-2020 19:27:36.803 FINE [Catalina-startStop-1] org.apache.catalina.valves.rewrite.RewriteValve.parse Add rule with pattern ^/source/(.*)$ and substitution /target/$1\n\norg.apache.catalina.valves.rewrite.RewriteValve.invoke Rewrote /source/index.html as /target/index.html with rule pattern ^/source/(.*)$",
    "comments": [
      "I am able to reproduce this using the steps provided. Thank you for providing a simple test case for this issue. It saves a considerable amount of time.\n\nI'll note at this point that creating webapps/ROOT is sufficient to resolve the issue. Generally, running without a ROOT web application is not recommended. However, unless the fix complex, I still think this should be fixed.",
      "Yes, Catalina never likes unmapped requests, it's kind of a lost cause and an empty \"ROOT\" folder will usually solve all the problems at no cost.\n\nMark, I can look at this issue if you don't have time [I was planning to try later today].",
      "Thanks for the offer. I've tracked down the root cause. The missing ROOT context puts the response into the error state which then doesn't get cleared in the RewriteValve. What I haven't figured out is the best way to handle this. Suggestions welcome.",
      "It could be possible to remove the sendError(404) here:\nhttps://github.com/apache/tomcat/blob/master/java/org/apache/catalina/connector/CoyoteAdapter.java#L696\nAnd move it to StandardHostValve (if request.getContext() == null) and StandardEngineValve (if request.getHost() == null).",
      "I think that could be a better option that the one I was looking at. Undoing the effects of calling sendError() gets messy rather quickly. I'll experiment.",
      "(In reply to Mark Thomas from comment #5)\n> I think that could be a better option that the one I was looking at. Undoing\n> the effects of calling sendError() gets messy rather quickly. I'll\n> experiment.\n\nI agree reverting the error is a problem, since it could be set for another legitimate reason (although since there is also context == null this is less likely).",
      "I've fixed this using R\u00e9my's suggested fix. I also back-ported the fix for bug 53411 to 8.5.x.\n\nFixed in:\n- master for 10.0.0-M8 onwards\n- 9.0.x for 9.0.38 onwards\n- 8.5.x for 8.5.58 onwards\n\n7.0.x is not affected."
    ],
    "creation_ts": "2020-07-10T18:30:48Z",
    "fixes": [
      64593
    ]
  },
  {
    "id": 63816,
    "summary": "java.lang.IllegalStateException: Calling [asyncMustError()] is not valid for a request with Async state [STARTING]",
    "description": "After starting async processing request.startAsync() for the request a background thread invokes the response write functions. Sometimes when IO errors happen I get the exception below.\n\n\njava.lang.IllegalStateException: Calling [asyncMustError()] is not valid for a request with Async state [STARTING]\njava.lang.IllegalStateException: Calling [asyncMustError()] is not valid for a request with Async state [STARTING]\n\tat org.apache.coyote.AsyncStateMachine.asyncMustError(AsyncStateMachine.java:421)\n\tat org.apache.coyote.AbstractProcessor.setErrorState(AbstractProcessor.java:118)\n\tat org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:424)\n\tat org.apache.coyote.Response.action(Response.java:211)\n\tat org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.doWrite(Http11OutputBuffer.java:546)\n\tat org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:112)\n\tat org.apache.coyote.http11.Http11OutputBuffer.doWrite(Http11OutputBuffer.java:190)\n\tat org.apache.coyote.Response.doWrite(Response.java:599)\n\tat org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:329)",
    "comments": [
      "Please provide the full stack trace and as much detail as you can on the conditions that trigger the error.",
      "I've been able to create a test case for this.\n\nThis is one of those areas of the Servlet spec that could benefit from some clarification. There is this text in the spec:\n\n<quote>\nThe application is responsible to handle concurrent access to the request and response objects if the async task is executing before the container-initiated dispatch that called startAsync has returned to the container.\n</quote>\n\nDoes this mean that the dispatching servlet should exit to service() method immediately after calling startAsync(). I'd argue that that is good practice implied by the above quote but not required.\n\nDoes this mean that the async thread should take steps not to use the request and response objects until it knows the service() method has returned? That is certainly the safest interpretation of \"handle concurrent access\" but it isn't the only one.\n\nTomcat already handles the case where complete() or dispatch() are called on the async thread before the service() method exists. We \"just\" need to handle the error case in the same way.\n\nIt looks like this ASCII art is going to need to be updated:\nhttps://github.com/apache/tomcat/blob/master/java/org/apache/coyote/AsyncStateMachine.java#L78",
      "I also filed https://bz.apache.org/bugzilla/show_bug.cgi?id=63817 for a similar problem, so may be the fix can be for both together?",
      "Fixed in:\n- master for 9.0.28 onwards\n- 8.5.x for 8.5.48 onwards\n- 7.0.x for 7.0.98 onwards"
    ],
    "creation_ts": "2019-10-08T16:52:41Z",
    "fixes": [
      63816
    ]
  },
  {
    "id": 51956,
    "summary": "RemoteAddrFilter uses remote host (not address) in doFilterEvent",
    "description": "public void doFilterEvent(CometEvent event, CometFilterChain chain)\n            throws IOException, ServletException {\n        processCometEvent(event.getHttpServletRequest().getRemoteHost(),\n                event, chain);        \n    }\n\nUse of getRemoteHost should be getRemoteAddr.",
    "comments": [
      "Fixed in trunk, 7.0.x. Will be included in 7.0.23."
    ],
    "creation_ts": "2011-10-04T21:58:18Z",
    "fixes": [
      51956
    ]
  },
  {
    "id": 56199,
    "summary": "Re-implement validateXml option in JspC of Tomcat 8, or remove it from documentation",
    "description": "(In followup to r1570163 )\n\nThere are two places where \"validateXml\" option of Jasper is still mentioned in Tomcat 8:\n1) res/deployer/build.xml  line 58\n2) webapps/docs/jasper-howto.xml  line 273\n\nIn Tomcat 8 Jasper does not parse web.xml when invoked within a web application,\nbut it parses it when it is invoked as JspC.\n\nIn the latter case it makes some sense to restore the \"validateXml\" option.\nThe place is  org/apache/jasper/servlet/JspCServletContext # buildMergedWebXml()\n\n> WebXmlParser webXmlParser = new WebXmlParser(false, false, blockExternal);",
    "comments": [
      "This bug is about re-implementing this feature in Tomcat 8,\nor cleaning up docs if the feature is not implemented.\n\nRelated issue in Tomcat 6 and 7 is tracked as bug 56208.",
      "I'll re-add the feature to 8.0.x for JspC. Folks using JspC may wish to use validation.",
      "This has been fixed for 8.0.x and will be included in 8.0.4 onwards."
    ],
    "creation_ts": "2014-02-27T23:38:29Z",
    "fixes": [
      56199
    ]
  },
  {
    "id": 65047,
    "summary": "be more specific on permission right problems",
    "description": "catalina.out says\n\n<<[2021-01-02 12:44:56] [info] 02-Jan-2021 12:44:56.117 SEVERE [main] org.apache.catalina.valves.AccessLogValve.open Failed to open access log file [/var/lib/tomcat9/logs/localhost_access_log.2021-01-02.txt]>>\n\nhowever (on debian10)  \n sudo -u tomcat less /var/lib/tomcat9/logs/localhost_access_log.2021-01-02.txt\nworks\n\n1) in this case, please say under which user java is running \n  (probably under \"tomcat\", but...)",
    "comments": [
      "Fixed in:\n- 10.0.x for 10.0.1 onwards\n- 9.0.x for 9.0.42 onwards\n- 8.5.x for 8.5.62 onwards\n- 7.0.x for 7.0.108 onwards"
    ],
    "creation_ts": "2021-01-02T11:52:15Z",
    "fixes": [
      65047
    ]
  },
  {
    "id": 66392,
    "summary": "AccessLogValve's file encoding does not correspond to the documentation",
    "description": "This [1] resource says:\nencoding: Character set used to write the log file. An empty string means to use the system default character set. Default value: use the system default character set.\nBut the code [2] does ISO-8859-1:\n>         if (encoding != null) {\n>             try {\n>                 charset = B2CConverter.getCharset(encoding);\n>             } catch (UnsupportedEncodingException ex) {\n>                 log.error(sm.getString(\n>                         \"accessLogValve.unsupportedEncoding\", encoding), ex);\n>             }\n>         }\n>         if (charset == null) {\n>             charset = StandardCharsets.ISO_8859_1;\n>         }\n\n\nMay java.nio.charset.Charset.defaultCharset() would be better here, no?\n\nNote: I haven't verified with other Tomcat versions, but I guess they have the same problem.\n\n[1] https://tomcat.apache.org/tomcat-8.5-doc/config/valve.html#Access_Log_Valve/Attributes\n[2] https://github.com/apache/tomcat/blob/cf2015c1350a3f057182dd4c26c20f68df8b3400/java/org/apache/catalina/valves/AccessLogValve.java#L638-L648",
    "comments": [
      "(In reply to Michael Osipov from comment #0)\n> May java.nio.charset.Charset.defaultCharset() would be better here, no?\nNo, I found the reason why not use java.nio.charset.Charset.defaultCharset() by git commit log. \nhttps://github.com/apache/tomcat/commit/972212836bf278e443b87418d961d6ddb04262a6\n\nI also have a question based on the comment at BZ51408, is it time to use UTF-8 as the default encoding set now?",
      "(In reply to Han Li from comment #1)\n> (In reply to Michael Osipov from comment #0)\n> > May java.nio.charset.Charset.defaultCharset() would be better here, no?\n> No, I found the reason why not use java.nio.charset.Charset.defaultCharset()\n> by git commit log. \n> https://github.com/apache/tomcat/commit/\n> 972212836bf278e443b87418d961d6ddb04262a6\n> \n> I also have a question based on the comment at BZ51408, is it time to use\n> UTF-8 as the default encoding set now?\n\nLooking that the commit, in several spots US-ASCII would be a better choice because the usecase does not allow anything else but 7-bit chars. In this case, yes I'd prefer UTF-8 all the way -- at least the documentation and code must be consistent.\n\nE.g., here https://github.com/apache/tomcat/commit/972212836bf278e443b87418d961d6ddb04262a6#diff-95ff2368b8571e4f1439f6a6c954993bd9a1de99e7083b9f0c07bb39af7382a2R100. US-ASCII is fully sufficient.\n\nSimilar case: https://github.com/apache/httpcomponents-core/pull/375",
      "Fixed in:\n- 11.0.x for 11.0.0-M2 onwards\n- 10.1.x for 10.1.5 onwards\n- 9.0.x for 9.0.71 onwards\n- 8.5.x for 8.5.85 onwards"
    ],
    "creation_ts": "2022-12-15T21:37:59Z",
    "fixes": [
      66392
    ]
  },
  {
    "id": 64849,
    "summary": "Embedded EL module descriptor missing uses and provides clauses",
    "description": "Tomcat Embedded EL has a bug closely related to one reported and fixed to the core module, issue 64751 \"Incomplete module info descriptor\". This is the stacktrace:\n\njava.util.ServiceConfigurationError: javax.el.ExpressionFactory: module org.apache.tomcat.embed.el does not declare `uses`\n[ERROR] \tat java.base/java.util.ServiceLoader.fail(ServiceLoader.java:588)\n[ERROR] \tat java.base/java.util.ServiceLoader.checkCaller(ServiceLoader.java:574)\n[ERROR] \tat java.base/java.util.ServiceLoader.<init>(ServiceLoader.java:503)\n[ERROR] \tat java.base/java.util.ServiceLoader.load(ServiceLoader.java:1646)\n[ERROR] \tat org.apache.tomcat.embed.el@9.0.39/javax.el.ExpressionFactory.getClassNameServices(ExpressionFactory.java:372)\n[ERROR] \tat org.apache.tomcat.embed.el@9.0.39/javax.el.ExpressionFactory.discoverClassName(ExpressionFactory.java:330)\n[ERROR] \tat org.apache.tomcat.embed.el@9.0.39/javax.el.ExpressionFactory.newInstance(ExpressionFactory.java:134)\n[ERROR] \tat org.apache.tomcat.embed.el@9.0.39/javax.el.ExpressionFactory.newInstance(ExpressionFactory.java:86)\n\nLooking at module-info.java and the contents of META-INF/services I think there are two missing lines for this module descriptor; not just the uses clause, but also and the provides clauses. Both of these lines need adding:\n\nuses javax.el.ExpressionFactory;\nprovides javax.el.ExpressionFactory with org.apache.el.ExpressionFactoryImpl;\n\nBoth lines are necessary to recreate the service provider / loader mechanism with the module system; ExpressionFactory has static methods to look up the implementation (as part of the public newInstance method), so the module uses its own provided implementation.",
    "comments": [
      "The first thing we are going to need to do is fix the JPMS names so they agree with the names used by the spec APIs.",
      "Thanks for the report. This highlighted a number of additional issues which have all been fixed.\n\nFixed in:\n- 10.0.x for 10.0.0-M10 onwards\n- 9.0.x for 9.0.40 onwards"
    ],
    "creation_ts": "2020-10-26T16:12:35Z",
    "fixes": [
      64849
    ]
  },
  {
    "id": 69545,
    "summary": "Issue Posting a huge content with header transfer-encoding chunked not working from 10.1.29 version of tomcat in spring cloud gateway application using reactive webflux",
    "description": "Hi Team,\n                We have an issue when huge content is posted in the request body for an endpoint in  spring boot  application that\u2019s using embed tomcat version 10.1.29 and above.\nWe are making a HTTP post call with Jason request body has having around 700000 characters (pdf content base 64 encoded string)\n\nThis is working in 10.1.28 and below versions.\n\nThe application is a spring cloud gateway based on reactive webflux.\n\nLooks like the below change in the 10.1.29 version might have caused the issue. While the tomcat reading  the http posted request it\u2019s not reading all the chunks of the request.\n\nCorrect a regression in the fix for non-blocking reads of chunked request bodies that caused InputStream.available() to return a non-zero value when there was no data to read. In some circumstances this could cause a blocking read to block waiting for more data rather than return the data it had already received. (markt)\n\nKindly request to help us with this issue fix.\n\nThanks,\nAravinda",
    "comments": [
      "Please provide a *minimal* test case that demonstrates the issue.",
      "I did review the supposedly offending patch and it looks like a nice trick to me (= it should not break).\n\nTo be honest it would be better to actually read the one or two decoration bytes in available(). Unfortunately I decided a long time ago to not have \"throws IOE\" on available() and there's no way to properly report an error. I have ideas to work around that but let's see the test case first.",
      "Created attachment 39976\nsample screenshot of the pdf content",
      "Created attachment 39977\nBadRequestException",
      "Hi Mark Thomas , Thanks for checking this. This one am not able to reproduce on my  local machine but consistently failing when the micro service application is deployed to Openshift platform. So am not sure on what test case details I can provide.\n\nHave attached the sample content image with PDF converted to base64 encoded string and this one contains more than 700K characters and is sent in the json request body. And we are getting org.apache.coyote.BadRequestException. Attaching the screenshot of the same. \nSeems like even before reading the entire json request body it is considering the request reading is completed.",
      "The patch that added additional special case handling to available() seems fine:\nhttps://github.com/apache/tomcat/blob/main/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java#L202\n\nHowever, while it handles ParseState.CHUNK_BODY_CRLF, it does not do CHUNK_HEADER or others, which might similarly not produce content. So I wonder if your \"regression\" could simply be a bad luck due to not doing everything. Hard to know without a test.\n\nI am considering that available() should actually process existing data in the buffer (and add a throws IOE) to properly determine if there is actual data.",
      "After trying many things and tracing, I cannot find a way to trigger available() in blocking mode when it would likely return non 0 despite having no meaningful bytes (in particular using the TestChunkedInputFilter.testChunkedSplitWithReader test case).\nIn non blocking mode, I have not ruled it out. If you can provide a test, it would help.",
      "For the non blocking mode, this is working fine. \nThe issue is happening in the spring cloud gateway application(blocking mode) which will just delegate the request to the downstream application after some processing like authentication. The downstream application executes in non-blocking mode. If we directly call the downstream application with the same request its working fine.\n\n\nDo we have the below code in the blocking mode too? looks like its setting available = 0 even though the all the chunks reading/entire request body is not read.\n\n\n\n\n        if (available == 1 && parseState == ParseState.CHUNK_BODY_CRLF) {\n            // Either just the CR or just the LF are left in the buffer. There is no data to read.\n            available = 0;\n        } else if (available == 2 && !crFound && parseState == ParseState.CHUNK_BODY_CRLF) {\n            // Just CRLF is left in the buffer. There is no data to read.\n            available = 0;\n        }",
      "(In reply to Aravinda from comment #8)\n> For the non blocking mode, this is working fine. \n> The issue is happening in the spring cloud gateway application(blocking\n> mode) which will just delegate the request to the downstream application\n> after some processing like authentication. The downstream application\n> executes in non-blocking mode. If we directly call the downstream\n> application with the same request its working fine.\n> \n> \n> Do we have the below code in the blocking mode too? looks like its setting\n> available = 0 even though the all the chunks reading/entire request body is\n> not read.\n> \n> \n> \n> \n>         if (available == 1 && parseState == ParseState.CHUNK_BODY_CRLF) {\n>             // Either just the CR or just the LF are left in the buffer.\n> There is no data to read.\n>             available = 0;\n>         } else if (available == 2 && !crFound && parseState ==\n> ParseState.CHUNK_BODY_CRLF) {\n>             // Just CRLF is left in the buffer. There is no data to read.\n>             available = 0;\n>         }\n\nYes, it's valid if available() returns 0 in blocking mode, it means that there is no data available for reading without blocking until some data becomes available. >0 means a read will not block since data is already available in some buffer.",
      "Sorry Correcting my earlier message.\nIts working in the blocking mode and not working consistently in the non-blocking mode. \n\nIs there a possibility it is considering only the chunk of data in the buffer (in non blocking mode) and the available is >0 and we are getting CR or LF and its not reading the remaining chunks. Am not able reproduce in local but this tomcat code fails 60% of the requests when its deployed and Openshift platform.  \nWe reverted to use 10.1.28 version of embed tomcat instead and its work absolutely fine.\n\n\"For the blocking mode, this is working fine. \nThe issue is happening in the spring cloud gateway application(non blocking mode) which will just delegate the request to the downstream application after some processing like authentication. The downstream application executes in blocking mode. If we directly call the downstream application with the same request its working fine.\n\n\nDo we have the below code in the blocking mode too? looks like its setting available = 0 even though the all the chunks reading/entire request body is not read.\n\n\n\n\n        if (available == 1 && parseState == ParseState.CHUNK_BODY_CRLF) {\n            // Either just the CR or just the LF are left in the buffer. There is no data to read.\n            available = 0;\n        } else if (available == 2 && !crFound && parseState == ParseState.CHUNK_BODY_CRLF) {\n            // Just CRLF is left in the buffer. There is no data to read.\n            available = 0;\n        }\"",
      "Ok, I think I can reproduce it with non blocking if I split the chunk header. Then onDataAvailable never gets called again (despite the read and the call to isReady/available).\nTo be verified though ...",
      "Thats very good news to us. Thank you very much Remy Maucherat. Sure, will wait for your updates.",
      "The scenario I found involved not calling available() properly. In the end I haven't found a regression or new issue.\n\nBasically the code in the ReadListener has to be:\ndo {\n  int n = is.read(buf);\n  if (n < 0) { // == -1 is ok too\n    break;\n  }\n  // Do stuff\n} while (is.isReady());\n\nread returning 0 is always ok, and it needs to loop while isReady (even if read keeps returning 0 bytes).\n\nNot error prone at all ...\n\nPlease provide a test case to verify what is actually happening.",
      "Further testing did find an issue and the root cause is understood.\n\nR\u00e9my has applied a fix for this issue that should also address any similar issues.\n\nFixed in:\n- 11.0.x for 11.0.3 onwards\n- 10.1.x for 10.1.35 onwards\n-  9.0.x for  9.0.99 onwards",
      "Thats great news!!! Thank you very much Mark Thomas and Remy Maucherat! \nDo you have any tentative date for the 10.1.35 release?"
    ],
    "creation_ts": "2025-01-22T16:29:00Z",
    "fixes": [
      69545
    ]
  },
  {
    "id": 31257,
    "summary": "java.endorsed.dirs is not used when JSP compilation is forked",
    "description": "When the JSP compiler forks a javac process, it should check to see what the \ncurrently endorsed directories are (check the system \nproperty \"java.endorsed.dirs\" - otherwise, classes end up missing and JSP \npages do not properly compile.  We experienced a problem when we explicitly \nset the java.endorsed.dirs property on the command line, and the JSP compiler \ndid not use it when javac was forked.\n\nI have patched org.apache.jasper.compiler.Compiler to support this:\n*** src.original\\jakarta-tomcat-jasper\\jasper2\n\\src\\share\\org\\apache\\jasper\\compiler\\Compiler.java       Tue Jun 15 17:30:35 \n2004\n--- src\\org\\apache\\jasper\\compiler\\Compiler.java        Thu Sep 16 00:05:14 \n2004\n\n***************\n*** 349,358 ****\n--- 349,369 ----\n              extdirs.setPath(exts);\n              javac.setExtdirs(extdirs);\n              info.append(\"    extension dir=\" + exts + \"\\n\");\n          }\n\n+         // Add endorsed directories\n+         String endorsed = System.getProperty(\"java.endorsed.dirs\");\n+         if(endorsed != null) {\n+             Javac.ImplementationSpecificArgument endorsedArg = \njavac.createCompilerArg();\n+             endorsedArg.setLine(\"-J-Djava.endorsed.dirs=\"+endorsed);\n+             info.append(\"    endorsed dir=\" + endorsed + \"\\n\");\n+         }\n+         else {\n+             info.append(\"    no endorsed dirs specified\\n\");\n+         }\n+\n          // Configure the compiler object\n          javac.setEncoding(javaEncoding);\n          javac.setClasspath(path);\n          javac.setDebug(ctxt.getOptions().getClassDebugInfo());\n\ntrue, i should probably check ctxt.getOptions().getFork() in the if() as well, \nbut since i always fork it doesn't matter to me.",
    "comments": [
      "Thanks for submitting this enhancement.  I've applied it to both the Tomcat 5.0 \nand 5.5 branches: it will be in 5.0.29 and 5.5.3.  However, this applies to the \nAnt/Javac compiler only, not to the JDT compiler, which is the default in \n5.5.3.  If you have an equivalent patch for the JDT compiler, please submit \nit.  Otherwise, I'll do some research to try to find the equivalent JDT \ncompiler option, but if you submit a patch it'll get done faster.",
      "There is still a bug in this fixing.\nWhen the endorsed dir is like:\n   C:\\Program Files\\Java\\jdk1.5.0_11\\jre\\lib\\endorsed\nthe space char in dir will cause a compile error. \"Files\\Java\\jdk1.5.0_11\n\\jre\\lib\\endorsed\" part will be treated as a new parameter of javac. Please use \nquotation marks to quotate each dir in the endorsed dir list.",
      "The quoting issue has been fixed in trunk and proposed for 5.5.x and 6.0.x",
      "This has been committed to 6.0.x and will be in 6.0.17 onwards.",
      "This has been fixed in 5.5.x and will be included in 5.5.27 onwards."
    ],
    "creation_ts": "2004-09-16T05:10:06Z",
    "fixes": [
      31257
    ]
  },
  {
    "id": 64765,
    "summary": "ThreadPoolExecutor#submittedCount wrong after undeploy",
    "description": "Created attachment 37468\nscreenshots\n\nSteps to reproduce:\n1. download Tomcat 9.0.38 (older versions are affected as well)\n2. configure user for the manager application\n3. start Tomcat\n4. navigate to the manager web application and install a webapp having a servlet that performs some long running tasks (e.g. 30 seconds for one request)\n5. Open several browsers (because some browsers limit the number of connections to the same host) and navigate to the installed webapp (e.g. query the servlet 20 times in parallel). This puts the worker threads of the internal thread pool at load.\n6. In the manager web application undeploy the webapp again while the 20 requests are still running.\n7. After a few seconds the webapp is undeployed.\n8. Redeploy the webapp again\n9. Refresh the 20 web pages to put the worker threads at load again.\n\nObservation after the redeploy: Some of the requests arrive at the servlet immediately (as it should) and some only arrive after a long delay (e.g. 30 seconds).\n\nProblem Analysis:\nThe Thread Pool uses a core pool size of 10 and a max pool size of 200. So basically, there is space to create more worker threads.\nHowever, the pool enqueues the request in the work queue without creating a new worker for it. And as the other workers are all busy handling the 30 seconds long requests, it stays in the queue until a worker finishes.\nExpected behavior would be that a new worker thread is created and the request is processed immediately.\n\nThe reason why no worker is created can be found in code line [1]: The queue uses the submittedCount property of the pool to decide whether new workers are required. Unfortunately, at this point the value returned is wrong (too low).\nAs a result, the runnable is just saved without creating more workers.\n\nThe submittedCount value of the pool is running out of sync during the undeploy of the webapp. At a certain point (if the webapp is undeployed while there are long running requests working) this number becomes a negative value.\nThe attached screenshots illustrate the moment in which the submittedCount would become negative:\nScreenshot 0 shows the two stack frames both standing at [2].\nScreenshot 1 shows that at this moment the submittedCount property already has the value 0 and would become negative right afterwards.\nScreenshot 2 shows the position of worker \"exec-11\" currently executing \"afterExecute\" for task with id=617\nScreenshot 3 shows the position of worker \"exec-13\" currently executing \"afterExecute\" for the same task but in the catch block (see [4]).\nScreenshot 4 shows the position of worker \"exec-13\" again but indicating that the exception is of type \"StopPooledThreadException\".\n\nAfter all threads completed their work, submittedCount in the thread pool has a value of e.g. -8.\nIf the webapp is deployed again and e.g. 10 worker threads are still in the pool, the 10 first requests to the webapp are processed immediately as there are workers available.\nAnd as these requests are quite long, these 10 workers stay in use. The next request would basically be the first that requires a new worker thread to be created.\nBut as the submittedCount now has the value 2 (-8 after the deploy + 10 new requests) the task queue will return at [1] putting the request in the waiting queue.\nThe correct behavior would be to return false (two lines further down) which would instruct the pool to create new workers.\nThe request will only be processed when the next 30 seconds request ends. In this situation tomcat must be restarted because responsiveness drops rapidly.\n\nSome thoughts:\n- I am not sure about the internals but is correct that the \"afterExecute\" is called several times in parallel for the same task as shown in the screenshots?\n- In case the StopPooledThreadException is thrown at [3] it is caught from [4] which executes \"afterExecute\" again as shown in screenshot 3. Is this correct?\n\nIn general, somehow should be ensured that the submittedCount of \"org.apache.tomcat.util.threads.ThreadPoolExecutor\" cannot become negative. Otherwise the whole thread pool is broken.\n\n\n[1] https://github.com/apache/tomcat/blob/9.0.38/java/org/apache/tomcat/util/threads/TaskQueue.java#L79\n[2] https://github.com/apache/tomcat/blob/9.0.38/java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java#L95\n[3] https://github.com/apache/tomcat/blob/9.0.38/java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java#L118\n[4] https://github.com/openjdk/jdk/blob/jdk-11%2B7/src/java.base/share/classes/java/util/concurrent/ThreadPoolExecutor.java#L1131",
    "comments": [
      "Possible workaround:\n\nIn the context.xml: set the renewThreadsWhenStoppingContext property to false.\n\nSee https://tomcat.apache.org/tomcat-9.0-doc/config/context.html",
      "Thanks for the report and for the analysis.\n\nFixed in:\n- master for 10.0.0-M9 onwards\n- 9.0.x for 9.0.39 onwards\n- 8.5.x for 8.5.59 onwards\n- 7.0.x for 7.0.107 onwards",
      "Thanks for the fast fix.\nI will test it as soon as new builds are available.",
      "I confirm the issue seems to be fixed.\nTested with release 9.0.39."
    ],
    "creation_ts": "2020-09-24T15:16:02Z",
    "fixes": [
      64765
    ]
  },
  {
    "id": 65848,
    "summary": "3a4c7bf2513a6f3e52d9608f3855d5f8148fef48 introduces regression with cert-based authentication",
    "description": "Pure Tomcat upgrade from 8.5.73 to .75 rejects all client certificates with the following configuration:\n>          <Connector port=\"18444\" connectionTimeout=\"20000\" keepAliveTimeout=\"7200000\"\n>              maxHttpHeaderSize=\"24576\" maxThreads=\"250\"\n>              SSLEnabled=\"true\" scheme=\"https\" secure=\"true\"\n>              defaultSSLHostConfigName=\"deblndw028v.ad001.siemens.net\">\n>              <SSLHostConfig hostName=\"deblndw028v.ad001.siemens.net\" protocols=\"TLSv1.2+TLSv1.3\"\n>                  honorCipherOrder=\"true\" disableSessionTickets=\"true\"\n>                  certificateVerification=\"optional\" certificateVerificationDepth=\"5\"\n>                  ciphers=\"HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!DSS:!SHA1:!SHA256:!SHA384\">\n>                  <Certificate certificateFile=\"/opt/openssl/deblndw028v.ad001.siemens.net/cert.crt\"\n>                      certificateKeyFile=\"/opt/openssl/deblndw028v.ad001.siemens.net/key.crt\"\n>                      certificateKeyPassword=\"...\" type=\"RSA\" />\n>                  <OpenSSLConf>\n>                      <OpenSSLConfCmd name=\"VerifyCAPath\" value=\"/opt/openssl/certs\" />\n>                      <OpenSSLConfCmd name=\"RequestCAFile\" value=\"/opt/openssl/siemens-medium+strong-clientcert-cacerts.crt\" />\n>                      <OpenSSLConfCmd name=\"NO_OCSP_CHECK\" value=\"true\" />\n>                  </OpenSSLConf>\n>              </SSLHostConfig>\n>          </Connector>\n\nI am using the conf command for consistency reasons because our OpenSSL wrapper does not offer SSLCADNRequestFile/SSLCADNRequestPath and did not want to mix config styles.\n\nNow 3a4c7bf2513a6f3e52d9608f3855d5f8148fef48 does:\n> +                if (sslHostConfig.getCaCertificateFile() == null && sslHostConfig.getCaCertificatePath(\n> ) == null) {\n> +                    // No CA certificates configured. Reject all client certificates.\n> +                    SSLContext.setCertVerifyCallback(ctx, new CertificateVerifier() {\n> +                        @Override\n> +                        public boolean verify(long ssl, byte[][] chain, String auth) {\n> +                            return false;\n> +                        }\n> +                    });\n\nThis is too shortsighted since it does not take the conf command into account.\n\nAnother issue is that this is inconsistent. I have set up the same case with HTTPd and mod_ssl and both Schannel and NSS give me the follwing:\n* Schannel: curl: (60) schannel: SEC_E_UNTRUSTED_ROOT (0x80090325) - Die Zertifikatkette wurde von einer nicht vertrauensw\u00fcrdigen Zertifizierungsstelle ausgestellt.\n* NSS: SSL_ERROR_UNKNOWN_CA_ALERT\n\nI haven't yet checked mod_ssl code for this.\nError log:\n> 66233 [Wed Jan 26 14:28:43.071310 2022] [ssl:error] [pid 61976] [client 139.21.146.172:33249] AH02039: Certificate Verification: Error (20): unable to get local issuer certificate\n> 66234 [Wed Jan 26 14:28:43.071442 2022] [ssl:warn] [pid 61976] [client 139.21.146.172:33249] AH02227: Failed to set r->user to 'SSL_CLIENT_SAN_OTHER_msUPN_0'\n> 66235 [Wed Jan 26 14:28:43.071487 2022] [core:error] [pid 61976] [client 139.21.146.172:33249] AH00027: No authentication done but request not allowed without authentication for /~osipovmi/tls-auth/index.php. Au\n> 66240 [Wed Jan 26 14:30:45.391914 2022] [ssl:error] [pid 62030] [client 139.21.146.172:42111] AH02039: Certificate Verification: Error (20): unable to get local issuer certificate\n> 66241 [Wed Jan 26 14:30:45.392025 2022] [ssl:error] [pid 62030] [client 139.21.146.172:42111] AH02261: Re-negotiation handshake failed\n\nwith new broken setup I get:\n* schannel: next InitializeSecurityContext failed: SEC_E_ILLEGAL_MESSAGE (0x80090326) - This error usually occurs when a fatal SSL/TLS alert is received (e.g. handshake failed). More detail may be available in the Windows System event log.\n* NSS: SSL_ERROR_UNKNOWN_CA_ALERT\n\nI need to check Wireshark packets and compare.",
    "comments": [
      "When the possibility exists, the regular configuration should be used otherwise there will always be problems.\nThe doc there https://httpd.apache.org/docs/trunk/mod/mod_ssl.html#sslopensslconfcmd also says it is going to be a mess since there is config duplication.\n\nLooking at https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html, it is possible to identify some commands that would accurately indicate that CA is being configured, including ChainCAFile, ChainCAPath, VerifyCAFile, VerifyCAPath, RequestCAFile. In that case the reject callback would not be set. But having to do and maintain that special handling is annoying, and calls for more special cases.",
      "Yet another problem is that the changelog entry does not really represent the change in behavior.\n\nI guess we need to reproduce the same \"Compatibility and Stability warning\" block as mod_ssl.",
      "We can certainly add a similar warning to the docs for OpenSSLConf.\n\nI'm going to look at this again to see if I can get to the bottom of why I see different behaviour on MacOS and if that enables me to identify an alternative solution that avoids the complications with OpenSSLConf.",
      "(In reply to Mark Thomas from comment #3)\n> We can certainly add a similar warning to the docs for OpenSSLConf.\n\nOpenSSLConf is not documented at all, we need to document that and simply copy the banner from mod_ssl. That should be enough to warn users.\n\n> I'm going to look at this again to see if I can get to the bottom of why I\n> see different behaviour on MacOS and if that enables me to identify an\n> alternative solution that avoids the complications with OpenSSLConf.\n\nNot only that, I would expect that if not configured it would return the same TLS message as mod_ssl for consistency reasons. The description in changelog doesn't really help to identify the actual change.",
      "The root cause was the way homebrew configures OpenSSL. It imports the CAs trrusted by the system when you install OpenSSL and uses those as the defaults of you don't explicitly define a CA. The Tomcat Test CA was in that list due to some previous testing I had been doing and that was the cause of the difference in behaviour.\n\nI have reverted the original patch as it is unnecessary.\n\nSeparately, I'll add some docs for OpenSSLConf."
    ],
    "creation_ts": "2022-01-26T13:54:29Z",
    "fixes": [
      65848
    ]
  },
  {
    "id": 64715,
    "summary": "PasswordValidationCallback not supported",
    "description": "The JASPIC 1.1 specification (section 4.9.2) requires a runtime to provide a CallbackHandler that supports the PasswordValidationCallback. This callback is not implemented in Tomcat.\n\nI would like to provide a patch for this, but would like to check some details first.\n\nThe callback has to be implemented in the CallbackHandlerImpl. This is relatively straightforward but as we need the realm associated with the current context to be able to check the password it can't stay a singleton.\n\nSo what I propose:\n- change CallbackHandlerImpl from singleton to standard class (one per context)\n- add parameter to constructor to pass the current context to the handler (not the realm because this would break changing the associated realm through JMX)\n- update initialization code in AuthenticatorBase accordingly\n- implement the callback by calling context.getRealm().authenticate(user, pass)\n\n(optional)\n- when dynamic initialization of a CallbackHandler is used (see jaspicCallbackHandlerClass config parameter of AuthenticatorBase), use introspection to search for a \"setContext\" and pass the context to the handler\n\nAny comments are wellcome.\n\nQuestions:\n- Should I check some annotations (e.g. @Ressource) for the injection of the context in case of dynamic instantiation?\n- How about instantiating the default CallbackHandler the same way as the dynamic class (no duplicate instantiation code, only a default class name)?",
    "comments": [
      "Created attachment 37434\nProposed patch for bug 64715\n\n- CallbackHandlerImpl changed from singleton to regular class\n- added parameter context in constructor of CallbackHandlerImpl\n- implemented PasswordValidationCallback in CallbackHandlerImpl\n- updated initialization code for the callbackHandler in AuthenticatorBase\n- removed direct initialization of CallbackHandlerImpl",
      "Section 4.9.2 is part of the SOAP profile. Tomcat only targets the Servlet Container profile. Looking at the requirements for the SOAP profile, it does not look to be directly implementable in Tomcat. Therefore, I am wondering what is the purpose of this enhancement?",
      "Sorry, I got the section number wrong, it's section 3.5\n\nChapter 3 is Servlet Container Profile.\n\nHere is an excerpt from section 3.5:\nThe CallbackHandler passed to ServerAuthModule.initialize is determined by the handler argument passed in the AuthConfigProvider.getServerAuthConfig call that acquired the corresponding authentication context configuration object. The handler argument must not be null, and the argument handler and the CallbackHandler passed to ServerAuthModule.initialize MUST support the following callbacks:\n\n\u2022 CallerPrincipalCallback\n\u2022 GroupPrincipalCallback\n\u2022 PasswordValidationCallback\n\n\nSo it is a bug, if Tomcat claims to be JASPIC 1.1 compatible in my opinion.",
      "Yes, that does make it a bug.",
      "Reviewing the patch:\n- It doesn't handle all combinations of\n  - Constructor with/without Context\n  - Class defined in web app / in container\n- The call to the \"with Context\" constructor will always fail (no Context)\n- Use of an interface would be cleaner. The Contained interface is a good fit.\n\nThe rest looks good.",
      "(In reply to Mark Thomas from comment #5)\n\n> - It doesn't handle all combinations of\n>   - Constructor with/without Context\nI don't think a constructor for CallbackHandlerImpl without Context is needed. As this is a Tomcat internal class and AuthenticatorBase can always provide a context with realm (this is stated in the usage constraints of AuthenticatorBase). Or am I misinterpreting you?\n\n>   - Class defined in web app / in container\nThat's a case I don't seem to understand. Could you please explain?\n\n> - The call to the \"with Context\" constructor will always fail (no Context)\nUgh. Missing argument. I'll change this when the other fixes are clear.\n\n> - Use of an interface would be cleaner. The Contained interface is a good\n> fit.\nAre you suggesting to pass the Realm (which is a Contained) to the CallbackHandler? Wouldn't that break dynamic configuration through JMX? I could use Container though.\n\nI also saw that minor modifications to the tests will be necessary too. In addition I would add one or two tests for the Callbacks.",
      "Users may wish to use a 3rd party custom CallbackHandler that knows nothing about Tomcat internals. A no-arg Constructor needs to be supported.\n\nThere are multiple class loaders involved and while the default configuration avoids most of the complexities, the non-default configs need to be handled.\n\nSome users reconfigure the class loaders so they look like this:\nhttp://tomcat.apache.org/tomcat-4.1-doc/class-loader-howto.html\n\nand may want to put the custom CallbackHandler in the Catalina loader. This boils down to you need to try and load the specified class first with the web app class loader (TCCL) and then with the class loader that loaded the current class.\n\nFor adding the Context I'm suggesting something like:\n\nif (callbackHandler instanceof Contained) {\n    ((Contained) callbackHandler).setContainer(context);\n}\n\nTomcat can then do:\nif (callbackHandler instanceof Contained) {\n    getContainer().getRealm()...\n}",
      "Created attachment 37438\nProposed patch for bug 64715 (second attempt), Tomcat 10\n\nChanges to the first version:\n\n- added Contained interface to CallbackHandlerImpl and changed access logic\n- implemented check for Contained interface instead of different constructors in AuthenticatorBase\n- added test cases for the three supported Callbacks\n\n\nA questions that occurred to me:\n- Should we throw UnsupportedCallbackException for unsupported callbacks instead of ignoring them? This breaks compatibility but would enable the user to check for unimplemented callbacks.\n\nThe use of the Contained interface is definitely a big plus. Thanks for the great feedback Mark.",
      "Slightly off topic, but could someone explain why the package imports in CallbackHandlerImpl switched from\n\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.message.callback.CallerPrincipalCallback;\nimport javax.security.auth.message.callback.GroupPrincipalCallback;\n\nin Tomcat 9 to the corresponding jakarta.security.auth equivalents in Tomcat 10? Is that a JASPIC 2.0 change?\n\nWould we have to support both in Tomcat 10 so that the implementation is backwards compatible or am I mislead? I stumbled upon this while implementing the tests for my patch and I am quite sure that my own SAM implementation written for Tomcat 9 would not work with Tomcat 10 because of this.",
      "Created attachment 37439\nProposed patch for bug 64715 (second attempt), Tomcat 10\n\n- corrected a spelling error in Locale.properties",
      "Created attachment 37440\nProposed patch for bug 64715 (second attempt), Tomcat 9\n\nThe Tomcat 9.0.x version of the patch.\n\nMain difference is the difference in the package names for the callbacks.",
      "(In reply to Mark Thomas from comment #7)\n> Users may wish to use a 3rd party custom CallbackHandler that knows nothing\n> about Tomcat internals. A no-arg Constructor needs to be supported.\n> \n> There are multiple class loaders involved and while the default\n> configuration avoids most of the complexities, the non-default configs need\n> to be handled.\n> \n> Some users reconfigure the class loaders so they look like this:\n> http://tomcat.apache.org/tomcat-4.1-doc/class-loader-howto.html\n> \n> and may want to put the custom CallbackHandler in the Catalina loader. This\n> boils down to you need to try and load the specified class first with the\n> web app class loader (TCCL) and then with the class loader that loaded the\n> current class.\n> \n> For adding the Context I'm suggesting something like:\n> \n> if (callbackHandler instanceof Contained) {\n>     ((Contained) callbackHandler).setContainer(context);\n> }\n> \n> Tomcat can then do:\n> if (callbackHandler instanceof Contained) {\n>     getContainer().getRealm()...\n> }\n\nDoesn't this tie the implementation class to Tomcata internals? It would be nice to implement a CallbackHandler which can be built (and run) independently of Tomcat classes. Or do I have an unrealistic expectation, here, of the way CallbackHandlers would be implemented? Is it possible for them to be container-agnostic?",
      "(In reply to Robert Rodewald from comment #9)\n> Slightly off topic, but could someone explain why the package imports in\n> CallbackHandlerImpl switched from\n> \n> import javax.security.auth.callback.UnsupportedCallbackException;\n> import javax.security.auth.message.callback.CallerPrincipalCallback;\n> import javax.security.auth.message.callback.GroupPrincipalCallback;\n> \n> in Tomcat 9 to the corresponding jakarta.security.auth equivalents in Tomcat\n> 10? Is that a JASPIC 2.0 change?\n\nI don't know about the JASPIC version implications, but Java EE recently change to Jakarta EE an all the package names changed for their forthcoming versions. Presumably, this includes JASPIC because it's included in the Java EE specifications which have been \"migrated\" to the new Jakarta umbrella. [1]\n\nFor all the affected APIs, Tomcat has basically done a search-and-replace for javax.(api).whatever to jakarta.(api).whatever.\n\nIt is not (currently, maybe ever) expected that web applications written for Tomcat 9 can be directly run under Tomcat 10: they will require migration to the new API package names. That includes all servlets, etc.[2]\n\nThere is an experimental migration tool available[3] which aims to migrate your web applications from Java EE to Jakarta EE. I'd be interested to see if it works for you and gives you artifacts you can successfully deploy into Tomcat 10.\n\n[1] https://jakarta.ee/specifications/authentication/1.1/apidocs/\n[2] http://tomcat.apache.org/migration-10.html#Specification_APIs\n[3] https://github.com/apache/tomcat-jakartaee-migration\n\n> Would we have to support both in Tomcat 10 so that the implementation is\n> backwards compatible or am I mislead?\n\nI don't believe any backward-compatibility would be expected. We toyed with that idea, but it seems like a maintenance nightmare so we decided not to do it.",
      "(In reply to Christopher Schultz from comment #12)\n> Doesn't this tie the implementation class to Tomcata internals? It would be\n> nice to implement a CallbackHandler which can be built (and run)\n> independently of Tomcat classes. Or do I have an unrealistic expectation,\n> here, of the way CallbackHandlers would be implemented? Is it possible for\n> them to be container-agnostic?\n\nIn my understanding the CallbackHandler cannot be decoupled from Tomcat (the \"runtime\" in the JASPIC specification), because it represents the \"glue code\" to the runtime. A replacement of the implementing class is not intended anywhere in the JASPIC specification as far as I can see, but is a nice thing to have. This way the user can implement some very special non-standard Callbacks.\n\nThe inner workings of the CallbackHandler are not well defined in the specs, neither are the standard callbacks. \n\nFor example the PasswordValidationCallback:\n- Shall it set the principal in the client subject or shall it just return true or false for the getResult method?\n- The password field may be null (as per spec) but how should the CallbackHandler handle this case? Set the roles/groups of the principal anyway?",
      "I found an interesting differentiation on this page:\nhttps://github.com/wildfly/wildfly/blob/master/docs/src/main/asciidoc/_elytron/Elytron_and_Java_Authentication_SPI_for_Containers-JASPI.adoc\n\nIf a SAM requires access to the configured identity management (the realm) of the runtime is uses \"integrated\" mode (this would be a CallbackHandler implementation that implements Contained).\n\nIf it establishes the identity and roles of the user by itself it can use \"non-itegrated\" mode (no access to the realm) and is what was supported by Tomcat before the patch (CallbackHandler does not implement Contained and has no access to the Realm).",
      "All valid points regarding the expected behaviour of CallbackHandlers. I'd recommend raising issues against the Jakarta Authentication spec:\nhttps://github.com/eclipse-ee4j/authentication/issues",
      "(In reply to Mark Thomas from comment #16)\n> All valid points regarding the expected behaviour of CallbackHandlers. I'd\n> recommend raising issues against the Jakarta Authentication spec:\n> https://github.com/eclipse-ee4j/authentication/issues\n\nI raised the issue. Here is the link:\nhttps://github.com/eclipse-ee4j/authentication/issues/110",
      "Thanks for the work on this, and especially the patches. These have now been applied (with minor tweaks) and will be in the next set of releases.\n\nFixed in:\n- master for 10.0.0-M9 onwards\n- 9.0.x for 9.0.39 onwards\n- 8.5.x for 8.5.59 onwards"
    ],
    "creation_ts": "2020-09-07T11:18:36Z",
    "fixes": [
      64715
    ]
  },
  {
    "id": 69710,
    "summary": "FileCountLimitExceededException is thrown in version 11.0.8",
    "description": "Hello,\n\nAfter upgrading to Tomcat 11.0.8, we experience an issue with one of our website forms, as on submit Tomcat throws org.apache.tomcat.util.http.fileupload.impl.FileCountLimitExceededException exception:\n\nCaused by: org.apache.tomcat.util.http.fileupload.impl.FileCountLimitExceededException: attachment\n        at org.apache.tomcat.util.http.fileupload.FileUploadBase.parseRequest(FileUploadBase.java:459)\n        at org.apache.catalina.connector.Request.parseParts(Request.java:2551)\n\nThe issue seems to be introduced within the commit https://github.com/apache/tomcat/commit/e34fe96ef8ee782b0e56b64358e8dc57cbe336a6, which sets upload.fileCountMax parameter to the value of a new introduced maxPartCount parameter, which is set to 10 by default.\n\nBefore, the value of maxParameterCount was used, which was set to 1000.\n\nWe do not think the reduction of 100 times is appropriate in this use case, as the value of \"10\" limits very common scenarious. We would prefer to have the value increased to at least \"100\".\n\nThe problem for us is also that we do not use an embedded tomcat and we deliver only a spring-boot WAR file, thus it is impossible for us to configure the behavior on our side.\n\nTherefore, could you please increase the default value for the constraint to 100?\n\nSame issue is present in Tomcat 10.1.42.",
    "comments": [
      "Alternatively, a special parameter maxFileCount could be used in order to set the value explicitly (with 100 by default).",
      "If you want a different default, you can see maxPartCount on the Connector.\n\nIf you want per URL control of the limit (and maxParameterCount and maxPartHeaderSize), you can use the ParameterLimitValve.",
      "The problem for us is that the code fails even when I submit a single file. But because I have some other input fields, it throws an exception FileCountLimitExceededException. Which is very confusing. We do not think the behavior is expected.\n\nFor the context, we have a form with more than 10 fields, but with most of them being only check or radio boxes. Only some of them are file fields, and all of them except one are optional.\n\nWe provide an open-source application delivered in a WAR file, with no possibility to configure the Connector in an external Tomcat. Therefore it is impossible to increase the limits on our side. This will unfortunately impact our users that will need to figure out the problem on their own (which is also not self-explanatory with the current exception).\n\nWe believe this limitation will impact other Tomcat users soon, therefore we respectively ask to increase the default limits or modify the behavior, if possible.",
      "The problem for us is that the code fails even when I submit a single file. But because I have some other input fields, it throws an exception FileCountLimitExceededException. Which is very confusing. We do not think the behavior is expected.\n\nFor the context, we have a form with more than 10 fields, but with most of them being only check or radio boxes. Only some of them are file fields, and all of them except one are optional.\n\nWe provide an open-source application delivered in a WAR file, with no possibility to configure the Connector in an external Tomcat. Therefore it is impossible to increase the limits on our side. This will unfortunately impact our users that will need to figure out the problem on their own (which is also not self-explanatory with the current exception).\n\nWe believe this limitation will impact other Tomcat users soon, therefore we respectively ask to increase the default limits or modify the behavior, if possible.",
      "Ok, so what would be a reasonable default value in your opinion ?",
      "I did some tests, it seems like Tomcat mixes a number of fields and number of files uploaded. On some of the forms, I have a limit of 5-10 files per form, on others I cannot submit even a single file...\n\nI would say either the code should validate the number of files more explicitly, separating files number and fields number validation, or as a temporary solution, increase the current value of maxPartCount parameter to 100.\n\nWe have some real-life scenarios with validation of documents from public administrations, when a set of more than 30 files shall be provided. Therefore, even a limit of 10 files is too small.\n\nWe propose to set the max file count (or maxPartCount) to 100. It still decreases the previous value of 1000 (delivered from maxParameterCount in Tomcat v11.0.7), but still big enough to support common scenarios.\n\nPlease note that also there exist limitations on a file size and a total size of files submitted, thus the increase of maxPartCount to 100 won't impact the security of existing systems.",
      "There is no difference between \"files\" and \"non-files\" when it comes to multipart requests. There are only names and values. The fact that your application treats the differently comes down to application semantics.\n\nSo we can't really count files separately from \"normal\" parameters in a multipart request.\n\nIf you need more than 10 parameters (including both files and non-files), then you will have to change the configuration to allow that.\n\nIf you distribute a WAR file to your customers, you *must* have some kind of configuration guide for the environment into which it is deployed. Something like ensuring there is enough heap space, the right resources are available (e.g. JNDI, JDBC, SMTP), etc.\n\nYour application can inspect the Tomcat configuration on start-up and issue a warning / error if it doesn't meet your application's requirements.",
      "Thank you for the clarification.\n\nConsidering the parameters include both file and non-file fields, I am even more concerned about the choice that have been made to set the total number of parameters to 10. What was the rational for choosing this as the value? I am pretty sure the default value is too small and this change is going to impact many systems, once they upgrade to the new Tomcat version.\n\nTo our opinion, this is not a change that should be present in a minor version upgrade, as it is going to impact many current solutions and will require developers to adjust their systems.\n\nTherefore, I would still insist on increasing the default value to 100. Thank you for understanding.",
      "The problem seems that you are not using multipart very efficiently. If you have trivial flag parameters to pass, then URL params work, for starters. Although multipart happened to work in all cases, this was an assumption that maybe was not very reasonable.",
      "(In reply to Remy Maucherat from comment #9)\n> The problem seems that you are not using multipart very efficiently. If you\n> have trivial flag parameters to pass, then URL params work, for starters.\n> Although multipart happened to work in all cases, this was an assumption\n> that maybe was not very reasonable.\n\nI disagree with this.  \nAs soon as you use a form with a fileuplod in it you will normally use the attribute enctype=\"multipart/form-data\".\nWith the new default limit that means every form with that enctype and more than 10 fields will break.  \nFor me this change broke several of my apps and i had to track down what the hell changed in the tomcat codebase.\n\nI'm ok with introducing new limits in general, but this was done in a minor release without any warning to the users.  \nEven the notable changes do not mention new default limits and just reads \n\"Provide finer grained control of multi-part request processing via two new attributes on the Connector element.\"\nNo mention of new, enforced limits at all.\n\nAt the very least this change should be prominently mentioned in the notable changes section of the release.  \nIdeally I'd expect to introduce these options with much higher default values that don't break apps and then reduce them in a major release when people are expecting it.",
      "I also think this shouldn\u2019t have been included as a minor change, or without any heads-up about it, because it breaks a lot of default apps. I think there should be a pretty high limit to keep backwards compatibility, and if you want to reduce it, you should do it in a major version, that way there\u2019s enough room to adjust.",
      "Now the associated CVEs are public, it can be revealed that this change was in response to CVE-2025-48976 and CVE-2025-48988.\n\nCombined, these CVEs could trigger an OOME leading to a DoS.\n\nWith a carefully crafted request, the memory usage is:\n\nPart Header Size (was 10kB, now 512)\nx\nMaximum number of Parts per request (was 1000, now 10)\nx\nMaximum number of concurrent request (8192)\nx\n2 (due to the internal implementation)\nx\n2 (if running on Java 8 - so Tomcat 9 only)\n\nThat made the worst case memory usage 10kb x ~1k x 8k x 4 = 320Gb\n\nThe changes we introduced reduced this to a more manageable 0.5k x 10 x 8k x 4 = 160Mb\n\nYes, the part limit of 10 is too low for some use cases but increasing it to 100 is probably going to far.\n\nHappy to discuss how we can improve things for the July release round. A few options to consider for starters:\n\na) We could make the default maxPartCount 20 by default but halve it for Tomcat 9 if running on Java 8.\n\nb) Increase maxPartCount to something else. Options here depend on what we consider to be reasonable for default memory requirements. If we think 1Gb is reasonable maxPartCount could go as high as 60 (or 120 if we include optional a) as well)\n\nc) include part headers in the maxPostSize calculation? With a 2Mb default that leads to around 16Gb memory usage which is too high. maxPostSize would need to come down to ~200k for that to work - that might be too low for a default.\n\nWhat do folks think?",
      "The previous defaults were there without doing the math (and even more often new features were added on top of the existing defaults), so when you multiply everything it gets out of hand.\n\nObviously mitigations are that multipart is not often out of auth or easily accessible for scripting and so on.",
      "I agree with option b: increasing maxPartCount to better support real use cases with many parts",
      "Increasing it to what?",
      "I believe that any value between 30 and 60",
      "30 to 60 just like that seems too high to me, 25 would be 400MB, which is already huge. You got to realize that processing this is not free if an attacker shows up with a fully populated request.\n\nOne thing I was considering personally is relaxing the default limit dynamically (maybe up to the proposed 50 or 60) if there is an authenticated user (userPrincipal != null). This does not cover everything 100%, and is clearly not out of reach of an attacker in some cases, but this is something that can reasonably make people's like easier.",
      "My thoughs on this:\n\n1. Communication of new enforced Limits.  \nIf Tomcat introduces new Limits for whatever reason (CVEs oder other things) it should be clearly stated that there are new limits to prevent confusion.  \nNo need to justify exactly why in the release notes, but instead of writing:\n\"Provide finer grained control of multi-part request processing via two new attributes on the Connector element.\"\nIt would be way more helpful for users to read something like:\n\"Introduce new default limits for multi-part request processing. maxPartCount=10 and maxPartHeaderSize=512. Please check the documentation here: [link]\"\n\nThis is something that can easily be improved regardless of the discussion about whether the new limits are apropriate or not :)\n\n\n2. regarding the proposed limits I think option b in combination with option a would be good default values. so 60 for Java 8 and 120 for everything newer.  \nIt would break way less apps and still be a considerable improvement.  \nAlso imho most servers have more than 1 GB RAM to spare. Especially in Enterprise contexts :)\n\n\nBut in the end those are just default values.  \nMaybe very low values are ok even if they break a lot of apps as long as people are aware of them.  \nMaybe we could offer some examples like what Mark did here in the comments :)\n10kb x ~1k x 8k x 4 = 320Gb\n0.5k x 10 x 8k x 4 = 160Mb\nMaybe add some values for 1Gb and 500Mb as well.\n\nImho the most actionable thing is to better communicate the new limits so people can make an informed decision what's best for their specific use case :)",
      "I didn't inspect the code, but would it be possible to roughly count the bytes while reading/processing the request and err out if it gets too large? That way we could increase the limits of the factors in the formula without risking the product to get to big.",
      "Hello,\n\njust to mention this subtle change did cost us 2.5 team days & a whole lot of stress searching for the needle in the haystack as our app suddenly didn't work anymore with multipart uploads. Or to be precise, *some* multipart uploads did still, others failed, and Tomcat 10.1 rsp. 11.0.8 do behave differently in this case: 11 throws an Exception that for some reason does not get logged most of the time, while 10.1 seems to accept the request but limits it in some way, leading to Spring Security CSRF errors, pointing the bug hunt in a completely wrong direction. And the issue did hit us in production, as our hoster had automatically updated the Tomcat container to the latest version because of, well, security guidelines. In fact, this caused significant downtime and a rollback and SLA violations and in effect, just what the change tried to avoid.\n\nWe are deeply glad and thankful for the Tomcat Server and the ASF team's outstanding efforts during the last ~25 years, but maybe some suggestions are ok to further enhance the experience ;)\n\n1. A BREAKING change like this (and suddenly reducing the acceptable limits by a factor of 100 (!) definitely is one) should be highlighted in BOLD RED wherever possible and not just mentioned as a Coyote enhancement introducing 2 additional parameters that seemed optional. Breaking change means: it breaks real world application like ours, users complain and so on. There was no mentioning of the new *10* limit in the changelog or that the *magical* boundary was crossed upon the 11th parameter, which is dependant on checkbox states and such in effect. The cause was really really hard to find, and I say this with nearly 30 years under my belt.\n\n2. The *first* thing a developer does in case of a sudden incompatibility is installing a (clean room) new server and checking if the issue is related to the customer environment somewhere or not. At this stage, it's already level 3 support. It would have been *tremendously* helpful if the default config in server.xml would contain an entry for the \"max parts count\" as there is for e.g.maxParameterCount=\"1000\". As it was, there was *nothing* hinting at a new limit. In fact, we were chasing ghosts.\n\n3. While it is absolutely OK to provide means to limit resource usage as it was implemented, I would still raise the issue of *automatically enforcing* them, even more so, in a *minor* version where nobody expects surch a change (semver rules). I see the issue of providing a 'secure by default' configuration here, but breaking production deployments that may have relied on the previous behaviour since the advent of Servlet API 3.1 or so is a thing to consider, too. I would have preferred to announce the change and make it opt-in. It's not so that Tomcat servers suddenly went down in flames amass, and they haven't in decades. Furthermore, Tomcat usually runs behind an array of other infrastructure, reverse proxies, WAFs and such, in enterprise scenarios at least, which also impose limits similar to the one in question.\n\nI'll leave it to three here, thank you for hard work & providing the only remaining JEE server we love to use after 25 years ;)\n\n-- Ch.\n\nNB. Oh, and ofc the value for maxPartCount should be either set to *42* or *451* for obvious reasons. Jokes aside, in real word applications we see big big wtf_incomprehensible JSP pages and such stuff galore, and you're happy if you don't. From a developer perspective, adding another edit field or checkbox option to a wieldy dialog you hate anyway possibly shouldn't cause the app to break in a most mysterious way ;)",
      "We're really sorry for the trouble, but that's basically how CVEs work these days. They have to be secured by default regardless of the immediate consequences. There are plenty of examples out there of very disruptive security exploits, or fixes to these exploits.\n\nReally bad luck if you're hovering between 10 and 11 parts, this indeed makes the issue harder to understand.\n\nOnce everyone is aware of this (and we will likely adjust the default for maxPartCount up slightly, although it will remain way way below the previous 1000), it becomes just another parameter to set in the configuration.",
      "I wanted to add my voice to those concerned about this change. \n\nUpgrading to Tomcat 10.1.42 introduced new org.apache.tomcat.util.http.fileupload.impl.FileCountLimitExceededException\nerrors in some of our existing applications. \n\nWe were surprised. And we were not alone. See https://stackoverflow.com/questions/79667827/tomcat-multipart-upload-for-many-attachments-10-not-working-after-update-to-9 and https://stackoverflow.com/questions/79670639/how-to-configure-tomcat-max-file-count-size  \n\nI\u2019d echo Hannes Rosen\u00f6gger and others above suggesting that the Changelog could have been more helpful in communicating this potentially breaking change in a way that would have allowed us to resolve the issue more quickly. In our case, adjusting the Connector\u2019s maxPartCount attribute value to 100 was the quick workaround. (We have a large dynamic multipart form having only a single file input. This form starts around 60 request parameters, but may increase based on how the user interacts with the form having JS insert new form elements into\nthe DOM.)\n\nAbsolutely love Tomcat and have been using it my entire professional career (since the early 2000s). Thank you Tomcat team for such a great piece of software!",
      "For the record, +1 for 50 as the new default for maxPartCount.",
      "That is a potential 800MB memory usage on Tomcat 9 + Java 8 and 400MB memory usage for everyone else.\n\nThat seems to be a reasonable default to me. It is higher than I would selected given a free choice but given the feedback received, it does seem a higher default is required to better support the forms currently in use with high numbers of fields. And there is the ParameterLimitValve for more fine-grained control if required.\n\nAs has been suggested, I can provide some of these calculations in the docs so folks can more easily make their own tradeoffs.",
      "Hello to everybody,\n\nI'm very much in agreement with those who commented before me. I understand the discussion around CVEs, and I too want to thank everyone for the effort in maintaining Tomcat, such a long-standing project that I\u2019ve also been using for many years as my only application server.\n\nI just wanted to add that, perhaps, to mitigate this situation, it might be better to reformulate all the parameters in a way that achieves the same result while breaking as few webapps as possible.\n\nHere\u2019s my first consideration: a real workd webapp or rest service cannot handle 8192 *concurrent* requests with just a few MBs of dedicated memory. Surely, before hitting the memory limit, there will be issues with CPU, networking, and I/O depending on the type of application.\n\nA real-world webapp typically does several things, so after processing each request, various other system resources will be used (DB, filesystem, etc.), unless you're in a multi-tier environment.\n\nAnd if a webapp needs to handle 8k \"real concurrent requests\", it surely has a development team that will have already customized all the parameters manually.\n\nSo, my proposal is as follows:\n\nmaxConnections: 1000  \n\nmaxPartHeaderSize: 1024  \nmaxPartCount: 100\n\nBased on your previous formula, we get:\n\n1k x 100 x 1000 x 2 =~ 200Mb\n\nIf you're really sure that 512 byte are enough for multipart request headers\nthe following value could do the math:\n\nmaxConnections: 2500  \n\nmaxPartHeaderSize: 512\nmaxPartCount: 100\n\nBased on your previous formula, we get:\n\n0.5k x 100 x 2500 x 2 =~ 250Mb\n\nBonus tips:\n\n1) explain that this new parameters will limits all multipart parameters and not only the uploaded files \n\n2) rename the FileCountLimitExceededException to MultipartParametersExceededException\n\n3) be sure that it will logged by Tomcat (for example JSF hides this exception at the moment)\n\nCheers to everyone",
      "Tomcat has a sufficiently wide range of users and uses that I suspect that introducing lower limits for additional parameters would trigger further issues along similar lines to this one regarding the changes to those limits.\n\nIncreasing the default maxPartCount to 50 along with documentation updates still looks to be the best way forward.",
      "(In reply to Mark Thomas from comment #26)\n> Tomcat has a sufficiently wide range of users and uses that I suspect that\n> introducing lower limits for additional parameters would trigger further\n> issues along similar lines to this one regarding the changes to those limits.\n> \n> Increasing the default maxPartCount to 50 along with documentation updates\n> still looks to be the best way forward.\n\nAbout item 3), I think I'll add single line (info level ?) logging for partsParseException and parametersParseException before rethrowing. Although a framework is not supposed to silently ignore exceptions, I guess it can happen.",
      "I suspect the issue there is that prior to Servlet 6.1 getParameter() and friends weren't allowed to throw exceptions so there was no way to signal to the application that parameter (part) parsing had hit a limit.\n\nServlet 6.1 fixed that by allowing a runtime exception to be thrown. If a framework swallows that then I class that very much as a framework issue.\n\nA log message would certainly help but historically we have tried to avoid logging what are essentially request issues as there were concerns about DoS via filling logs. Maybe do it via a UserDataHelper. A log message (including stack trace) will be generated but only once per 24 hours by default.",
      "(In reply to Mark Thomas from comment #28)\n> A log message would certainly help but historically we have tried to avoid\n> logging what are essentially request issues as there were concerns about DoS\n> via filling logs. Maybe do it via a UserDataHelper. A log message (including\n> stack trace) will be generated but only once per 24 hours by default.\n\nThat's a nice idea but the log should probably go to context.getLogger() so UserDataHelper cannot be used here.",
      "R\u00e9my has added debug logging if the limits are reached.\n\nWith that, I do think there is anything else to be done for this issue.\n\nUpdated limits and logging will be in the July releases.",
      "Originally there were several configurable limitation:\n1. maxPostSize on Connector (default to 2MB)\n2. maxParameterCount on Connector (default to 1000)\n3. maxHeaderCount on Connector (default to 100)\n4. maxHttpRequestHeaderSize on Connector (default to 8K)\n5. maxRequestSize on MCE (runtime: default to maxPostSize)\n6. maxFileSize on MCE (runtime: default to maxPostSize)\n7. Each part header size are limited (2K or 8K?)\n8. maxPartHeaderSize on Connector (default to 512)\n9. maxPartCount on Connector (default to 50)\n\nPer rfc7578 section 4.8, once PR https://github.com/apache/tomcat/pull/869 / https://github.com/apache/commons-fileupload/pull/421 were accepted, maximum number of part headers for each part is 3.\n\nSimilar to maxHeaderCount and maxHttpRequestHeaderSize, maybe is clearly that if we introduce maxPartHeaderCount to limit total part-headers of all parts and change maxPartHeaderSize to total size of all parts' headers.\n\nmaxPartHeaderCount + maxPartHeaderSize to rule all headers of all parts.",
      "Those changes would need to happen in Commons FileUpload.\n\nChanging the meaning of maxPartHeaderSize isn't an option as it would break backwards compatibility but adding a new option to limit the total header size is a possibility.",
      "Honestly, maxPartHeaderCount and maxPartHeaderSize are essentially the same thing. If you are allowed to have 2kb of headers, then you can only have a certain maximum number of headers as well. You can't have infinite part-headers fit inside of 2kb.\n\nI'm not entirely sure of the history of maxHeaderCount vs maxHeaderSize, but the maxHeaderSize has much more to do with consistent buffer sizing within the container and is much more important than limiting the actual number of headers."
    ],
    "creation_ts": "2025-06-11T10:24:36Z",
    "fixes": [
      69710
    ]
  },
  {
    "id": 51881,
    "summary": "Server incorrectly parses incoming HTTP requests and loses them",
    "description": "We are developing Comet-based web application with native Tomcat Comet support via Atmosphere framework. We use HTTP streaming for transferring data from our servlet to the client. In our scenario, the user connects to the server with XMLHTTPRequest sending GET. In response, we suspend his connection and then, when needed, send data back to him. When the user opens another browser tab and connects to our web application, our web application should close the connection in the first (previously opened) tab and then suspend and use connection from the second. So, my serlvet detect that another GET is incoming in the same session, finds previous connection and closes it (internally using CometEvent.close()). This works as intended. However, the next HTTP request to the web server is not correctly handled, and in my servlet I receive the strange HttpServletRequest with previous GET query string and duplicate request headers from initial GET and the following request. I traced through the Tomcat code, and noticed, that in org.apache.coyote.http11.Http11Processor.process() request field is usually empty (contains no HTTP method, request headers, etc.) However, after Comet closing this object is not empty and contain previoud HTTP request. Later the request headers are parsed and appended to the fields existed in previous request object. After that, this invalid object is passed to my Servlet.\nI suppose, that clearing request object when closing comet event and all assosiated data in Http11NioProcessor.actionInternal() can solve this issue.",
    "comments": [
      "Created attachment 27576\nScreenshots from my debugger",
      "The relevant objects (Processor, Request, Response) are always recycled between requests. From the description of the problem, it sounds like something is keeping a reference to one  or more of these between requests and that is triggering the mix-up.\n\nTo investigate this further you'll need to provide the simplest possible web application (or unit test) that demonstrates this issue. Without the ability to re-create the issue there is little the Tomcat team can do. Also, the majority of issues of this nature turn out to be application issues so without the ability to recreate the problem, the assumption will be that this is also an application issue and the issue closed as invalid.",
      "Created attachment 27610\nTest case\n\nThis is the test servlet which reproduces the issue. It can be used as follows: run the servlet under debugger and set breakpoint on TransportServlet.java: 102. Access it in Chrome in a tab. Click 'Reflect message' a couple of times. Open another tab (not closing the first one) and access the servlet. The breakpoint should trigger, indicating the broken request.\n\nIdeally, you should see Error:204 in the first tab, after which the 'Reflect message' button takes no action, and working app in the second tab.\n\nWhen I deploy my server on Galssfish it works as intended.",
      "Testcase included",
      "Thanks for that, I'll take a look now.",
      "A couple of notes on the sample:\n- The class name is TransportHandler not TransportServlet\n- The <web-app> element in web.xml isn't quite right and Tomcat complains if validation is enabled\n- There is an invalid <comet-support-enabled> tag that Tomcat complains about if validation is enabled\n- The <init-param> tags are too late in the <servlet> block and Tomcat complains if validation is enabled\n\nI have tested the supplied test case and am unable to recreate the issue.\nThe test environment was:\nOS: Windows 64-bit\nJava: 1.6.0_27 64-bit\nChrome: 14.0.835.186 m\nTomcat: 7.0.21 with NIO and APR, trunk with NIO\n\nIn order to look at this further you are going to have to provide exact steps that recreate this issue on a clean install of either the latest Tomcat release or the latest code from svn trunk. It may also help if you provide a complete WAR file to ensure commonality between environments.",
      "The issue reproduces 100% on all Tomcat installations I have (7.0.21 on my Windows 32-bit machine, 7.0.19 on Ubuntu Server 32-bit test server and 7.0.16 on my test VM). On all of them Tomcat is cleanly installed, and in server.xml default HTTP1.1 connector changed to\n\n<Connector port=\"8080\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n\nAlso, management user is added. All other settings are set to their defaults.\n\nDo you run the sample under the debugger? If not, it works because my workaround method validateRequest() which drops invalid requests, it shouldn't be in the production code. Even with this, you can encounter the delayed request processing, which is highly undesirable. The point of the sample I provided is to put a breakpoint on TransportHandler.java:102 and inspect HttpServletRequest.coyoteRequest object, and see incorrect headers, as in screenshots I attached earlier. I will also comment out this workaround method and attach the war, you will see that both connections and both tabs are closed (error 204), which should never happen.\n\nSo, to reproduce the issue, you need to make Tomcat clean install, reconfigure Connector in server.xml, open the project in IDE (we use IntelliJ IDEA for development, project files are included), and set the breakpoint I mentioned.\n\nThen, follow the steps I described earlier.\n\nThanks for your comments to the sample. THe class is TransportHandler because it is not the servlet class itself (which is AtmosphereServlet, built-in Atmosphere  library), but Atmosphere handler. I will also validate the web.xml, however it is generated almost automatically by my IDE.",
      "Created attachment 27620\nwar file\n\nPlease also note the message flow. Normally, when opening the page, you should see 3 messages under 'Received messages' \n1. State: messageReceived, Transport: polling, Body: { \"success\": true}\n2. Pushing body: { \"command\": \"player/reauth\", \"params\": { \"token\": \"ABC\" } }\n3. State: messageReceived, Transport: polling, Body: { \"command\": \"system/hello\" ...\n\nAnd when you open the second tab, when the issue arisies you will see only two of them\n1. Pushing body: { \"command\": \"player/reauth\", \"params\": { \"token\": \"ABC\" } }\n2. State: messageReceived, Transport: polling, Body: { \"command\": \"system/hello\"\n\nThis is because incoming POST (for Pushing body: { \"command\": \"player/reauth\") is \"swallowed\" by Tomcat and presented to TransportHandler as GET with duplicate headers. And if you wait about 20-30sec, you will see the third line to appear, maybe because of the request is handled for the second time or something after the timeout.",
      "Can you test with 7.0.22 release candidate?\nThe download link is in the VOTE thread on dev@.",
      "Thanks for the additional detail. I can see the problem now. It dies reproduce with the 7.0.22 tag. I am currently trying to track down the root cause.",
      "This took a while to track down but was eventually relatively simple.\n\nWhen using NIO and a comet request is closed from a different thread then the poller is used to trigger the processing of the close event. The problem was that that request was marked as non-comet before this poller task was triggered meaning that when it happened the request was treated as a non-Comet request rather than a comet request. This meant that the necessary clean-up was not make and then next request received on the connection (i.e. from the same client) was corrupted.\n\nThis has been fixed - along with some additional clean-up - in trunk and 7.0.x and will be included in 7.0.23 onwards.\n\nThanks again for the test case. Bugs that involve multiple threads are always tricky to track down but the test case made it a lot easier."
    ],
    "creation_ts": "2011-09-23T11:55:42Z",
    "fixes": [
      51881
    ]
  },
  {
    "id": 47330,
    "summary": "proposal : port of mod_remoteip in Tomcat as RemoteIpValve",
    "description": "Created attachment 23772\nFirst version of the proposed patch\n\nHere is a proposal to port Apache Server mod_remoteip module as a Tomcat Valve to have the actual end user remote ip in ServletRequest.getRemoteAddr() and ServletRequest.getRemoteHost() methods even if reverse proxies (e.g. Apache Http Server mod_proxy_http + mod_proxy_balancer) and/or hardware load balancer (e.g. F5 Big IP, etc).\n\nThis feature will benefit security and audit frameworks like SpringSecurity which use ServletRequest.getRemoteAddr() in its eventing mechanism to track web user ip.\n\nThis proposal is composed of :\n* RemoteIpValve.java : the proposed standalone code\n* RemoteIpValveTest.java : 12 test cases to validate the behavior\nNote : no existing Tomcat code is modified by this proposed Valve\n\nDocumentation for mod_remoteip : http://httpd.apache.org/docs/trunk/mod/mod_remoteip.html\n\nMain differences between mod_remoteip and RemoteIpValve :\n* RemoteIpValve uses regular expressions to express network subnets when mod_remoteip uses ip address blocks because:\n** request filters valves (RemoteAddrValve and RemoteHostValve) already use regular expressions for this\n** there are no ip address blocks library available in Tomcat similar to apr_ipsubnet_test that is used in httpd.\n** The directives RemoteIPInternalProxyList and RemoteIPTrustedProxyList are not ported: configuration is server.xml oriented and limited to the java equivalents of  RemoteIPInternalProxy  and RemoteIPTrustedProxy\n\nSample of configuration : \n <Valve \n   className=\"org.apache.catalina.connector.RemoteIpValve\"\n   allowedInternalProxies=\"192\\.168\\.0\\.10, 192\\.168\\.0\\.11\"\n   remoteIPHeader=\"x-forwarded-for\"\n   remoteIPProxiesHeader=\"x-forwarded-by\"\n   trustedProxies=\"proxy1, proxy2\"\n   />\n\nConfiguration parameters :\n\n|-------------------------|-----------------------------------|--------------------------------------|-----------------------------------------------|\n| REMOTEIPVALVE PROPERTY  | EQUIVALENT MOD_REMOTEIP DIRECTIVE | FORMAT                               | DEFAULT VALUE                                 |\n|-------------------------|-----------------------------------|--------------------------------------|-----------------------------------------------|\n| remoteIPHeader          | RemoteIPHeader                    | Compliant http header string         | x-forwarded-for                               |\n|-------------------------|-----------------------------------|--------------------------------------|-----------------------------------------------|\n| internalProxies         | RemoteIPInternalProxy             | Comma delimited list of regular      | 10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3},                |\n|                         |                                   | expressions (in the syntax supported | 192\\.168\\.\\d{1,3}\\.\\d{1,3},                   |\n|                         |                                   | by the Pattern library)              | 169\\.254\\.\\d{1,3}\\.\\d{1,3},                   |\n|                         |                                   |                                      | 127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}                |\n|                         |                                   |                                      |                                               |\n|                         |                                   |                                      | By default, 10/8, 192.168/16, 169.254/16      |\n|                         |                                   |                                      | and 127/8 are allowed ; 172.16/12 has not     |\n|                         |                                   |                                      | been enabled by default because it is         |\n|                         |                                   |                                      | complex to describe with regular expressions  |\n|-------------------------|-----------------------------------|--------------------------------------|-----------------------------------------------|\n| proxiesHeader           | RemoteIPProxiesHeader             | Compliant http header String         | x-forwarded-by                                |\n|-------------------------|-----------------------------------|--------------------------------------|-----------------------------------------------|\n| trustedProxies          | RemoteIPTrustedProxy              | Comma delimited list of regular      |                                               |\n|                         |                                   | expressions (in the syntax supported |                                               |\n|                         |                                   | by the Pattern library)              |                                               |\n|-------------------------|-----------------------------------|--------------------------------------|-----------------------------------------------|\n\n\nReason why RemoteIpValve is declared in the o.a.catalina.connector package instead of o.a.catalina.valves :\nBecause Request.setRemoteAddr(String) and Request.setRemoteHost(String) methods are currently no-op and RemoteIpValve use package visibility to directly modify Request.remoteAddr and Request.remoteHost fields.\nRemoteIpValve could be moved to o.a.catalina.valves if the Request.setRemoteAddr(String) and Request.setRemoteHost(String) methods to no longer be no-op but to actually modify the underlying fields.",
    "comments": [
      "Created attachment 23773\nJavadoc of RemoteIpValve\n\nThe plain text table of configuration parameters I wrote in the initial description has unfortunately been damaged. This javadoc contains the HTML version of the description of RemoteIpValve",
      "Created attachment 23970\nSecond version of the proposed patch\n\nAdd support for x-forwarded-proto / x-forwarded-ssl / front-end-https styles http header for https request : sets request.secure = true, request.scheme = https, request.serverPort = 443\n\nDetailed documentation at : http://code.google.com/p/xebia-france/wiki/RemoteIpValve",
      "As Tomcat valves are currently being converted into Servlet Filter (1), here is a Servlet Filter implementation of mod_remoteip we called XForwardedFilter : \nhttp://code.google.com/p/xebia-france/wiki/XForwardedFilter\nhttp://xebia-france.googlecode.com/svn/web/xebia-servlet-extras/tags/xebia-servlet-extras-1.0.0/src/main/java/fr/xebia/servlet/filter/XForwardedFilter.java\n\nLicensing and copyright\n\nThe XforwardedFilter code is still licensed ASL 2 but the copyright is for \"Xebia and the original author or authors\" but we can change it to the usual Apache Software Foundation license and copyright with great pleasure.\n\nImplementation decisions\n\nThis filter has been developped before knowing that the Tomcat project would move from Valve to Filter and is intended to be servlet container agnostic.\n\nWe decided to rely on SLF4J for logging to be as portable as possible. Integrating this Filter in Tomcat project may require to migrate to JULI.\n\n(1) Google Summer Of Code 2009, project \"Convert current Tomcat valves to Servlet Filters\" : http://wiki.apache.org/tomcat/SummerOfCode2009",
      "Created attachment 24455\nTomcat 7 patch with completed TODOs and failing test case\n\nMany thanks for these patches. I'd like to add the valve and filter to Tomcat 7 and the valve to Tomcat 6. I have made the necessary changes to Tomcat 7 the valve can sit in the right package.\n\nWhen I applied the patch, I completed the TODOs and added some documentation. However, one of the test cases failed and my initial investigation suggests that the patch needs further work.\n\nI have attached my final Tomcat 7 patch. Please update as necessary to correct the failing test case and then I'll apply it. Once the valve is applied, I'll look a the filter which will probably be generated by porting the final version of the valve.",
      "Created attachment 24465\nFixed Tomcat 7 patch with successful test case\n\nHere is the fixed patch. A small mistake seems to have been introduced in the test case during the refactoring.\nUnfortunately, my \"svn diff\" command did not order the changed files in the same order as the \"24455: Tomcat 7 patch with completed TODOs and failing test case\" patch did.\n\n\nFor the Servlet API Filter implementation of this feature, there is some work to port it from a valve because the HttpServletRequest interface does not ease adding and removing http headers. \n\nTo do this, I completely reimplemented the headers mechanisms with a case insensitive list of headers rebuilt in a request wrapper. \n\nAnother apporach could have been to decorate the getXxxHeader() and getHeaderNames() methods. The getHeaderNames() method would be more complex because we need to add headers (like x-forwarded-server) but also to remove some (like x-forwarded-for). If this was an Iterator instead of an Enumeration, I would use a predicate to exclude the \"removed\" headers, a FilterEnumeration to apply the predicate on the Enumeration and a ChainIterator for the \"added\" headers. This would imply reinventing a subset of Apache Commons Collection applied to the old ages Enumeration.\n\n\nAnother point on the Filter port of the RemoteIpValve feature is the logging implementation. Using Tomcat JULI would make reusing this Filter outside of Tomcat more complex.\n\n\nThe version 1.0.0 of XForwardedFilter.java I linked on a previous comment of this defect had a bug in the debug statement, here is a fixed version :\nhttp://xebia-france.googlecode.com/svn/web/xebia-servlet-extras/tags/xebia-servlet-extras-1.0.1/src/main/java/fr/xebia/servlet/filter/XForwardedFilter.java",
      "The updated patch is missing a bunch of files including the valve and the test case.",
      "Created attachment 24471\nFixed Tomcat 7 patch with successful test case\n\nSorry for the time you lost. Here is the patch that includes the following modified/added files : \n- valve.xml\n- RemoteIpValveTest.java\n- RemoteIpValve.java\n- LocalStrings.properties\n- mbeans-descriptors.xml",
      "Thanks for the updated patch.\n\nI have applied the valve patch to trunk. The filter patch will follow along with a backport proposal for the valve to 6.0.x",
      "I've applied the filter to trunk and proposed the valve for backport to 6.0.x along with the required changes to Request",
      "The valve has been applied to 6.0.x and will be included in 6.0.21 onwards.",
      "Created attachment 24505\nlogging, naming and javadoc patch of RemoteIpFilter\n\nHere is a patch of RemoteIpFilter with the following :\n* fix NPE in log statement if protocolHeader has not been defined and the servlet container does not support request.getHeader(null)\n* fix mismatch between javadoc  and code for filter parameter name \"allowedInternalProxies\" -> \"internalProxies\"\n* finish javadoc refactoring \"XForwardedFilter\" -> \"RemoteIpFilter\"",
      "Patch applied. Many thanks.",
      "*** Bug 48378 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2009-06-07T17:38:02Z",
    "fixes": [
      47330
    ]
  },
  {
    "id": 60781,
    "summary": "Access Log Valve does not escape the same as mod_log_config",
    "description": "It is my understanding that the log format is supposed to match apache2.\nHowever, escaping is not the same.\n\nAs a concrete example, if there is a \" in the User-Agent and you use the combined format, apache2 gives\n\n    127.0.0.1 - - [27/Feb/2017:14:31:48 +0000] \"GET / HTTP/1.1\" 401 17277 \"-\" \"Agent \\\"Test\\\"\"\n\nWhile Tomcat gives\n\n    127.0.0.1 - - [27/Feb/2017:14:31:48 +0000] \"GET / HTTP/1.1\" 401 17277 \"-\" \"Agent \"Test\"\"\n\nThe latter cannot be parsed safely.",
    "comments": [
      "Created attachment 34787\nEscape characters like httpd\n\nI am not sure about the correct handling of chars with values out of the ASCII range. I believe they are double encoded now. \n\nBut quotes and alike should be escaped correctly.\n\nMy first thought was to combine this escaping with ExtendedAccessLogValve, but it seems, that the quotes are explicitly coded as \"\" instead of \\\".",
      "Created attachment 34788\nEscape characters like httpd\n\nUse ISO-8859-1 to decode String into bytes.",
      "Using Felix's patch as a starting point, I've put together this PR:\nhttps://github.com/apache/tomcat/pull/384",
      "Fixed in:\n- 10.0.x for 10.0.1 onwards\n- 9.0.x for 9.0.42 onwards\n- 8.5.x for 8.5.62 onwards"
    ],
    "creation_ts": "2017-02-27T17:54:22Z",
    "fixes": [
      60781
    ]
  },
  {
    "id": 51811,
    "summary": "SSL configuration property name illegal",
    "description": "server.xml configuration file. Connector properties.\norg.apache.coyote.http11.Http11NioProtocol\n\nproperty set: sslImplementationName=\"ru.yamoney.calypso.server.security.jsse.CalypsoSSLImplementation\"\n\nCauses an error during catalina startup:\n\n[2011-09-14 18:42:16.299] [main WARN  commons.digester.Digester] - [SetAllPropertiesRule]{Server/Service/Connector} Setting property 'sslImplementationName' to 'ru.yamoney.calypso.server.security.jsse.CalypsoSSLImplementation' did not find a matching property.\n\n\nAccording documentation:\nhttp://tomcat.apache.org/tomcat-7.0-doc/config/http.html#SSL%20Support\n\nthe property name is: sslImplementationName\n\n\nsee the source code:\norg.apache.coyote.http11.AbstractHttp11JsseProtocol\n\nline 107:\n\n    public String getSslImplemenationName() { return sslImplemenationName; }\n    public void setSslImplemenationName(String s) {\n        this.sslImplemenationName = s;\n    }\n\n\nAs you see, the property name is misspelled (\"sslImplemenation\").\n\nWhen I set the connector property as:\nsslImplemenationName=\"ru.yamoney.calypso.server.security.jsse.CalypsoSSLImplementation\"\n\nthe catalina starts fine.\n\nVersions affected: 7.0.20 and 7.0.21",
    "comments": [
      "Thanks for reporting this.\n\nIt has been fixed in TC trunk (r1172269) and TC 7 (r1172271) and will be part of TC 7.0.22."
    ],
    "creation_ts": "2011-09-14T14:57:22Z",
    "fixes": [
      51811
    ]
  },
  {
    "id": 51544,
    "summary": "EL parser problem for EmptyList",
    "description": "When I return Collections.emptyList() and then use ${list.isEmpty()} in a JSP, a problem occurs (see below). It didn't occur in older Tomcat 7 versions (like 7.0.5).\n\n15:             ${user.names}<br />\n16:         </div>\n17:     </c:forEach>\n18:     <c:if test=\"${users.isEmpty()}\">\n19:         <div>${msg.noResults}</div>\n20:     </c:if>\n21: </div>\n\n\nStacktrace:] with root cause\njava.lang.IllegalAccessException: Class javax.el.BeanELResolver can not access a member of class java.util.Collections$EmptyList with modifiers \"public\"\n\tat sun.reflect.Reflection.ensureMemberAccess(Reflection.java:95)\n\tat java.lang.reflect.Method.invoke(Method.java:607)\n\tat javax.el.BeanELResolver.invoke(BeanELResolver.java:467)\n\tat javax.el.CompositeELResolver.invoke(CompositeELResolver.java:161)\n\tat org.apache.el.parser.AstValue.getValue(AstValue.java:159)\n\tat org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:189)\n\tat org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:985)\n\tat org.apache.jsp.WEB_002dINF.jsp.externalUsers_jsp._jspx_meth_c_005fif_005f2(externalUsers_jsp.java:2060)\n\tat org.apache.jsp.WEB_002dINF.jsp.externalUsers_jsp._jspService(externalUsers_jsp.java:396)\n\tat org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:433)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:389)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:333)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)\n\tat org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:471)\n\tat org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:402)\n\tat org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:329)\n\tat org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)\n\tat org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)\n\tat org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1120)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:890)",
    "comments": [
      "I have added unit tests for this in Tomcat 7 that access the list in EL as a property of a bean, in EL directly and from within a JSP and all pass.\n\nAt this points it looks an application issue.\n\nIf you still see this problem with the latest Tomcat 7 release then to re-open this issue you'll need to provide the simplest possible JSP that demonstrates this issue.",
      "Gump caught this error with the tests that Mark wrote for this issue.\n\nTestsuite: org.apache.el.TestValueExpressionImpl\nTests run: 7, Failures: 0, Errors: 2, Time elapsed: 0.131 sec\nFailed:\n- testBug51544Bean\n- testBug51544Direct\n\nTestsuite: org.apache.el.TestELInJsp\nTests run: 14, Failures: 0, Errors: 1, Time elapsed: 23.259 sec\nFailed:\n- testBug51544",
      "Created attachment 27311\nA copy of two files from gump output, 25 Jul 2011 08:58:47 (UTC)\n\n1. I am attaching a copy from the logs produced by gump run\n\nThe log files are\nhttp://vmgump.apache.org/gump/public/tomcat-trunk/tomcat-trunk-test/gump_file/TEST-org.apache.el.TestValueExpressionImpl.BIO.txt.html\n\nhttp://vmgump.apache.org/gump/public/tomcat-trunk/tomcat-trunk-test/gump_file/TEST-org.apache.el.TestELInJsp.BIO.txt.html\n\n\n2. I am not able to reproduce this in my environment (Sun JDK 6u26 32-bit, WinXP): tested with BIO connector, like gump did. All tests run fine.\n\nbozho, what version of java runtime are you using?",
      "Gump is running open JDK:\n\njava version \"1.6.0_20\" OpenJDK Runtime Environment (IcedTea6 1.9.8) (6b20-1.9.8-0ubuntu1~10.04.1) OpenJDK 64-Bit Server VM (build 19.0-b09, mixed mode)",
      "Hi,\n\nMy version is:\n\njava version \"1.6.0_20\"\nOpenJDK Runtime Environment (IcedTea6 1.9.1) (amazon-44.1.9.1.18.amzn1-i386)\nOpenJDK Client VM (build 19.0-b06, mixed mode)",
      "it's still in testing mode, hence the -client VM. I will change to -server, but I guess it will still be there.",
      "I took a look at the Oracle and OpenJDK implementations of emptyList(). If I modify the test to use size() rather than isEmpty() it fails on the Oracle JDK as well.",
      "Fixed in 7.0.x and will be included in 7.0.20 onwards."
    ],
    "creation_ts": "2011-07-23T08:17:58Z",
    "fixes": [
      51544
    ]
  },
  {
    "id": 43758,
    "summary": "java.lang.NullPointerException from org.apache.jasper.compiler.ServletWriter.printMultiLn() on validation of JSPX with empty <jsp:scriptlet> element",
    "description": "Provided a JSPX with empty jsp:scriptlet element:\n\n<jsp:root xmlns:jsp=\"http://java.sun.com/JSP/Page\"\nxmlns=\"http://www.w3.org/1999/xhtml\" version=\"2.0\">\n<jsp:scriptlet></jsp:scriptlet>\n<html>\n<head><title>Simple jspx page</title></head>\n<body>Place content here</body>\n</html>\n</jsp:root>\n\nValidated this with Jasper using ant task, similar to one described in\nhttp://tomcat.apache.org/tomcat-4.1-doc/jasper-howto.html (adjusted to Tomcat 6,\nof course). Got the trace:\n\njava.lang.NullPointerException\n\tat org.apache.jasper.compiler.ServletWriter.printMultiLn(ServletWriter.java:169)\n\tat org.apache.jasper.compiler.Generator$GenerateVisitor.visit(Generator.java:883)\n\tat org.apache.jasper.compiler.Node$Scriptlet.accept(Node.java:915)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2336)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2386)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2397)\n\tat org.apache.jasper.compiler.Node$JspRoot.accept(Node.java:566)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2336)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2386)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2392)\n\tat org.apache.jasper.compiler.Node$Root.accept(Node.java:489)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2336)\n\tat org.apache.jasper.compiler.Generator.generate(Generator.java:3374)\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:210)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:306)\n\tat org.apache.jasper.JspC.processFile(JspC.java:1007)\n\tat org.apache.jasper.JspC.execute(JspC.java:1156)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)\n\tat org.apache.tools.ant.TaskAdapter.execute(TaskAdapter.java:134)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:357)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:385)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n\tat\norg.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:698)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:199)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat com.intellij.rt.ant.execution.AntMain2.main(AntMain2.java:17)\n\nWithout <jsp:scriptlet></jsp:scriptlet> there is no problem.",
    "comments": [
      "Thanks for the report and test case.\n\nThis has been fixed in svn and proposed for 6.0.x",
      "Thsi has been fixed in svn and will be included in 6.0.16 onwards."
    ],
    "creation_ts": "2007-10-31T11:58:06Z",
    "fixes": [
      43758
    ]
  },
  {
    "id": 49132,
    "summary": "JNDI not working",
    "description": "Simple web-app test to lookup the environment context is throwing an exception - below code is taken from tomcat 6/7 docs - 2nd line throws a NameNotFound Exception 'comp' not found.\n\n// Obtain our environment naming context\nContext initCtx = new InitialContext();\nContext envCtx = (Context) initCtx.lookup(\"java:comp/env\");",
    "comments": [
      "There are unit tests that cover this (they pass) and I also tested this explicitly without any issue. Looks like a configuration/environment issue. Please use the users list if you require further assistance.",
      "Created attachment 25331\nWebapp test src",
      "Created attachment 25332\nTest war file showing issue",
      "Possible timing issue with listener events and JNDI init",
      "This has been fixed in 7.0.x and will be included in 7.0.0 onwards.",
      "(In reply to comment #5)\n> This has been fixed in 7.0.x and will be included in 7.0.0 onwards.\n\nI think this fix breaks Realms. I built Tomcat from trunk after this fix but it refuses to start up. \n\nIt looks like the call to getGlobalNamingContext() fails to start the problem. It would have logged \"Exception looking up UserDatabase under key UserDatabase\", but instead throws NPE because the containerLog field is null when UserDatabaseRealm.startInternal() is called.",
      "> It looks like the call to getGlobalNamingContext() fails to start the problem.\n\nBy which, I mean: \"... fails, which causes the main issue\".",
      "(In reply to comment #7)\n> > It looks like the call to getGlobalNamingContext() fails to start the problem.\n> \n> By which, I mean: \"... fails, which causes the main issue\".\n\nLifeCycle.CONFIGURE_START_EVENT is currently only fired in StandardContext.java, previously the GlobalResources were initialised by a LifeCycle.START_EVENT in Catalina.java.\n\nAlso, I can't find a LifeCycle.AFTER_STOP_EVENT being fired anywhere.",
      "Created attachment 25343\nFires additional lifecycle event to ensure global resources are started",
      "Yep. My bad. Sorry about that.\n\nI fixed it by firing the stop/start configure events from StandardServer.\n\nRe LifeCycle.AFTER_STOP_EVENT, it is triggered by LifecycleBase.setState(LifecycleState.STOPPED) which will fire the event (LifeCycle.AFTER_STOP_EVENT) associated with a transition to that state."
    ],
    "creation_ts": "2010-04-16T01:52:57Z",
    "fixes": [
      49132
    ]
  },
  {
    "id": 42840,
    "summary": "AbstractReplicatedMap.ping(timeout) throws ConcurrentModificationException",
    "description": "I noticed the following codes. \n\norg.apache.catalina.tribes.tipis.AbstractReplicatedMap.ping(long timeout) is \nas follows.\n\n   protected void ping(long timeout) throws ChannelException {\n      \n      .... omits \n      \n       //update our map of members, expire some if we didn't receive a ping \nback\n       synchronized (mapMembers) {\n           Iterator it = mapMembers.entrySet().iterator();\n           long now = System.currentTimeMillis();\n           while ( it.hasNext() ) {\n               Map.Entry entry = (Map.Entry)it.next();\n               long access = ((Long)entry.getValue()).longValue(); \n               if ( (now - access) > timeout ) memberDisappeared((Member)\nentry.getKey());\n           }\n       }//synch\n   }\n   \n(now - access) If > timeout is ture, memberDisappeared((Member)entry.getKey()) \nis executed. \nAnd org.apache.catalina.tribes.tipis.AbstractReplicatedMap.memberDisappeared\n(Member member) is as follows.  \n\n   public void memberDisappeared(Member member) {\n       boolean removed = false;\n       synchronized (mapMembers) {\n           removed = (mapMembers.remove(member) != null );\n       }\n       \n       .... omits \n       \n    }\n   \nmember(argument) is removeed from mapMembers(instance of HashMap). \n\nAs a result, when The 258th line Map.Entry entry=(Map.Entry) it.next() is \nexecuted again, \njava.util.ConcurrentModificationException is thrown.",
    "comments": [
      "Many thanks for the detailed report, the member is now removed directly from the\niterator, should prevent the concurrent modification exception\n\nFilip"
    ],
    "creation_ts": "2007-07-09T02:39:05Z",
    "fixes": [
      42840
    ]
  },
  {
    "id": 65303,
    "summary": "SEVERE http2 NPE",
    "description": "13-May-2021 15:09:49.787 SEVERE org.apache.coyote.AbstractProtocol$ConnectionHandler.process Error reading request, ignored\n\tjava.lang.NullPointerException\n\t\tat org.apache.coyote.http2.Stream$StreamInputBuffer.access$600(Stream.java:993)\n\t\tat org.apache.coyote.http2.Stream.close(Stream.java:658)\n\t\tat org.apache.coyote.http2.Http2UpgradeHandler.upgradeDispatch(Http2UpgradeHandler.java:349)\n\t\tat org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:60)\n\t\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:59)\n\t\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:870)\n\t\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2065)\n\t\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\t\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\t\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\t\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)",
    "comments": [
      "An NPE looks to be possible if a StreamException occurs on an HTTP upgrade or a pushed stream.\n\nFixed in:\n- 10.0.x for 10.0.7 onwards\n- 9.0.x for 9.0.47 onwards\n- 8.5.x for 8.5.67 onwards"
    ],
    "creation_ts": "2021-05-13T13:20:06Z",
    "fixes": [
      65303
    ]
  },
  {
    "id": 43840,
    "summary": "Unexpected behaviour when GenericPrincipal is serialized using the SerializablePrincipal in a cluster.",
    "description": "The method 'getUserPrincipal()' in the GenericPrincipal class returns itself or\na provided Principal if possible. This is also the return value of the\nrequest.getUserPrincipal() method. This works fine in a non-clustered environment.\n\nHowever the behaviour of this method changes when the GenericPrincipal is\nserialized by the SerializablePrincipal class. In the initial node of a cluster\nthe request.getUserPrincipal() method behaves normally. However after the\nprincipal is serialized to another node it no longer contains the internal\nPrincipal object, so the same method call will now return a different object.\n\nI think a solution could be:\n\n1) If there exists an internal userPrincipal AND it is Serializable then\nserialize it along with the other properties of GenericPrincipal.\n\n2) Recreate it at the other end if it is available in the object stream.\n\nIn this manner users with custom Principal objects that implement\njava.io.Serializable will have predictable results from the\nrequest.getUserPrincipal method across nodes in a cluster.\n\nI'd appreciate your thoughts on this.\n\nThanks,\nAshley",
    "comments": [
      "I have committed a fix to svn and proposed the fix for inclusion in 6.0.x\n\nhttp://svn.apache.org/viewvc?rev=607596&view=rev\nhttp://svn.apache.org/viewvc?rev=607597&view=rev",
      "This has been fixed in svn and will be included in 6.0.16 onwards."
    ],
    "creation_ts": "2007-11-11T20:12:16Z",
    "fixes": [
      43840
    ]
  },
  {
    "id": 58999,
    "summary": "StringIndexOutOfBoundsException WebAppClassLoaderBase.filter()",
    "description": "This appears to be caused by the recent change listed in the changelog as:\n\n\"Fix class loader decision on the delegation for class loading and resource lookup and make it faster too. (rjung)\"\n\norg.apache.catalina.loader.WebAppClassLoaderBase.filter() is testing if name starts with \"javax\" or \"org\", and then tries to get the next character using name.charAt(). But if name is just \"javax\" or \"org\", then name.charAt() for the next character will throw StringIndexOutOfBoundsException.\n\nthe following jsp demonstrates the issue:\n\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>$Title$</title>\n</head>\n<body>\n<%\n    Class.forName(\"org\");\n%>\n</body>\n</html>\n\nWhich results in rather than the expected ClassNotFoundException, causes instead:\n\njava.lang.StringIndexOutOfBoundsException: String index out of range: 3\n\tjava.lang.String.charAt(String.java:658)\n\torg.apache.catalina.loader.WebappClassLoaderBase.filter(WebappClassLoaderBase.java:2780)\n\torg.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1253)\n\torg.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1142)\n\torg.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:125)\n\torg.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:62)\n\tjava.lang.Class.forName0(Native Method)\n\tjava.lang.Class.forName(Class.java:264)\n\torg.apache.jsp.index_jsp._jspService(index_jsp.java:116)\n\torg.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:729)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:438)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:396)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:340)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:729)\n\torg.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n\nWhile this example is contrived, it causes real world problems for Mozilla Rhino which is testing \"java\", \"javax\", \"org\", \"com\", \"edu\", \"net\", to make sure that they are indeed top-level packages and do not resolve to a class and can deal with the expected ClassNotFoundException but can't deal with the unexpected StringIndexOutOfBoundsException.",
    "comments": [
      "Created attachment 33549\npatch\n\nHi,\n\nI'm attaching here a patch proposal so that others can comment.\n\nI found one more problem:\n\nPackages \norg.apache.tomcat.jdbc \njavax.servlet.jsp.jstl \n\nshould be permitted, but the current implementation allows only sub packages for these packages.\n\nRegards,\nVioleta",
      "Looked over the patch and I think the changes for org.apache.tomcat.jdbc \njavax.servlet.jsp.jstl will now incorrectly detect things like org.apache.tomcat.jdbcx and javax.servlet.jsp.jstly - Not very likely to happen in the wild I know, but I wouldn't have thought org and javax would have been very likely either.",
      "(In reply to Shon Vella from comment #2)\n> Looked over the patch and I think the changes for org.apache.tomcat.jdbc \n> javax.servlet.jsp.jstl will now incorrectly detect things like\n> org.apache.tomcat.jdbcx and javax.servlet.jsp.jstly - Not very likely to\n> happen in the wild I know, but I wouldn't have thought org and javax would\n> have been very likely either.\n\nIf you read again the code you will see that the check for these packages (org.apache.tomcat.jdbc, javax.servlet.jsp.jstl) is introduced in order to permit them not to deny them.\nSo if there are packages in the client code that are like those that you described above then they will be permitted.\n\nRegards,\nVioleta",
      "Thanks to the OP for analysing the problem and to Violeta for the patch.\n\nPlease have a look at r1730101, which fixes the StringIndexOutOfBoundsException.\n\nThe onyl problem I saw was the charAt(), because indeed the index could have been to big. For the startsWith(), this can not happen, because the given index is always equals to the known minimal length of the string (one more than the last index of the string). Javadoc tells us this is allowed, even an index bigger than the string length is allowed here: \"The result is false if toffset is negative or greater than the length of this String object\".\n\nConcerning the filtering, when the name parameter is exactly equals to one of the denied package names (package names to filter), IMHO it is OK to permit them unless they are followed by a sub package, class or resource name. I see no harm in permitting the package names without anything after them.\n\nIf you agree, I'll backport.",
      "(In reply to Rainer Jung from comment #4)\n> Thanks to the OP for analysing the problem and to Violeta for the patch.\n> \n> Please have a look at r1730101, which fixes the\n> StringIndexOutOfBoundsException.\n> \n> The onyl problem I saw was the charAt(), because indeed the index could have\n> been to big. For the startsWith(), this can not happen, because the given\n> index is always equals to the known minimal length of the string (one more\n> than the last index of the string). Javadoc tells us this is allowed, even\n> an index bigger than the string length is allowed here: \"The result is false\n> if toffset is negative or greater than the length of this String object\".\n> \n> Concerning the filtering, when the name parameter is exactly equals to one\n> of the denied package names (package names to filter), IMHO it is OK to\n> permit them unless they are followed by a sub package, class or resource\n> name. I see no harm in permitting the package names without anything after\n> them.\n> \n> If you agree, I'll backport.\n\nThanks,\nVioleta",
      "Backported to TC 8 in r1730178.",
      "The fix will be part of the next releases 9.0.0.M4 and 8.0.33.",
      "I got the same exception if I use a script engine in a servlet. I created a test case and attached it to the ticket. If you would like to check if this corner case is also fixed run \"mvn clean verify\" in the folder contained in the attached zip.",
      "Created attachment 33559\nTest case to reproduce the bug when using a script engine in a servlet",
      "Your test case shows the same problem, trying to load a class named \"org\". I added logging to the filter method to track what calls it gets.\n\nI replaced the catalina.jar from 8.0.32 with one from the current tc8.0.x HEAD, and the test case then succeeds. So the fix we have already applied for the next release also fixes your test.\n\nYou can apply the following patch/fix on top of TC 8.0.32 if you like.\n\nRegards,\n\nRainer",
      "Oups, the following:\n\nhttp://svn.apache.org/viewvc/tomcat/tc8.0.x/trunk/java/org/apache/catalina/loader/WebappClassLoaderBase.java?r1=1726672&r2=1730178&diff_format=h",
      "*** Bug 59013 has been marked as a duplicate of this bug. ***",
      "*** Bug 59110 has been marked as a duplicate of this bug. ***",
      "*** Bug 59282 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2016-02-11T21:05:03Z",
    "fixes": [
      58999
    ]
  },
  {
    "id": 43656,
    "summary": "ELSupport.coerceToType won't handle null for java.lang.Number",
    "description": "If ELSupport.coerceToType is called with an BigDecimal instance as the first Parameter 'obj' and \nBigDecimal.class as type it should return the inputted value.\n\nInstead the BigDecimal is converted into a double and back into a BigDecimal which leads to a diffenent \nvalue. This happens in Line 228:\n\n        if (BigInteger.class.equals(type)) {\n            if (number instanceof BigDecimal) {\n                return ((BigDecimal) number).toBigInteger();\n            }\n            return BigInteger.valueOf(number.longValue()); // This leads to a different value.\n        }\n\nExample: Run the Method with new BigDecimal(\"0.19\"), BigDecimal.class as parameters.\nThis should result in a BigDecimal with value 0.19. Instead i got \n0.190000000000000002220446049250313080847263336181640625.\n\n The easiest solution is to compare the class of the object to coerce with the target class and return the \ninputted value if the are equal in ELSupport.coerceToType Method:\n\npublic final static Object coerceToType(final Object obj, final Class type) throws \nIllegalArgumentException {\n\t\tif (type == null || Object.class.equals(type) || type.equals(obj.getClass())) {\n\t\t\treturn obj;\n\t\t}\n...",
    "comments": [
      "This has been fixed in trunk and proposed for 6.0.x.",
      "Well, the patch (as proposed in rev. 649639) fixes ELSupport.coerceToType(Object, Class), but the bug itself is in ELSupport.coerceToNumber(Number, Class).\n\nThere do exist other ways how coerceToNumber() is called from public methods of ELSupport.\n\nFor example, ELSupport.compare(Object, Object) calls it. I suppose, that those methods may suffer until coerceToNumber() itself is fixed.\n\nThe fix is OK for coerceToType() though.",
      "Created attachment 21831\nTestcase against ELSupport.coerceToNumber\n\nIt is a test case against ELSupport.coerceToNumber().\n\nThe tests with BigDecimal and BigInteger classes are failing.",
      "Thanks for the test case. I have added the unit test and the necessary fixes to trunk. They have also been proposed for 6.0.x",
      "This has now been committed to 6.0.x and will be in 6.0.17 onwards.",
      "I think that this fix may have introduced a regression error, since after upgrading from 6.0.16 to 6.0.18 I am getting this error:\n\nCannot convert 4,390,241 of type class java.lang.Integer to class java.lang.Number\n\njava.lang.IllegalArgumentException\n\norg.apache.el.lang.ELSupport.coerceToNumber(ELSupport.java:252)\norg.apache.el.lang.ELSupport.coerceToNumber(ELSupport.java:265)\norg.apache.el.lang.ELSupport.coerceToType(ELSupport.java:353)\norg.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:188)\norg.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:925)\norg.deltava.jsp.main.home_jsp._jspx_meth_fmt_005fint_005f0(home_jsp.java)",
      "Created attachment 22354\nTestcase and fix for the Integer to Number issue\n\nThis fix returns the input-value if it is assignable to the given type.",
      "Created attachment 22355\nRemoved unnecessary Object-creation in coerceToNumber()\n\nThe method protected final static Number coerceToNumber(final Number number, final Class type) created new BigInteger or BigDecimal Objects if the input-value was of the given type. As far as BigInteger and BigDecimal are immutable we can return the input value.\n\nAnother possible risk is the number.doubleValue() in the BigDecimal if clause. This behaves different to the coerceToType Method and was replaced with number.toString().",
      "Thanks for the patch.\n\nI have committed it to trunk and proposed it for 6.0.x",
      "*** Bug 45953 has been marked as a duplicate of this bug. ***",
      "(In reply to comment #8)\n> Another possible risk is the number.doubleValue() in the BigDecimal if clause.\n> This behaves different to the coerceToType Method and was replaced with\n> number.toString().\n\nThis breaks the spec. I have reverted this part of the patch.",
      "public final static Object coerceToType(final Object obj, final Class type)\n            throws IllegalArgumentException {\n        if (type == null || Object.class.equals(type) ||\n                (obj != null && type.isAssignableFrom(obj.getClass()))) {\n            return obj;\n        }\n\n        ....\n\n    }\n\nbehaves in the same way and returns the object if the Type matches.",
      "I only reverted the change to number.doubleValue()",
      "Thanks for the fix. It has been applied to 6.0.x and will be included in 6.0.19 onwards.",
      "*** Bug 46325 has been marked as a duplicate of this bug. ***",
      "This does not appear to be fixed, but I'm not sure if the problem rests with the code here or JSPC. I get the following error when executing a JSP:\n\nCannot convert 0 of type class java.lang.Long to class java.lang.Number\n\njava.lang.IllegalArgumentException\n\norg.apache.el.lang.ELSupport.coerceToNumber(ELSupport.java:250)\norg.apache.el.lang.ELSupport.coerceToNumber(ELSupport.java:257)\norg.apache.el.lang.ELSupport.coerceToType(ELSupport.java:351)\norg.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:188)\norg.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:935)\norg.deltava.jsp.admin.diagnostics_jsp._jspx_meth_fmt_005fint_005f8(diagnostics_jsp.java)\norg.deltava.jsp.admin.diagnostics_jsp._jspx_meth_el_005ftable_005f0(diagnostics_jsp.java)\n\n\nLooking at the the method call, I see this in the JSP source:\n\n_jspx_th_fmt_005fint_005f8.setValue((java.lang.Number) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(\"${mapsAPIUsage}\", java.lang.Number.class, (PageContext)_jspx_page_context, null, false));\n\nThe ELSupport.coerceToNumber(Number, Class) method appears to fail if the Class specified is java.lang.Number; there's no way it can execute without throwing an exception.",
      "Can you attach the simplest JSP that exhibits this error?",
      "Mark as needing info",
      "I don't think I can do this with just a JSP.\n\nMy best guess is that it gets triggered when JSP includes a tag that has a parameter which is defined in the TLD as being of type java.lang.Number; then when JSPC compiles the page it takes the type defined in the TLD and passes it to coerceToNumber.\n\nCan I send you a JSP, TLD and a JAR with the tag?",
      "It is easier if we have access to the source. Can you provide source files for the simplest possible jsp, tld and tag combination that demonstrates the issue?",
      "Created attachment 24144\nTLD for tag\n\nThis is the TLD for the JSP where we pass in Number.class to coerceToNumber.",
      "Created attachment 24145\nJSP and Tag source\n\nThis is the JSP and Tag sources for the JSP where we pass in Number.class to coerceToNumber.",
      "This is a simple JSP I have created that should exhibit the behavior, along with a stripped-down TLD and tag sources.\n\nThe key I believe is to look at the compiled JSP's source and see what is getting passed in the setValue() method call.",
      "The test case isn't clean (it references a class that doe snot exist) but once I clean it up this works for me with 6.0.20, 6.0.x and trunk.\n\nIf you still see this issue with the 6.0.x or later, please provide a working test case that demonstrates the issue.",
      "Could you send me the compiled JSP source code?",
      "Created attachment 24692\nzip containing JSP, TLD and java file\n\nI came across this bug today - at least it looks a lot like it. \n\nIf I try to pass in a null to the function, it falls over giving me the following:\n\njava.lang.IllegalArgumentException: Cannot convert 0 of type class java.lang.Long to class java.lang.Number\n\torg.apache.el.lang.ELSupport.coerceToNumber(ELSupport.java:250)\n\nWhich is at best misleading and at worst, just the wrong way to handle nulls. Hopefully this is reproducible everywhere.",
      "The attached zip causes the stack trace in 6.0.20",
      "Thanks for the test case. This has been fixed in trunk and proposed for 6.0.x",
      "Fixed in 6.0.x and will be included in 6.0.21 onwards."
    ],
    "creation_ts": "2007-10-18T18:02:47Z",
    "fixes": [
      43656
    ]
  },
  {
    "id": 42803,
    "summary": "AbstractReplicatedMap.size() is not thread safe.",
    "description": "NullPointerException is thrown when the session is created. \nThe following are the error messages. \n\n** localhost.xxxx-xx-xx.log **\njava.lang.NullPointerException\n        at org.apache.catalina.tribes.tipis.AbstractReplicatedMap.size\n(AbstractReplicatedMap.java:989)\n        at org.apache.catalina.session.ManagerBase.add(ManagerBase.java:741)\n        at org.apache.catalina.session.StandardSession.setId\n(StandardSession.java:368)\n        at org.apache.catalina.ha.session.DeltaSession.setId\n(DeltaSession.java:243)\n        at org.apache.catalina.session.ManagerBase.createSession\n(ManagerBase.java:829)\n        at org.apache.catalina.session.StandardManager.createSession\n(StandardManager.java:291)\n        at org.apache.catalina.connector.Request.doGetSession\n(Request.java:2312)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2075)\n        at org.apache.catalina.connector.RequestFacade.getSession\n(RequestFacade.java:833)\n        at org.apache.catalina.connector.RequestFacade.getSession\n(RequestFacade.java:844)\n        .........\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:290)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:206)\n        at org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:230)\n        at org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:175)\n        at org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java:128)\n        at org.apache.catalina.ha.tcp.ReplicationValve.invoke\n(ReplicationValve.java:347)\n        at org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java:104)\n        at org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:109)\n        at org.apache.catalina.connector.CoyoteAdapter.service\n(CoyoteAdapter.java:261)\n        at org.apache.jk.server.JkCoyoteHandler.invoke\n(JkCoyoteHandler.java:190)\n        at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:283)\n        at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:767)\n        at org.apache.jk.common.ChannelSocket.processConnection\n(ChannelSocket.java:697)\n        at org.apache.jk.common.ChannelSocket$SocketConnection.runIt\n(ChannelSocket.java:889)\n        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:686)\n        at java.lang.Thread.run(Thread.java:595)\n\n\n[Environment]\n  use BackupManager in Tomcat6.0.13.\n  <Manager className=\"org.apache.catalina.ha.session.BackupManager\" ... />\n\nI think org.apache.catalina.tribes.tipis.AbstractReplicatedMap.size() is not \nthread safe.\nAfter creating the session. (ManagerBase.java:829))\nTo update maxActive, the size of the session map is gotten.\nAnd org.apache.catalina.tribes.tipis.AbstractReplicatedMap.size() is as \nfollows. \n\n  public int size() {\n      //todo, implement a counter variable instead\n      //only count active members in this node\n      int counter = 0;\n      Iterator it = super.entrySet().iterator();\n      while (it.hasNext() ) {\n          Map.Entry e = (Map.Entry) it.next();\n          if ( e != null ) {\n              MapEntry entry = (MapEntry) super.get(e.getKey());\n              if (entry.isPrimary() && entry.getValue() != null) counter++; \n          }\n      }\n      return counter;\n  }\n\n\nWhile a certain Thread executes AbstractReplicatedMap.size()  \nanother Thread executes AbstractReplicatedMap.remove() by session.invalidate() \nand the session time-out. \n\nWhen the session is removed from the sessions by another thread after Iterator \nis gotten (line:984) \nentry(Session) acquired as follows might become Null. \n  \n  MapEntry entry = (MapEntry) super.get(e.getKey());\n\nTherefore, NullPointerException is thrown in the next line(line:989). \n\nIf Servlet that does only request.getSession() and session.invalidate() is \nexecuted by a high load,\nNullPointerExceprtion is immediately thrown. \n\n    public void doGet(HttpServletRequest request,\n        HttpServletResponse response) throws ServletException, IOException {\n        HttpSession session = request.getSession();\n        session.invalidate();\n    }",
    "comments": [
      "Thanks for the report, I have mitigated the NPE, I do intend to change that\nalgorithm a bit in the future to be smarter than it is right now."
    ],
    "creation_ts": "2007-07-03T03:05:26Z",
    "fixes": [
      42803
    ]
  },
  {
    "id": 69527,
    "summary": "Resource missing caused by mishandling of the cachedContentLength value in tomcat cache",
    "description": "",
    "comments": [
      "A rare race condition occurs during cache operations as follows:\nThread 1:\n1. Fetches a new resource and inserts it into the map.\n2. Begins initialisation (contentLength, nextCheck, and webResource) but hasn\u2019t completed.\n3. During this phase: contentLength and webResource are still null and nextCheck defaults to 0.\n\nThread 2:\n1. Fetches a new resource and inserts it into the map.\n2. Begins initialisation (contentLength, nextCheck, and webResource) and completed.\n3. Triggers eviction due to cache size exceeding the limit.\n4. Removes the cache entry, using resource.getNextCheck(), inserted by Thread 1 before its initialisation completes, because nextCheck is not yet initialised by thread 1.\n5. During eviction, the contentLength is checked using the following logic (since content length is not yet initialised by thread 1, it is going to initialise now)\n\ncode:\nif (cachedContentLength == null) {\n            synchronized (cachedContentLengthLock) {\n                if (cachedContentLength == null) {\n                    if (webResource == null) {\n                        cachedContentLength = Long.valueOf(0);\n                    } else {\n                        cachedContentLength = Long.valueOf(webResource.getContentLength());\n                    }\n                }\n            }\n        }\n        return cachedContentLength.longValue();\n\n\n\n\n6. Since webResource is uninitialised, contentLength for the thread 1 resource is set to 0.\n7. When Thread 1 resumes, the contentLength remains 0, preventing the file content from being written to the output stream.\n\n\nReference: Cache.java, CachedResource.java, DefaultServlet.java",
      "This reads like an AI generated report ...",
      "(In reply to Remy Maucherat from comment #2)\n> This reads like an AI generated report ...\n\nAfter migrating from Tomcat version 9.0.96 to 9.0.97 to address the CVE-2024-50379 vulnerability, we observed intermittent missing file content on the client side, despite the files being present on disk. This issue was traced to a race condition introduced by changes made for an incorrect cache calculation fix (Commit Id: 636017459a88befe1c5f1fd9d8f31ff2f13f74f6). Concurrent access to the cache during initialization and eviction led to uninitialized resources being incorrectly handled, resulting in content delivery failures.",
      "To reproduce the issue, configure the system to cache files exceeding 10MB. In our case, we used approximately 100MB of static files. While fetching JavaScript files required for the Web UI, we observed that multiple files either had missing content or their contentLength was set to 0.\n\nTo pinpoint the root cause, we introduced extensive logging in the cache.java and cachedResource.java code. The investigation revealed a race condition where Thread 2 evicted the resource added by Thread 1 before Thread 1 had completed its initialization. This premature removal caused cachedContentLength to be incorrectly calculated, leading to the resource being treated as empty and not delivered to the client.\n\nFurther analysis showed that this race condition was inadvertently introduced in commit 636017459a88befe1c5f1fd9d8f31ff2f13f74f6. This commit was intended to address an issue with incorrect cache size calculations for concurrent PUT/DELETE operations, but it introduced a new edge case that resulted in this behavior.\n\nThis issue surfaced after we migrated from Tomcat version 9.0.96 to 9.0.97 as part of a security fix for CVE-2024-50379.",
      "(In reply to Remy Maucherat from comment #2)\n> This reads like an AI generated report ...\n\nHi Remy, the above content that you are mentioned as AI generated report was added as part of explaining how the issue actually occured. Thanks.",
      "(In reply to Vigneshwaran N from comment #4)\n> Further analysis showed that this race condition was inadvertently\n> introduced in commit 636017459a88befe1c5f1fd9d8f31ff2f13f74f6. This commit\n> was intended to address an issue with incorrect cache size calculations for\n> concurrent PUT/DELETE operations, but it introduced a new edge case that\n> resulted in this behavior.\n> \n> This issue surfaced after we migrated from Tomcat version 9.0.96 to 9.0.97\n> as part of a security fix for CVE-2024-50379.\n\nThat makes sense, thanks.",
      "(In reply to Vigneshwaran N from comment #5)\n> (In reply to Remy Maucherat from comment #2)\n> > This reads like an AI generated report ...\n> \n> Hi Remy, the above content that you are mentioned as AI generated report was\n> added as part of explaining how the issue actually occured. Thanks.\n\nOk, although the AI claim was bad, after having a real look at it I still don't understand.\n\nUse of putIfAbsent in getResource should make sure your \"Thread 2\" uses the same instance as \"Thread 1\". Then CachedResource.webResource cannot be null unless Cache.getResources was called. And even if the two threads are not using the same instance, evict will not reset webResource back to null or anything so that is clearly not normal.\n\nHowever:\n- 636017459a88befe1c5f1fd9d8f31ff2f13f74f6 looks very fishy since nothing else is synced. Assuming I leave the sync, and since webResource being null is basically an odd special case, I would think cachedContentLength should not be set to 0 in that case (should simply return 0 instead, and I don't understand why it would need to be done in the sync block),\n- nextCheck being initialized to 0 is also meh. Should probably use the value set in validateResource(s) instead. I understand that System.currentTimeMillis() is rather expensive though.",
      "Created attachment 39966\nProposed patch",
      "(In reply to Remy Maucherat from comment #7)\n\n> Use of putIfAbsent in getResource should make sure your \"Thread 2\" uses the\n> same instance as \"Thread 1\". Then CachedResource.webResource cannot be null\n> unless Cache.getResources was called. And even if the two threads are not\n> using the same instance, evict will not reset webResource back to null or\n> anything so that is clearly not normal.\n\nThe issue here is webResource is not yet initialized. The initialization of the webResource is done only when validate() for thread 1 is invoked, but before that thread 2 tried to delete. So, cachedContentLength() is called, webResouce is null in that case and stored value as 0 in cachedContentLength. \nThat said, the issue described will be completely avoided with the changes proposed in the patch you mentioned.\n\n\n> However:\n> - 636017459a88befe1c5f1fd9d8f31ff2f13f74f6 looks very fishy since nothing\n> else is synced. Assuming I leave the sync, and since webResource being null\n> is basically an odd special case, I would think cachedContentLength should\n> not be set to 0 in that case (should simply return 0 instead, and I don't\n> understand why it would need to be done in the sync block),\n> - nextCheck being initialized to 0 is also meh. Should probably use the\n> value set in validateResource(s) instead. I understand that\n> System.currentTimeMillis() is rather expensive though.\n\nYes, what you\u2019ve mentioned aligns with my understanding as well.",
      "(In reply to Remy Maucherat from comment #8)\n> Created attachment 39966 [details]\n> Proposed patch\n\nThanks. That would help to resolve the issue.",
      "Ok, so given the feedback I am going to assume that this will be fixed in 11.0.3, 10.1.35 and 9.0.99.",
      "(In reply to Remy Maucherat from comment #7)\n\n> However:\n> - 636017459a88befe1c5f1fd9d8f31ff2f13f74f6 looks very fishy since nothing\n> else is synced.\n\nThat is a fair concern so I have gone back and recreated the issue that change was meant to fix.\n\nI see the same issue with this report as R\u00e9my explained in comment #7. It is hard to evaluate the fix when the issue is not fully understood. I'd very much like to see some call stacks to go along with the explanation.",
      "Re-opening this issue as my testing shows that this fix breaks the previous fix for cache size corruption.\n\nThe issue is that the same size (even if it is wrong) needs to be used when adding and removing the cache entry from the cache. I can now recreate the issue in a debugger as well as a second, less obvious issue that causes the cache size to (very) slower reduce over time.\n\nThe original fix may not be 100% effective. I am currently looking at that.\n\nTo address the issue reported for this bug report we are going to need a lot more detail on exactly how the race condition occurs. The information provided so far does not appear to be complete/correct (see R\u00e9my's analysis in comment #7). We need enough information to be able to recreate the bug - ideally when stepping through the code with a debugger.",
      "The full description of the original concurrency issue:\n\nThere is a race condition if concurrent threads are trying to PUT and DELETE the same resource. The following sequence is problematic:\n\n- Target resource exists on the file system but is not currently cached.\n- Processing starts with the PUT thread. The existing resource is added to the cache (entry-1) and the cache size is increased by the resource size.\n- Just before the existing cache entry is removed in StandardRoot#write(), processing switches to the DELETE thread.\n- The DELETE thread retrieves entry-1 from the cache and invalidates it because the cached last modified date does not match the file on the file system because the PUT thread replaced it.\n- entry-1 is removed from the cache. That reduces the cache size by the resource size.\n\nSo far, so good. The cache size is consistent.\n\n- The DELETE thread then creates a new cache entry (entry-2).\n- Processing switches back to the PUT thread before entry-2 is validated in Cache#getResource().\n- The PUT thread entry-2 from the cache.\n- The cache size is reduced by zero because webResource for the entry-2 is null because it has not been validated.\n- The DELETE thread then continues and validates the resource (the file has not yet been deleted). That sets the size of entry-2 to the resource size and increases the size of the resource cache by the resource size.\n\nAt this point entry-2 has been added and removed from the cache but inconsistent sizes have been used. This corrupts the cache size value.\n\nThe original fix first ensured that whatever value was first used for the content length was cached so add/remove was consistent. Further testing showed a lock was required in case there were multiple threads calling getContentLength() at the same time. Hence how I arrived at the original fix.\n\nThere may still be a narrow timing issue as the original fix used cachedContentLengthLock in getContentLength() and synchronized (this) in validateResource(). Those locks should almost certainly be the same to ensure consistency.\n\nNext step is to confirm that using a single lock addresses the original concurrency issue.\n\nNote: While the original concurrency issue is now well understood, the issue reported here is not. More information is needed to determine the root cause of the issue reported here so it can be addressed.",
      "I think the problem described in comment #1 could occur if thread 2 started from a call to backgroundProcess() rather than getResource(). Might that be what is happening? If it is, the single lock solution I am working on should address this problem too.",
      "I've applied the single lock solution which should address this issue but I am leaving it open for now to confirm the involvement (or not) of backgroundProcess()",
      "*** Bug 69539 has been marked as a duplicate of this bug. ***",
      "No response to the background thread question. I am going to assume that this issue is now resolved.",
      "*** Bug 69567 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2025-01-07T12:40:34Z",
    "fixes": [
      69527
    ]
  },
  {
    "id": 69316,
    "summary": "FastHttpDateFormat#getCurrentDate(): returns inaccurate date string.",
    "description": "Created attachment 39864\nTestcase\n\nFastHttpDateFormat#getCurrentDate() returns same string for two different second datetime.\nFor following date:\n1st:1726041009036, Wed, 11 Sep 2024 07:50:09 GMT\n2nd:1726041009940, Wed, 11 Sep 2024 07:50:09 GMT\n\n1st:1726041011501, Wed, 11 Sep 2024 07:50:11 GMT\n2nd:1726041012101, Wed, 11 Sep 2024 07:50:11 GMT\n\nDue to incorrect result, client may receive different current date strings from different tomcat nodes in same time.",
    "comments": [
      "github PR #751 submitted.",
      "Fixed in:\n- 11.0.x for 11.0.0 onwards\n- 10.1.x for 10.1.31 onwards\n-  9.0.x for  9.0.96 onwards\n\nThanks for the PR."
    ],
    "creation_ts": "2024-09-11T08:02:24Z",
    "fixes": [
      69316
    ]
  },
  {
    "id": 42648,
    "summary": "SWAP increases by the cluster of Tomca6",
    "description": "SWAP increases by the cluster of Tomca6 and operation becomes unstable. \n\nEnvironment\n Tomcat6.0.13\n JDK1.5.11\n memory : 2G\n Heap size : - Xmx1500m -Xms1500m\n\nSWAP increases only for direct=\"true\". \nIt occurs when operating for a long time by a high load. \n\n   <Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n        ... \n        direct=\"true\" />\n\nSWAP doesn't increase when setting it to direct =\"false\". \n\n   <Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n        ... \n        direct=\"false\" />\n        \nI noticed the following. \nIn org.apache.catalina.tribes.transport.nio.NioReplicationTask,buffer is made \nper run method.\n\n    public synchronized void run() { \n        if ( (getOptions() & OPTION_DIRECT_BUFFER) == OPTION_DIRECT_BUFFER ) {\n            buffer = ByteBuffer.allocateDirect(getRxBufSize());\n        }else {\n            buffer = ByteBuffer.allocate (getRxBufSize());\n        }\n\n        if (key == null) {\n            return;\t// just in case\n        }\n        ....\n\nThe buffer is enough if made once. \n\nFor instance,\nThe creating of buffer by the run method is stopped. \n\n    public synchronized void run() { \n//    \tif ( (getOptions() & OPTION_DIRECT_BUFFER) == OPTION_DIRECT_BUFFER ) {\n//            buffer = ByteBuffer.allocateDirect(getRxBufSize());\n//        }else {\n//            buffer = ByteBuffer.allocate (getRxBufSize());\n//        }\n    ....\n    \nCreating of buffer by the setRxBufSize method.\n\n    public void setRxBufSize(int rxBufSize) {\n        this.rxBufSize = rxBufSize;\n        if ( (getOptions() & OPTION_DIRECT_BUFFER) == OPTION_DIRECT_BUFFER ) {\n            buffer = ByteBuffer.allocateDirect(getRxBufSize());\n        }else {\n            buffer = ByteBuffer.allocate (getRxBufSize());\n        }\n    }\n    \nResult.\nSWAP doesn't increase.",
    "comments": [
      "Created attachment 20336\nabnormal cases\n\nabnormal cases.",
      "Created attachment 20337\nnormal cases\n\nnormal cases.",
      "Basically, using allocateDirect, uses memory outside of your -Xmx and -Xms,\nsince your Java heap(-Xmx) is so high, you have not left enough room for the\ndirect memory. This is part of the Java memory model.\nHowever, you have discovered an optimization, that we don't need to create a new\nbuffer and wait for GC to clean out the old one.\n\nSo thanks for the notification, and remember that allocateDirect is memory\noutside of -Xmx memory space.\n\nFilip"
    ],
    "creation_ts": "2007-06-13T02:02:28Z",
    "fixes": [
      42648
    ]
  },
  {
    "id": 69133,
    "summary": "Add property for max queue size to AbstractProtocol",
    "description": "Hello,\n\nwhat do you think about adding a setter for the max queue size on AbstractProtocol? It already has setters for max threads, min spare threads etc which are then set on the AbstractEndpoint, so I think having a setter for the queue size would be good for consistency.\n\nWe already tried to use a custom executor to configure the queue size, however that has created regressions in Spring Boot: https://github.com/spring-projects/spring-boot/issues/40957 and https://github.com/spring-projects/spring-boot/issues/40945.\n\nThanks!",
    "comments": [
      "This is good for consistency. It will be in 11.0.0-M21, 10.1.25 and 9.0.90.",
      "That was fast. Thanks a lot!"
    ],
    "creation_ts": "2024-06-12T08:13:33Z",
    "fixes": [
      69133
    ]
  },
  {
    "id": 64011,
    "summary": "JNDIRealm no longer authenticates to LDAP",
    "description": "This works in 8.5.49 and stops working in 8.5.50\n\njaas.conf:\n\nORDS {\n   com.sun.security.auth.module.Krb5LoginModule required\n    doNotPrompt=true\n    principal=\"HTTP/computer@REALM.COM\"\n    useKeyTab=true\n    keyTab=\"krb5.keytab\"\n    storeKey=true;\n};\n\nords.xml:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Context>\n  <Valve className=\"org.apache.catalina.authenticator.SpnegoAuthenticator\"\n      loginConfigName=\"ORDS\"\n  />\n <Realm className=\"org.apache.catalina.realm.JNDIRealm\"\n   connectionURL=\"ldap://ldap1:3268\"\n   alternateURL=\"ldap://ldap2:3268\"\n   userSearch=\"(sAMAccountName={0})\"\n   userBase=\"DC=realm,DC=com\"\n   userSubtree=\"true\"\n   roleSearch=\"(member={0})\"\n   roleBase=\"DC=realm,DC=com\"\n   roleName=\"CN\"\n   roleSubtree=\"true\"\n   allRolesMode=\"authOnly\"\n   spnegoDelegationQop=\"auth\"\n   stripRealmForGss=\"true\"\n   authentication=\"none\"\n   referrals=\"ignore\"\n   useDelegatedCredential=\"true\"\n />\n</Context>\n\nThis now gives the following error:\n\n17-Dec-2019 13:16:30.754 SEVERE [https-jsse-nio-10843-exec-3] org.apache.catalina.realm.JNDIRealm.getPrincipal Exception performing authentication\n        javax.naming.NamingException: [LDAP: error code 1 - 000004DC: LdapErr: DSID-0C090A4C, comment: In order to perform this operation a successful bind must be completed on the connection., data 0, v3839 ]; remaining name 'DC=realm,DC=com'\n                at com.sun.jndi.ldap.LdapCtx.mapErrorCode(LdapCtx.java:3194)\n                at com.sun.jndi.ldap.LdapCtx.processReturnCode(LdapCtx.java:3100)\n                at com.sun.jndi.ldap.LdapCtx.processReturnCode(LdapCtx.java:2891)\n                at com.sun.jndi.ldap.LdapCtx.searchAux(LdapCtx.java:1846)\n                at com.sun.jndi.ldap.LdapCtx.c_search(LdapCtx.java:1769)\n                at com.sun.jndi.toolkit.ctx.ComponentDirContext.p_search(ComponentDirContext.java:392)\n                at com.sun.jndi.toolkit.ctx.PartialCompositeDirContext.search(PartialCompositeDirContext.java:358)\n                at com.sun.jndi.toolkit.ctx.PartialCompositeDirContext.search(PartialCompositeDirContext.java:341)\n                at javax.naming.directory.InitialDirContext.search(InitialDirContext.java:267)\n                at org.apache.catalina.realm.JNDIRealm.getUserBySearch(JNDIRealm.java:1693)\n                at org.apache.catalina.realm.JNDIRealm.getUser(JNDIRealm.java:1528)\n                at org.apache.catalina.realm.JNDIRealm.getUser(JNDIRealm.java:1456)\n                at org.apache.catalina.realm.JNDIRealm.getPrincipal(JNDIRealm.java:2354)\n                at org.apache.catalina.realm.JNDIRealm.getPrincipal(JNDIRealm.java:2280)\n                at org.apache.catalina.realm.JNDIRealm.getPrincipal(JNDIRealm.java:2260)\n                at org.apache.catalina.realm.RealmBase.getPrincipal(RealmBase.java:1283)\n                at org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:501)\n                at org.apache.catalina.authenticator.SpnegoAuthenticator$AuthenticateAction.run(SpnegoAuthenticator.java:344)\n                at org.apache.catalina.authenticator.SpnegoAuthenticator$AuthenticateAction.run(SpnegoAuthenticator.java:329)\n                at java.security.AccessController.doPrivileged(Native Method)\n                at javax.security.auth.Subject.doAs(Subject.java:360)\n                at org.apache.catalina.authenticator.SpnegoAuthenticator.doAuthenticate(SpnegoAuthenticator.java:243)\n                at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:633)\n                at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\n                at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)\n                at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:678)\n                at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)\n                at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n                at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:609)\n                at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n                at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:810)\n                at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1623)\n                at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n                at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n                at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                at java.lang.Thread.run(Thread.java:748)",
    "comments": [
      "The error is pretty obvious, the credentials aren't delegated but you have set useDelegatedCredential=\"true\". Moreover, spnegoDelegationQop=\"auth\" is invalid. According to the RFC 4752 it must be either auth-int or auth-conf. Can you enable debug logging? I want to see it from here: https://github.com/apache/tomcat/blob/8.5.x/java/org/apache/catalina/realm/RealmBase.java#L474-L509",
      "I got the info from here:\n\nhttps://tomcat.apache.org/tomcat-8.5-doc/config/realm.html\n\nspnegoDelegationQop This attribute should be a comma-separated list of values selected from auth-conf, auth-int and auth\n\nRemoving useDelegatedCredential=\"true\" also doesn't work with 8.5.50 but does with 8.5.49\n\nWhich debug options should be switched on?",
      "(In reply to Mike Lothian from comment #2)\n> I got the info from here:\n> \n> https://tomcat.apache.org/tomcat-8.5-doc/config/realm.html\n> \n> spnegoDelegationQop This attribute should be a comma-separated list of\n> values selected from auth-conf, auth-int and auth\n\nThe Java SASL GSSAPI mech has a bug which makes this possible, otherwise it should fail: https://bugs.openjdk.java.net/browse/JDK-8160818\n\n> Removing useDelegatedCredential=\"true\" also doesn't work with 8.5.50 but\n> does with 8.5.49\n> \n> Which debug options should be switched on?\n\nYou need to enable FINEST for org.apache.catalina.realm and org.apache.catalina.authenticator.",
      "Created attachment 36940\nWorking logs",
      "Created attachment 36941\nBroken logs",
      "This was with:\n\norg.apache.catalina.realm.level = FINEST\norg.apache.catalina.authenticator.level = FINEST\n\nAdded to logging.properties",
      "There are no changes in JNDIRealm in 8.5.50, so given the stack and error message a Tomcat issue is not the most likely explanation at the moment.\nYou should continue investigating without assuming it is a Tomcat issue, for example you have a meaningful error message with a key \"DSID-0C090A4C\" that you can google and the results could be relevant to you.",
      "Can you please also enable debug log on authenticators and also provide a tcpdump of the unsuccessful and successful dump. If you don't want to disclose the dump, plase send to my apache email address, if nesessary use my PGP public key to encrypt it.\n\nI would also like to see BER debug from LDAP provider with property com.sun.jndi.ldap.trace.ber bug this required a OutputStream to be set which is not possible via context.xml. I will be happy with the former mentioned for now.",
      "Hi\n\nI bisected between 8.5.49 and 8.5.50 and this was the first bad commit:\n\ncommit 12b857227b2671c9c871aa324cf5fc25c5d53c9a\nAuthor: Michael Osipov <michaelo@apache.org>\nDate:   Wed Aug 21 23:23:19 2019 +0200\n\n    BZ 63681: Introduce RealmBase#authenticate(GSSName, GSSCredential) and friends\n\nIt doesn't cleanly revert from 8.5.50\n\nWould you mind providing the logging.properties strings for the options you'd like me to enable - org.apache.catalina.authenticator.level = FINEST was on last time\n\nI don't have root access on this machine, but I'll see if I can get a tcpdump from either another machine or if I can get escalated privileges",
      "Created attachment 36942\nRevert\n\nThis was my attempt at reverting the problem commit and does get things working for me again",
      "(In reply to Mike Lothian from comment #9)\n> Hi\n> \n> I bisected between 8.5.49 and 8.5.50 and this was the first bad commit:\n> \n> commit 12b857227b2671c9c871aa324cf5fc25c5d53c9a\n> Author: Michael Osipov <michaelo@apache.org>\n> Date:   Wed Aug 21 23:23:19 2019 +0200\n> \n>     BZ 63681: Introduce RealmBase#authenticate(GSSName, GSSCredential) and\n> friends\n> \n> It doesn't cleanly revert from 8.5.50\n\nI already assumed that it could be one of my changes, but I do not yet understand why.\n \n> Would you mind providing the logging.properties strings for the options\n> you'd like me to enable - org.apache.catalina.authenticator.level = FINEST\n> was on last time\n> \n> I don't have root access on this machine, but I'll see if I can get a\n> tcpdump from either another machine or if I can get escalated privileges\n\nNo need for now. I am still trying to wrap my head around the failure. I will get back to you tomorrow after understanding the issue or if I still need more data.",
      "Looked into it. Something is fishy because the issue should have failed earlier. Will know more tomorrow.\n\nI have the slight feeling that the changed triggered an bug previously present in the code.",
      "I have found the bug. Apologies, this was an oversight although I have read the diff many times before merging into master.\n\nCan add a modified JAR to your installation to verify potential fix? I will provide one. Alternatively a patch if you want to compile yourself.",
      "If you could post the patch I'll test it tomorrow when I'm in the office, thanks",
      "Created attachment 36946\nPatch against tag 8.5.50\n\nI personally don't like the strip operation because it is flawed in several ways:\n\n* It modifies the username which should be at most at the discretion of a realm implemenation\n* It assumes to be email style w/o inspecting the OID\n* It is true by default\n\nYou might be better off with my specialized SPNEGO and Active Directory realm for Tomcat. It works with tens of domains and cross-forest suppor too.\n\nWaiting for your test results.",
      "That works :D\n\nDo you have more info on your SPNEGO realm? Does it allow fallback to another type too?",
      "(In reply to Mike Lothian from comment #16)\n> That works :D\n\nDid you already try? Can I go ahead and commit that?\n\n> Do you have more info on your SPNEGO realm? Does it allow fallback to\n> another type too?\n\nhttp://tomcatspnegoad.sourceforge.net/\n\nThe Tomcat SPNEGO realm is based on my donation years ago. My external project is more sophistictaed and better suited for AD than the JNDI realm.",
      "Yes, I tested it on the system I was using yesterday\n\nI'll take a look at your project, but I think we might be too far along with using JNDIRealm to change at this point. If the documentation is better though I'll make a case for it",
      "(In reply to Mike Lothian from comment #18)\n> Yes, I tested it on the system I was using yesterday\n> \n> I'll take a look at your project, but I think we might be too far along with\n> using JNDIRealm to change at this point. If the documentation is better\n> though I'll make a case for it\n\nSure, if you think the documentation is short, just let me know. I have been using this for almost 10 years on the largest commercial AD installation worldwide.",
      "Fixed in:\n- master for 9.0.31 onwards\n- 8.5.x for 8.5.51 onwards\n- 7.0.x for 7.0.100 onwards"
    ],
    "creation_ts": "2019-12-17T13:44:41Z",
    "fixes": [
      64011
    ]
  },
  {
    "id": 48822,
    "summary": "Include contest name in reload and stop log statements",
    "description": "Created attachment 25063\nThe patch adding context name in log statements\n\nCurrent log statement are like this\n  \"Exception starting Context\"\nwithout any information on the concerned context.\n\nInclude patch adds context name to the log output for en, fr, es... but not for the ja properties ;-)",
    "comments": [
      "fixed on trunk, will be available for tomcat 7.0.6.\nProposed for tc 6.\n\nNote that depending on the type of error during reload, the context name was already logged (by other log statements).\nThis issue only deals with cases where a LifeCycleException is raised.",
      "Fixed in 6.0.x with r1064257 and will be in 6.0.32."
    ],
    "creation_ts": "2010-02-26T10:35:09Z",
    "fixes": [
      48822
    ]
  },
  {
    "id": 64007,
    "summary": "a deadlock with Poller run and cancelledKey",
    "description": "when i press test my application with spring boot 2.1.9.RELEASE and tomcat 9.0.26 i meet a deadlock. It's maybe a bug with tomcat. when i use tomcat 8.5.49 instead the bug is not appear. The follow is the stack i dump from my application.\n\nFound one Java-level deadlock:\n=============================\n\"http-nio-8080-exec-455\":\n  waiting to lock monitor 0x00007f59c40475e8 (object 0x00000006c0b4fe28, a java.util.HashSet),\n  which is held by \"http-nio-8080-ClientPoller\"\n\"http-nio-8080-ClientPoller\":\n  waiting to lock monitor 0x00007f59680af4d8 (object 0x00000006de810f10, a java.lang.Object),\n  which is held by \"http-nio-8080-exec-215\"\n\"http-nio-8080-exec-215\":\n  waiting to lock monitor 0x00007f59c4057a98 (object 0x00000006c0b27028, a java.util.HashSet),\n  which is held by \"http-nio-8080-BlockPoller\"\n\"http-nio-8080-BlockPoller\":\n  waiting to lock monitor 0x00007f5998946158 (object 0x00000006de8588c0, a java.lang.Object),\n  which is held by \"http-nio-8080-exec-378\"\n\"http-nio-8080-exec-378\":\n  waiting to lock monitor 0x00007f59c40475e8 (object 0x00000006c0b4fe28, a java.util.HashSet),\n  which is held by \"http-nio-8080-ClientPoller\"\n\nJava stack information for the threads listed above:\n===================================================\n\"http-nio-8080-exec-455\":\n    at java.nio.channels.spi.AbstractSelector.cancel(AbstractSelector.java:91)\n    - waiting to lock <0x00000006c0b4fe28> (a java.util.HashSet)\n    at java.nio.channels.spi.AbstractSelectionKey.cancel(AbstractSelectionKey.java:73)\n    - locked <0x00000006de870a68> (a sun.nio.ch.SelectionKeyImpl)\n    at java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel(AbstractSelectableChannel.java:240)\n    - locked <0x00000006de870a90> (a java.lang.Object)\n    at java.nio.channels.spi.AbstractInterruptibleChannel.close(AbstractInterruptibleChannel.java:115)\n    - locked <0x00000006de870a28> (a java.lang.Object)\n    at org.apache.tomcat.util.net.NioChannel.close(NioChannel.java:104)\n    at org.apache.tomcat.util.net.NioChannel.close(NioChannel.java:116)\n    at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doClose(NioEndpoint.java:1179)\n    - locked <0x00000006c3ca9be8> (a org.apache.tomcat.util.net.NioChannel)\n    at org.apache.tomcat.util.net.SocketWrapperBase.close(SocketWrapperBase.java:394)\n    at org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(NioEndpoint.java:667)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1592)\n    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n    - locked <0x00000006de825cc0> (a org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    at java.lang.Thread.run(Thread.java:748)\n\"http-nio-8080-ClientPoller\":\n    at java.nio.channels.spi.AbstractSelectableChannel.removeKey(AbstractSelectableChannel.java:130)\n    - waiting to lock <0x00000006de810f10> (a java.lang.Object)\n    at java.nio.channels.spi.AbstractSelector.deregister(AbstractSelector.java:188)\n    at sun.nio.ch.EPollSelectorImpl.implDereg(EPollSelectorImpl.java:191)\n    at sun.nio.ch.SelectorImpl.processDeregisterQueue(SelectorImpl.java:149)\n    - locked <0x00000006c0b4fe28> (a java.util.HashSet)\n    at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:97)\n    at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86)\n    - locked <0x00000006c0b50068> (a sun.nio.ch.Util$3)\n    - locked <0x00000006c0b50058> (a java.util.Collections$UnmodifiableSet)\n    - locked <0x00000006c0b4fdd0> (a sun.nio.ch.EPollSelectorImpl)\n    at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97)\n    at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:708)\n    at java.lang.Thread.run(Thread.java:748)\n\"http-nio-8080-exec-215\":\n    at java.nio.channels.spi.AbstractSelector.cancel(AbstractSelector.java:91)\n    - waiting to lock <0x00000006c0b27028> (a java.util.HashSet)\n    at java.nio.channels.spi.AbstractSelectionKey.cancel(AbstractSelectionKey.java:73)\n    - locked <0x00000006de810c70> (a sun.nio.ch.SelectionKeyImpl)\n    at java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel(AbstractSelectableChannel.java:240)\n    - locked <0x00000006de810f10> (a java.lang.Object)\n    at java.nio.channels.spi.AbstractInterruptibleChannel.close(AbstractInterruptibleChannel.java:115)\n    - locked <0x00000006de810c30> (a java.lang.Object)\n    at org.apache.tomcat.util.net.NioChannel.close(NioChannel.java:104)\n    at org.apache.tomcat.util.net.NioChannel.close(NioChannel.java:116)\n    at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doClose(NioEndpoint.java:1179)\n    - locked <0x00000006c2d7b8a0> (a org.apache.tomcat.util.net.NioChannel)\n    at org.apache.tomcat.util.net.SocketWrapperBase.close(SocketWrapperBase.java:394)\n    at org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(NioEndpoint.java:667)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1592)\n    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n    - locked <0x00000006de810c98> (a org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    at java.lang.Thread.run(Thread.java:748)\n\"http-nio-8080-BlockPoller\":\n    at java.nio.channels.spi.AbstractSelectableChannel.removeKey(AbstractSelectableChannel.java:130)\n    - waiting to lock <0x00000006de8588c0> (a java.lang.Object)\n    at java.nio.channels.spi.AbstractSelector.deregister(AbstractSelector.java:188)\n    at sun.nio.ch.EPollSelectorImpl.implDereg(EPollSelectorImpl.java:191)\n    at sun.nio.ch.SelectorImpl.processDeregisterQueue(SelectorImpl.java:149)\n    - locked <0x00000006c0b27028> (a java.util.HashSet)\n    at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:90)\n    at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86)\n    - locked <0x00000006c0b27108> (a sun.nio.ch.Util$3)\n    - locked <0x00000006c0b270f8> (a java.util.Collections$UnmodifiableSet)\n    - locked <0x00000006c0b26fc0> (a sun.nio.ch.EPollSelectorImpl)\n    at sun.nio.ch.SelectorImpl.selectNow(SelectorImpl.java:105)\n    at org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller.run(NioBlockingSelector.java:310)\n\"http-nio-8080-exec-378\":\n    at java.nio.channels.spi.AbstractSelector.cancel(AbstractSelector.java:91)\n    - waiting to lock <0x00000006c0b4fe28> (a java.util.HashSet)\n    at java.nio.channels.spi.AbstractSelectionKey.cancel(AbstractSelectionKey.java:73)\n    - locked <0x00000006de858648> (a sun.nio.ch.SelectionKeyImpl)\n    at java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel(AbstractSelectableChannel.java:240)\n    - locked <0x00000006de8588c0> (a java.lang.Object)\n    at java.nio.channels.spi.AbstractInterruptibleChannel.close(AbstractInterruptibleChannel.java:115)\n    - locked <0x00000006de8585e0> (a java.lang.Object)\n    at org.apache.tomcat.util.net.NioChannel.close(NioChannel.java:104)\n    at org.apache.tomcat.util.net.NioChannel.close(NioChannel.java:116)\n    at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doClose(NioEndpoint.java:1179)\n    - locked <0x00000006c3360628> (a org.apache.tomcat.util.net.NioChannel)\n    at org.apache.tomcat.util.net.SocketWrapperBase.close(SocketWrapperBase.java:394)\n    at org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(NioEndpoint.java:667)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1592)\n    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n    - locked <0x00000006de858670> (a org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    at java.lang.Thread.run(Thread.java:748)\n\nFound 1 deadlock.",
    "comments": [
      "NIO deadlocks internally in your trace while trying to close multiple independent channels.\n\nSome of the structures that might help the deadlock, in particular the BlockPoller, are no longer used in trunk.",
      "but, in my opinion. just the NioEndpoint$Poller.cancelledKey and NioEndpoint$Poller.run may cause the deadlock.  Poller.run finally call AbstractSelector.cancel and Poller.cancelledKey finally call AbstractSelector.deregister. The two method all need the conditions keyLock and cancelledKeys.",
      "Ok, so then cancelledKey should cancel the key first, and this would resolve the \"problem\" as the channel close locks everything before cancelling that key itself. This is what was done like that in 8.5 but this didn't look important.\n\nCan you test it or give me your opinion on it ?\nhttps://github.com/apache/tomcat/commit/9b1a8b67bffe462fc745b19e15ed59c37e2e1dcf",
      "I will test first. If there is progress i will recommend agin",
      "Ok. If you run again into a deadlock, please add the updated deadlock traces as an attachment to the BZ (otherwise it's harder to read).",
      "Looking at the most recent JDK sources, the root issue likely has been fixed by these commits which remove all the unwanted internal NIO syncing:\nhttps://github.com/openjdk/jdk/commit/33b921f25d8b5e6a50003daa6db31176437d29c0\nhttps://github.com/openjdk/jdk/commit/38bdacafbcf3c96ac40e30098c0990f88a9edf8e\n\nI'm ok with having a workaround fix, as it seems the first commit for this NIO bug will be in 11, and the second one in 14.\nNot 100% sure if the first one alone is enough to avoid the deadlock, but it might well be. In the trace, if http-nio-8080-exec-215 does not hold the lock in the AbstractSelectableChannel, then http-nio-8080-ClientPoller will be able to get the sync on it.",
      "yes. thank you for your patient answer.I don't have a correct way to test. Just pressure test and it's hard to reproduce the bug fixed or not.",
      "The issue would have been introduced in 9.0.20, and it's not surprising it's hard to reproduce.\n\nIt's interesting that with the new Java dev model they actually do this sort of refactorings, cleanups and improvements on NIO, which is a very old piece of code.",
      "with your fixed code i package a new jar and then replace tomcat-embed-core.jar in 9.0.26.and then i pressure my application 3 hours and all is fine. But with the tomcat 9.0.26 press 1 hour the deadlock appear.",
      "Ok, so let's say the regression is fixed. The fix will be in Tomcat 9.0.31+, thanks for the help resolving the issue."
    ],
    "creation_ts": "2019-12-17T07:16:44Z",
    "fixes": [
      64007
    ]
  },
  {
    "id": 65262,
    "summary": "Enable websocket endpoints to be IoC friendly (javaee integration at least)",
    "description": "Follow up of the dev list discussion.\nGoal of the ticket is to use the InstanceManager to create websocket endpoints, encoders, decoders in default configurators (server for sure and would be great in client when possible - not sure it is that trivial since it is designed to be standalone).\nNote that except the wiring of the instance manager it also implies the proper destroy call wiring too.\n\nSide note on client side: if the wiring is too complicated cause you don't always know if a server is running or not - so instance manager access can be hard, it would be neat to enable to have a SPI to change the default configurator implementation, goal is the same as on client side: enable to respect 7.1.1 (javaee integration) spec part which says that endpoints are CDI aware (in practise I guess it will do a CDI lookup to respect all CDI features and not reimplement them).",
    "comments": [
      "WebSocket endpoints already use the InstanceManager.\n\nhttps://github.com/apache/tomcat/blob/master/java/org/apache/tomcat/websocket/WsSession.java#L180\n\nhttps://github.com/apache/tomcat/blob/master/java/org/apache/tomcat/websocket/WsSession.java#L548\n\nIs the request to have the InstanceManager create the endpoint instances from the class name rather than use InstanceManager.newInstance(Object) ?\n\n\nUsing the InstanceManager for Encoders and Decoders looks to be rather more complex. I looked at the spec but I didn't see a requirement for this 7.1.1 only discusses WebSocket endpoint classes.",
      "Hmm, endpoint api starts from a class on server side so should use the related instance manager instantiator and not only the injection \"newInstance\" probably. For an annotated endpoint you likely inject PojoEndpoint since the bean is not an endpoint which is not that useful.\n\nI'd also like encoders/decoders to comply to the IoC/instance manager otherwise no way to get a bound resource like a mapper.",
      "Section 3.1.7 of the WebSocket specification requires endpoint instances are created via ServerEndpointConfig.Configurator.getEndpointInstance(). Users are free to supply their own Configurator implementation. Therefore, it is not possible to use the InstanceManager to create the endpoint. The current call to \nInstanceManager.newInstance(Object) is the best that can be achieved.\n\nI'll spend a little more time looking at the encoders and decoders but, given that there is no specification requirement for these to support DI, whether anything gets implemented is going to depend a lot on how cleanly it can be done.",
      "@Mark: this issue is about the default configurator, fully agree when a custom configurator is used tomcat will not care.\nI also agree encoders/decoders IoC support is not in the specification but not having it lead to very weird patterns - even for just a plain JSON codec when you want to do it right and consistent with app code/config, makes it not natural at all and lead to easy leaks so I think it is worth going through the InstanceManager anyway and make it to the spec at some point.",
      "(In reply to romain.manni-bucau from comment #4)\n> @Mark: this issue is about the default configurator, fully agree when a\n> custom configurator is used tomcat will not care.\n\nI agree if using the default configurator then we know what it does and instead of complying 100% with the specification, we could shortcut to the instance manager to create the instance and solve your problem. There are shortcuts for IO as well, so why not.",
      "@R\u00e9my\nI think I can see a way to do that. We'll need to check which Configurator was used in the WsSession constructor to make sure we don't call the InstanceManager twice. It does mean that the timing of the call to InstanceManager will vary depending on the Configurator but I don't think that should be an issue.\n\n@Romain\nDo you need the InstanceManager to used used when testing the validity of the encoder/decoder classes (e.g. https://github.com/apache/tomcat/blob/master/java/org/apache/tomcat/websocket/Util.java#L345) or just when an Encoder/Decoder instance is created for an Endpoint?",
      "@Mark functionally I can leave with current validation but theorically the validation is only known of the IoC but it is not super aligned on the spec.\nTo illustrate it take a CDI or Spring encoder, it can use constructor injections and not have a default no-arg constrauctor but spec requires it so I guess validation can be let this way and we can ask the spec to drop this later moving the validation to the instantiation time only.",
      "I've applied a fix for Endpoints to 10.0.x, 9.0.x and 8.5.x. I'll look at Encoders and Decoders next so if there are any issues with the current approach do let me know.",
      "Fixed in:\n- 10.0.x for 10.0.6 onwards\n- 9.0.x for 9.0.46 onwards\n- 8.5.x for 8.5.66 onwards"
    ],
    "creation_ts": "2021-04-23T07:33:10Z",
    "fixes": [
      65262
    ]
  },
  {
    "id": 64921,
    "summary": "LoadBalancerDrainingValve does not honour \"Secure Session Cookie\" settings",
    "description": "With Chrome browsers a redirection loop will be triggered when all of the following conditions apply:\n\n* sameSiteCookies=none attribute has been set at the CookieProcessor\n* LoadBalancerDrainingValve has been activated\n* Site is called with timed out session\n\nReason: LoadBalancerDrainingValve tries to reset the JSESSIONID cookie. It adds \"SameSite=None\" as expected. But no matter what is configured for the \"Secure Session Cookie\" setting, it will never add the \"Secure\" attribute, too. Since Chrome does not accept \"SameSite=None\" without \"Secure\", it will reject the cookie, which will then be sent again and again in a redirection loop.",
    "comments": [
      "Hmm. It's not possible to know whether or not the browser thinks the cookie should be \"secure\" since the client doesn't send the \"secure\" flag to the server (it's a one-way flag, from server -> client).\n\nAre you able to test a patch (or have you already developed one)?\n\nAssuming the only thing missing is:\n\n  sessionCookie.setSecure(true);\n\nthen we only have to worry about knowing when to set that flag. Modern systems should probably *always* set that flag, but someone out there surely needs is to NOT set the \"secure\" flag so we need a way to disable that. Probably via a configuration option \"secure\" which defaults to \"true\" but can be set to \"false\".",
      "Setting \"Secure\" unconditionally would raise another issue: Chrome doesn't accept the Secure flag when not run under SSL. A possible \u2013 still naive \u2013 implementation might be:\n\nif (request.isSecure()) {\n    sessionCookie.setSecure(true);\n}",
      "Yes, I was thinking about some permutation of that.",
      "You should be able to do this in the Valve:\nSessionCookieConfig scc = request.getContext().getServletContext().getSessionCookieConfig()\n\nThen the logic used when the session cookie is created is:\nsessionCookie.setSecure(request.isSecure() || scc.isSecure())\n\nIt should be possible to replicate that in the Valve.",
      "That sounds good; I think there isn't any more configuration necessary, then since the Cookie configuration already has what it needs.\n\nI love one-liner fixes.\n\nAndreas, would you care to prepare a patch/PR for this?",
      "https://github.com/apache/tomcat/pull/377\n\nWindows smoke test failed due to an unrelated test failure.",
      "Fixed in:\n- 10.0.x for 10.0.0-M11 onwards\n- 9.0.x for 9.0.41 onwards\n- 8.5.x for 8.5.61 onwards"
    ],
    "creation_ts": "2020-11-12T11:54:03Z",
    "fixes": [
      64921
    ]
  },
  {
    "id": 63362,
    "summary": "GlobalRequestProcessor statistics in MBean does not count Websocket communication",
    "description": "Created attachment 36534\nScreenshot from JConsole & Chrome Dev Tools\n\nWebsocket communication in web app is not counted to statistics of bytes sent and received - obtainable via MBean: e.g. Catalina:type=GlobalRequestProcessor,name=\"http-nio-8080\", containing attributes bytesReceived, bytesSent.\nPlease see attachment for details.",
    "comments": [
      "Yes, this only tracks non upgraded HTTP/1.1 activity at this time.",
      "What is the request here? Are new statistics required? Are changes to how the existing statistics are calculated required? Specifics would help us to evaluate the request.\n\nThe current statistics were implemented when Tomcat only implemented HTTP/1.1 (and 1.0 and 0.9). Now Tomcat supports WebSocket, HTTP/2 and generic HTTP/1/ upgrade.\n\nDo stats need to be broken down by protocol?\n\nIs the 'right' solution something that needs to wait for major refactoring in Tomcat 10? (Or is there something useful we can do now for 9.0.x?)",
      "I guess it would have to be counted in the SocketWrapper, but is that kind of metric useful at all these days ? We know/expect it will be some random large amount, and that's all it will say. At the same time, it's slightly annoying to collect.\n\nAccess logging should give a much better idea on what's going on.\n\nPersonally, I'd rather leave it the way it is now and remove it in Tomcat.next.",
      "Our code has implementation of feeding metrics with sent/received number of bytes from web server. Generally the metrics is important to check amount of data transferred  from/to web application in elegant way - that means we do not need implement counting by ourselves for every API endpoint in our app (HTTP or Websocket). We had migrated our app from Wildfly, which counts Websocket + HTTP communication together correctly, but I understand that this is not feature crucial to be present there. So we are ok also with decision, that the counting will be implemented by ourselves - albeit take the numbers collected by Tomcat is the easier option ;)",
      "Note: HTTP/2 traffic is also excluded from the GlobalRequestProcessor metrics.",
      "Working on this. On HTTP/2 at the moment.",
      "Fixed for HTTP/2 in:\n- 10.0.x for 10.0.0-M10 onwards\n- 9.0.x for 9.0.40 onwards\n- 8.5.x for 8.5.60 onwards\n\nStill thinking about how to tackle WebSocket.",
      "Support added for WebSocket and generic HTTP upgrade protocols.\n\nFixed in:\n- 10.0.x for 10.0.0-M10 onwards\n- 9.0.x for 9.0.40 onwards\n- 8.5.x for 8.5.60 onwards"
    ],
    "creation_ts": "2019-04-18T11:11:57Z",
    "fixes": [
      63362
    ]
  },
  {
    "id": 44611,
    "summary": "DirContextURLConnection Header Bugs",
    "description": "Created attachment 21673\nFix DirContextURLConnection bugs.\n\nDirContextURLConnection has bugs:\n1) Does not implement the getHeaderFields() method\n2) It's implementation of getHeaderField(String name) is case sensitive.\n3) It returns an empty string \"\", rather than null, for header values which don't exist.\n\nThis means that there is no way to know what header information Tomcat exposes for a file, and calling getHeaderField(\"Content-Type\") will return \"\", even though there is an attribute stored as \"content-type\".\n\nThe attached patch should fix these bugs.",
    "comments": [
      "Many thanks for the patch. It has been applied to trunk and proposed for inclusion in the next release of 6.0.x.",
      "The patch has been applied to 6.0.x and will be included in the next release.\n\nMany thanks.",
      "Thanks a lot Mark.\n\nI should get off my but and write a follow up patch to this which formats Date fields as proper HTTP header date values (RFC 1123 - \"EEE, dd MMM yyyy HH:mm:ss zzz\") when returned as strings, which is another current bug.",
      "That would be great. When you are ready, open a new bug, add your patch and I'll take a look.",
      "(In reply to comment #4)\n> That would be great. When you are ready, open a new bug, add your patch and\n> I'll take a look.\n> \n\nFiled bug 45101 :)"
    ],
    "creation_ts": "2008-03-15T21:32:08Z",
    "fixes": [
      44611
    ]
  },
  {
    "id": 65301,
    "summary": "the enableLookups configuration is not fully active",
    "description": "Created attachment 37857\nkey line\n\nwhen I use org.apache.catalina.valves.RemoteIpValve to get real protocol from \"X-Forwarded-Proto\", sometimes it take too many times to search local machine hostname.\n\nthe thread dump as follows :\n\"http-nio-8080-exec-1\" #85 daemon prio=5 os_prio=0 tid=0x00007f0ef8fdd000 nid=0x79 runnable [0x00007f0e8d1d4000]\n   java.lang.Thread.State: RUNNABLE\n\tat java.net.Inet4AddressImpl.getHostByAddr(Native Method)\n\tat java.net.InetAddress$2.getHostByAddr(InetAddress.java:932)\n\tat java.net.InetAddress.getHostFromNameService(InetAddress.java:617)\n\tat java.net.InetAddress.getHostName(InetAddress.java:559)\n\tat java.net.InetAddress.getHostName(InetAddress.java:531)\n\tat org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.populateLocalName(NioEndpoint.java:1354)\n\tat org.apache.tomcat.util.net.SocketWrapperBase.getLocalName(SocketWrapperBase.java:275)\n\tat org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:472)\n\tat org.apache.coyote.Request.action(Request.java:432)\n\tat org.apache.catalina.connector.Request.getLocalName(Request.java:1331)\n\tat org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:612)\n\nwhen I see org.apache.catalina.valves.RemoteIpValve in tomcat , getLocalName methord must search ip from machine dnsserver,why this does not check whether it's(enableLookups) on or not ,like line num 663 in this class.\n\nthe methord getLoaclName alawys call dns to search local ip.",
    "comments": [
      "Created attachment 37858\nPatch\n\nThis can be fixed easily, *but* there's a problem. Most often (= always) DNS lookup must be disabled, so then the actual local name is not available anymore. The actual local name could be used a lot more in user code than the remote host name (which if needed is probably coded with DNS resolution) and as a result it could break existing apps.\nI don't understand why your local name lookup would be so slow.",
      "on my service dns is a must. so I disabled Lookups(default is false) in \"server.xml\".but in my code used RemoteIpValve class, the methord getLocalName does not on the controll of the \"enableLookups=false\",this methord alawys do dnslockup.This is not what I expected and It's also an imperfect judgment.\n\nso one way I must deprecated to use RemoteIpValve ,one way disable DNS at the system level and edit hosts to suport needed dns.\n\nI expect the configuration(enableLookups) to be consistent,It's more rigorous.\n\nthanks",
      "As it is right now, the enableLookups flags documentation is accurate: \"Set to true if you want calls to request.getRemoteHost() to perform DNS lookups in order to return the actual host name of the remote client. Set to false to skip the DNS lookup and return the IP address in String form instead (thereby improving performance). By default, DNS lookups are disabled.\"\n\nAs a result, I think the current behavior of the flag should not be changed. If the local name lookup is really a problem, then a new flag can be introduced.\nReading the RemoteIpValve code, saving and restoring the localName is not needed if isChangeLocalName() is false (the default value). Since this has a cost, it's an easy enhancement that I'll do.",
      "thanks\uff0cYou're right.\n\nwhen the system is configured with DNS, getLocalName will attempt to search for \"hostname\" using the native IP. This will also use the DNS service, which will occasionally result in a slow query if the system is not configured with DNS cache.\n\nYou can get the \"hostname\" efficiently in the simpler way you mentioned, without the DNS query.\n\nnow I have circumvented this problem by installing the NSCD service.",
      "Fixed RemoteIpValve to avoid using the local host name if not really needed. The change will be in 10.0.7, 9.0.47 and 8.5.67."
    ],
    "creation_ts": "2021-05-12T06:43:42Z",
    "fixes": [
      65301
    ]
  },
  {
    "id": 65505,
    "summary": "MimeHeaders setValue Order problem",
    "description": "If I use Shiro's rememberMe when COMPRESSION is enabled, it will cause rememberMe's cookie to fail to work\n\nimport org.apache.tomcat.util.http.MimeHeaders;\nimport org.apache.tomcat.util.http.ResponseUtil;\nimport org.junit.Test;\n\npublic class TomcatMixHeadersTest {\n\n    /***\n     * === MimeHeaders ===\n     * Vary = Origin\n     * Vary = Access-Control-Request-Method\n     * Vary = Access-Control-Request-Headers\n     * Access-Control-Allow-Origin = https://xxxx\n     * Access-Control-Allow-Credentials = true\n     * Set-Cookie = rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Tue, 17-Aug-2021 11:19:04 GMT; SameSite=lax\n     * Set-Cookie = rememberMe=rememberMeData; Path=/; Max-Age=1296000; Expires=Thu, 02-Sep-2021 11:19:04 GMT; HttpOnly; SameSite=lax\n     */\n    @Test\n    public void testMimeHeaders() {\n        MimeHeaders responseHeaders = new MimeHeaders();\n        responseHeaders.addValue(\"Vary\").setString(\"Origin\");\n        responseHeaders.addValue(\"Vary\").setString(\"Access-Control-Request-Method\");\n        responseHeaders.addValue(\"Vary\").setString(\"Access-Control-Request-Headers\");\n        responseHeaders.addValue(\"Access-Control-Allow-Origin\").setString(\"https://xxxx\");\n        responseHeaders.addValue(\"Access-Control-Allow-Credentials\").setString(\"true\");\n        responseHeaders.addValue(\"Set-Cookie\").setString(\"rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Tue, 17-Aug-2021 11:19:04 GMT; SameSite=lax\");\n        responseHeaders.addValue(\"Set-Cookie\").setString(\"rememberMe=rememberMeData; Path=/; Max-Age=1296000; Expires=Thu, 02-Sep-2021 11:19:04 GMT; HttpOnly; SameSite=lax\");\n\n        System.out.println(responseHeaders);\n\n        ResponseUtil.addVaryFieldName(responseHeaders, \"accept-encoding\");\n\n        // same up code \n        // responseHeaders.setValue(\"Vary\").setString(\"origin,access-control-request-method,access-control-request-headers,accept-encoding\");\n\n        System.out.println(responseHeaders);\n    }\n\n}\n\n\nThe execution result is\n\n=== MimeHeaders ===\nVary = Origin\nVary = Access-Control-Request-Method\nVary = Access-Control-Request-Headers\nAccess-Control-Allow-Origin = https://xxxx\nAccess-Control-Allow-Credentials = true\nSet-Cookie = rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Tue, 17-Aug-2021 11:19:04 GMT; SameSite=lax\nSet-Cookie = rememberMe=rememberMeData; Path=/; Max-Age=1296000; Expires=Thu, 02-Sep-2021 11:19:04 GMT; HttpOnly; SameSite=lax\n\n=== MimeHeaders ===\nVary = origin,access-control-request-method,access-control-request-headers,accept-encoding\nSet-Cookie = rememberMe=rememberMeData; Path=/; Max-Age=1296000; Expires=Thu, 02-Sep-2021 11:19:04 GMT; HttpOnly; SameSite=lax\nSet-Cookie = rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Tue, 17-Aug-2021 11:19:04 GMT; SameSite=lax\nAccess-Control-Allow-Origin = https://xxxx\nAccess-Control-Allow-Credentials = true\n\nThe order of the Header set-cookie was changed, \n\nThe code source address is \n\norg/apache/tomcat/embed/tomcat-embed-core/9.0.43/tomcat-embed-core-9.0.43-sources.jar!/org/apache/coyote/CompressionConfig.java:280\n\norg.apache.tomcat.util.http.ResponseUtil#addVaryFieldName(org.apache.tomcat.util.http.MimeHeaders, java.lang.String)\n\norg.apache.tomcat.util.http.MimeHeaders#setValue",
    "comments": [
      "Thanks for the report. The root cause was that the removeHeader method changed the order.\n\nFixed in:\n- 10.1.x for 10.1.0-M5 onwards\n- 10.0.x for 10.0.11 onwards\n- 9.0.x for 9.0.53 onwards\n- 8.5.x for 8.5.71 onwards"
    ],
    "creation_ts": "2021-08-18T12:02:58Z",
    "fixes": [
      65505
    ]
  },
  {
    "id": 48843,
    "summary": "Tomcat Acceptor Thread goes into wait() and it will never come back",
    "description": "Hi,\n\nI believe I've found a race condition in Tomcat that causes the http port to\nbe non-responsive. It exists in 6.0 and also in 5.5 (although the code has\nbeen refactored).\nI could not find any reference to it in the Bug database or the mailing list\narchives.\n\nConsider a tomcat instance with maxThreads set to 2, i.e. you have 2 tomcat\nthreads to service incoming requests.\nThe sequence of events is as follows:\n1. Thread 1 and Thread 2 are both servicing a request each.\n2. A third request comes in.\n3. In class JIOEndpoint.java, the acceptor thread calls methods\nprocessSocket() which then calls getWorkerThread() which then calls\ncreateWorkerThread().\n4. createWorkerThread() returns null since both threads are busy processing\nthe two requests.\n5. Here is the race condition in method getWorkerThread() in the code shown\nbelow\n\nprotected Worker getWorkerThread(){\n...\nWorker workerThread = createWorkerThread();\n        while (workerThread == null) {\n            try {\n                synchronized (workers) {\n                    workers.wait();\n                 }\n            }\n...\n}\n\nThe acceptor thread executes the \"while(workerThread == null)\" statement and\nis then switched out by the CPU.\nThe two threads executing the two requests complete and go into\nWorker.await() waiting for the next job after executing method\nrecycleWorkerThread().\nThe acceptor thread is switched back into CPU and executes the synchronized\nblock and goes into the wait().\n\nAt this point, there aren't any Worker threads out there processing requests\nand therefore there isn't any thread to wake up the acceptor thread.\nThe application is non-responsive after this.\n\nA simple solution would be to check if curThreadsBusy > 0 in the\nsynchronized block before going into wait() in method getWorkerThread()\nOR increase the scope of the critical section to include the while loop.\n\nThanks,\nHarshad\n\nStack Traces below:\n\n\"bda19102143\" id=1578 in WAITING on\nlock=org.apache.tomcat.util.net.jioendpoint$wor...@13aa4ee3^m\n    at java.lang.Object.wait(Native Method)^M\n    at java.lang.Object.wait(Object.java:485)^M\n    at\norg.apache.tomcat.util.net.JIoEndpoint$Worker.await(JIoEndpoint.java:416)^M\n    at\norg.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:442)^M\n    at java.lang.Thread.run(Thread.java:619)^M\n\n\"http-8091-Acceptor-0\" id=43 in WAITING on\nlock=org.apache.tomcat.util.net.jioendpoint$workerst...@13bd7b6a^m\n    at java.lang.Object.wait(Native Method)^M\n    at java.lang.Object.wait(Object.java:485)^M\n    at\norg.apache.tomcat.util.net.JIoEndpoint.getWorkerThread(JIoEndpoint.java:700)^M\n    at\norg.apache.tomcat.util.net.JIoEndpoint.processSocket(JIoEndpoint.java:731)^M\n    at\norg.apache.tomcat.util.net.JIoEndpoint$Acceptor.run(JIoEndpoint.java:313)^M\n    at java.lang.Thread.run(Thread.java:619)^M",
    "comments": [
      "Thanks for the report and the associated analysis.\n\nThis issue appears to only affect 6.0.x.\n\nThe issue had already been fixed in the NIO connector so I have proposed the same fox for the BIO and APR connectors.",
      "> This issue appears to only affect 6.0.x.\nThe above phrase means only that it does not affect trunk. That is because Workers are not used there anymore. This issue does affect TC 5.5.x",
      "Created attachment 25225\n2010-04-02_tc6_bug48843.patch",
      "Created attachment 25226\n2010-04-02_tc55_bug48843.patch",
      "The above patches were proposed for 6.0 and 5.5.",
      "The patch was applied to 5.5 in r934922, will be in 5.5.30 onwards.",
      "The patch was applied to 6.0 in r950341, will be in 6.0.27 onwards.",
      "Fixed a similar issue with AprEndpoint.Poller, AprEndpoint.Sendfile in trunk in r950851\n\nBackport proposed for 6.0.\n\nThe 5.5 code is similar, but I have not prepared the patch for it yet.\nReopening the issue to track this additional fix for AprEndpoint.",
      "Created attachment 25529\n2010-06-04_tc55_bug48843_c8.patch\n\nThis patch is a backport of r950851 to tc5.5.x. It will be proposed for 5.5.",
      "Regarding AprEndpoint.Poller, AprEndpoint.Sendfile fix (comment 8 and below, r950851 and attachment 25529):\n\nIt is not a deadlock there. It is a missed wakeup in add queue in AprEndpoint.Poller.add() and AprEndpoint.Sendfile.add(). Tomcat does not stop processing requests and the next request will wake up the queue.\n\nThe fix also changes handling of unexpected errors when processing the add queue in AprEndpoint.Poller.run() and AprEndpoint.Sendfile.run(), by zeroing the addCount variable.",
      "The AprEndpoint.Poller & Sendfile fix applied to 6.0 in r953010 and will be in 6.0.27 onwards.",
      "The second issue has been fixed in 5.5.x and will also be included in 5.5.30 onwards."
    ],
    "creation_ts": "2010-03-02T17:43:49Z",
    "fixes": [
      48843
    ]
  },
  {
    "id": 64743,
    "summary": "When set maxSwallowSizeto -1, the value of connection must be set to close.",
    "description": "I set \"maxSwallowSize\" to -1, in order to unlimited the uploaded file size. But in 8.5.57 version, I found the following content was inserted into response header. The most important point is \"Connection: close\". But the value of Connection is keepalive in 8.5.56 version.\n______________________________________________________\nKeep-Alive: timeout=60, max=100\nPragma: requestnum=\"235\"\nContent-Type: application/fastinfoset;charset=utf-8\nTransfer-Encoding: chunked\nDate: Wed, 16 Sep 2020 08:20:40 GMT\nConnection: close\nServer: WEB\n______________________________________________________\n\nSo I had a look at changelogs and found tomcat can check the value in 8.5.57 version, when the size of content is larger than the value of maxSwallowSize, the keepAlive is set to false, so the connection is closed.\n\nSo if unlimited the uploaded file size(maxSwallowSize\" = -1), the connection must be closed ?",
    "comments": [
      "That is a regression in the handling of aborted uploads. We need to ignore the case where maxSwallowSize has been set to less than 0. I'll get this fixed.",
      "Fixed in:\n- master for 10.0.0-M9 onwards\n- 9.0.x for 9.0.39 onwards\n- 8.5.x for 8.5.59 onwards"
    ],
    "creation_ts": "2020-09-16T09:14:38Z",
    "fixes": [
      64743
    ]
  },
  {
    "id": 41217,
    "summary": "SingleSignOn Cookie does not honor https access: Login Information Disclosure",
    "description": "When using the SingleSignOn Valve\n(org.apache.catalina.authenticator.SingleSignOn) via https the Cookie\nJSESSIONIDSSO is transmitted without the \"secure\" attribute, resulting in it\nbeing transmitted to any content that is - by purpose or error - requested via\nhttp from the same server. \n\nAs the content of the SSO-Cookie is confidential (it will lead to automatically\nlogged in sessions in other contexts - https or non-https) this should never happen.\n\nSorry to have no patch. I've not installed the complete source distribution in\nmy development environment, but it seems the points to change are \norg.apache.catalina.authenticator.AuthenticatorBase.register(...), the code of\ninterest being (from 5.5.30 source distribution)\n\n            Cookie cookie = new Cookie(Constants.SINGLE_SIGN_ON_COOKIE, ssoId);\n            cookie.setMaxAge(-1);\n            cookie.setPath(\"/\");\n            hres.addCookie(cookie);\n\nAs hres is an org.apache.catalina.HttpRequest, and I've looked through the code\nto find org.apache.catalina.Request.setSecure() but no ...isSecure() (though\nthis is mentioned in the Javadoc for ...setSecure()) I suppose there needs to be\nanother change to provide isSecure on Request or HttpRequest, but this is\ndifficult to tell only from the editor.\nIf isSecure() was there, there'd be a \n            cookie.setSecure(hres.isSecure()) \nmissing in the statements above...",
    "comments": [
      "Created attachment 19397\nPatch to set secure flag on SSO cookie when requested over https\n\nThere is an isSecure() method available in the Request object used by\nAuthenticatorBase...not sure why you couldn't find it.\tAttaching a patch that\nsets the secure flag on the SSO cookie when accessed via https.",
      "This has been fixed in svn. Many thanks for the patch. The fix will be in 5.5.21\nonwards.",
      "Thanks for the fix - I believe I did not see the Request method because I had no\nIDE environment ready for tomcat source and just browsed through the source in a\nsimple text editor - it's a lot easier to miss methods there.\nOlaf"
    ],
    "creation_ts": "2006-12-20T05:13:27Z",
    "fixes": [
      41217
    ]
  },
  {
    "id": 63995,
    "summary": "Statements are not closed when a JDBC connection is passivated in tomcat-dbcp",
    "description": "Web-application opens connection from JNDI pool, creates PreparedStatements, closes connection without closing statements.\n\nStatements are kept open and \n\"ORA-01000: maximum open cursors exceeded\" error is thrown.\n\nPool is expected to close statements on connection close.\n\nThe problem seems to be in src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java, ported from DBCP2.\n\nTomcat version (but not dbcp2 version) contains following code:\nhttps://github.com/apache/tomcat/blob/master/java/org/apache/tomcat/dbcp/dbcp2/DelegatingConnection.java#L624\n\n    protected void passivate() throws SQLException {\n        ...\n        if (traces != null && traces.isEmpty()) {\n                              ^^^^^^^^^^^^^^^^\n\nIn DBCP2 version this line has ! before isEmpty():\nhttps://github.com/apache/commons-dbcp/blob/master/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java#L624\n\n        if (traces != null && !traces.isEmpty()) {\n                             ^^^",
    "comments": [
      "Thanks for the report and the analysis. I did a line by line diff of the entire fork and found one additional issue as well.\n\nFixed in:\n- master for 9.0.31 onwards\n- 8.5.x for 8.5.51 onwards"
    ],
    "creation_ts": "2019-12-09T15:22:30Z",
    "fixes": [
      63995
    ]
  },
  {
    "id": 50556,
    "summary": "improve JreMemoryLeakPreventionListener against leak caused by LdapPoolManager",
    "description": "When class com.sun.jndi.ldap.LdapPoolManager is initialized, if if the system property com.sun.jndi.ldap.connect.pool.timeout is set to a value greater than 0, a PoolCleaner thread is spawned, without fixing a specific context class loader.\nIf the initialization of the class is triggered by a web application, its class loader will be used by the PoolCleaner thread. If that web app is stopped, its class loader will leak.\n\nWe can improve JreMemoryLeakPreventionListener to prevent that leak.",
    "comments": [
      "What are our opportunities to initialize this class before webapp code gets involved? Is this something that is safe to initialize during Tomcat startup, or will cause negative effects for the webapp(s) using LDAP services?",
      "the JreMemoryLeakPreventionListener is there to initialize such leaking classes.\nAnd yes, it is safe to initialize com.sun.jndi.ldap.LdapPoolManager during tomcat startup.",
      "(In reply to comment #2)\n> the JreMemoryLeakPreventionListener is there to initialize such leaking\n> classes.\n\nYup, I've worked on it.\n\n> And yes, it is safe to initialize com.sun.jndi.ldap.LdapPoolManager during\n> tomcat startup.\n\nExcellent: just initialize the class inside of the CTTL push/pop that's already in there and you should be okay. I guess you'd only have to do it if com.sun.jndi.ldap.connect.pool.timeout > 0, though system properties can be changed at runtime, so it might be a good idea to temporarily set it to 1 if it's currently 0, init the class, then set it back.",
      ">I guess you'd only have to do it if com.sun.jndi.ldap.connect.pool.timeout > 0, though system properties can be changed at runtime, so it might be a good idea to temporarily set it to 1 if it's currently 0, init the class, then set it back.\n\nI don't think this is a good idea. This would force the leaking thread to be spawned even in cases where it is never spawned (if com.sun.jndi.ldap.connect.pool.timeout=0). This property is supposed to be set on the command line, so that it does not change at runtime.\n\nI committed the fix on trunk, will be ready for 7.0.6",
      "proposed backport on Tomcat 6, moving this BZ issue to tomcat 6.",
      "Implemented in 6.0 with r1056851 and will be in 6.0.30."
    ],
    "creation_ts": "2011-01-06T17:13:06Z",
    "fixes": [
      50556
    ]
  },
  {
    "id": 66419,
    "summary": "Function with varargs argument fails for single argument",
    "description": "Function with varargs argument fails for a single argument. The problem was introduced by fix of bug 60431. The single argument is always coerced into array which fails for non-array argument. The reason is the test for array type is done on methods argument which is always array instead of actual argument type.\nThe code in question - AstFunction.getValue:\n\n    } else if (inputParameterCount == methodParameterCount &&\n            paramTypes[i].isArray()) {\n        params[i] = parameters.jjtGetChild(i).getValue(ctx);\n\nFollowing test should pass but fails on the third expression:\n    @Test\n    public void testVarargMethod() throws NoSuchMethodException, SecurityException {\n        ExpressionFactory factory = ExpressionFactory.newInstance();\n        ELContext context = new StandardELContext(factory);\n        context.getFunctionMapper().mapFunction(\"fn\", \"format\", String.class.getMethod(\"format\",String.class, Object[].class));\n\n        Object result = factory.createValueExpression(context, \"${fn:format('%s-%s','one','two')}\",\n                String.class).getValue(context);\n        Assert.assertEquals(\"one-two\",result);\n\n        result = factory.createValueExpression(context, \"${fn:format('%s-%s','one,two'.split(','))}\",\n                String.class).getValue(context);\n        Assert.assertEquals(\"one-two\",result);\n\n        result = factory.createValueExpression(context, \"${fn:format('%s','one')}\",\n                String.class).getValue(context);\n        Assert.assertEquals(\"one\",result);\n    }",
    "comments": [
      "Created PR https://github.com/apache/tomcat/pull/575\n\nFix is for the main branch but the problem seems to be in all major branches",
      "Thanks for the report.\n\nFixed in:\n- 11.0.x for 11.0.0-M3 onwards\n- 10.1.x for 10.1.6 onwards\n-  9.0.x for  9.0.72 onwards\n-  8.5.x for  8.5.86 onwards"
    ],
    "creation_ts": "2023-01-12T08:24:47Z",
    "fixes": [
      66419
    ]
  },
  {
    "id": 43909,
    "summary": "EL EvaluationContext wrapper hides locale",
    "description": "org.apache.el.lang.EvaluationContext doesn't pass locale to the wrapped\nELContext as does org.apache.jasper.el.ELContextWrapper. This prohibits using of\nthe locale for it's original purpose.",
    "comments": [
      "Created attachment 21157\nproper locale wrapping\n\nHere's a small patch to fix the problem but it would be more appropriate to\nextract pure wrapper pattern implementation as it's own class.",
      "This has been fixed in svn and will be included in 6.0.16 onwards."
    ],
    "creation_ts": "2007-11-19T23:06:25Z",
    "fixes": [
      43909
    ]
  },
  {
    "id": 57638,
    "summary": "IllegalArgumentException in AjpNioProcessor when packetSize > 8192",
    "description": "For reference: http://markmail.org/thread/vu7kgdpqxdw7tlkz\n\nThis stack trace is from 8.0.17 but I have been able to reproduce it in 8.0.20 and 7.0.56 - 7.0.59:\n\njava.lang.IllegalArgumentException\n        at java.nio.Buffer.limit(Buffer.java:275)\n        at\norg.apache.coyote.ajp.AjpNioProcessor.readSocket(AjpNioProcessor.java:179)\n        at\norg.apache.coyote.ajp.AjpNioProcessor.read(AjpNioProcessor.java:159)\n        at\norg.apache.coyote.ajp.AbstractAjpProcessor.readMessage(AbstractAjpProcessor.java:1067)\n        at\norg.apache.coyote.ajp.AbstractAjpProcessor.receive(AbstractAjpProcessor.java:1005)\n        at\norg.apache.coyote.ajp.AbstractAjpProcessor.refillReadBuffer(AbstractAjpProcessor.java:1131)\n\nConnector configuration:\n\n    <Connector port=\"@connector-port@\"\n       redirectPort=\"443\"\n           protocol=\"org.apache.coyote.ajp.AjpNioProtocol\"\n        URIEncoding=\"UTF-8\"\n         packetSize=\"65536\"\n           executor=\"tomcatThreadPool\" />\n\nHere's what I know so far:\n\n1. AjpNioProtocol fails under some conditions (my post-login page)\n   with packetSize larger than the default (I have tried 65536, 32768,\n   16184, and 8200). The failing page is ~30k in size, enough to\n   exceed the default packet size but not e.g. maximum 64k\n\n2. Using AjpProtocol (BIO) connector solves the problem\n\n3. Using the default AJP packet size (8192) solves the problem\n\n4. Specifying socket.appReadBufSize and socket.appWriteBufSize to be\nthe same as the packet size solves the problem\n\nI'm still working on a small test case to help motivate debugging.\n\nWild-guessing that the root cause is mismatched buffer sizes, or lack of checking when using a smaller protocol buffer than whatever buffer is pumping into the protocol's buffer.",
    "comments": [
      "What version the stacktrace is from?\n\n> at java.nio.Buffer.limit(Buffer.java:275)\n\nThe line matches Java 8u31 sources.\nThe IAE is triggered by the following check:\n\n[[[\npublic final Buffer limit(int newLimit) {\n   if ((newLimit > capacity) || (newLimit < 0))\n            throw new IllegalArgumentException();\n]]]\n\n> org.apache.coyote.ajp.AjpNioProcessor.readSocket(AjpNioProcessor.java:179)\n\nThe above does not match Tomcat 7 sources. By method name I guess that is line 356.\n\n[[[\n    private int readSocket(byte[] buf, int pos, int n, boolean block)\n            throws IOException {\n        int nRead = 0;\n        ByteBuffer readBuffer =\n                socketWrapper.getSocket().getBufHandler().getReadBuffer();\n        readBuffer.clear();\n        readBuffer.limit(n);\n]]]\n\nApparently it tries to read n bytes from the Socket read buffer at once. The buffer is smaller that that thus the IAE.",
      "(In reply to Konstantin Kolinko from comment #1)\n> What version the stacktrace is from?\n> \n> > at java.nio.Buffer.limit(Buffer.java:275)\n> \n> The line matches Java 8u31 sources.\n> The IAE is triggered by the following check:\n> \n> [[[\n> public final Buffer limit(int newLimit) {\n>    if ((newLimit > capacity) || (newLimit < 0))\n>             throw new IllegalArgumentException();\n> ]]]\n> \n> > org.apache.coyote.ajp.AjpNioProcessor.readSocket(AjpNioProcessor.java:179)\n> \n> The above does not match Tomcat 7 sources. By method name I guess that is\n> line 356.\n\nThe reference in comment #1 says Tomcat 8.0.17. I'm sorry I didn't set the correct version. I was able to reproduce this in 7.0.56, 7.0.57, 7.0.50, 8.0.17 and 8.0.20 with varying stack traces. The one posted here appears to be from Tomcat 8.0.17.\n\n> [[[\n>     private int readSocket(byte[] buf, int pos, int n, boolean block)\n>             throws IOException {\n>         int nRead = 0;\n>         ByteBuffer readBuffer =\n>                 socketWrapper.getSocket().getBufHandler().getReadBuffer();\n>         readBuffer.clear();\n>         readBuffer.limit(n);\n> ]]]\n> \n> Apparently it tries to read n bytes from the Socket read buffer at once. The\n> buffer is smaller that that thus the IAE.\n\nThat seems like a reasonable diagnosis, but I'm not familiar enough with how these components interact to understand the root cause and most appropriate fix.\n\nI suspect this is a rare problem since most people probably stick to the default packetSize (8192) with the AJP connector.",
      "I have a test case for this. Sending any AJP request body chunk message with size > socket read buffer is sufficient to trigger this with NIO or NIO2.\n\nBIO, APR and 9.0.x are all unaffected.\n\nThe fix looks to be simple. I need to clean everything up and should be able to commit a fix shortly.",
      "Fixed in 8.0.x and 8.0.21 onwards and in 7.0.x for 7.0.60 onwards.\n\nNeither trunk nor 6.0x. were affected.",
      "(In reply to Mark Thomas from comment #4)\n> Fixed in 8.0.x and 8.0.21 onwards and in 7.0.x for 7.0.60 onwards.\n\n\nExcellent, I'll reproduce, then update and re-test in my environment.\n\n> Neither trunk nor 6.0x. were affected.\n\nThat was my expectation based upon R\u00e9my'y comments about the refactoring in trunk having unified lots of things; this bug would have been much more obvious with other connectors.",
      "I just re-built with Tomcat 7.0.x trunk and I'm now getting a different exception:\n\nSEVERE: Servlet.service() for servlet velocity threw exception\njava.nio.BufferOverflowException\n        at java.nio.HeapByteBuffer.put(HeapByteBuffer.java:189)\n        at org.apache.coyote.ajp.AjpNioProcessor.output(AjpNioProcessor.java:305)\n        at org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer.doWrite(AbstractAjpProcessor.java:1234)\n        at org.apache.coyote.Response.doWrite(Response.java:499)\n        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:402)\n        at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:480)\n        at org.apache.catalina.connector.OutputBuffer.realWriteChars(OutputBuffer.java:485)\n        at org.apache.tomcat.util.buf.CharChunk.flushBuffer(CharChunk.java:464)\n        at org.apache.tomcat.util.buf.CharChunk.append(CharChunk.java:302)\n        at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:527)\n        at org.apache.catalina.connector.CoyoteWriter.write(CoyoteWriter.java:152)\n        at org.apache.velocity.io.VelocityWriter.flushBuffer(VelocityWriter.java:129)\n        at org.apache.velocity.io.VelocityWriter.write(VelocityWriter.java:306)\n        at org.apache.velocity.io.VelocityWriter.write(VelocityWriter.java:322)\n        at org.apache.velocity.runtime.parser.node.ASTReference.render(ASTReference.java:491)\n        at org.apache.velocity.runtime.parser.node.SimpleNode.render(SimpleNode.java:342)\n        at org.apache.velocity.Template.merge(Template.java:356)\n        at org.apache.velocity.Template.merge(Template.java:260)\n        at org.apache.velocity.tools.view.VelocityView.performMerge(VelocityView.java:942)\n        at org.apache.velocity.tools.view.VelocityView.merge(VelocityView.java:902)\n        at org.apache.velocity.tools.view.VelocityViewServlet.mergeTemplate(VelocityViewServlet.java:318)\n        at org.apache.velocity.tools.view.VelocityLayoutServlet.mergeTemplate(VelocityLayoutServlet.java:247)\n        at org.apache.velocity.tools.view.VelocityViewServlet.doRequest(VelocityViewServlet.java:220)\n        at org.apache.velocity.tools.view.VelocityViewServlet.doGet(VelocityViewServlet.java:182)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:624)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n  [...]\n\nMight this be the other side of the buffer coin?",
      "I added some debug logging to the line immediately before the writeBuffer.put(), and I got these logs before the exception:\n\nMar 07, 2015 2:02:09 PM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=65536, starting at offset=0, len=79\n\nMar 07, 2015 2:02:09 PM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=6, starting at offset=0, len=6\n\nMar 07, 2015 2:02:09 PM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=65536, starting at offset=0, len=113\n\nMar 07, 2015 2:02:09 PM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=6, starting at offset=0, len=6\n\nMar 07, 2015 2:02:10 PM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=65536, starting at offset=0, len=42\n\nMar 07, 2015 2:02:10 PM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=65536, starting at offset=0, len=8200",
      "That is a different bug. It is in output rather than input. Please open a new issue.",
      "Filed the output-oriented bug under bug #57674."
    ],
    "creation_ts": "2015-02-26T14:03:32Z",
    "fixes": [
      57638
    ]
  },
  {
    "id": 49957,
    "summary": "Work directories of deployed webapps are deleted at shutdown",
    "description": "Created attachment 26050\nstacktrace\n\nObserving this with the current trunk (at rev. 998656).\nIt does not happen with 7.0.2, so it is some recent regression.\n\nThe problem is that when I stop Tomcat all subdirectories in ${catalina.base}/work/Catalina/localhost are deleted.\n\nSteps to reproduce:\n1. Build Tomcat 7.0\n2. Set JRE_HOME variable. Go to output/build/bin/ and run catalina.bat start\n3. Access http://localhost:8080/examples/jsp/jsp2/el/basic-arithmetic.jsp\n4. Note, that there is compiled class file in\noutput/build/work/Catalina/localhost/examples/org/apache/jsp/jsp/jsp2/el/\n5. Run catalina.bat stop\n6. Actual behaviour: output/build/work/Catalina/localhost/ is now empty.\nExpected behaviour: see step 4.\n\n\nThe catalina.log file has \"INFO: Deploying web application directory\" lines it it, but there are no logs about any webapps being undeployed.\n\nI have run TC7 in debug mode with breakpoints in ExpandWar.delete(..) and the deletion happens in ContextConfig.destroy().\n\n        // Changed to getWorkPath per Bugzilla 35819.\n        String workDir = ((StandardContext) context).getWorkPath();\n        if (workDir != null)\n            ExpandWar.delete(new File(workDir));\n\nI am attaching the full stacktrace.\n\nThe code itself looks old. I suspect that the destroy event was not passed to ContextConfig until recently.",
    "comments": [
      "Fixed in trunk and will be in 7.0.4 onwards."
    ],
    "creation_ts": "2010-09-19T11:39:18Z",
    "fixes": [
      49957
    ]
  },
  {
    "id": 66236,
    "summary": "maxSavePostSize=-1 crashes ssl renegotiation",
    "description": "According to documentation maxSavePostSize=-1 means \"disable limit\".\nThis was working fine in previous versions.\n\nWith tomcat 10 this will trigger an exception when a ssl rehandshake is necessary:\n java.lang.IllegalArgumentException: capacity < 0: (-1 < 0)\n  at java.base/java.nio.Buffer.createCapacityException(Buffer.java:279)\n  at java.base/java.nio.ByteBuffer.allocate(ByteBuffer.java:362)\n  at org.apache.coyote.http11.filters.BufferedInputFilter.setLimit(BufferedInputFilter.java:69)\n  at org.apache.coyote.http11.Http11Processor.sslReHandShake(Http11Processor.java:1285)\n\nReason seems to be, that line 1285 of Http11Processor allocates a buffer with the size of maxSavePostSize without checking for the special meanings of 0 and -1.",
    "comments": [
      "A code inspection suggests that this hasn't been working in previous versions.\n\nWhile the special values of 0 and -1 work for FORM auth and HTTP upgrade, they do not work for TLS renegotiation.\n\nThe different buffers in use (ByteBuffer for TLS, ByteChunk for FORM and upgrade) mean that implementing the special values for TLS without creating huge buffers for every connection will be non-trivial.",
      "It looks like reverting to using ByteChunk to store the request body in BufferedInputFilter should fix this. Initial impressions are that this works but I want to run more tests before committing.",
      "Fixed in:\n- 10.1.x for 10.1.0-M18 onwards\n- 10.0.x for 10.0.24 onwards\n-  9.0.x for  9.0.66 onwards\n-  8.5.x for  8.5.83 onwards"
    ],
    "creation_ts": "2022-08-24T12:53:43Z",
    "fixes": [
      66236
    ]
  },
  {
    "id": 37794,
    "summary": "getParameter() fails on POST with transfer-encoding: chunked",
    "description": "Overview: When an HTTP/1.1 client (for example J2ME) POST with\ntransfer-encoding: chunked to a servlet, the getParameter() family and\ngetQueryString() methods fail to retrieve the correct result by returning\nnothing. In contrast, reading until end-of-file on the servlets input stream\nproduces correct result.\n\nSteps to reproduce: Send a chunked POST request, with a=0 in the first chunk,\nsleep 1 s, then send &b=0 in the next, followed by a 0-chunk and trailer. On the\nreceiving servlet, call getParameterNames() or getParameter().\n\nActual Results: null\n\nExpected results: a=0&b=1\n\nBuild: Tomcat 5.5.12\n\nAdditional Builds and Platforms:\n- getParameter() does fail on:\n    Tomcat 4.1.18\n    Tomcat 4.1.24\n    Tomcat 5.5.12\n- getParameter() doesn't fail on:\n    Jetty 5.1.6\n\nAdditional Information: Please refer to the log below for Tomcat behaviour. It\nis from a simple test client and servlet written to demonstrate the bug.\nTomcat 5.5.12 log:\n\n****************************\n1) Reading the body - PASS *\n****************************\n    [junit] // testChunked(localhost, 8080)\n    [junit] // Sending request to host localhost port 8080\n    [junit] POST /testchunked/EchoServlet/getBody HTTP/1.1\n    [junit] User-Agent: no.riiber.net.http.test.chunked.EchoClient (chunked-test)\n    [junit] content-type: application/x-www-form-urlencoded\n    [junit] connection: Close\n    [junit] host: localhost:8080\n    [junit] transfer-encoding: chunked\n\n    [junit] 3\n    [junit] a=0\n    [junit] 4\n    [junit] &b=1\n    [junit] // Reading response from host localhost port 8080\n    [junit] HTTP/1.1 200 OK\n    [junit] Server: Apache-Coyote/1.1\n    [junit] Content-Type: text/plain;charset=ISO-8859-1\n    [junit] Content-Length: 9\n    [junit] Date: Mon, 05 Dec 2005 07:48:59 GMT\n    [junit] Connection: close\n\n    [junit] a=0&b=1\n    [junit] // PASS: a=0\n    [junit] // PASS: &b=1\n***************************************\n2) Reading using getQuerySTring: FAILS\n***************************************\n    [junit] // testChunked(localhost, 8080)\n    [junit] // Sending request to host localhost port 8080\n    [junit] POST /testchunked/EchoServlet/getQueryString HTTP/1.1\n    [junit] User-Agent: no.riiber.net.http.test.chunked.EchoClient (chunked-test)\n    [junit] content-type: application/x-www-form-urlencoded\n    [junit] connection: Close\n    [junit] host: localhost:8080\n    [junit] transfer-encoding: chunked\n\n    [junit] 3\n    [junit] a=0\n    [junit] 4\n    [junit] &b=1\n    [junit] // Reading response from host localhost port 8080\n    [junit] HTTP/1.1 200 OK\n    [junit] Server: Apache-Coyote/1.1\n    [junit] Content-Type: text/plain;charset=ISO-8859-1\n    [junit] Content-Length: 6\n    [junit] Date: Mon, 05 Dec 2005 07:48:59 GMT\n    [junit] Connection: close\n\n    [junit] null\n    [junit] // *** FAIL: a=0 is not present in response from\n/testchunked/EchoServlet/getQueryString ***\n    [junit] // *** FAIL: &b=1 is not present in response from\n/testchunked/EchoServlet/getQueryString ***\n********************************************\n3) Reading using getParameterNames(): FAILS\n*********************************************\n    [junit] // testChunked(localhost, 8080)\n    [junit] // Sending request to host localhost port 8080\n    [junit] POST /testchunked/EchoServlet/getParameterNamesAndValues HTTP/1.1\n    [junit] User-Agent: no.riiber.net.http.test.chunked.EchoClient (chunked-test)\n    [junit] content-type: application/x-www-form-urlencoded\n    [junit] connection: Close\n    [junit] host: localhost:8080\n    [junit] transfer-encoding: chunked\n\n    [junit] 3\n    [junit] a=0\n    [junit] 4\n    [junit] &b=1\n    [junit] // Reading response from host localhost port 8080\n    [junit] HTTP/1.1 200 OK\n    [junit] Server: Apache-Coyote/1.1\n    [junit] Content-Type: text/plain;charset=ISO-8859-1\n    [junit] Content-Length: 2\n    [junit] Date: Mon, 05 Dec 2005 07:49:02 GMT\n    [junit] Connection: close\n\n\n    [junit] // *** FAIL: a=0 is not present in response from\n/testchunked/EchoServlet/getParameterNamesAndValues ***\n    [junit] // *** FAIL: &b=1 is not present in response from\n/testchunked/EchoServlet/getParameterNamesAndValues ***\n\nBest regards\nArne Riiber",
    "comments": [
      "URL POST must use a content-length. Otherwise, it's something else.",
      "It's correct that Content-Length was required for HTTP/1.0, but with HTTP/1.1\nit's not required anymore according to RFC2616\n[ftp://ftp.isi.edu/in-notes/rfc2616.txt] chapter 4.3:\n\nThe presence of a message-body in a request is signaled by the\n   inclusion of a Content-Length or Transfer-Encoding header field in\n   the request's message-headers.\n\nRFC2616 chapter 19.4.6 \"Introduction of Transfer-Encoding\" also includes pseudo\ncode for determining the content-length from the chunks.\n\nPlease correct me if I'm wrong.\n\nBest regards\nArne Riiber",
      "Created attachment 17155\nSample code for demonstrating the bug",
      "This is really a problem for any POST requests coming out of MIDP where you\ncannot change your transfer encoding (its controlled by the device).\n\nThanks a lot,\n-Rushabh",
      "As of Tomcat 5.5.20 and Tomcat 6.0.16, this is still an open issue.  Any status?",
      "This has been fixed in trunk (with a test case) and will be proposed for 6.0.x and 5.5.x",
      "This has been fixed in 6.0.x and will be included in 6.0.21 onwards",
      "This has been fixed in 5.5.x and will be included in 5.5.28 onwards."
    ],
    "creation_ts": "2005-12-05T18:43:35Z",
    "fixes": [
      37794
    ]
  },
  {
    "id": 66196,
    "summary": "HTTP/1 connector doesn't blow-up when HTTP header contains non-ASCII characters",
    "description": "... unlike the HTTP/2 connector which complains:\n\nCaused by: java.lang.IllegalArgumentException: The Unicode character [\u0411] at code point [1,041] cannot be encoded as it is outside the permitted range of 0 to 255.\n        at org.apache.coyote.http2.HPackHuffman.encode(HPackHuffman.java:452)\n        at org.apache.coyote.http2.HpackEncoder.writeHuffmanEncodableValue(HpackEncoder.java:229)\n        at org.apache.coyote.http2.HpackEncoder.encode(HpackEncoder.java:191)\n        at org.apache.coyote.http2.Http2UpgradeHandler.doWriteHeaders(Http2UpgradeHandler.java:727)\n        at org.apache.coyote.http2.Http2UpgradeHandler.writeHeaders(Http2UpgradeHandler.java:680)\n        at org.apache.coyote.http2.Stream.writeHeaders(Stream.java:466)\n        at org.apache.coyote.http2.StreamProcessor.prepareResponse(StreamProcessor.java:151)\n        at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:379)\n        at org.apache.coyote.Response.action(Response.java:211)\n        at org.apache.coyote.Response.sendHeaders(Response.java:440)\n        at org.apache.coyote.http2.Http2OutputBuffer.doWrite(Http2OutputBuffer.java:57)\n        at org.apache.coyote.Response.doWrite(Response.java:615)\n        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:340)\n        at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:784)\n        at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:689)\n        at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:388)\n        at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:366)\n        at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96)\n\nIt would be nice for the HTTP/1 code to do the same as I would have caught a bug with my tests rather than debugging in production. :D",
    "comments": [
      "Which header was this?",
      "Well, in my case it was the `ETag` header but I believe it's illegal to send non-ASCII characters in any header.",
      "Generally, Tomcat doesn't validate response headers unless it needs to process them for some reason. Applications are expected to set valid data. This also gives applications the flexibility to bend (or even break) the HTTP specs which can sometimes be useful when dealing with clients that don't follow the specs.\n\nHTTP headers values are not restricted to US-ASCII. Many - including ETag - allow obs-text which is bytes in the range 0x80 to 0xFF. That said, RFC 9110 has a strong preference for US-ASCII. I suspect that requirement may get stronger over time.\n\nTo add to the \"fun\" some cookies - despite RFC 6265 and the HTTP RFCs - have been observed to use UTF-8 values.\n\nAnd then there is RFC 8187 that I don't think I have ever seen in real world usage.\n\nSo, in short, things are not at all clear cut.\n\nFor HTTP/2, it will depend whether the implementation decides to use Huffman encoding or not. The specification doesn't define when to use Huffman and when not. You could argue that this imposes a requirement that the characters in header names and values must fall in the range 0x00 to 0xFF (other requirements limit this further). Which is stricter than HTTP/1.1.\n\nMy thinking at this point was whether or not it was practical to add a similar limit to HTTP/1.1. Reviewing the code, I think it is. Only cookie headers are treated as UTF-8. All other headers are treated as ISO-8859-1. If you try passing in a String that uses characters above code point 255, they will get corrupted. On that basis, I think it is better to trigger an error early rather than passing corrupted data to the client.\n\nTriggering an error in the form of an exception problematic. Applications that appear to work at the moment would start failing once this change was applied. I think a reasonable compromise for HTTP/1.1 would be to log a warning (including the problematic String) and ignore the header.\n\nThoughts?",
      "Logging a warning (or even logging at the ERROR level) sounds great to me. Everyone should be monitoring their logs for warnings and errors so this should be visible to most. And would save people time as they won't have to debug to try to figure out what their problem is.\n\nThanks!",
      "Fixed in 10.1.x for 10.1.0-M18 onwards\n\nI intend to delay back-porting for a few releases in case the changes to MessageBytes triggers regressions.",
      "When will it be backported to v8.5, 9 and 10.0?",
      "The first approved release with this change was 10.1.0.\n\nMy current thinking is to allow another 2 to 3 releases before back-porting.",
      "*** Bug 65802 has been marked as a duplicate of this bug. ***",
      "Back-ported to:\n-  9.0.x for  9.0.71 onwards\n-  8.5.x for  8.5.85 onwards",
      "> And then there is RFC 8187 that I don't think I have ever seen in real world usage.\n\nContent-Disposition. Trust me.",
      "Looking over the thread here, it sounded like the path forward was to log, and potentially drop the header for Http1.1\n\nHowever that same change wasnt done for the AJP Processor, causing invalid headers to suddenly break upon tomcat upgrade (discover in our 8.5.x usage)\n\njava.lang.IllegalArgumentException: The Unicode character [\u2013] at code point [8,211] cannot be encoded as it is outside the permitted range of 0 to 255\n                at org.apache.tomcat.util.buf.MessageBytes.toBytesSimple(MessageBytes.java:290)\n                at org.apache.tomcat.util.buf.MessageBytes.toBytes(MessageBytes.java:261)\n                at org.apache.coyote.ajp.AjpMessage.appendBytes(AjpMessage.java:172)\n                at org.apache.coyote.ajp.AjpProcessor.prepareResponse(AjpProcessor.java:1121)\n                at org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer.doWrite(AjpProcessor.java:1511)\n                at org.apache.coyote.Response.doWrite(Response.java:602)\n                at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:356)\n                at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:846)\n                at org.apache.catalina.connector.OutputBuffer.realWriteChars(OutputBuffer.java:470)\n                at org.apache.catalina.connector.OutputBuffer.flushCharBuffer(OutputBuffer.java:851)\n                at org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:250)\n                at org.apache.catalina.connector.CoyoteWriter.close(CoyoteWriter.java:107)\n\nIs there any chance the same handling for HTTP 1.1 could apply to AJP?",
      "Re-opening for visibility",
      "See bug 66512 for the AJP aspect of this."
    ],
    "creation_ts": "2022-08-02T11:16:29Z",
    "fixes": [
      66196
    ]
  },
  {
    "id": 43668,
    "summary": "ApplicationDispatcher.doForward for non-HTTP request is always NULL",
    "description": "This applies to both 6.x and 5.5x version !!\n\nTomcat6.x\nhttp://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/catalina/core/ApplicationDispatcher.java\n\nTomcat5.5.x\nhttp://svn.apache.org/repos/asf/tomcat/container/tc5.5.x/catalina/src/share/org/apache/catalina/core/ApplicationDispatcher.java\n\nThere is a severe always-NULL case in both T6.x and T5.5x sources if request is\nnon-HTTP forward. processRequest(req, res, state) method should use the original\n\"request\" and \"response\" objects, but it gives \"hrequest\" and \"hresponse\" objects.\n\nprivate void doForward(ServletRequest request, ServletResponse response) {\n   ...continue...\n  // Identify the HTTP-specific request and response objects (if any)\n  HttpServletRequest hrequest = null;\n  if (request instanceof HttpServletRequest)\n     hrequest = (HttpServletRequest) request;\n  HttpServletResponse hresponse = null;\n  if (response instanceof HttpServletResponse)\n     hresponse = (HttpServletResponse) response;\n\n   // Handle a non-HTTP forward by passing the existing request/response\n   if ((hrequest == null) || (hresponse == null)) {\n      processRequest(hrequest,hresponse,state);\n   }\n   ...continue...\n}\n\nCalling program gets a NPE exception when forwarding a request.\njava.lang.NullPointerException at \norg.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:459)",
    "comments": [
      "Created attachment 21017\nPatch against 6.0 trunk to fix this\n\nThis handles the case where the outer most wrapper is a ServletRequestWrapper,\nbut not a HttpServletRequestWrapper.  This further breaks 39417, but that one\nis invalid anyway (according to the spec).",
      "39417: ApplicationDispatcher.unwrapRequest() should not assume servletRequestWrapper\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=39417\n\nWhat do you mean, is it that a bug 39417 is even further away to be fixed?\nI made a quick test and posted a solution I used, a simple is-instanceof check\nand bail out. Fix is posted at the end of 39417 report.",
      "Fixed in the next 6.0 release with the attached patch."
    ],
    "creation_ts": "2007-10-21T13:16:07Z",
    "fixes": [
      43668
    ]
  },
  {
    "id": 55198,
    "summary": "Quote entity in html element attribute evaluated in tagx if attribute contains EL expression",
    "description": "Created attachment 30535\nWar demonstrating the issue\n\nQuote entity in html element attribute evaluated in tagx if attribute contains EL expression \n\nIf your tagx file contains an html element such as\n<a href=\"#\" onclick=\"window.alert(&quot;Hello World!&quot;)\">foobar</a>\nIt renders as\n<a href=\"#\" onclick=\"window.alert(&quot;Hello World!&quot;)\">foobar</a>\n\nIf your tagx file contains an html element such as\n<a href=\"#\" onclick=\"window.alert(&quot;${text}!&quot;)\">foobar</a>\nIt renders as (if text='foobar')\n<a href=\"#\" onclick=\"window.alert(\"foobar\")\">foobar</a>\nMost browsers aren't too happy with this.\n\nI would have expected this to render as\n<a href=\"#\" onclick=\"window.alert(&quot;foobar&quot;)\">foobar</a>\nI browsed through jsp 2.1 spec and couldn't identify anything that explicitly covered this, but I would expect valid xml output from a tagx file.\n\nYou don't see this behaviour if you use a tag file. We need to use tagx files to work around various problems in WebSphere and WebLogic containers.\n\nA test war is attached. It is setup for servlet spec 2.5 and jsp 2.1 --- I am actually using a Tomcat 6 container, but thought I'd test this on the latest release.\n\nThe output I receive from the test war on tomcat 7.0.41:\n\n\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Test the output of tag and tagx containing quote entity in html element attribute</title>\n\t</head>\n\t<body>\n\t\t<p>.tag file gives:</p>\n\t\t\n\n\n\n<ul>\n\t<li><a href=\"#\" onclick=\"window.alert(&quot;Hello World!&quot;)\">Click me to display &quot;Hello World!&quot;</a></li>\n\t<li><a href=\"#\" onclick=\"window.alert(&quot;foobar&quot;)\">Click me to display &quot;foobar&quot;</a></li>\n</ul>\n\n\t\t<p>.tagx file gives:</p>\n\t\t<ul><li><a onclick=\"window.alert(&quot;Hello World!&quot;)\" href=\"#\">Click me to display \"Hello World!\"</a></li><li><a onclick=\"window.alert(\"foobar\")\" href=\"#\">Click me to display \"foobar\"</a></li></ul>\n\t</body>\n</html>",
    "comments": [
      "Fixed in trunk and 7.0.x and will be included in 7.0.43 onwards.\n\nSince you are using 6.0.x, I have moved this to 6.0.x and proposed the fix for back-porting.",
      "(In reply to Mark Thomas from comment #1)\n> Fixed in trunk and 7.0.x and will be included in 7.0.43 onwards.\n> \n> Since you are using 6.0.x, I have moved this to 6.0.x and proposed the fix\n> for back-porting.\n\nThanks Mark.\n\nI can also confirm that I see the same output in 6.0.37, with the final link in the test case rendered as \n\n<a onclick=\"window.alert(\"foobar\")\" href=\"#\">",
      "Please be aware that a contributor spotted that the tagx file provided as part fo the test case is not valid. No elements at all may be present inside a <jsp:text> element. Tomcat 7 & 8 will be updated to enforce this specification requirement.\n\nThis issue, however, remains valid and the fix is not affected.",
      "(In reply to Mark Thomas from comment #3)\n> Please be aware that a contributor spotted that the tagx file provided as\n> part fo the test case is not valid. No elements at all may be present inside\n> a <jsp:text> element. Tomcat 7 & 8 will be updated to enforce this\n> specification requirement.\n> \n\nThanks for the heads up Mark.\n\nI can't see the <jsp:text> element in the clickme.tagx. Is there something that is being converted to a <jsp:text> which ends up with elements inside?",
      "For the record, the change in 7.0.43 for this bug is r1500065\n\nIt changed how EL output is escaped in tag attributes - see bug 55735.\nI think this change in EL escaping was an inadvertent one, as the original issue is about static content. It did not say about escaping of EL output.\n\nAs this issue is an older one, I will comment on the specification here.\n\n\n1. Reading the JSP specification\n\nJSP 2.3 (JSP2.3MR.pdf) chapter JSP.6.3.9 \"Template Content\" says how static\ncontent shall be rendered:\n\nIt says about XML fragments that\n\"The interpretation of such an XML element is to pass its textual representation to the\ncurrent value of out, after the whitespace processing described in Section JSP.6.2.3.\"\n\n\nTesting this feature, I see an odd behaviour. A simple example would be a\nJSPX page like this:\n\n[[[\n<jsp:root version=\"2.0\" xmlns:jsp=\"http://java.sun.com/JSP/Page\">\n<jsp:directive.page contentType=\"text/plain\" />\n<foo bar=\"&lt;HH&gt;\" baz=\"&quot;JJ&quot;\" foo=\"&amp;\">\n&lt;LL&gt;\n</foo>\n</jsp:root>\n]]]\n\n\nI expect it to render &lt;HH&gt;, &quot;JJ&quot;, &amp; and &lt;LL&gt;,\nas that is a textual representation of the above XML, but\nin all 7.0.47, 7.0.42 and 6.0.37 it renders:\n\n foo=\"&\" baz=\"&quot;JJ&quot;\" bar=\"<HH>\" and <LL>\n\nSomehow only the quotes are rendered correctly.\n\n\n2. It would be nice to expand what is written in JSP.6.2.3. to the EL expressions in those XML fragments, so that Tomcat renders well-formed XML,\nbut it is likely that such an interpretation is wrong.\n\nIf I do such expansion, I would say that\n\n- ELs in attributes of tags in XML fragments have to have their text content escaped\n\n- ELs in tag bodies of tags in XML fragments have to have their text content escaped\n\n- ELs in the body of <jsp:text/> elements shall be rendered as is, without escaping.\n\nAs per JSP.6.2.3 <jsp:text/> generates arbitrary content.\n\n- ELs in <![CDATA[...]]> blocks:\n\nThe easy way is to render the content of CDATA blocks as text. In this case the usual escaping rules apply.\n\n(If CDATA were rendered CDATA as CDATA, the usual escaping rules do not apply, but one would have to beware of ']]>' in EL output).\n\n\nIt would be nice to interpret the specification this way and throw away a number of escapeXml calls, but it is likely that such an interpretation is wrong.\n\n\nWith r1500065 the ELs in attributes of tags in XML fragments\nare now escaped automatically.\n\nMy own example is that the code like this in JSPX files\n\n<a href=\"${fn:escapeXml(url)}\">...</a>\n\nnow produces URLs that are escaped twice, with &ampamp;s.\nThis is the issue reported in bug 55735.\n\n\nThis change has not changed how ELs are handled in tag bodies. Only attributes were affected.\n\nLooking at textRotate.jspx in the Tomcat examples web application, it does not expect that ${name} expression were escaped automatically. It explicitly calls escapeXml().",
      "I've updated the back-port proposal to include a fix for the regression identified in bug 55735.\n\nRegarding the \n\n<foo bar=\"&lt;HH&gt;\" baz=\"&quot;JJ&quot;\" foo=\"&amp;\">\n&lt;LL&gt;\n</foo>\n\nissue, I have a fix for that but it strikes me as the sort of thing that could break lots of stuff. I suggest opening a new issue for that against Tomcat 8, fixing it there and seeing what feedback we get before we back-port it.",
      "This has been fixed in 6.0.x and will be included in 6.0.38 onwards.",
      "For reference:\n\n(In reply to Evan Greensmith from comment #0)\n>\n> If your tagx file contains an html element such as\n> <a href=\"#\" onclick=\"window.alert(&quot;Hello World!&quot;)\">foobar</a>\n> It renders as\n> <a href=\"#\" onclick=\"window.alert(&quot;Hello World!&quot;)\">foobar</a>\n> \n\nTechnically, the textual value of the attribute of an xml tag, as returned by XML parser here is [window.alert(\"Hello World!\")].\n\nThe legacy behaviour - in 7.0.42 here is that when printing the tag attributes the double quotes are replaced  (\") -> (&quot;). In the tag next no replacements are performed.\n\nThis behaviour is applied to the double quotes only, but not to other special symbols.\n\nUsing the OP's test.war if I replace the first (non-EL) tag in clickme.tag and clickme.tagx with the following:\n\n<li><a href=\"#\" onclick=\"window.alert(&quot;&lt;&amp;&gt;&#039;Hello World!&quot;)\">Click me to display &quot;&lt;&amp;&gt;&#039;Hello World!&quot;</a></li>\n\nTomcat 7.0.42 renders it as following:\n\n- for clickme.tag:\n\n<li><a href=\"#\" onclick=\"window.alert(&quot;&lt;&amp;&gt;&#039;Hello World!&quot;)\">Click me to display &quot;&lt;&amp;&gt;&#039;Hello World!&quot;</a></li>\n\n- for clickme.tagx:\n\n<li><a onclick=\"window.alert(&quot;<&>'Hello World!&quot;)\" href=\"#\">Click me to display \"<&>'Hello World!\"</a></li>\n\nNote that tag file renders as the source is, tagx file renders the texts as returned by XML parser, only replacing \"->&quot; in tag attribute, but nowhere else.\n\nI am not saying that this is correct. I am just documenting the legacy behaviour.\n\n\nIn the code, the place responsible for s/\"/&quot;/ replacement is\nGenerator$GenerateVisitor.visit(Node.UninterpretedTag n),\n\n    out.print(DOUBLE_QUOTE);\n    out.print(attrs.getValue(i).replace(\"\\\"\", \"&quot;\"));\n    out.print(DOUBLE_QUOTE);\n\nIf attribute value does not contain double quote chars (e.g. xml-escaping has already been applied to it during previous processing), it will be printed as is.\n\n\nFor reference,\nregressions related to an attempt to fix this issue thus far are:\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=56265\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=56029\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=55735"
    ],
    "creation_ts": "2013-07-05T04:32:38Z",
    "fixes": [
      55198
    ]
  },
  {
    "id": 64830,
    "summary": "HTTP2 : GOAWAY sent with Protocol Error and Frame Size Error",
    "description": "Sub-Component - Coyote\n\nOS : Redhat Linux\n\nOverview:\n\nEmbedded Tomcat version 9.0.39 is implemented to transport http/2 packets between 2 systems (h2c connection).\nHttp2 packets of payload size 55KB sent from the client are processed asynchronously .\nThe content-type of request/response is application/json. For few requests Tomcat sends GOAWAY with reason that seems irrelevant .\n\n1)GOAWAY with PROTOCOL ERROR : The content length header value [55294] does not agree with the size of the data received [55295]\nWhere, both the content length header value and the size of the data received is 55295 bytes  \n2)GOAWAY with FRAME_SIZE_ERROR : The payload is [6386210] bytes long but the max frame size is [16384]\nWhere , the payload size is only around 55 KB\nPlease find attached the PCAPs for reference.\n\nWe have tried and reproduced these exceptions with a sample code implementing embedded tomcat version 9.0.39 with payload size of around 55KB . Please find below the steps to reproduce. I have attached the sample code / input JMX file to reproduce the issue. \n \nSteps to Reproduce:\n\nWith JMeter as simulation client, on configuring 700 threads (700 connections) to connect towards Tomcat Server 9.0.39 embedded in our system and on sending 20 requests per second with payload of 55KB (same request with just one json value sent uniquely via the Random number generator)and on letting the test run in an infinite loop , few requests are getting timed out . On analysing the PCAP for the particular request we see that tomcat sends GOAWAY with  PROTOCOL ERROR / FRAME_SIZE_ERROR where the reason seems to be incorrect.\n\nClient:\nJMeter 5.3 with additional HTTP2 sampler.\nNo of threads: 700\nRamp-up period:10 seconds\t\nLoop:Infinite\nPayload size: around 55KB\nConstant Throughput Timer added to limit the tps to 20.\nRandom Variable Generator added to the JSON request to uniquely identify for which request the exception is printed and to map it in the PCAP collected .\nResponse Timeout : 5000 ms\n\nSERVER:\nSample application attached .\nMaxThreads configured in tomcat is 200(all other parameters are the tomcat defaults).\nThe input requests are processed asynchronously with 40 threads.\n\nBuild:\nEmbedded tomcat 9.0.39\n\nResolution/Clarification requested:\nCan you please explain the root cause for this . \n\nThanks in advance.",
    "comments": [
      "Created attachment 37513\nFRAME_SIZE_ERROR PCAP",
      "Created attachment 37514\nPROTOCOL ERROR",
      "Created attachment 37515\nJMX file to reproduce issue",
      "Created attachment 37516\nSample application to reproduce the issue",
      "Any update on this please !",
      "Pinging for updates on BZs is not allowed. This is not the first time you are doing this.",
      "*** Bug 64829 has been marked as a duplicate of this bug. ***",
      "*** Bug 64828 has been marked as a duplicate of this bug. ***",
      "What hardware are you running this on? I've been running the test case locally for 15+ mins and I haven't seen a single error reported. Details are hardware used, memory allocated to Tomcat and JMeter, network between client and server would likely be helpful. If we can't recreate the issue, we can't debug it.",
      "Moving to NEEDINFO as more information about the provided test case is required to reproduce the issue.",
      "Mark ,\nIn production we see the issue reported in this bug and bug 64828 on Linux.\nI had reproduced the issue with the attached source code on my local windows machine (Windows 10 - 64 bit / 16 GB RAM).\nJMeter version :5.3 with Xmx:5g\nEmbedded tomcat application :Default Xmx\n\nThanks in advance !!",
      "Thanks. I can try testing on a similar spec machine (although it will be a VM).\n\nHow long does the test case have to be running before you start to see errors?",
      "Thanks Mark .\nWithin 15 to 20 minutes of running the case I was able to see the errors , Please let us know if you need more information .",
      "Success. This was trivial to recreate on Windows. Must be a timing thing. Fix on the way.",
      "Fixed in:\n- 10.0.x for 10.0.0-M10 onwards\n- 9.0.x for 9.0.40 onwards\n- 8.5.x for 8.5.60 onwards",
      "Thank you soo much Mark for the fix ..\n\nOne clarification please, Were you able to reproduce and fix the payload related issue reported in bug 64828 as well ?\n\nThanks in advance !",
      "I didn't see any payload errors reported. The other errors occurred after a few seconds on Windows so I fixed those then ran a longer test (20 mins) where no errors where observed.\n\nI don't immediately see how the issues I fixed could led to the payload errors described. It would be informative if you were to test the latest 9.0.x code and report back.",
      "Hi Mark , \nI tried running the same test program with the latest tomcat 9.0.41 jars on windows machine .\n\n1.)I am still able to see the incomplete payload related exceptions and GOAWAY (PROTOCOL_ERROR and FRAME_SIZE_ERROR) .\n\nThe test (payload size 55KB) ran for about 8 minutes where few requests had timed-out (could see in JMeter GUI). On filtering the requests in the PCAP captured with the unique identifier , I was able to find the trace for 3 requests with the below reason for GOAWAY (GOAWAY.pcap attached) \n *) FRAME_SIZE_ERROR:The payload is [2128653] bytes long but the maximum frame size is [16384]\n *) PROTOCOL_ERROR  :Connection [7004], Stream [1], The content length header value [56,465] does not agree with the size of the data received [56,466]\n *) PROTOCOL_ERROR  :Connection [7092], Stream [1], The content length header value [56,466] does not agree with the size of the data received [56,466]\n\n\nSpecs:\nWindows 10 \nProcessor:Intel(R) Core(TM) i5-8350U CPU @ 1.70GHz 1.90GHz\nRAM:16 GB\nSystem Type : 64 bit\n\nPlease let me know in case of further inputs.\nThanks in advance!",
      "Created attachment 37600\nPCAP with Goaway",
      "Looks like there is still an issue related to the HPACK decoder. I can see a debug log where the decoder reports a content-length that is not consistent with the value shown in the Wireshark trace. Still trying to figure out how this is happening.",
      "Found it. It wasn't in the HPACK decoder at all.\n\nI've applied a patch and I can no longer get the test case to fail. Could you retest with a new 9.0.x build?",
      "I am going to assume that the recent commit fixed this. If this is not the case please do re-open but I think we'd need a new test case in that case as I can no longer trigger any errors with this one."
    ],
    "creation_ts": "2020-10-20T06:05:00Z",
    "fixes": [
      64830
    ]
  },
  {
    "id": 66277,
    "summary": "The taglib file cannot be found with version 9.0.67",
    "description": "Created attachment 38393\ncodes\n\nThe file cannot be found with version 9.0.67, but it is possible to find it with version 9.0.65,Runs in a docker environment.It is normal to use in version 9.0.65",
    "comments": [
      "Fixed in:\n- 10.1.x for 10.1.1 onwards\n- 10.0.x for 10.0.27 onwards\n-  9.0.x for  9.0.68 onwards\n-  8.5.x for  8.5.83 onwards",
      "*** Bug 66289 has been marked as a duplicate of this bug. ***",
      "*** Bug 66292 has been marked as a duplicate of this bug. ***",
      "*** Bug 66295 has been marked as a duplicate of this bug. ***",
      "*** Bug 66296 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2022-09-27T06:49:41Z",
    "fixes": [
      66277
    ]
  },
  {
    "id": 69374,
    "summary": "Properly separate between table header and body in DefaultServlet's listing",
    "description": "We should use <thead> and <tbody> to separate information.",
    "comments": [
      "Created attachment 39893\nPatch\n\nHere is a trivial patch.",
      "Fixed in:\n- main for 12.0.0-M1 and onwards\n- 11.0.x for 11.0.1 and onwards\n- 10.1.x for 10.1.32 and onwards\n- 9.0.x for 9.0.97 and onwards"
    ],
    "creation_ts": "2024-10-03T19:11:00Z",
    "fixes": [
      69374
    ]
  },
  {
    "id": 69398,
    "summary": "Excess object allocation in PageContextImpl",
    "description": "The constructor org.apache.jasper.runtime.PageContextImpl includes this line:\n\nthis.outs = new BodyContentImpl[0];\n\nHeap analysis of our large, JSP-heavy app shows large numbers of BodyContentImpl[], with sizes ranked in order of frequency:\n\n[0]\n[1]\n[2]\n[3]\n[4]\n\nThere are two ways to address this:\n\n1. Define \"private static final EMPTY_ARRAY = new BodyContentImpl[0]\" and assign this value in the constructor\n2. Change the allocation to BodyContentImpl[1] or [2], thus eliminating [0] and copies\n\nMy testing shows that change #1 eliminates the [0] arrays and saves < 5% of clock time; this is definitely about heap pollution rather than direct runtime.\n\nOption #2 is harder to predict since it potentially adds overhead when the [0] is sufficient.",
    "comments": [
      "Fixed in:\n- 11.0.x for 11.0.1 onwards\n- 10.1.x for 10.1.32 onwards\n-  9.0.x for  9.0.97 onwards\n\nThanks for the suggestion."
    ],
    "creation_ts": "2024-10-15T14:48:02Z",
    "fixes": [
      69398
    ]
  },
  {
    "id": 69210,
    "summary": "debug message no longer appearing when Cors filter failure is detected",
    "description": "encountering CORS issue in an application with access log returning 403 http code, i noticed the tomcat will no longer output debugging message to confirm Cors filter issue.\n\nlooking at the code, it seems the issue in method, org.apache.catalina.filters.CorsFilter.handleInvalidCORS (), appeared since commit 'Missing strings mostly' (https://github.com/apache/tomcat/commit/ee246168dacc262f5ca87718ab913b48499194e5): we are no longer displaying message in the log.\n\n@ line 353, change was:\nsm.getString(\"corsFilter.invalidRequest\", origin, method, accessControlRequestHeaders);\n\nit might rather be:\n\nlog.debug( sm.getString(\"corsFilter.invalidRequest\", origin, method, accessControlRequestHeaders) );",
    "comments": [
      "Sorry for the trouble, it's an obvious error. The fix will be in 11.0.0-M23, 10.1.27 and 9.0.92."
    ],
    "creation_ts": "2024-07-20T13:32:53Z",
    "fixes": [
      69210
    ]
  },
  {
    "id": 56882,
    "summary": "\"HTTP Status 503 - Servlet jsp is currently unavailable\" after Context reload",
    "description": "After a Context reload with Tomcat Manager all JSP calls with this.getServletContext().getRequestDispatcher(\"/jspname.jsp\").forward(request, response); create a \"HTTP Status 503 - Servlet jsp is currently unavailable\" response. With Tomcat 8.0.9 and Tomcat 7.0.55 it works.",
    "comments": [
      "Ack. Reproducible with 8.0.11 using the examples webapp.\n\nSteps:\n1. Configure a user with manager-gui role in conf/tomcat-users.xml\n2. Start Tomcat\n3. Access \"Include\" and \"Forward\" JSP examples,\nin two different tabs in Firefox\nhttp://localhost:8080/examples/jsp/include/include.jsp\nhttp://localhost:8080/examples/jsp/forward/forward.jsp\n\n4. Go to Tomcat Manager web application and click \"Reload\" button on the examples \nwebapp.\n\n5. Reload (F5 in Firefox) the above example pages.\nExpected: The same output as on step 3 though with diifferent time stamps.\nActual:\n\ninclude.jsp gives:\n[[[\nIn place evaluation of another JSP which gives you the current time: 1408802860131\nby including the output of another JSP: :-) \n]]]\nThe second sentence had to contain a timestamp value. It is missing.\n\nforward.jsp gives:\n[[[\nHTTP Status 503 - Servlet jsp is currently unavailable\n]]]\n\nThere are no error messages in the logs.\nAccess logs have\n127.0.0.1 - - [23/Aug/2014:18:07:37 +0400] \"GET /examples/jsp/forward/forward.jsp HTTP/1.1\" 503 1073\n127.0.0.1 - - [23/Aug/2014:18:07:40 +0400] \"GET /examples/jsp/include/include.jsp HTTP/1.1\" 200 299",
      "(In reply to Konstantin Kolinko from comment #1)\n> Ack. Reproducible with 8.0.11 using the examples webapp.\n> \n> Steps:\n> 1. Configure a user with manager-gui role in conf/tomcat-users.xml\n\nAn alternative way to reproduce:\nSkip step 1. and replace step 4. with:\n- Touch webapps\\examples\\WEB-INF\\web.xml \n- Wait several seconds, until a success message is logged on the console\nReloading Context with name [/examples] is completed\n\n> 2. Start Tomcat\n> 3. Access \"Include\" and \"Forward\" JSP examples,\n> in two different tabs in Firefox\n> http://localhost:8080/examples/jsp/include/include.jsp\n> http://localhost:8080/examples/jsp/forward/forward.jsp\n> \n> 4. Go to Tomcat Manager web application and click \"Reload\" button on the\n> examples \n> webapp.\n> \n> 5. Reload (F5 in Firefox) the above example pages.\n> Expected: The same output as on step 3 though with diifferent time stamps.\n> Actual:\n> \n> include.jsp gives:\n> [[[\n> In place evaluation of another JSP which gives you the current time:\n> 1408802860131\n> by including the output of another JSP: :-) \n> ]]]\n> The second sentence had to contain a timestamp value. It is missing.\n\nThe second sentence is missing more than just the timestamp.\nThe first part of it is missing as well. It had to be\n[[[\nTo get the current time in ms by including the output of another JSP: 1408803609298 :-) \n]]]\n\n\nThe source code of include.jsp page is essentially the following:\n[[[\n<%@ page buffer=\"5kb\" autoFlush=\"false\" %>\n<p>In place evaluation of another JSP which gives you the current time:\n<%@ include file=\"foo.jsp\" %>\n<p> <jsp:include page=\"foo.html\" flush=\"true\"/> by including the output of another JSP:\n<jsp:include page=\"foo.jsp\" flush=\"true\"/>\n:-)\n]]]\n\nThus both <jsp:include page=\"foo.html\"> and <jsp:include page=\"foo.jsp\"> are failing.\n\n\nI wonder why it silently skips the failed pages. I expected it to produce an exception after the first failed include and abort the response.\n\nThe generated Java code for include.jsp does\n[[[\n      out.write(\"<p> \");\n      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, \"foo.html\", out, true);\n      out.write(\" by including the output of another JSP:\\r\\n\");\n]]]\nand the JspRuntimeLibrary.include() method just calls RequestDispatcher.include(). Neither of them does any try/catch wrapping.\n\nWhy isn't javax.servlet.UnavailableException being thrown by RequestDispatcher?",
      "Created attachment 31938\n2014-08-23_tc8_56882_v1.patch\n\nPatch that fixes the issue.\nJust a fix, no test case included.\n\nIt is regression from Mapper rework. The new ContextVersion object was not registered in contextObjectToContextVersionMap map.\n\n\nThe contextObjectToContextVersionMap map is specific to Tomcat 8 mapper implementation. In Tomcat 7 there are separate Mapper instances in Service and Context, and this map is a replacement for context-specific Mapper in Tomcat 8. It is used to implement mapping for context-scoped rd.include() and rd.forward() calls.\n\nThus this bug is absent in 7.0.x, but it'd be better to add a testcase there as well.",
      "(In reply to Konstantin Kolinko from comment #2)\n> > Actual:\n> > \n> > include.jsp gives:\n> > [[[\n> > In place evaluation of another JSP which gives you the current time:\n> > 1408802860131\n> > by including the output of another JSP: :-) \n> > ]]]\n> > The second sentence had to contain a timestamp value. It is missing.\n> \n> The second sentence is missing more than just the timestamp.\n> The first part of it is missing as well.\n>\n> (...)\n> \n> I wonder why it silently skips the failed pages. I expected it to produce an\n> exception after the first failed include and abort the response.\n> \n\nApparently there is some design feature for included pages.\nI do not plan to discuss it here. Just writing down the findings.\n\nCh.9.3 The Include Method (servlet-3_1-final.pdf), says\n\"The target servlet of the include method has access to all aspects of the request object, but its use of the response object is more limited.\" <...> \"It\ncannot set headers or call any method that affects the headers of the response, with the exception of the HttpServletRequest.getSession() and\nHttpServletRequest.getSession(boolean) methods.\"\n\nTechnically, processing of unavailable servlets here in done in o.a.c.core.ApplicationDispatcher.invoke() as\n1. Log a warning with wrapper.getLogger().warn(...)\n2. hresponse.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE, ...)\n\n\nThe warning is not logged, because logger.getHandlers() returns an empty list for all loggers in hierarchy chain. I do not know why that happens, but it might be expected for a stopped web application. (The request was mapped to a stopped ContextVersion due to this mapper bug).\n\nThe HttpServletResponse.sendError() call is ignored. (o.a.c.connector.Response#sendError(...)).",
      "Fixed in trunk with r1620326 and will be in 8.0.12.\n\nI will work on backporting the tests to Tomcat 7.",
      "The test was backported to Tomcat 7 in r1620577 (to be in 7.0.56).\nIt passes successfully. There is no such bug in Tomcat 7."
    ],
    "creation_ts": "2014-08-22T21:14:41Z",
    "fixes": [
      56882
    ]
  },
  {
    "id": 64166,
    "summary": "RequestDumperFilter duplicates headers",
    "description": "Created attachment 37031\nPatch to correct logging of response headers\n\nThe RequestDumper attempts to log the outgoing headers by first obtaining the header names, then for each header name it outputs the values for that header. The problem is that the header names are not unique, so if there are two cookies, there are two Set-Cookie headers. The dumper uses the getHeaders method, which returns all values for the named header. Since it sees the Set-Cookie header twice, calling getHeaders returns both values, so it logs both values for each occurrence of the Set-Cookie header, so we see each cookie twice in the request log.\n\nAttached patch ensures headers are unique before logging.",
    "comments": [
      "I'm thinking that the return value for getHeaderNames() should be de-duplicated. The only scenarios I can think of where that would cause issues, the client is doing something unreasonable.",
      "Fixed in:\n- master for 10.0.0-M2 onwards\n- 9.0.x for 9.0.32 onwards\n- 8.5.x for 8.5.52 onwards\n- 7.0.x for 7.0.101 onwards"
    ],
    "creation_ts": "2020-02-20T23:18:09Z",
    "fixes": [
      64166
    ]
  },
  {
    "id": 62988,
    "summary": "LoadBalancerDrainingValve only works with uncommon webapp configuration",
    "description": "Created attachment 36298\nPatch for LoadBalancerDrainingValve (see bug description)\n\nAfter configuring LoadBalancerDrainingValve in order to force redirects when mod_jk would route to a DISABLED node we encountered the following bugs:\n\n1)\nNullPointerException when the\n\n<session-config>\n  <cookie-config>\n    <name>JSESSIONID</name>\n  </cookie-config>\n</session-config>\n\n<name> element would not be present in web.xml. It cannot be expected and is in fact highly unlikely that web applications override the default value \"JSESSIONID\" in this element.\n\n2)\nThe removal of a session cookie before redirection does only work when the Context attribute sessionCookiePathUsesTrailingSlash has been set to true, which is also a rather uncommon configuration setting. Failing to remove the session cookie leads to redirection loop. The bug results from the fact that the respective code block is wrongly parenthesized, and can easily be fixed by moving the code block out of the surrounding if statement.\n\n3)\nDetermination of the session cookie path is incomplete.\n\nI added a patch (trunk) with fixes for these bugs, which also addresses the following minor issues:\n\n- Remove obsolete get methods for configuration parameters\n- Remove Javadoc which states that a request parameter will be added to redirect URIs, which is not the case\n- Add missing parentheses",
    "comments": [
      "Thanks for the report and the patch.\n\nWorking my way through the patch I agree with nearly all of these changes with a couple of minor observations\n- The getters are not obsolete. They are used by JMX so they need to stay\n- I did the necessary refactoring to remove the code duplication.\n\nFixed in:\n- trunk for 9.0.14 onwards\n- 8.5.x for 8.5.36 onwards"
    ],
    "creation_ts": "2018-12-06T15:18:23Z",
    "fixes": [
      62988
    ]
  },
  {
    "id": 37509,
    "summary": "ClassLoaderLogManager remove '\\n' at the end of logging.properties values",
    "description": "The method ClassLoaderLogManager.replace(String) that is in charge of replacing\nsystem properties at the begining of the property also modify the end of the\nproperty due to a call to trim.\n\nThis implies that Logger/Handler/Formatter that relies on properties endding\nwith some spases (including '\\n') will have a different behaviour with JDK\nLogManger and tomcat ClassLoaderLogManager\n\na modified verstion of this method could be:\n\n    protected String replace(String str) {\n// start modification    \t\n//        String result = str.trim();  // commented out\n    \t\n    \tint len = str.length();\n    \tint st = 0;\n    \twhile ((st < len) && (str.charAt(st) <= ' ')) {\n    \t    st++;\n    \t}\n    \tString result = (st > 0) ? str.substring(st) : str;\n// end modification        \n        \n        if (result.startsWith(\"${\")) {\n            int pos = result.indexOf('}');\n            if (pos != -1) {\n                String propName = result.substring(2, pos);\n                String replacement = System.getProperty(propName);\n                if (replacement != null) {\n                    result = replacement + result.substring(pos + 1);\n                }\n            }\n        }\n        return result;\n    }",
    "comments": [
      "I'm not sure our goal is to provide identical behavior to Sun's log manager. \nRelying on whitespace is fragile anyways.  I won't close this item, in case\nother people have different opinions, but it doesn't seem worthwhile to me.",
      "(In reply to comment #1) ...Relying on whitespace is fragile anyways...\n\nEven if whitespace are \"fragile\", tomcat shall handle properties values\naccording to properties file specification or not use a properties file.\n\nThe goal is to addapt LogManager to the container environnement and to offer\nsome new facilities. But, in my opinion, logging utilities (Handler, Formatter)\ndevlopped for J2SE shall usable in a webapp environment without re-writting\ntheir properties handling code.",
      "Ok, you have your fix and you can use it, rejoice :) Tomcat will not integrate\nyour fix, however.",
      "The current behavior does not follow the file properties specification see\nhttp://java.sun.com/j2se/1.5.0/docs/api/java/util/Properties.html#load(java.io.InputStream)\n\nbut claims it does.\n\nin org.apache.juli.ClassLoaderLogManager \n...\n    /**\n     * Get the value of the specified property in the classloader local\n     * configuration.\n     * \n     * @param name The property name\n     */    \n    public String getProperty(String name) {\n...\n\nThis requires a correction either in the documentation, to explain the specific\nbehavior, or in the code to follow file properties specification.\n\nI fully agree that this is neither critical nor urgent. Priority or resource\nmight impose to postpone the fix. Or compatibility with the buggy behavior might\nbe preferred to a code fix. That's no trouble, but transition to \"Resolved won't\nfix\" when the specification contract is broken cannot be a good practice.",
      "Fixed in SVN (not with the above patch) and will be included in 5.5.21 onwards."
    ],
    "creation_ts": "2005-11-15T18:22:38Z",
    "fixes": [
      37509
    ]
  },
  {
    "id": 63765,
    "summary": "NIO2 Connector with OpenSSL 1.1.1 hangs with TLSv1.3",
    "description": "Created attachment 36793\ncurl -v output from the failed request and a successful one immediately after\n\nThe first request to Tomcat after a restart always hangs (on two of my machines) and fails with an \"Empty reply from server\" after one minute when using NIO2 with JSSE+OpenSSL limited to the TLSv1.3 protocol. If you wait for the request to end, or terminate it, then the subsequent requests succeed without issue. I've tried to trace it down, but I don't see any activity in Tomcat to hint at where this would be :( From my curl output, it's after the handshake is done.\n\nMy environment is Fedora 30 laptop using a local build of Tomcat master (9.0.27-dev), tomcat-native (1.2.23-dev), APR 1.6.5, and OpenSSL 1.1.1.c.\n\nTo reproduce:\n\n1) Configure your Connector\n\n<Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11Nio2Protocol\" maxThreads=\"150\" SSLEnabled=\"true\" >\n    <SSLHostConfig protocols=\"TLSv1.3\">\n        <Certificate certificateKeyFile=\"conf/localhost.server.key.pem\"\n                     certificateFile=\"conf/localhost.server.cert.pem\"\n                     certificateKeyPassword=\"changeit\"\n                     certificateChainFile=\"conf/ca-chain.cert.pem\"\n                     type=\"RSA\" />\n    </SSLHostConfig>\n</Connector>\n\n2) Start tomcat\n3) Initiate a request with curl and observe the one minute delay and empty response\n\ncurl --insecure -v https://localhost:8443",
    "comments": [
      "This looked like the usual not-unwrapping-enough \"IO\" issue, so changing the initial value of unwrapBeforeRead to true in SecureNio2Channel.reset avoids it. Not sure if it is 100% safe (although it looks rather similar to NIO with its non blocking read returning 0).\nI cannot reproduce this that reliably personally, it may be only visible on localhost.",
      "> I cannot reproduce this that reliably personally, it may be only visible on localhost.\n\nWeird. I can reproduce this between two machines as well, so it doesn't seem to be a lo only issue.",
      "I can also reproduce on SLES 12 and RHEL 7 but not on Solaris.\n\nFor me it does not happen with a real remote connection, but always with local ones and with connections from another virtual guest on the same host system, so specifics of the IP stack might be relevant.\n\nI am using tcnative 1.2.23 build against APR 1.7.0 and OpenSSL 1.1.1d.\n\nMy curl is 7.66.0 also build against OpenSSL 1.1.1d.\n\nJava is 1.8.0, also observable with Java 11.\n\nTC is TC9 git 6a173978c5865421192578da21ec8f418e5a3da4 (2019-09-19).\n\nSome debug log lines:\n\nEnd of startup:\n\n24-Sep-2019 13:48:29.200 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in [2,003] milliseconds\n\nStart of request:\n\n24-Sep-2019 13:49:09.410 FINE [https-openssl-nio2-8443-exec-3] org.apache.tomcat.util.threads.LimitLatch.countUpOrAwait Counting up[https-openssl-nio2-8443-exec-3] latch=1\n24-Sep-2019 13:49:09.436 FINE [https-openssl-nio2-8443-exec-2] org.apache.tomcat.util.net.SecureNio2Channel.processSNI The SNI host name extracted for connection [sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:50367]] was [localhost]\n24-Sep-2019 13:49:09.457 FINE [https-openssl-nio2-8443-exec-4] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Processing socket [org.apache.tomcat.util.net.SecureNio2Channel@76110ba6:sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:50367]] with status [OPEN_READ]\n24-Sep-2019 13:49:09.457 FINE [https-openssl-nio2-8443-exec-4] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Found processor [null] for socket [org.apache.tomcat.util.net.SecureNio2Channel@76110ba6:sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:50367]]\n24-Sep-2019 13:49:09.458 FINE [https-openssl-nio2-8443-exec-4] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Popped processor [null] from cache\n24-Sep-2019 13:49:09.493 FINE [https-openssl-nio2-8443-exec-4] org.apache.coyote.AbstractProtocol$ConnectionHandler.register Register Catalina:type=RequestProcessor,worker=\"https-openssl-nio2-8443\",name=HttpRequest1\n24-Sep-2019 13:49:09.497 FINE [https-openssl-nio2-8443-exec-4] org.apache.tomcat.util.net.SocketWrapperBase.populateReadBuffer Socket: [org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper@4ed079d9:org.apache.tomcat.util.net.SecureNio2Channel@76110ba6:sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:50367]], Read from buffer: [0]\n24-Sep-2019 13:49:09.499 FINE [https-openssl-nio2-8443-exec-4] org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.read Socket: [org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper@4ed079d9:org.apache.tomcat.util.net.SecureNio2Channel@76110ba6:sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:50367]], Read into buffer: [0]\n24-Sep-2019 13:49:09.499 FINE [https-openssl-nio2-8443-exec-4] org.apache.coyote.AbstractProcessorLight.process Socket: [org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper@4ed079d9:org.apache.tomcat.util.net.SecureNio2Channel@76110ba6:sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:50367]], Status in: [OPEN_READ], State out: [OPEN]\n24-Sep-2019 13:49:09.500 FINE [https-openssl-nio2-8443-exec-4] org.apache.coyote.AbstractProtocol$ConnectionHandler.release Pushed Processor [org.apache.coyote.http11.Http11Processor@20d73a43]\n\nthen the hang occurs. After a minute, curl gets \"empty reply from server\" and the logs show:\n\n24-Sep-2019 13:50:09.501 FINE [https-openssl-nio2-8443-exec-6] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Processing socket [org.apache.tomcat.util.net.SecureNio2Channel@76110ba6:sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:50367]] with status [ERROR]\n24-Sep-2019 13:50:09.502 FINE [https-openssl-nio2-8443-exec-6] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Found processor [null] for socket [org.apache.tomcat.util.net.SecureNio2Channel@76110ba6:sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:50367]]\n24-Sep-2019 13:50:09.502 FINE [https-openssl-nio2-8443-exec-6] org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.doClose Calling [org.apache.tomcat.util.net.Nio2Endpoint@6d79b7f7].closeSocket([org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper@4ed079d9:org.apache.tomcat.util.net.SecureNio2Channel@76110ba6:sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:50367]])\n        java.lang.Exception\n                at org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.doClose(Nio2Endpoint.java:915)\n                at org.apache.tomcat.util.net.SocketWrapperBase.close(SocketWrapperBase.java:394)\n                at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.doRun(Nio2Endpoint.java:1682)\n                at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n                at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n                at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                at java.lang.Thread.run(Thread.java:748)\n24-Sep-2019 13:50:09.502 FINE [https-openssl-nio2-8443-exec-6] org.apache.tomcat.util.threads.LimitLatch.countDown Counting down[https-openssl-nio2-8443-exec-6] latch=1\n\nRegards,\n\nRainer",
      "For comparison the Nio (not NIO2) log snippet where the request works:\n\n24-Sep-2019 13:54:40.068 FINE [https-openssl-nio-8443-Acceptor] org.apache.tomcat.util.threads.LimitLatch.countUpOrAwait Counting up[https-openssl-nio-8443-Acceptor] latch=1\n24-Sep-2019 13:54:40.076 FINE [https-openssl-nio-8443-exec-1] org.apache.tomcat.util.net.SecureNioChannel.processSNI The SNI host name extracted for connection [java.nio.channels.SocketChannel[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:51197]] was [localhost]\n24-Sep-2019 13:54:40.094 FINE [https-openssl-nio-8443-exec-3] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Processing socket [org.apache.tomcat.util.net.SecureNioChannel@39172781:java.nio.channels.SocketChannel[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:51197]] with status [OPEN_READ]\n24-Sep-2019 13:54:40.095 FINE [https-openssl-nio-8443-exec-3] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Found processor [null] for socket [org.apache.tomcat.util.net.SecureNioChannel@39172781:java.nio.channels.SocketChannel[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:51197]]\n24-Sep-2019 13:54:40.095 FINE [https-openssl-nio-8443-exec-3] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Popped processor [null] from cache\n24-Sep-2019 13:54:40.132 FINE [https-openssl-nio-8443-exec-3] org.apache.coyote.AbstractProtocol$ConnectionHandler.register Register Catalina:type=RequestProcessor,worker=\"https-openssl-nio-8443\",name=HttpRequest1\n24-Sep-2019 13:54:40.135 FINE [https-openssl-nio-8443-exec-3] org.apache.tomcat.util.net.SocketWrapperBase.populateReadBuffer Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@6c99b5c8:org.apache.tomcat.util.net.SecureNioChannel@39172781:java.nio.channels.SocketChannel[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:51197]], Read from buffer: [0]\n\nLooks the same until here, but now Nio does:\n\n24-Sep-2019 13:54:40.136 FINE [https-openssl-nio-8443-exec-3] org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.read Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@6c99b5c8:org.apache.tomcat.util.net.SecureNioChannel@39172781:java.nio.channels.SocketChannel[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:51197]], Read direct from socket: [78]\n24-Sep-2019 13:54:40.136 FINE [https-openssl-nio-8443-exec-3] org.apache.coyote.http11.Http11InputBuffer.parseRequestLine Received [GET / HTTP/1.1\nHost: localhost:8443\nUser-Agent: curl/7.66.0\nAccept: */*\n\n]\n24-Sep-2019 13:54:40.161 FINE [https-openssl-nio-8443-exec-3] org.apache.tomcat.util.http.Parameters.setQueryStringCharset Set query string encoding to UTF-8\n24-Sep-2019 13:54:40.375 FINE [https-openssl-nio-8443-exec-3] org.apache.tomcat.util.net.SocketWrapperBase.populateReadBuffer Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@6c99b5c8:org.apache.tomcat.util.net.SecureNioChannel@39172781:java.nio.channels.SocketChannel[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:51197]], Read from buffer: [0]\n24-Sep-2019 13:54:40.376 FINE [https-openssl-nio-8443-exec-3] org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.read Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@6c99b5c8:org.apache.tomcat.util.net.SecureNioChannel@39172781:java.nio.channels.SocketChannel[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:51197]], Read direct from socket: [0]\n24-Sep-2019 13:54:40.377 FINE [https-openssl-nio-8443-exec-3] org.apache.coyote.AbstractProcessorLight.process Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@6c99b5c8:org.apache.tomcat.util.net.SecureNioChannel@39172781:java.nio.channels.SocketChannel[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:51197]], Status in: [OPEN_READ], State out: [OPEN]\n\n...",
      "And here Nio2 using TLS 1.2:\n\n...\n24-Sep-2019 15:16:55.232 FINE [https-openssl-nio2-8443-exec-4] org.apache.tomcat.util.net.SocketWrapperBase.populateReadBuffer Socket: [org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper@281c779a:org.apache.tomcat.util.net.SecureNio2Channel@1f564c66:sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:19684]], Read from buffer: [0]\n\nbut now\n\n24-Sep-2019 15:16:55.236 FINE [https-openssl-nio2-8443-exec-4] org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2.completed Socket: [org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper@281c779a:org.apache.tomcat.util.net.SecureNio2Channel@1f564c66:sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:19684]], Interest: [false]\n24-Sep-2019 15:16:55.237 FINE [https-openssl-nio2-8443-exec-4] org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.read Socket: [org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper@281c779a:org.apache.tomcat.util.net.SecureNio2Channel@1f564c66:sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:19684]], Read into buffer: [78]\n24-Sep-2019 15:16:55.237 FINE [https-openssl-nio2-8443-exec-4] org.apache.tomcat.util.net.SocketWrapperBase.populateReadBuffer Socket: [org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper@281c779a:org.apache.tomcat.util.net.SecureNio2Channel@1f564c66:sun.nio.ch.UnixAsynchronousSocketChannelImpl[connected local=/0:0:0:0:0:0:0:1:8443 remote=/0:0:0:0:0:0:0:1:19684]], Read from buffer: [78]",
      "(In reply to Remy Maucherat from comment #1)\n> This looked like the usual not-unwrapping-enough \"IO\" issue, so changing the\n> initial value of unwrapBeforeRead to true in SecureNio2Channel.reset avoids\n> it. Not sure if it is 100% safe (although it looks rather similar to NIO\n> with its non blocking read returning 0).\n> I cannot reproduce this that reliably personally, it may be only visible on\n> localhost.\n\nAt least it fixes the problem for me:\n\ndiff --git a/java/org/apache/tomcat/util/net/SecureNio2Channel.java b/java/org/apache/tomcat/util/net/SecureNio2Channel.java\nindex 9e5ab07ea0..da899b26aa 100644\n--- a/java/org/apache/tomcat/util/net/SecureNio2Channel.java\n+++ b/java/org/apache/tomcat/util/net/SecureNio2Channel.java\n@@ -132,6 +132,7 @@ public class SecureNio2Channel extends Nio2Channel  {\n         handshakeComplete = false;\n         closed = false;\n         closing = false;\n+        unwrapBeforeRead = true;\n         netInBuffer.clear();\n     }\n\nCan't say whether it is safe though.",
      "(In reply to Rainer Jung from comment #6)\n> Can't say whether it is safe though.\n\nIt likely sounds safe to unwrap first (it would do an underflow and cause a read) reading some previous comment:\nhttps://github.com/apache/tomcat/commit/3f3dfc63e12e816d68f1a2e21e80d77513e2a2d4\n\nAt least I am not getting any test issues so it's worth trying ...",
      "The fix will be in 9.0.27 and 8.5.47."
    ],
    "creation_ts": "2019-09-23T18:03:41Z",
    "fixes": [
      63765
    ]
  },
  {
    "id": 69399,
    "summary": "Tag.release() called between reuses",
    "description": "Before fix (?) for bug 69333 (https://github.com/apache/tomcat/commit/4e16d8e30d2215ca9680edfa29feeaef5e26e91f#diff-bfcdd8b656071a9d6eb18bf8414b7daae9d5ab6243adaba16dbcefb808f0487f), JspRuntimeLibrary.releaseTag was called IFF pooling was disabled (and also when pooling was enabled but TagHandlerPool saturated to be precise). It was _not_ called when ${tagHandlerVar}._reused was set to true but _was_ called when polling was disabled. Now it is the exact opposite: it is called when polling is enabled and not called when it is disabled. Something seems to be wrong.\n\nAccording to https://docs.oracle.com/javaee/7/api/javax/servlet/jsp/tagext/Tag.html:\n\"The page compiler guarantees that release() will be invoked on the Tag handler before the handler is released to the GC.\"\n\nMaybe this fix was supposed to produce something like\n\nif (usePooling(n)) {\n    // Print tag reuse\n    out.printin(n.getTagHandlerPoolName());\n    out.print(\".reuse(\");\n    out.print(tagHandlerVar);\n    out.println(\");\");\n} else {\n    // Clean-up\n    out.printin(\"org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(\");\n    out.print(tagHandlerVar);\n    out.println(\", _jsp_getInstanceManager());\");\n}\n\ninstead of\n\nif (usePooling(n)) {\n    // Print tag reuse\n    out.printin(n.getTagHandlerPoolName());\n    out.print(\".reuse(\");\n    out.print(tagHandlerVar);\n    out.println(\");\");\n\n    // Clean-up\n    out.printin(\"org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(\");\n    out.print(tagHandlerVar);\n    out.println(\", _jsp_getInstanceManager());\");\n}\n\n?\n\nWe've encountered this because some of the tags we use do setup some state in constructor and clean that up in release(). Tag reuse is then obviously impossible, as it's state is irreversibly broken.\n\nPlease let me know if I can help (including PR).",
    "comments": [
      "I'd like to add that this affects 10.1.31 and 11.0.0 too.\n\nAs a workaround, one may set enablePooling to false as described in https://tomcat.apache.org/tomcat-9.0-doc/jasper-howto.html#Configuration.",
      "It seems correct. Looking back at BZ 69333 there was some confusion going on in the initial report, which probably led to the issue (if reuse was false, then the tag was released).",
      "The fix will be in 11.0.1, 10.1.32 and 9.0.97. Thanks for the patch.",
      "Wow, that was quick! Thanks for the fix.",
      "Hello,\ni have a similar problem. Can you please check if my bug is also fixed by this fix or if i should open a new bug report.\n\nIt's not only that release() is called after doEndTag sometimes release() is executed after doStartTag of another thread.\n\nThis means that the errors do not always occure but only sometimes and are therefore very difficult to find.\n\nIn my case thread 79 throws an nullpointer exception\n\nHistory of Tag usage:\n(84,74,... thread id)\n\norg.apache.struts2.views.jsp.IfTag@739e8775 84 dostart entering\norg.apache.struts2.views.jsp.IfTag@739e8775 84 dostart exiting\norg.apache.struts2.views.jsp.IfTag@739e8775 84 doend entering\norg.apache.struts2.views.jsp.IfTag@739e8775 84 doend exiting\norg.apache.struts2.views.jsp.IfTag@739e8775 84 release\norg.apache.struts2.views.jsp.IfTag@739e8775 74 dostart entering\norg.apache.struts2.views.jsp.IfTag@739e8775 74 dostart exiting\norg.apache.struts2.views.jsp.IfTag@739e8775 74 doend entering\norg.apache.struts2.views.jsp.IfTag@739e8775 74 doend exiting\norg.apache.struts2.views.jsp.IfTag@739e8775 74 release\norg.apache.struts2.views.jsp.IfTag@739e8775 75 dostart entering\norg.apache.struts2.views.jsp.IfTag@739e8775 75 dostart exiting\norg.apache.struts2.views.jsp.IfTag@739e8775 75 doend entering\norg.apache.struts2.views.jsp.IfTag@739e8775 75 doend exiting\norg.apache.struts2.views.jsp.IfTag@739e8775 79 dostart entering\norg.apache.struts2.views.jsp.IfTag@739e8775 75 release  <-----------release of thread 75 after start of 79",
      "*** Bug 69422 has been marked as a duplicate of this bug. ***",
      "*** Bug 69431 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2024-10-15T15:05:39Z",
    "fixes": [
      69399
    ]
  },
  {
    "id": 68089,
    "summary": "ApplicationHttpRequest.getSpecial() and removeSpecial() use linear scans",
    "description": "A high-volume, latency-sensitive application shows a large amount of String.equals() calls buried inside tomcat processing.  Detailed examination shows that much of it comes from ApplicationHttpRequest.getSpecial() and removeSpecial(), which are called once per call to request.setAttribute() or request.removeAttribute().  In our application these calls are from certain Filters or, more commonly, AstExpressions, especially those which are not otherwise resolved.\n\nThe relevant code is:\n    protected static final String specials[] =\n            { ... };\n    protected int getSpecial(String name) {\n        for (int i = 0; i < specials.length; i++) {\n            if (specials[i].equals(name)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\nThe array contains 12 specials, so each call to request.getAttribute(), etc. performs 12 String comparisons.  The occasional search of an actual special will reduce that, but very few of our calls match.\n\nSuggestion: use a HashMap<String, Integer> or enums to achieve a similar purpose.  Comparable performance data may be found at https://bz.apache.org/bugzilla/show_bug.cgi?id=67080.\n\nThese scans are largely inlined into calling methods so I cannot reliably estimate the cpu or clock impact, however the sheer number of calls is impressive.",
    "comments": [
      "> These scans are largely inlined into calling methods so I cannot reliably\n> estimate the cpu or clock impact, however the sheer number of calls is\n> impressive.\n\nI understand the concern, but it sounds doubtful this is actually a problem given the nature of the checks. Please provide actual data, also demonstrating the proposed technique would provide any performance benefits.",
      "A crude performance test shows that using a map makes the request attribute lookup about 2.5x faster.\n\nI should have a patch for this once I have got my head around how AttributeNamesEnumerator works.",
      "Good idea to measure ApplicationHttpRequest.getAttribute()!  Our production environment shows 0.27% cpu spent in that method, of which 0.1% cpu is spent in method-local time (including the inlined array scan).\n\nApplicationHttpRequest.setAttribute and removeAttribute() are also present but 10x smaller.",
      "Fixed in:\n- 11.0.x for 11.0.0-M14 onwards\n- 10.1.x for 10.1.16 onwards\n-  9.0.x for  9.0.83 onwards\n-  8.5.x for  8.5.96 onwards",
      "For posterity: this issue also dominates the runtime of org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator.findNext().",
      "Production data confirms the behavior change but shows minimal actual performance improvement - it appears the extra work of hashing the string and doing the HashMap lookup is comparable to the wasted effort of 12 string comparisons.\n\nI refined the approach by checking whether the attribute name was shorter than the shortest special (length 30) and that eliminates the search cost for the vast majority of calls.  The attached speed test compares the cost of searching for attributes with long vs. short names, and the current implementation of getAttribute() is indeed slightly faster for short names (520ms vs. 540ms on my PC).\n\nWith the length check, the short names are orders of magnitudes faster.  Presumably the JIT optimized it close to a no-op.\n\nChecking for length 30 is an easy modification, but not the most maintainable.  Perhaps modify the static initializer to calculate the length of the shortest special?",
      "Created attachment 39574\nSpeed test",
      "Created attachment 39575\nSupport class for the speed test",
      "I did look at using !startsWith(\"jakarta\") but that is ~2x slower than a length check.\n\nI've coded up the length check and am just running some tests locally.",
      "Fixed in:\n- 11.0.x for 11.0.0-M17 onwards\n- 10.1.x for 10.1.19 onwards\n-  9.0.x for  9.0.86 onwards\n-  8.5.x for  8.5.99 onwards",
      "(In reply to Mark Thomas from comment #9)\n> I did look at using !startsWith(\"jakarta\") but that is ~2x slower than a\n> length check.\n> \n> I've coded up the length check and am just running some tests locally.\n\nWhat about charAt(0) == 'j'?\n\nI suppose that's the second thing String.equals() will do after checking the length, so maybe it won't help at all.",
      "String compaction made charAt() more expensive, thanks to checks on format and range.  String.length() remains an integer check.\n\nThat said, charAt() isn't that bad, so it's an option if functionally required.",
      "This changed reached prod and improved performance.  Low impact."
    ],
    "creation_ts": "2023-11-06T20:02:33Z",
    "fixes": [
      68089
    ]
  },
  {
    "id": 69381,
    "summary": "Excess object copying while evaluating reflective method calls",
    "description": "Evaluating JSP EL expressions with reflective operations (\"${beanA.getBean()}\") is slow because the reflective objects are copied on each execution.  Specifically, javax.el.Util.findMethod() calls java.lang.Class.getMethods().  In OpenJDK, getMethods() makes a call to duplicate the source-of-truth array.  From OpenJDK source:\n\nreturn copyMethods(privateGetPublicMethods());\n\nAn easy optimization would be to store the array in a ConcurrentHashMap for later reuse; I'm not certain whether there are ways to use Class.getMethod() to more specifically retrieve the targeted Method.\n\nA local benchmark based on TestELParserPerformance shows that a ConcurrentHashMap accelerates this expression 50% (from 1070ns to 500ns) and reduces memory allocation by 75% (from 248MB to 64MB).\n\nStatic ConcurrentHashMaps have disadvantages, but this is a large impact, especially on objects with many methods.  The benchmark numbers above featured 8 Methods but tests with larger objects confirm a linear increase in memory allocation and a sub-linear increase in runtime.",
    "comments": [
      "Created attachment 39906\nSpeed test",
      "Adding details and speed test:\n\n1. The speed test is attached, based on TestELParserPerformance\n2. The test is most consistent when run with \"-Xmx3g -XX:+UseParallelGC\".  I'm finding this to be good when the test generates high object allocation.\n\nTypical result from current state:\n\n${beanA.name} duration=[348ms] or 348 ns each\n${beanA.getName()} duration=[1421ms] or 1421 ns each\n${beanB.getName()} duration=[2023ms] or 2023 ns each\n\nThen change Util.findMethod() along these lines:\n\n    private static final Map<Class<?>, Method[]> methodsByClass = new ConcurrentHashMap<>();\n\n        Method[] methods = methodsByClass.computeIfAbsent(clazz, (key) -> clazz.getMethods());\n//        Method[] methods = clazz.getMethods();\n\n\nand we get:\n\n${beanA.name} duration=[351ms] or 351 ns each\n${beanA.getName()} duration=[809ms] or 809 ns each\n${beanB.getName()} duration=[862ms] or 862 ns each\n\nWhat we see:\n1. The non-reflective call is unaffected.  Repeated runs show small variation up or down.\n2. The reflective call with five properties (beanA) is 44% faster\n3. The reflective call with ten properties (beanB) is 55% faster\n\nFWIW I found some complex generated beans involved with over 40 properties.  Fortunately those are rare, but it illustrates that the higher method counts are a real problem.",
      "Created attachment 39907\nSpeed test v2\n\nAttaching latest version of speed test",
      "PR created for Tomcat 9.x change: https://github.com/apache/tomcat/pull/770\n\nI believe the same change can be applied to 10.x and 11.x, I'll wait on those PRs until the review is complete on 9.x.",
      "Fixed in:\n- 11.0.x for 11.0.1 onwards\n- 10.1.x for 10.1.32 onwards\n-  9.0.x for  9.0.97 onwards",
      "Util#findMethod: This method duplicates code in org.apache.el.util.ReflectionUtil. When making changes keep the code in sync.\n\nPer comments, updated ReflectionUtil is expected."
    ],
    "creation_ts": "2024-10-07T18:22:45Z",
    "fixes": [
      69381
    ]
  },
  {
    "id": 65757,
    "summary": "Async WriteListener#onWritePossible never called",
    "description": "If the servlet 3.1 async WriteListener is registered on the correct context but on a container thread other than the one that spanwed the request (or maybe even if on same thread but after context.end is called), then WriteListener#onWritePossible is never called.\n\nThis was originally reported https://www.mail-archive.com/users@tomcat.apache.org/msg124043.html and repeated asked again by me at https://mail.google.com/mail/u/0/#inbox/KtbxLxGcBcrfltMWNvZcJHFJLdbkfFWJdq.  Our scenario involves RestEasy and many layers, but we're 99% sure we are experiencing the same issue Violeta reported.\n\nFrom what I can tell her test is also a pretty good reproducer.  I could make a few tweaks, but if it's good enough, I don't want to change it.",
    "comments": [
      "Violeta's test can be found at https://github.com/apache/tomcat/blob/714236af3458f030ec598660fa5fa886cd63dbd0/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java#L934",
      "This is caused by the fact that the logic identifies this as a container thread, which is not enough in that edge case. Basically there is a need to dispatch if the thread is not the original request thread, which is now hard to identify (I cannot immediately think of a good way) and I don't think this is going to be fixed.\n\nIf this wontfix resolution is validated, then the issue will be documented in the known issues (it pretty much has been for the past 6 years as the test case was there and ignored).",
      "Created attachment 38138\nPatch\n\nThe idea is to try to identify the original processing thread better. Unless I missed something, this is only useful for the Servlet container.",
      "Hi Remy,\n\nI am currently working on a workaround in our code, but I don't want to continue that if a fix is near.  Honestly, I was curious if you could do something like you are proposing here, but I simply don't know enough about the codebase to know if you truly needed to be off a container thread (as opposed to just the originating thread).\n\nRegardless, where do you stand on adding this to the 9.0.x (and other) branches?  Any take on when a 9.0.x release could happen with this fix?\n\nMany thanks for working on this!",
      "Once reviewed and validated (if needed), a fix like this one is almost always applied to all branches.",
      "Hey Remy.\n\nThanks.  No pressure or anything, just curious if you have _any_ idea on when this could be released.  Based on your release notes, it looks like you tend to cut a release every month.  Do you see big hurdles for this hitting the next release? \n\nIs there any way we can help with those hurdles?  Of course, we can run our battery of tests, but I'm not sure how much confidence that would give you on this relatively core change.",
      "(In reply to Remy Maucherat from comment #5)\n> Once reviewed and validated (if needed), a fix like this one is almost\n> always applied to all branches.\n\nLGTM.\n\nMy only thought is how many of the other container thread checks really should be converted to this new request thread check.",
      "(In reply to Mark Thomas from comment #7)\n> (In reply to Remy Maucherat from comment #5)\n> > Once reviewed and validated (if needed), a fix like this one is almost\n> > always applied to all branches.\n> \n> LGTM.\n> \n> My only thought is how many of the other container thread checks really\n> should be converted to this new request thread check.\n\nNot sure.\n\nWhen upgrading, there's no async context, so the calls there should be ok. Not certain about the async state machine used through the Servlet container. The scenario from the test is clearly the most common use (and I don't consider it to be a great idea ;) ).",
      "The fix will be in 10.1.0-M9, 10.0.15, 9.0.57 and 8.5.74.",
      "Thanks!"
    ],
    "creation_ts": "2021-12-20T20:17:39Z",
    "fixes": [
      65757
    ]
  },
  {
    "id": 41327,
    "summary": "Jasper does'nt display the full path of the file in a 404 Not found  error page",
    "description": "When you try accessing a non-existent jsp page in a webapp, tomcat(jasper)\ndoesnt display the full path of the file which was not found in the browser. \nexample:\nAccessing a non-existent jsp page say a.jsp with this url\nhttp://localhost:8080/jsp-examples/a.jsp would return a 404 Not Found error page\nwhich displays \"/a.jsp not found\".\n\nRather it should be \"/jsp-examples/a.jsp not found\".",
    "comments": [
      "Created attachment 19379\nPatch to display the full path\n\nThis patch displays the full path as expected.",
      "Patch applied. Many thanks. The fix will be included in 5.5.21 onwards.\n\nPatches are always appreciated. If you could provide them in diff -u format it\nwould make them even easier to apply. Thanks again."
    ],
    "creation_ts": "2007-01-09T00:32:55Z",
    "fixes": [
      41327
    ]
  },
  {
    "id": 69444,
    "summary": "jakarta.servlet.error.message request attribute should be empty string instead of null",
    "description": "Original issue with OmniFaces/Mojarra/Tomcat stack\n\nhttps://github.com/omnifaces/omnifaces/issues/865#issuecomment-2444891221\n\n\nWhen using \n<exception-type>java.lang.Throwable</exception-type> instead of \n<error-code>500</error-code> the jakarta.servlet.error.message \nrequest attribute becomes null when the thrown exception has no message.\n\nWhen using <error-code>500</error-code> the jakarta.servlet.error.message request attribute becomes an empty string when the thrown exception has no message.\n\nTomcat could also have been wrong by setting the jakarta.servlet.error.message request attribute with a null value instead of an empty string because the Servlet spec says that these request attributes \"must be set\" which implies that these may not be null in first place.\n\nhttps://jakarta.ee/specifications/servlet/6.0/jakarta-servlet-spec-6.0#request-attributes",
    "comments": [
      "https://jakarta.ee/specifications/servlet/6.0/jakarta-servlet-spec-6.0#request-attributes\n\n1. If you read further (below a table), the spec says:\n\n\"With the introduction of the exception object to the attributes list for version 2.3 of this specification, the exception type and error message attributes are redundant.\"\n\n2. If you call ServletRequest.getAttibuteNames(), is \"jakarta.servlet.error.message\" listed? If so, you cannot claim that the attribute is not set.",
      "so we could simply modify Mojarra \nto check if there is an exception or \nif the jakarta.servlet.error.message is present...\n\nthanks for the clarification!",
      "talking with @BalusC (https://stackoverflow.com/users/157882/balusc)\nhe said that there are 2 problems:\n\n1) \"non-exceptional\" errors, like 404 have no \"exception\" attribute\n\n2) \"jakarta.servlet.error.message\" is not present \n   in the request.getAttibuteNames() Enumeration\n\nOn Faces (JSF) side it seems that there are \nno other places to detect if it's an error page\n\nThis is needed to avoid the JSF restore phase \nthat in turn will throw a ViewExpiredException",
      "confirmed \n\non an error page mapped with java.lang.Throwable \n\n#{requestScope.containsKey('jakarta.servlet.error.message')}\n\nprint \"false\"",
      "From the setAttribute() Javadoc:\n\n\"If the object passed in is null, the effect is the same as calling {@link #removeAttribute}.\"\n\nI think we are going to need to set it explicitly to the empty String.",
      "Fixed in:\n- 11.0.x for 11.0.2 onwards\n- 10.1.x for 10.1.34 onwards\n-  9.0.x for  9.0.98 onwards",
      "Thanks! \nI've reported this to Mojarra project"
    ],
    "creation_ts": "2024-11-14T11:10:54Z",
    "fixes": [
      69444
    ]
  },
  {
    "id": 65377,
    "summary": "Migrate Jasper's use of deprecated boxed primitive constructors",
    "description": "JDK 9 deprecated all Boolean, Byte, Character, Double, Float, Integer, Long, and Short constructors, see https://www.oracle.com/java/technologies/javase/9-deprecated-features.html#JDK-8065614. JDK 16 then marked them as forRemoval=true.\n\nJasper generates code that uses these deprecated constructors, when binding tag attributes to setters. This results in fairly adamant warnings when compiling on javac (not sure how JDT reacts). For now, the generated code compiles and the warnings could be disabled, but they're clearly telling us the JDK will remove support in the future.\n\nJDK documentation suggests replacing use of boxed primitive constructors with auto-boxing or valueOf() static factory methods. JspUtil.java appears to contain the code that needs adjusting.",
    "comments": [
      "Thanks for reporting this.\n\nFixed in:\n- 10.1.x for 10.1.0-M2 onwards\n- 10.0.x for 10.0.8 onwards\n- 9.0.x for 9.0.49 onwards\n- 8.5.x for 8.5.69 onwards"
    ],
    "creation_ts": "2021-06-14T21:21:07Z",
    "fixes": [
      65377
    ]
  },
  {
    "id": 64483,
    "summary": "AJP connector allowedRequestAttributesPattern failures not logged",
    "description": "If a request fails the allowedRequestAttributesPattern check a 403 is returned for the request but nothing is visible in the default logging.\n\nThis check should only fail as a result of server mis-configuration or malicious action. Both cases would benefit from something in the server logs even if only to help people find the right part of the documentation to look at.",
    "comments": [
      "Fair point. I'll take a look.",
      "Fixed in:\n- master for 10.0.0-M6 onwards\n- 9.0.x for 9.0.36 onwards\n- 8.5.x for 8.5.56 onwards\n- 7.0.x for 7.0.105 onwards"
    ],
    "creation_ts": "2020-05-31T08:35:00Z",
    "fixes": [
      64483
    ]
  },
  {
    "id": 43683,
    "summary": "Accessing Servlet while Reloading context gives 404 error",
    "description": "If a servlet has finished it's init(ServletConfig), and is now ready to handle\nrequests, if you tell the tomcat manager to reload the context containing that\nservlet (EG: w3m http://localhost:8080/manager/reload?path=/ServletRestartTest),\nand you access that servlet via GET or POST (EG: w3m\nhttp://localhost:8080/ServletRestartTest/ServletRestartTest) while the destroy()\nmethod on the servlet is still executing, the GET or POST request will fail with\na 404 error after the destroy() method has been completed.  This is always\nreproducible with my attached test case.  I believe this may be the root cause\nof the issue described in #42518 which is described as an \"Intermittent 404\". \nWith this test case, it is always reproducible, and not intermittent.",
    "comments": [
      "Attached is a context file and a test servlet.  This servlet has alot of sleeps,\nand prints a bunch of debug which will make it clear what is going on\nwhen the servlet is being reloaded.  This problem is reproducible even without\nany sleep statements in the servlet.\n\nTo setup the test do this:\nextract the apache-tomcat 6.0.14 binary distro\ncd conf\ncd Catalina\nmkdir localhost\ncd localhost\ncp ../../../webapps/host-manager/manager.xml .  (This sets up the manager\nservlet for you)\nDrop the ServletRestartTest.xml into this directory\ncd ../..\nedit the tomcat-users.xml and paste in: (this lets you access the manager\nservlet with username tomcat password tomcat)\n<role rolename=\"manager\"/>\n<user username=\"tomcat\" password=\"tomcat\" roles=\"manager\"/>\ncd ../webapps\nextract the war file\ncd ../bin\n./catalina.sh run (this runs tomcat printing the stdio to the console)\n\n\nTo reproduce with this test case:\n1. Visit this URL: http://localhost:8080/ServletRestartTest/ServletRestartTest\n   You should get:\nServletRestartTest - Servlet is in the RUNNING state\n2. Visit this URL: http://localhost:8080/manager/reload?path=/ServletRestartTest\n3. Then immediately reload the original url\n(http://localhost:8080/ServletRestartTest/ServletRestartTest)\n4. You will then receive the 404 error approximately 5 seconds later:\n\nHTTP Status 404 - Servlet ServletRestartTest is not available\n\ntype Status report\n\nmessage Servlet ServletRestartTest is not available\n\ndescription The requested resource (Servlet ServletRestartTest is not available)\nis not available.\nApache Tomcat/6.0.14\n\n\n\nOptionally you may use the apachebench program to see that you will get many\n404s, depending on how many requests come in:\nReplace step 3 with: ab -c 10 -n 10\nhttp://localhost:8080/ServletRestartTest/ServletRestartTest\nYou will see that all 10 requests fail with non-200 responses:\n\nThis is ApacheBench, Version 2.0.40-dev <$Revision: 1.146 $> apache-2.0\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nCopyright 2006 The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient).....done\n\n\nServer Software:        Apache-Coyote/1.1\nServer Hostname:        localhost\nServer Port:            8080\n\nDocument Path:          /ServletRestartTest/ServletRestartTest\nDocument Length:        1081 bytes\n\nConcurrency Level:      10\nTime taken for tests:   5.49371 seconds\nComplete requests:      10\nFailed requests:        0\nWrite errors:           0\nNon-2xx responses:      10\nTotal transferred:      12850 bytes\nHTML transferred:       10810 bytes\nRequests per second:    1.98 [#/sec] (mean)\nTime per request:       5049.371 [ms] (mean)\nTime per request:       504.937 [ms] (mean, across all concurrent requests)\nTransfer rate:          2.38 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.3      0       1\nProcessing:  5026 5043   6.4   5045    5048\nWaiting:     5026 5038   8.0   5038    5048\nTotal:       5027 5043   6.1   5045    5048\n\nPercentage of the requests served within a certain time (ms)\n  50%   5045\n  66%   5045\n  75%   5046\n  80%   5048\n  90%   5048\n  95%   5048\n  98%   5048\n  99%   5048\n 100%   5048 (longest request)",
      "Created attachment 21025\nThe ServletRestartTest file you need to extract",
      "This is how I envision the reload function working:\n\n1) The servlet is happily handling GET/POST requests\n2) reload is requested from the manager servlet\n3) All new requests should be put into a queue, and wait to be serviced\n4) If there are any 'currently active requests', tomcat should wait up to\nStandardContext.unloadDelay seconds waiting for these requests to finish\n5) Any requests that finish should be sent to the browser and finished up\n6) When unloadDelay has been exceeded, or all currently active requests are\ncompleted, destroy() should be called on the servlet\n7) Wait until destroy() has finished\n8) Clean up the context, and switch the classloader to the new classloader\n9) If there are any requests in the queue, start the servlet, call\ninit(ServletConfig) on the servlet\n10) wait for init(ServletConfig) to complete\n11) All new requests should nolonger be put into queue, and should be serviced\nby the servlet\n12) All requests which are in queue, should now be released and processed\nagainst the new servlet\n\nLooking at the code in StandardContext, I can see this is probably what it\nsupposed to happen (it tries to pause incoming requests)... it just doesn't\nquite work.  What we see is that if a request comes in while the servlet is\nbeing destroyed, it will get a 404 from the servlet when the destroy() method\ncompletes (EG: not right away!).  I looked at the code very reasonably\nthoroughly in tomcat 5.5 (more thoroughly than I am looking at it right now) and\nI seem to remember discovering that it was the start() context method that was\nactually destroying the waiting request.  But I can't vouch for that, it was\nprobably a year ago :)  \n\nIt is worth noting that if you send in a SECOND request while the servlet is\nbeing destroyed, that request *IS* handled properly... However... you can't send\nthat second request in TOO quickly after the first.  If they all come in at the\nsame time (see the apache bench testcase), they will *all* fail.  However even\nif you're doing it reasonably quickly from firefox, the second request will come\nthrough correctly.  I should also note that we had a patch for tomcat 4.1 which\nmade the reload() function work the way described above (it was a rather minor\nchange), however the patch is useless against tomcat 5 and greater, since the\nstart/stop code has been rewritten.",
      "Created attachment 21026\nThe Context file for the ServletRestartTest",
      "Thanks for the test case. The problem was that the wrapper originally allocated to the request is stopped as part of the reload.\n\nI have committed a fix to trunk and proposed it for 6.0.x.",
      "This has been fixed for 6.0.x and will be in 6.0.17 onwards.",
      "Sorry for the delay testing the fix... It's been a busy couple of weeks.\n\nSo I checked out the code from svn trunk today (05-22-08) and tested it.  With the test case I provided, everything was good... However when I tested it with a more thorough test case (EG: a real web application :) ), i ran into some crashes implying I was using an the OLD classloader.  \n\nIt seems like the Thread that is calling the init() function has the *wrong* classloader attached to it (EG: the old servlet's class loader, instead of the new one).  I've narrowed down the issue (this... took some time :) ) and have a new test case for you.\n\nJust replace the ServletRestartTest.war file with this new one (and re-extract it).  There are now two classes, the ServletRestartTest servlet itself, and another class (it happens to be blank) that I will try to load using the Classloader.\n\nDo the same test as before... run:\nab -c 10 -n 100 http://localhost:8080/ServletRestartTest/ServletRestartTest\n\nthen query the reload by going to this url at the same time:\nhttp://localhost:8080/manager/reload?path=/ServletRestartTest\n\nYou'll see this:\n[...]\nservicing completed\nservicing completed\ndestroy starting\ndestroy completed\ninit starting\nMay 22, 2008 7:02:13 PM org.apache.catalina.loader.WebappClassLoader loadClass\nINFO: Illegal access: this web application instance has been stopped already.  Could not load OtherClass.  The eventual following stack trace is caused by an error thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access, and has no functional impact.\njava.lang.IllegalStateException\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1273)\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1233)\n        at ServletRestartTest.init(ServletRestartTest.java:24)\n        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1161)\n        at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:806)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:129)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:183)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845)\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)\n        at java.lang.Thread.run(Thread.java:595)\ninit completed\nstarting servicing\n[...]\n\nLet me know if I can be of any further assistance",
      "Created attachment 21990\nTestcase 2 - ServletRestartTest.war",
      "Thanks for your efforts on the test case. It made things so much easier to investigate. I have committed a fix to trunk that addresses this and proposed it for 6.0.x\nhttp://svn.apache.org/viewvc?rev=661074&view=rev\n\nIf you are able to test my fix that would be very helpful.",
      "Well thanks for the compliment on the test cases... These issues are very important to us, so I'm *extremely* grateful you're spending time looking into them.  But I'm sorry to report that my test case for this next one isn't as good :)\n\nSo first, your fix with the classloader issues seems to have fixed up that problem.  \n\nHowever, if I use the 2nd testcase, and do:\nab -c 10 -n 60 http://localhost:8080/ServletRestartTest2/ServletRestartTest\n\nthen reload the context:\nhttp://localhost:8080/ServletRestartTest2/ServletRestartTest\n\nI am still getting some non 200 requests:\n\nComplete requests:      60\nFailed requests:        11\n   (Connect: 0, Length: 11, Exceptions: 0)\nWrite errors:           0\nNon-2xx responses:      11\n\nI swear I didn't this before... So maybe I'm crazy... But maybe I was distracted last time by trying to track down the classloader testcase.  If I try to do the tests from my browser... they *usually* work just fine.  But sometimes, I'll get the 404 in my browser too.  I would just say it's a race condition as to when I reload the context, but can't quite put my finger on it.  It seems like once it gets one 404... every time I try it after that (until I restart tomcat) it'll get the 404 on reload.  *sigh*  Sorry I can't be more helpful.  Can you tell me if you are still seeing non-200s with the apache bench test?  It seems like maybe you fixed one path where you can get a 404, but maybe there's another.  It looks like requests that come in right after the destroy finishes, but before the init starts that are getting the 404s now.\n\nSo I did find a *second* issue, which is also intermittent, and may have been introduced by your first fix (although I don't know).  I've spent the past two days (well, a couple hours yesterday and a few hours today) trying to get a narrow testcase for you.  I've got one, and I'll attach it as ServletRestartTest3.  In your browser, you need to open Three tabs\n1:http://localhost:8080/manager/reload?path=/ServletRestartTest3\n2:http://localhost:8080/ServletRestartTest3/ServletRestartTest\n3:http://localhost:8080/ServletRestartTest3/ServletRestartTest\n\nYou need to start tomcat, then reload tab 2, then 1, then 3\n\nThis is what happens (sometimes!)\n\nthe servlet will init()\nthen the servlet will destroy()\nbut while the destroy is running, it will service the request for tab 2 on the same servlet\nthe destroy() will finish\nthe servlet will init()\nthe servlet will service tab 3.\n\nUnfortunately, what it's doing is serving a request (tab #2) *while* it's in the middle of destroying the context.  Bad bad bad :(  In the testcase I have rigged up it will cause a nullpointer exception in tab #2 when that happens:\n\njava.lang.NullPointerException\n\tServletRestartTest.doGet(ServletRestartTest.java:43)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:617)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\nYou'll see this on your tomcat console:\n\ninit starting\n[GC [DefNew: 960K->64K(960K), 0.0029550 secs] 4176K->3426K(5056K), 0.0029980 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] \nJun 5, 2008 10:13:07 PM org.apache.catalina.core.StandardContext reload\nINFO: Reloading this Context has started\ninit completed\ndestroy starting\nstarting servicing\ndestroy completed\n[GC [DefNew: 960K->64K(960K), 0.0034250 secs] 4322K->3539K(5056K), 0.0034690 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC [DefNew: 960K->64K(960K), 0.0019920 secs] 4435K->3623K(5056K), 0.0020690 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] \ninit starting\ninit completed\nstarting servicing\nservicing completed\n\nIf you can't get it to happen first try, reload tab #1, which will shutdown the context... Then do tab #2, #1, #3.  It may take you a few times to get it to happen.  It's intermittent :(  You'll see that Testcase #3 has a very tight loop at the init().  I tried a sleep(5000), and it was *significantly* more difficult to get the problem to happen.  With the 5 second tight loop, it's much easier (although still not consistent).\n\nLet me know if there's anything I can do to help",
      "Created attachment 22084\nTestcase 3 - ServletRestartTest.war",
      "The classloader fix has been applied to 6.0.x and will be in 6.0.17. I'll take a look at the remaining issues.",
      "I do have some progress to report.\n\nThe issues you are seeing with test case 2 are due to the context.reload() calling context.stop() followed by context.start()\n\ncontext.start() unregisters and re-registers the context with JMX. Whilst the context is unregistered it does not appear in the mapper so the request is mapped to the ROOT webapp and a 404 results. I am currently looking for the least ugly hack around this issue.\n\nAt first glance test case 3 is a separate issue which I will look at once I have test case 2 working properly.",
      "I have committed another patch to trunk and proposed it for 6.0.x that fixes another source of 404s on reload. The patch is:\n\nhttp://svn.apache.org/viewvc?rev=667644&view=rev\n\nWith this patch I can't get any 404s with test case 2. On to test case 3...",
      "I can't reproduce the problem you had with case 3.\n\nHave you set the unloadDelay on the context? I have set mine to 20000 (20 seconds) for this bug to make sure that the servlet is given a chance to destroy() cleanly.",
      "The Reloading looks like it works well now.  Thanks!\n\nAs for case #3... Yes I can still get that to happen.  I thought maybe it was easier for me to reproduce because my laptop had dual core.  I booted nosmp and I was still able to get it to happen (infact, I think it may have been easier).\n\nYes, there is a setting for the 20 second timeout... but it's not hitting that.  It's pretty much immediately blazing into servicing the request even though the destroy is in progress.  The Destroy starting you see in my previous message and the starting servicing come basically at the same time.  I think the key is to get the request on window 3 in before window 2 is finished causing the servlet to start.\n\nIt doesn't happen every time... And it may be easier to recreate on a slower machine...  it certainly appears easier to recreate when I replaced the init() sleep(5000) with a CPU bound loop\n\nLet me know if you can get it to happen... and if not I'll see what I can do for a better testcase.\n\nThanks again",
      "Sorry, I still can't repeat the issue with test case 3. I have tried on a couple of different machines.",
      "Well that's frustrating :)  I've done some work on it today to try to narrow down when it happens.\n\nI've written a java program that will make the required calls to the URLs in parallel to cause the issue.  I wrapped it in a loop, and it happened the first time I ran it!  Then I ran it again, and let it run for 2 hours without it happening once.\n\nThen I restarted tomcat, and it happened first time!\n\nSo it seems to happen a lot *more* when tomcat has first started... but still not every time.  I'm using Sun's 1.5.0_15 jvm if that somehow makes a difference.\n\nSo I am attaching a unix shell script that will start+stop tomcat between each test run, and my java program that does the URL calling.  You may need to tweak a couple variables to make this work on your machine:\n\nTestServiceDuringDestroy.sh: \n  TOMCAT_BIN_DIR - Set this to where the catalina.sh script is\n\nTestServiceDuringDestroy.java:\n  TESTCASE3_URL - Put the url to testcase3 (the one that spins cpu during init)\n  RESTART_TOMCAT_URL - Put the url to restart that servlet\n  RESTART_TOMCAT_BASIC_AUTH - Put in the basic authentication credentials for the manager servlet in format username:password\n\nWith those changes... I think that will get it going for you.  The theory here is:\nwhile (true) {\n start tomcat\n Request the servlet\n Restart the servlet\n Request the servlet\n stop tomcat\n}\n\nWhen the testcase fails you'll see something like this:\n\nUsing CATALINA_BASE:   /var/tmp/tomcat/apache-tomcat-6.0.16\nUsing CATALINA_HOME:   /var/tmp/tomcat/apache-tomcat-6.0.16\nUsing CATALINA_TMPDIR: /var/tmp/tomcat/apache-tomcat-6.0.16/temp\nUsing JRE_HOME:       /usr/local/java\nSleeping for tomcat to start\nTestcase Call 1: Requesting URL\nRestart call: Requesting URL\nTestcase Call 2: Requesting URL\nTestcase Call 1: IOException in URL request\njava.io.IOException: Server returned HTTP response code: 500 for URL: http://localhost:8080/ServletRestartTest3/ServletRestartTest\n        at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1174)\n        at WebRequestThread.run(WebRequestThread.java:28)\nUsing CATALINA_BASE:   /var/tmp/tomcat/apache-tomcat-6.0.16\nUsing CATALINA_HOME:   /var/tmp/tomcat/apache-tomcat-6.0.16\nUsing CATALINA_TMPDIR: /var/tmp/tomcat/apache-tomcat-6.0.16/temp\nUsing JRE_HOME:       /usr/local/java\nSleeping for tomcat to stop\n\n\n---\nIn the cases where it tomcat succeeds, I see this on the server side:\nINFO: Waiting for 1 instance(s) to be deallocated\n\nI do not see that when my testcase fails.\n\nFWIW, I am using a apache-tomcat-6.0.16 binary installation, and I dropped in lib/* and bin/*.jar from a newly compiled trunk svn checkout from yesterday (06-24-08)\n\nGood luck!",
      "Created attachment 22176\nTest Harness #4",
      "The patch for test case 2 has been applied to 6.0.x and will be in 6.0.17 onwards. I'm still looking at test case 3.",
      "The good news is I can now repeat test case 3 and have found the root cause.\n\nThere is a synchronisation issue with StandardWrapper. In short, one thread can enter allocate() and before countAllocated is incremented, another thread can enter unload().\n\nThe bad news is that I suspect the fix might not be pleasant. allocate() is on the critical path so just synchronising allocate() would likely be bad from a performance point of view. I haven't really thought about this much yet, so I am hoping there is a better fix to be found. I'll have a think about a solution for this over the next few days. Hopefully I'll have something next week. In the meantime, any suggestions are welcome.",
      "I have committed a fix for test case 3 to trunk, It isn't perfect but it should be enough to fix the issue you are seeing. For the record, I could only get test case 3 to fail by using a debugger to control the execution sequence of the threads.\n\nThe patch is http://svn.apache.org/viewvc?rev=672397&view=rev\n\nAny testing feedback would be appreciated.\n\nThe patch has been proposed for 6.0.x",
      "The patch for test case #3 has been applied to trunk.\n\nWhilst the fix isn't perfect is should be extremely difficult (verging on impossible) to reproduce this issue under normal usage.\n\nIf you have a test case that still demonstrates this issue with the latest patches, please feel free to re-open this bug.",
      "*** Bug 42518 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2007-10-23T09:43:12Z",
    "fixes": [
      43683
    ]
  },
  {
    "id": 53085,
    "summary": "[perf] [concurrency] DefaultInstanceManager.annotationCache is not optimal for more threads",
    "description": "Created attachment 28616\nScreenshot : Thread states during test\n\nThis is a small Concurrency problem also find during myfaces performance testing [1]\n\norg.apache.catalina.core.DefaultInstanceManager.annotationCache uses WeakHashMap for cache, but this approach needs sychronized get() access. This can lead to complete thread stuck at this lock - see attached screenshots from yourkit profiler. \n\nI think this problem is classical concurrent cache problem = many read but only few put()s, reads vastly outnumber writes. It this case is should be read without locking otherwise it is a concurrency bottleneck.\n\nI didn't check the code of DefaultInstanceManager deeply, following are suggestions only:\n1) Normally is this concurrent-cache solvable with ConcurrentHashMap or with maps based on this type like [2] or [3]\n2) the 'weakness' can achieved with String (classname) if it is acceptable to maintain annotations for class that can be already unloaded or with WeakReference\n\n[1] http://tomcat.markmail.org/thread/7bbvzmkvyvryvn44\n[2] http://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache.java\n[3] http://code.google.com/p/guava-libraries/wiki/CachesExplained",
    "comments": [
      "Created attachment 28617\nScreenshot: Monitor Usage during test",
      "(In reply to comment #0)\n> 2) the 'weakness' can achieved with String (classname) if it is acceptable to\n> maintain annotations for class that can be already unloaded or with\n> WeakReference\n\nIt cannot be String alone. You need {ClassLoader + String} to identify a class.",
      "Created attachment 28641\n2012-04-19_tc8_53085_DefaultInstanceManager.patch\n\nI added ManagedConcurrentWeakHashMap class to trunk in r1327915\n\nHere is a patch for trunk that uses that new class to fix this issue. I have not committed it yet.\n\nThings that I am not sure:\n\n1. Should DefaultInstanceManager implement LifecycleListener just to catch periodic events?\n\nThere is PeriodicEventListener interface that seems more suitable.\n\nThe only \"problem\" though is ugliness in TestDefaultInstanceManager part of the patch where I need to call this maintenance processing. Simulating a LifecycleEvent is more than it is worth.\n\nThe good thing though is that I do not need to override StandardContext#backgroundProcessing() to fire the event, nor invent a LifecycleListener -> PeriodicEventListener adapter.\n\n2. Looking for calls of DefaultInstanceManager constructor, there are 3 such places. Only the instanceManager instance owned by StandardContext is handled by this patch.  I wonder whether 2 other places are actually needed.\n\nMaybe amend the Context interface by adding #getInstanceManager() method, at least in Tomcat 8?\n\nThe 3 places:\n - StandardContext#startInternal()\n - ApplicationFilterConfig#getInstanceManager()\n - AsyncContextImpl#getInstanceManager()",
      "Am also facing similar issue. This issue stalls the application throughput after a certain load. When can we expect a patch for annotationCache concurrency?",
      "Which tomcat build have this patch?",
      "(In reply to Manoj from comment #5)\n> Which tomcat build have this patch?\n\nRead the comments: the support class was added to the trunk back in 2012 and presumably appears in all releases following that date.\n\nThat support class, however, is not actually being used in any released version. If you want to enable it, you'll have to manually apply Konstantin's patch to the Tomcat sources and build it yourself. (Fortunately, building Tomcat has become staggeringly easy since Tomcat 7.0.x).",
      "Looks like the support class is only available in tomcat 8. Can we have the fix added in tomcat 7?",
      "This was fixed back in January 2017.\n\nThe fix is available in:\n- 9.0.0.M18 onwards\n- 8.5.12 onwards\n- 8.0.42 onwards\n- 7.0.76 onwards\n\nSee the change log entry: \nReduce the contention in the default InstanceManager implementation when multiple threads are managing objects and need to reference the annotation cache."
    ],
    "creation_ts": "2012-04-16T18:42:12Z",
    "fixes": [
      53085
    ]
  },
  {
    "id": 42438,
    "summary": "Duplicate JSP temp variable declaration when jsp:attribute used in conjunction with custom tags",
    "description": "Here is an example of the bug in its most primitive form:\n\nWEB-INF/jsp/test.jsp:\n===================================\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%>\n<%@ taglib prefix=\"t\" tagdir=\"/WEB-INF/tags\" %>\n\n<jsp:element name=\"a\">\n    <jsp:attribute name=\"href\">http://www.apache.org</jsp:attribute>\n</jsp:element>\n\n<t:test />\n\n<c:if test=\"${true}\">it's true!</c:if>\n===================================\n\nWEB-INF/tags/test.tag:\n===================================\n<%@ tag pageEncoding=\"UTF-8\" body-content=\"scriptless\" %>\ndo nothing\n===================================\n\nWEB-INF/tagPlugins.xml:\n===================================\n<tag-plugins>\n    <tag-plugin>\n      <tag-class>org.apache.taglibs.standard.tag.rt.core.IfTag</tag-class>\n      <plugin-class>org.apache.jasper.tagplugins.jstl.core.If</plugin-class>\n    </tag-plugin>\n</tag-plugins>\n===================================\n\nOnce you run this through Jasper, you will get the following java code:\n===================================\npackage org.apache.jsp.WEB_002dINF.jsp;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport javax.servlet.jsp.*;\n\npublic final class test_jsp extends org.apache.jasper.runtime.HttpJspBase\n    implements org.apache.jasper.runtime.JspSourceDependent {\n\n  private static java.util.List _jspx_dependants;\n\n  static {\n    _jspx_dependants = new java.util.ArrayList(1);\n    _jspx_dependants.add(\"/WEB-INF/tags/test.tag\");\n  }\n\n  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_c_if_test;\n\n  public Object getDependants() {\n    return _jspx_dependants;\n  }\n\n  public void _jspInit() {\n    _jspx_tagPool_c_if_test =\norg.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());\n  }\n\n  public void _jspDestroy() {\n    _jspx_tagPool_c_if_test.release();\n  }\n\n  public void _jspService(HttpServletRequest request, HttpServletResponse response)\n        throws java.io.IOException, ServletException {\n\n    JspFactory _jspxFactory = null;\n    PageContext pageContext = null;\n    HttpSession session = null;\n    ServletContext application = null;\n    ServletConfig config = null;\n    JspWriter out = null;\n    Object page = this;\n    JspWriter _jspx_out = null;\n    PageContext _jspx_page_context = null;\n\n\n    try {\n      _jspxFactory = JspFactory.getDefaultFactory();\n      response.setContentType(\"text/html;charset=UTF-8\");\n      pageContext = _jspxFactory.getPageContext(this, request, response,\n      \t\t\tnull, true, 8192, true);\n      _jspx_page_context = pageContext;\n      application = pageContext.getServletContext();\n      config = pageContext.getServletConfig();\n      session = pageContext.getSession();\n      out = pageContext.getOut();\n      _jspx_out = out;\n\n      String _jspx_temp0 = \"http://www.apache.org\";\n      out.write(\"<\" + \"a\" + \" href=\\\"\" + _jspx_temp0 + \"\\\"\" + \"/>\");\n      if (_jspx_meth_t_test_0(_jspx_page_context))\n        return;\nboolean _jspx_temp0=\n((java.lang.Boolean)\norg.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(\"${true}\",\njava.lang.Boolean.class, (PageContext)_jspx_page_context, null,\nfalse)).booleanValue();\nif (_jspx_temp0){\n      out.write(\"it's true!\");\n}\n    } catch (Throwable t) {\n      if (!(t instanceof SkipPageException)){\n        out = _jspx_out;\n        if (out != null && out.getBufferSize() != 0)\n          out.clearBuffer();\n        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);\n      }\n    } finally {\n      if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);\n    }\n  }\n\n  private boolean _jspx_meth_t_test_0(PageContext _jspx_page_context)\n          throws Throwable {\n    PageContext pageContext = _jspx_page_context;\n    JspWriter out = _jspx_page_context.getOut();\n    //  t:test\n    org.apache.jsp.tag.web.test_tag _jspx_th_t_test_0 = new\norg.apache.jsp.tag.web.test_tag();\n    _jspx_th_t_test_0.setJspContext(_jspx_page_context);\n    _jspx_th_t_test_0.doTag();\n    return false;\n  }\n}\n===================================\n\nScan that code for the temp variable named _jspx_temp0.  Notice that there is\none String with that name and one boolean with that name.  Thus, this results in\na java compilation error once you ultimately try to compile the page:\n===================================\nCompiling 2 source files to c:\\work\\marzen\\tmp\\jspc\\classes\nc:\\work\\marzen\\tmp\\jspc\\src\\org\\apache\\jsp\\WEB_002dINF\\jsp\\test_jsp.java:61:\n_jspx_temp0 is already defined in\n_jspService(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)\nboolean _jspx_temp0=\n        ^\nc:\\work\\marzen\\tmp\\jspc\\src\\org\\apache\\jsp\\WEB_002dINF\\jsp\\test_jsp.java:63:\nincompatible types\nfound   : java.lang.String\nrequired: boolean\nif (_jspx_temp0){\n    ^\nNote: c:\\work\\marzen\\tmp\\jspc\\src\\org\\apache\\jsp\\WEB_002dINF\\jsp\\test_jsp.java\nuses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n2 errors\n===================================\n\nThe problem is caused by the fact that the Node.NamedAttribute constructor\ndirectly uses JspUtil.nextTemporaryVariableName() to generate a variable name. \nI *believe* that if the variable was initialized just-in-time in the getter,\nthat the problem would be solved.\n\nThe flow goes like this:\n\n1) When compiling test.jsp, Compiler.generateJava() calls\nJspUtil.resetTemporaryVariableName() to reset the temp variable name\n\n2) The test.jsp file gets parsed immediately thereafter, thus creating a\nvariable with name _jspx_temp0 for the \"href\" attribute\n\n3) Shortly thereafter, tag files are loaded, which means that the test.tag file\nwill be recompiled, thus resulting in JspUtil.resetTemporaryVariableName() being\ninvoked again (thus setting the variable back to 0).\n\n4) Since test.tag doesn't do anything to cause a temporary variable name to be\nrecreated, the temp variable name remains at 0.\n\n5) Upon returning to the compilation of the test.jsp, the If tag plugin is used\nto create yet another variable name with name _jspx_temp0, hence the conflict.\n\nI think step 2 is the root of the problem.  If the NamedAttribute didn't get a\ntemporary variable name assigned in the constructor and instead generated it\njust-in-time in the getter, then this issue wouldn't exist since the \"href\"\nattribute variable name would be created only after first compiling all of the\ntag files.\n\nI still think that the logic in the compilation is a bit strange given that the\nJSP will use temporary variable names starting at whatever point the last\ncompiled tag file left off at.  I think that issue could be resolved by moving\nthe JspUtil.resetTemporaryVariableName() call in Compiler.generateJava() down\nafter the call to loadTagFiles().  Note that you would probably also want to\ncall JspUtil.resetTemporaryVariableName() in the ctxt.isPrototypeMode()\nscenario.  Here is the diff that I would propose for Compiler.java based on the\n5.5.20 codebase:\n\n===================================\n150,152d149\n<             // Reset the temporary variable counter for the generator.\n<             JspUtil.resetTemporaryVariableName();\n<\n157a155,156\n>                 // Reset the temporary variable counter for the generator.\n>                 JspUtil.resetTemporaryVariableName();\n179a179,181\n>             // Reset the temporary variable counter for the generator.\n>             JspUtil.resetTemporaryVariableName();\n>\n===================================\n\n\nHere is the diff I would propose for Node.java:\n===================================\n1791d1790\n<             temporaryVariableName = JspUtil.nextTemporaryVariableName();\n1837a1837,1839\n>             if(temporaryVariableName==null) {\n>                 temporaryVariableName = JspUtil.nextTemporaryVariableName();\n>             }\n===================================",
    "comments": [
      "FWIW, I have built my own custom jasper-compiler.jar with the two patches I\nmentioned, and it definitively solved my use case.",
      "I've checked the Tomcat 5.5.23 code, and it looks like it exhibits the exact\nsame problem.  I believe that the two patches I listed would solve the problem\nin 5.5.23, as well.",
      "This works for me using the latest 5.5.x code either with Tomcat compiling on\nthe fly or using JspC.\n\nIf you still see this issue, please attach a test WAR file (including source)\nthat demonstrates this issue with a clean 5.5.23 installation.",
      "Created attachment 20224\nTest case WAR\n\nHere is a test case exhibiting the bug.  You need to make sure that the\ntest.tag file is compiled as part of the test.jsp file compilation.  If\ntest.tag is compiled independently first, then the problem will not occur.  The\neasiest way to make sure this is the case is to just clean out your work\ndirectory before loading test.jsp.",
      "Is it possible you weren't using the If tag plugin I specified?  Or is it\npossible that you had precompiled the test.tag file?  The problem only occurs\nwhen you are compiling test.jsp, which in turn results in compilation of\ntest.tag and you are using the If tag plugin.  This is definitely still a bug in\nTomcat 5.5.23.\n\nNote that this is just one example exhibiting the problem.  There are a\nmultitude of other scenarios where this exact same problem can crop up (as it is\nhappening in our production JSP compilation).  I've just simplified the code\ndown to a very easy to trace test case to show exactly where the problem is\nhappening.\n\nIf you have any further questions on how to reproduce the bug, let me know.",
      "Thanks for the WAR. I see the error now. I have applied the Node.java patch to\nsvn and it will be included in the next release of 5.5.x and 6.0.x.\n\nI didn't change Compiler.java as it isn't necessary for this fix.\n\nMany thanks for both the test case and the patch."
    ],
    "creation_ts": "2007-05-16T17:43:51Z",
    "fixes": [
      42438
    ]
  },
  {
    "id": 66175,
    "summary": "Consider changing BasicAuthenticator to default to charset=\"UTF-8\"",
    "description": "A support for using UTF-8 with BasicAuthenticator has already been implemented since Tomcat 9.0.0 (in September 2017) - Bug 61280.\n\nI think we may consider to change the default in BasicAuthenticator to be UTF-8 nowadays, for Tomcat 10.1 onwards.\n\n\nTesting with Firefox 102 (see my comment in bug 66174), it does accept the charset=UTF-8 parameter in the value of a WWW-Authenticate response header.\n\nMoreover, regardless of whether such charset parameter was present is a response header, Firefox encodes the credentials of a subsequent request with UTF-8. The BasicAuthenticator by default expects ISO-8859-1 and cannot decode them. - Tested with Apache Tomcat 9.0.65 and the manager web application.\n\nSee also: Bug 66174\nhttps://cwiki.apache.org/confluence/display/TOMCAT/Character+Encoding#CharacterEncoding-Q10",
    "comments": [
      "With our recent changes to switch everything to default to UTF-8, I think this makes sense. I'm not sure which version of Tomcat first switched all the defaults. 10? Or was it back to 9? I'm fairly sure 8.5 still has ISO-8859-1 as default for everything to match the HTTP specs.",
      "Fixed in 11.0.x for 11.0.0-M1 onwards"
    ],
    "creation_ts": "2022-07-21T20:04:23Z",
    "fixes": [
      66175
    ]
  },
  {
    "id": 48692,
    "summary": "Provide option to parse application/x-www-form-urlencoded PUT requests",
    "description": "Provide an option to treat application/x-www-form-urlencoded encoded parameters in a PUT request in a similar manner to application/x-www-form-urlencoded parameters in a POST request",
    "comments": [
      "*** Bug 49964 has been marked as a duplicate of this bug. ***",
      "I'll copy my comments from the duplicate bug #49964 just so they're more likely to be read:\n\nMy proposal is this (and I'm prepared to write the patches myself):\n\n1. A new configuration attribute on the <Connector> element:\n\"parseBodyRequestParametersMethods\" (suggestions for a better name are\nwelcome). The default value for this setting is \"POST\" which retains strict\nservlet spec compliance.\n\n2. Change catalina.connector.Request.parseParameters method to allow any method\nmentioned in the above configuration attribute to undergo request body\nconversion into request parameters. All other existing requirements remain in\nplace: the request body must be application/x-www-form-urlencoded, must fit\ninto maxPostSize, etc.\n\nOne question I have about this implementation: how should it behave under\norg.apache.catalina.STRICT_SERVLET_COMPLIANCE=true? I believe that\norg.apache.catalina.STRICT_SERVLET_COMPLIANCE=true should take precedence over\nthis setting, disable it's use, and issue a warning/error during startup when\nthey conflict.",
      "How about parsePutBodyParams (since POST will always be parsed) with values false (default) or true?\n\nThe logic for STRICT_SERVLET_COMPLIANCE in 7.0.x has been made more consistent. It now only changes the defaults for other options and explicitly setting an option always overrides STRICT_SERVLET_COMPLIANCE.\n\nTherefore, assuming PUT parsing is off by default, it should be independent of STRICT_SERVLET_COMPLIANCE.",
      "In one of the discussions on the tomcat-user list, the OP had complained that he couldn't pass \"parameters\" using methods such as DELETE, etc. I figured I'd let the configuration specify any HTTP method(s) that should be parsed, and not just PUT.\n\nThat's why I chose that stupidly-long name.\n\nGood news about the STRICT_SERVLET_COMPLIANCE: since this is a new configuration parameter, it will simply default to adhere strictly to the servlet spec (that is, only POST gets it's body parsed) and any user-defined configuration will override it. Thanks.",
      "OK. A comma separated list of method names would make sense in that case. Although methods that are not allowed to have bodies should not be permitted.",
      "Hmm. I was trying to avoid an exhaustive or partial list of HTTP methods specifically in the code: I wanted to let this code grow to work with any crazy non-standard methods a user might want to use, too (like \"MYPUT\"). Such non-standard HTTP methods might actually then allow, say, a REST-based service work without breaking other webapps that depend on spec-compliant handling of PUT bodies :)\n\nI'll read-through the HTTP spec to look for methods for which bodies are actually forbidden, and we can reject those with a warning.",
      "Okay, I've got my patch working in TC 7, and I've renamed the configuration setting to the less unwieldy \"parseBodyMethods\".",
      "Mark, I've just glanced-over RFC 2616 and I can't find any HTTP methods (defined in section 9) that specifically prohibit a request body.\n\nOn the other hand, section 4.3 says:\n\n\"\nThe presence of a message-body in a request is signaled by the inclusion of a Content-Length or Transfer-Encoding header field in the request's message-headers. A message-body MUST NOT be included in a request if the specification of the request method (section 5.1.1) does not allow sending an entity-body in requests.\n\"\n\nThere's a short discussion that can be found here:\nhttp://lists.w3.org/Archives/Public/ietf-http-wg/2006AprJun/0103.html\n\nI tend to agree with one of the contributor's assertion that the principle of robustness applies, here: we shouldn't actively prohibit a request body from being sent, here.",
      "(In reply to comment #8)\n> Mark, I've just glanced-over RFC 2616 and I can't find any HTTP methods\n> (defined in section 9) that specifically prohibit a request body.\n\nTRACE does. No others I could see.",
      "Created attachment 26252\nPatch to provide request-entity parsing for arbitrary HTTP methods\n\nThis patch adds a new configuration setting \"parseBodyMethods\" to all connectors. Simply specify the list of HTTP methods that should be parsed as a comma-separated list (e.g. \"POST, PUT\") to enable this parsing on those methods.\n\nRequesting the TRACE method will result in an IllegalArgumentException and no changes to the Connector's configuration, to avoid an HTTP spec violation.",
      "I ought to provide a documentation patch as well. One will be forthcoming.\n\nAlso: should I bother to log a WARN (or other level) message when this setting is used to alter the servlet-spec-compliant setting of simply \"POST\"?",
      "No need for a log message. We don't do it elsewhere in similar circumstances.",
      "Created attachment 26259\nPatch to docs describing the previous patch\n\n...and the doc patch.",
      "Fixed in trunk. Will be included in Tomcat 7.0.6.",
      "*** Bug 53409 has been marked as a duplicate of this bug. ***",
      "Proposed for 6.0.x.",
      "Created attachment 29222\nPatch for Tomcat 6.0\n\nThis patch is an amalgamation of the following patches:\nhttp://svn.apache.org/viewvc?view=revision&revision=1041892 (initial patch)\nhttp://svn.apache.org/viewvc?view=revision&revision=1043983 (fixes formatting; improved documentation)\nhttp://svn.apache.org/viewvc?view=revision&revision=1049264 (improved javadoc)\n\nPlus a modification of the original patch because Tomcat 6.0.x's Connector does not have an \"initInternal\" method.",
      "The patch has been applied to 6.0.x and will be included in 6.0.36 onwards."
    ],
    "creation_ts": "2010-02-07T02:41:33Z",
    "fixes": [
      48692
    ]
  },
  {
    "id": 69478,
    "summary": "Cookie setSecure and setHttpOnly ignore argument",
    "description": "Both methods on Cookie [1] `setSecure(bool)` and `setHttpOnly(bool)` ignore the argument given to them. This effectively means calling `setHttpOnly(false)` on a cookie actually enables the HttpOnly flag for the cookie instead of disabling it, breaking the browser's access to the cookie value.\n\nThis was changed in a commit [2] for tomcat 11, intending to change the data internals of the cookie. However, I don't assume this breaking change was intended because the doc stayed the same and still suggests the proper behavior.\n\n[1]: https://github.com/apache/tomcat/blob/main/java/jakarta/servlet/http/Cookie.java\n[2]: https://github.com/apache/tomcat/commit/4ca2a66d6203ce7843fbaa9fd47be82cba477781",
    "comments": [
      "Thanks for the report.\n\nFixed in:\n- 11.0.x for 11.0.2 onwards",
      "Cheers!\nJust sent a pr with some regression tests too, but you were faster :D",
      "I've applied those regression tests to all current branches. Tx."
    ],
    "creation_ts": "2024-11-27T11:23:38Z",
    "fixes": [
      69478
    ]
  },
  {
    "id": 50015,
    "summary": "dynamic servlet security incomplete and badly distributed",
    "description": "The current implementation of dynamic servlet security through ServletRegistration.Dynamic.setServletSecurity and the ServletContext.createServlet and addServlet methods is incomplete, and includes some logic that exposes internals of the tomcat security framework directly in the ServletRegistration.Dynamic implementation.\n\nThe attached patch:\n\n- moves the logic that depends on the internals of tomcats security implementation from ApplicationServletRegistration to StandardContext where it can at least be overridden by e.g. jacc implementations\n\n- provides notifications to StandardContext of users calling createServlet and addServlet on ApplicationContext/ServletContext so subclasses of StandardContext can implement the spec behavior without subclassing ApplicationContext.\n\nThis patch is generated from a tomcat copy that already has several other patches I've proposed applied.  Let me know if there are problems applying it.",
    "comments": [
      "Created attachment 26088\npatch for improved dynamic servlet security implementations",
      "Thanks. Patch applied. Will be in 7.0.4 onwards."
    ],
    "creation_ts": "2010-09-27T16:22:54Z",
    "fixes": [
      50015
    ]
  },
  {
    "id": 55071,
    "summary": "try finally catch structure masks original exception in JDBCRealm.getPassword()",
    "description": "I have run into a mysterious apparent SQL exception in JDBCRealm.getPassword().\n\nPresumably, line 557 \"stmt.executeQuery()\" occasionally fails. I'm not sure why and would like to know why. \n\nHowever, the finally block contains dbConnection.commit() (line 579). This throws an exception (Connection Closed) which is then logged on line 585. \n\nIn summary, line 579 should be surrounded by a try catch.",
    "comments": [
      "That commit() looks weird to me. COMMIT after SELECT?",
      "I was wondering about that. I never do that on SELECT statements myself. After I read that piece of code, I was thinking that perhaps I've been doing SQL wrong for all these years! \n\nLooking at http://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#setAutoCommit%28%29 it sounds like rs.close() commits the select. \n\nSo perhaps the solution is to just get rid of the commit() statement.",
      "While this is likely to be fixed, you should understand that JDBCRealm is not appropriate for any real-world situation. Instead, you should use DataSourceRealm, which is much more robust.",
      "Thanks I've made the switch.",
      "Ah, the joys of svn archeology.\n\nThe dbConnection.commit() is a result of fixing 10623. I am not convinced it was ever necessary. The fix for 10623 also added the rs.close() which does essentially the same thing.\n\nThis has been fixed in trunk and 7.0.x and will be included in 7.0.42 onwards.",
      "Opps. My analysis assumed autoCommit == true which it doesn't. The commit is therefore required. I've restored it and cleaned up the code.",
      "I still think commit() should not be called. For the shared-connection of JDBCRealm to ever be put into auto-commit=false would be an enormous mistake, assuming any data modification was taking place... which it is not."
    ],
    "creation_ts": "2013-06-06T22:26:48Z",
    "fixes": [
      55071
    ]
  },
  {
    "id": 69214,
    "summary": "CORSFilter prevent requests with POST method with no content type",
    "description": "i have a web application that accepts POST requests with no supplied data (no Content-Type nor Content_Length) and that can handle client calls.\n\nWhen the client makes the same call though CORS, the CORSFilter detects and error and return HTTP 403 code.\n\nLooking at some Q/A regarding POST ... we can see that it is legitimate to implement POST calls with no content (body)\nhttps://lists.w3.org/Archives/Public/ietf-http-wg/2010JulSep/0275.html\n\nIn the CorsFilter.checkRequestType () method, though, it seems no having any content type prevent from updating the requestType, initialized with CORSRequestType.INVALID_CORS.\n\nQ: shouldn't we return in such case CORSRequestType.SIMPLE or CORSRequestType.ACTUAL ?\n\nie: (see 'set the request type then ...')\n\nprotected CORSRequestType checkRequestType(final HttpServletRequest request) {\n   CORSRequestType requestType = CORSRequestType.INVALID_CORS;\n...\n                    } else if (\"POST\".equals(method)) {\n                        String mediaType = getMediaType(request.getContentType());\n                        if (mediaType != null) {\n                            if (SIMPLE_HTTP_REQUEST_CONTENT_TYPE_VALUES.contains(mediaType)) {\n                                requestType = CORSRequestType.SIMPLE;\n                            } else {\n                                requestType = CORSRequestType.ACTUAL;\n                            }\n                        } else {\n                            // sets the request type then ...\n                            requestType = CORSRequestType.SIMPLE;\n                        }\n\n                    } else {\n...\n    return requestType;\n}",
    "comments": [
      "Agreed. Thanks for reporting this and for doing the research to figure out the root cause and a potential fix.\n\nThe fix is correct but it triggers a test failure but that is because the test is testing the wrong thing. I'm working on fixing that too and should have something to commit later today.",
      "Fixed in:\n- 11.0.x for 11.0.0-M23 onwards\n- 10.1.x for 10.1.27 onwards\n-  9.0.x for  9.0.92 onwards"
    ],
    "creation_ts": "2024-07-22T17:55:05Z",
    "fixes": [
      69214
    ]
  },
  {
    "id": 66665,
    "summary": "Provide option to supply role mapping from a properties file",
    "description": "Note: This applies to all Tomcat versions\n\nIn enterprises you often use a centralized identity store where you do not have control over the group/roles names, but in your application you want to use friendly role names, e.g., 'admin', 'user', 'clerk', etc. Luckily realms utilize  Context.findRoleMapping(String) indirectly, so we only need to populate those mappings.\n\nI have written such a mapping listener and would like to integrate it into upstream: https://mo-tomcat-ext.sourceforge.net/apidocs/net/sf/michaelo/tomcat/extras/listeners/PropertiesRoleMappingListener.html if there is a general interest, I guess there is. There code is straight forward: https://sourceforge.net/p/mo-tomcat-ext/code/HEAD/tree/trunk/src/main/java/net/sf/michaelo/tomcat/extras/listeners/PropertiesRoleMappingListener.java",
    "comments": [
      "PR provided.",
      "Fixed in:\n- main for 11.0.0-M8 and onwards\n- 10.1.x for 10.1.11 and onwards\n- 9.0.x  for 9.0.77 and onwards\n- 8.5.x for 8.5.91 and onwards",
      "*** Bug 55477 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2023-06-22T07:43:15Z",
    "fixes": [
      66665
    ]
  },
  {
    "id": 37326,
    "summary": "No error reported when <jsp:include> has non-existent target",
    "description": "I'm not sure this is a bug - might be expected behaviour - I'm not expert in \nthis area.  Have tried to ascertain what should be happening, by reading the \nservlet/JSP spec docs and parts of the TC source code, but I'm still not quite \nsure.  I posted to tomcat-user twice seeking help on this (no responses).\n\nThe problem that I'm seeing is that when a JSP page includes one or more JSP \nfragments using <jsp:include> actions, but the fragment files don't exist, the \nincluding JSP page is returned to the browser without the fragments included.  \nIt's as if the including JSP ignores the missing fragments and continues being \nprocessed.  The including page is returned with SC of 200, as if there is no \nproblem. Nothing is written to any log file to indicate the problem.\n\nI would have expected this to return an exception or a 404, but neither \nhappens.  Is this the expected behaviour?  As it stands, a webapp bug like \nthis could go unnoticed for quite some time.  Normally TC is good at bringing \nbugs like this to the developer's attention.\n\nSee attached war for simple example.  First discovered on 5.5.9, verified same \nbehaviour on 5.5.12, both based on fresh TC installs.\n\nI appreciate that once the including JSP has written the part of its response \nbefore the include, the response could already be committed depending on \nbuffer size, so calling sendError() will cause an IllegalStateException.  \nAlso, may not be possible to return an error page at this point, again because \nthe response is already committed...?  Perhaps though an exception could be \nlogged?  Or, perhaps (?)the including page's processing should be stopped, \nrather than allowing it to continue.\n\nSome other info: I only discovered that I had omitted the fragment files from \nmy warfile when I first started TC from NetBeans rather than from TC batch \nscripts.  When I did this, the missing fragments are then reported with SC \n404.  As far as I can tell, it seems that the addition of the NetBeans \nHTTPMonitorFilter to conf/web.xml is what causes the 404 to be reported where \nit was previously silent.  Have drawn a blank on why this might be.\n\nFor more info (my posts to tc-user) see also: http://marc.theaimsgroup.com/?\nl=tomcat-user&m=113034098008166&w=2",
    "comments": [
      "Created attachment 16849\nexample war file",
      "I'm looking at org.apache.catalina.core.ApplicationDispatcher (which I think is\nthe relevant class), and it seems to log and re-throw all the exceptions. \nSteve, can you please retry it on 5.5.12 with DEBUG-level logging enabled for\nthis class, and post your findings when you get a chance?  Thanks.",
      "(In reply to comment #2)\nOK have done that.  Used fresh install of TC5.5.12 installed as windows \nservice using the service.bat script (which is my standard dev setup).  TC is \nunmodified from standard install, except that I added my test.war (attached) \nto the webapps folder. No other changes to standard setup.  PS am using jdk \n1.5.0_02-b09\n\nFor some reason could not get DEBUG/ALL logging of the class to work with \njava.util.logging (which is what I normally use), so installed log4j instead \nexactly as described on the logging docs page (at \nhttp://tomcat.apache.org/tomcat-5.5-doc/logging.html), with the exception that \nI modified log4j.properties as shown below to give DEBUG level on the \nApplicationDispatcher, hope this is correct, not sure as do not know log4j \nwell:\n\nlog4j.rootLogger=info, R \nlog4j.appender.R=org.apache.log4j.RollingFileAppender \nlog4j.appender.R.File=${catalina.home}/logs/tomcat.log \nlog4j.appender.R.MaxFileSize=10MB \nlog4j.appender.R.MaxBackupIndex=10 \nlog4j.appender.R.layout=org.apache.log4j.PatternLayout \nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n \nlog4j.logger.org.apache.catalina.core.ApplicationDispatcher=DEBUG\n\nThen ran the request to http://localhost:8080/test/ to test the attached war.  \nPage worked fine as before, no reported errors in logfile or browser, despite \none of the included files being missing from the webapp.  The entire contents \nof the resulting tomcat.log are attached.\n\nHope this helps, just let me know if you need anything else.",
      "Created attachment 17073\ntomcat.log using log4j with DEBUG level for ApplicationDispatcher",
      "Steve, thank you.  This helps.  I'll try to find more time to look at this\nwithin the next few days.",
      "Ooops, I guess I didn't get to this in a few days, did I?  It's piqued my\ncuriosity again.  Thanks for going through the debugging steps and attaching the\nWAR.  Your log4j configuration looks fine.  I'll try to run an instrumented\nversion of the code locally with more logging statements and see if I can learn\nanything.",
      "This has been fixed in 5.5.x and 6.0.x and will be included in the next releases\nof each.",
      "Is it possible to disable this behavior with configuration?  I love the addition\nof this error, but I don't want to have to update legacy versions of my app.",
      "I am afraid not."
    ],
    "creation_ts": "2005-11-01T22:59:43Z",
    "fixes": [
      37326
    ]
  },
  {
    "id": 63905,
    "summary": "ErrorReportValve adds CSS even if both showReport and showServerInfo are set to false",
    "description": "According to the documentation for ErrorReportValve (https://tomcat.apache.org/tomcat-8.5-doc/config/valve.html#Error_Report_Valve), disabling both showServerInfo and showReport will only return the HTTP status code and remove all CSS, however after the fix for 60490 (https://bz.apache.org/bugzilla/show_bug.cgi?id=60490) this is no longer the case and the error page returns responses like this:\n\n<!doctype html><html lang=\"en\"><head><title>HTTP Status 400 \u2013 Bad Request</title><style type=\"text/css\">h1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} h2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} h3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} body {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} b {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} p {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;} a {color:black;} a.name {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 400 \u2013 Bad Request</h1></body></html>",
    "comments": [
      "The documentation is wrong. If you look at the CSS, you need at least for body and h1. One would need to break up the CSS in parts and include only the required bits.",
      "For the record:\n\nThe CSS was removed when showServerInfo and showReport are both false for debatable security reasons as part of bug 58383.\n\nThe CSS was restored in all cases as part of bug 60490.\n\nI have a preference for fixing the docs but am happy to support any reasonable solution that means the behaviour and the docs are consistent.",
      "(In reply to Mark Thomas from comment #2)\n> For the record:\n> \n> The CSS was removed when showServerInfo and showReport are both false for\n> debatable security reasons as part of bug 58383.\n\nAre you certain? That does not look related?!\n \n> The CSS was restored in all cases as part of bug 60490.\n> \n> I have a preference for fixing the docs but am happy to support any\n> reasonable solution that means the behaviour and the docs are consistent.\n\nEven if you fix the docs, as least a minimal CSS is required.\n\nWhat we can do is to reduce the CSS for starters:\n\n* <a> is never used\n* Setting font-family should be done at best once in the body\n* background color #525D76 should be done once too\n\nI will take care of this, but at low priority.",
      "Or we could just drop the CSS because... who cares? If the response entity is <!doctype html><html lang=\"??\"><head><title>Error</title></head><body><h1>Error</h1></body></html> then it's fine. No styling is necessary for such a minimal page.",
      "(In reply to Michael Osipov from comment #3)\n> (In reply to Mark Thomas from comment #2)\n> > For the record:\n> > \n> > The CSS was removed when showServerInfo and showReport are both false for\n> > debatable security reasons as part of bug 58383.\n> \n> Are you certain? That does not look related?!\n\nSorry typo, bug 56383",
      "(In reply to Christopher Schultz from comment #4)\n> Or we could just drop the CSS because... who cares? If the response entity\n> is <!doctype html><html\n> lang=\"??\"><head><title>Error</title></head><body><h1>Error</h1></body></\n> html> then it's fine. No styling is necessary for such a minimal page.\n\nThat would be inconsistent with the rest. The Servlet spec requires an HTML page, we will comply. I see no real fuzz by delivering those bytes given that our error page is minimal already.",
      "Please also note that TomcatCSS.TOMCAT_CSS is also used in the DefaultServlet. We either split with common parts or we stay on one and may server rules which do not apply to the error report. I would stick to one because it is plain and simple. I am already working on a simpler approach.",
      "(In reply to Mark Thomas from comment #2)\n> I have a preference for fixing the docs but am happy to support any\n> reasonable solution that means the behaviour and the docs are consistent.\n\n+1 for fixing the docs.",
      "I have uploaded a branch for this, changelog edit is pending. Please have a look. It works for me in Firefox and Edge for the Valve and the DefaultServlet with listing on.",
      "(In reply to Michael Osipov from comment #6)\n> (In reply to Christopher Schultz from comment #4)\n> > Or we could just drop the CSS because... who cares? If the response entity\n> > is <!doctype html><html\n> > lang=\"??\"><head><title>Error</title></head><body><h1>Error</h1></body></\n> > html> then it's fine. No styling is necessary for such a minimal page.\n> \n> That would be inconsistent with the rest. The Servlet spec requires an HTML\n> page, we will comply.\n\nCSS is not a requirement for a valid HTML document. There is no conflict between removing CSS entirely and returning a valid HTML document along with an error report.",
      "(In reply to Christopher Schultz from comment #10)\n> CSS is not a requirement for a valid HTML document. There is no conflict\n> between removing CSS entirely and returning a valid HTML document along with\n> an error report.\n\nThe CSS provides a better user experience for the developer, the cost of having it seems non existent too. Did I miss something ?",
      "Probably not. The argument against it was made in bug 56383. I'm not convinced.",
      "I don't see how \"securing the ErrorReportValve\" is related to the served CSS.\n\nHowever, I have found a few more nits I am going through locally now where the CSS will now cleanly apply to the ErrorReportValve as well as the listing of DefaultServlet.",
      "(In reply to Michael Osipov from comment #13)\n> I don't see how \"securing the ErrorReportValve\" is related to the served CSS.\n\nIt's a *thin* argument related to fingerprinting the server's version. If you modify the CSS in Tomcat 9.0.28, a client can request a page known to produce this output, check the CSS, and determine if the version is before/after that patch. Well, to some degree of certainty.\n\n> However, I have found a few more nits I am going through locally now where\n> the CSS will now cleanly apply to the ErrorReportValve as well as the\n> listing of DefaultServlet.\n\nThis should all really be replaced by external stylesheets, for a few reasons:\n\n1. They are trivially changed by administrators instead of hacking Java code\n2. They can be completely blocked, replaced, etc. by a reverse proxy if desired\n3. They are more compatible with a desire to reduce response entity byte count\n4. They can be used with a \"safe\" CSF policies[1]\n\n[1] https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src",
      "(In reply to Christopher Schultz from comment #14)\n> (In reply to Michael Osipov from comment #13)\n> > I don't see how \"securing the ErrorReportValve\" is related to the served CSS.\n> \n> It's a *thin* argument related to fingerprinting the server's version. If\n> you modify the CSS in Tomcat 9.0.28, a client can request a page known to\n> produce this output, check the CSS, and determine if the version is\n> before/after that patch. Well, to some degree of certainty.\n\nThis is likely, but the paranoid should swap the ErrorReportValve for a custom one.\n\n> > However, I have found a few more nits I am going through locally now where\n> > the CSS will now cleanly apply to the ErrorReportValve as well as the\n> > listing of DefaultServlet.\n> \n> This should all really be replaced by external stylesheets, for a few\n> reasons:\n> \n> 1. They are trivially changed by administrators instead of hacking Java code\n> 2. They can be completely blocked, replaced, etc. by a reverse proxy if\n> desired\n> 3. They are more compatible with a desire to reduce response entity byte\n> count\n> 4. They can be used with a \"safe\" CSF policies[1]\n\nI agree here, but this is far more work than I do now at the moment. A lot of stuff is hardcoded in Java, burried in static fields. All of our default apps would require a rewrite -- and all of them are optional!",
      "Fixed in:\n- master for 9.0.28 onwards\n- 8.5.x for 8.5.48 onwards\n- 7.0.x for 7.0.98 onwards\n\nI have opted to fix this for now since I am the one who made the last rewrite of the ErrorReportValve output. I am quite certain that there is still room for improvement and discussion from the other committers. Let's continue this on the mailing list please.\n\nawaltman@gmail.com, if you think there is still something open to be fixed, raise this on the mailing list please, I'd be happy to jump into the discussion.",
      "(In reply to Michael Osipov from comment #15)\n> (In reply to Christopher Schultz from comment #14)\n> > This should all really be replaced by external stylesheets, for a few\n> > reasons:\n> > \n> > 1. They are trivially changed by administrators instead of hacking Java code\n> > 2. They can be completely blocked, replaced, etc. by a reverse proxy if\n> > desired\n> > 3. They are more compatible with a desire to reduce response entity byte\n> > count\n> > 4. They can be used with a \"safe\" CSF policies[1]\n> \n> I agree here, but this is far more work than I do now at the moment.\n\nHonestly, I see this as easy:\n\n1. Move CSS definitions to [whatever.css]\n1. Change all CSS to <link rel=\"stylesheet\" href=\"[whatever.css]\" />\n\n> A lot of stuff is hardcoded in Java, buried in static fields.\n> All of our default apps would require a rewrite -- and all of them are optional!\n\n\"Our default apps\" = \"Tomcat's default apps\"?\n\nYou gotta start somewhere.",
      "(In reply to Christopher Schultz from comment #17)\n> (In reply to Michael Osipov from comment #15)\n> > (In reply to Christopher Schultz from comment #14)\n> > > This should all really be replaced by external stylesheets, for a few\n> > > reasons:\n> > > \n> > > 1. They are trivially changed by administrators instead of hacking Java code\n> > > 2. They can be completely blocked, replaced, etc. by a reverse proxy if\n> > > desired\n> > > 3. They are more compatible with a desire to reduce response entity byte\n> > > count\n> > > 4. They can be used with a \"safe\" CSF policies[1]\n> > \n> > I agree here, but this is far more work than I do now at the moment.\n> \n> Honestly, I see this as easy:\n> \n> 1. Move CSS definitions to [whatever.css]\n> 1. Change all CSS to <link rel=\"stylesheet\" href=\"[whatever.css]\" />\n\nIt is not that easy. TOMCAT_CSS is used in multiple locations. You have to make sure that they are present for several components.\n\n> > A lot of stuff is hardcoded in Java, buried in static fields.\n> > All of our default apps would require a rewrite -- and all of them are optional!\n> \n> \"Our default apps\" = \"Tomcat's default apps\"?\n\nCorrect!\n \n> You gotta start somewhere.\n\nAnalysis first, then discuss.",
      "(In reply to Michael Osipov from comment #18)\n> (In reply to Christopher Schultz from comment #17)\n> > (In reply to Michael Osipov from comment #15)\n> > > (In reply to Christopher Schultz from comment #14)\n> > > > This should all really be replaced by external stylesheets, for a few\n> > > > reasons:\n> > > > \n> > > > 1. They are trivially changed by administrators instead of hacking Java code\n> > > > 2. They can be completely blocked, replaced, etc. by a reverse proxy if\n> > > > desired\n> > > > 3. They are more compatible with a desire to reduce response entity byte\n> > > > count\n> > > > 4. They can be used with a \"safe\" CSF policies[1]\n> > > \n> > > I agree here, but this is far more work than I do now at the moment.\n> > \n> > Honestly, I see this as easy:\n> > \n> > 1. Move CSS definitions to [whatever.css]\n> > 1. Change all CSS to <link rel=\"stylesheet\" href=\"[whatever.css]\" />\n> \n> It is not that easy. TOMCAT_CSS is used in multiple locations. You have to\n> make sure that they are present for several components.\n\nSo use TOMCAT_EXTERNAL_CSS as a replacement, and only implement it in e.g. DefaultServlet. No need to re-write all of Tomcat's use of CSS at once."
    ],
    "creation_ts": "2019-11-05T22:26:06Z",
    "fixes": [
      63905
    ]
  },
  {
    "id": 58031,
    "summary": "Posting data exceeding maxPostSize should result in HTTP 413.",
    "description": "Created attachment 32821\nInitial draft of patch, created against trunk.\n\nWhen data exceeding the value of the \"maxPostSize\" configuration parameter is posted within a deployed application, the application sees an empty request parameter map and cannot access the posted data, yet Tomcat returns a 200 status, indicating to the client that everything was processed successfully (which likely will mislead the client).  The correct behavior is to return a status of 413 (\"Request Entity Too Large\") to indicate that the request could not be fully processed due to the size being too large.\n\nAttached is a patch that will set the response status to 413 when Tomcat discovers that the posted data exceeds maxPostSize.",
    "comments": [
      "I'm iffy on this patch because it's not configurable (I'd like to point out that the current behavior is also not configurable, and this definitely is an improvement). The application itself might want to check this situation and react differently, like it can when there are too many request parameters.\n\nYou should check out the FailedRequestFilter to see what happens in that case:\nhttp://tomcat.apache.org/tomcat-8.0-doc/config/filter.html#Failed_Request_Filter\n\nIt does almost what you want, except that it returns a 400 response instead of 413, and only currently works for violations of maxParameterCount.\n\nLook into how Globals.PARAMETER_PARSE_FAILED_ATTR is used to communicate this situation to the application and see if you can come up with something that might work better than your current proposal.",
      "Agreed. The right response is definitely going to be application dependent. Most of the problem stems from getParameterXXX() methods not declaring any exceptions. We also run the risk of breaking lots of stuff if we start sending 413 responses where we currently send a 200 response.\n\nOn balance I think setting some a custom request attribute that an application can check if they want to (and if not the current behaviour continues) along the lines of Globals.PARAMETER_PARSE_FAILED_ATTR is going to be the way to go.",
      "Created attachment 32829\nAdd FailedRequestFilter note to maxPostSize documentation.",
      "(In reply to Christopher Schultz from comment #1)\n> Look into how Globals.PARAMETER_PARSE_FAILED_ATTR is used to communicate\n> this situation to the application and see if you can come up with something\n> that might work better than your current proposal.\n\nIt appears that both checks for maxPostSize do result in Globals.PARAMETER_PARSE_FAILED_ATTR being set: in Request#parseParts, an exception is thrown, and in the finally block of the try/catch/finally block parameters.setParseFailed(true) is set.  In Request#parseParameters, the try/catch/finally block is exited without setting 'success' to true, and the finally block calls parameters.setParseFailed(true) in this case.  So it appears the original concern about return 200 in this case is addressed.\n\nThe documentation for maxParameterCount notes that FailedRequestFilter can be used to reject requests that exceed this limit.  I've attached a patch to include the same note in the maxPostSize documentation after verifying 400 is returned in this case (as noted above).\n\n> It does almost what you want, except that it returns a 400 response instead\n> of 413\n\nUnconditionally sending a 400 from FailedRequestFilter upon failure seems incorrect as the HTTP spec states that 400 is to be used when the request failed \"due to malformed syntax,\"[1] which isn't the case for maxPostSize and maxParameterCount violations; in some parse failure cases 400 is correct, but for these violations 413 seems more appropriate.  I'd propose implementing a mechanism to indicate from the parsing code which status should be returned from FailedRequestParameter.  Thoughts?\n\n[1] HTTP/1.1: Status Code Definitions\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1",
      "I was thinking a using the existing attribute to trigger a 400 response and a new attribute to trigger a 413 response. That should cover all the current possibilities for parameter/part issues.\n\nNote RFC 2616 is obsolete.",
      "(In reply to Christopher L. Simons from comment #4)\n> \n> Unconditionally sending a 400 from FailedRequestFilter upon failure seems\n> incorrect as the HTTP spec states that 400 is to be used when the request\n> failed \"due to malformed syntax,\"[1] \n> \n> [1] HTTP/1.1: Status Code Definitions\n> http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1\n\nIn my opinion, it would be nice to use 413, but it is not wrong to use 400. \"400\" is just the generic error code in 4xx series. It says \"it is client's fault\". Nothing more.\n\nLikewise \"500\" is the generic error code in 5xx series.\n\n\nNote that RFC2616 is obsolete.\nCurrent specification for HTTP/1.1 status codes is RFC 7231:\nhttp://tools.ietf.org/html/rfc7231#section-6.5.1\n\nHTTP RFCs are listed at\nhttps://wiki.apache.org/tomcat/Specifications#HTTP",
      "(In reply to Mark Thomas from comment #5)\n> I was thinking a using the existing attribute to trigger a 400 response and\n> a new attribute to trigger a 413 response. That should cover all the current\n> possibilities for parameter/part issues.\n\n-1.\n\nBy my '-1' vote I mean that when \"using a new attribute to trigger a 413 response\" I am against changing the meaning of the existing attribute. If something failed, the existing attribute should continue to indicate failure.\n\nIt can be\n1) Globals.PARAMETER_PARSE_FAILED_ATTR to signal presence of an error\n2) additional attribute to signal the kind of an error.\n\nOriginally when introducing PARAMETER_PARSE_FAILED_ATTR I have not defined what its value is. It was documented as \"absent = success\", \"any not-null value = failure\" with an intent to introduce different not-null values for different use cases. Nowadays javadoc for Globals.PARAMETER_PARSE_FAILED_ATTR explicitly mentions Boolean.TRUE as the value. Thus for compatibility it is better to go with a separate attribute to communicate the reason of the failure.\n\nTechnically, PARAMETER_PARSE_FAILED_ATTR is a facade that exposes the value of internal coyoteRequest.getParameters().isParseFailed() flag. For reference: r1200218\n\n\nHistorically this attribute and FailedRequestFilter were introduced as a review of CVE-2012-0022 fix that introduced \"maxParameterCount\" limit. The intent was to be able to perform a simple test that none parameters were lost.\n\nAlso I think that exceeding the \"maxParameterCount\" limit also would better result in response status 413.\n\n\nI wish there were a Servlet API way to communicate parameter processing errors.\n\nHttpServletRequest.getParts() and getPart() methods implement some way to indicate errors by throwing an exception, but an IllegalStateException thrown there is used to indicate both \"size limit exceeded\" and \"missing multipart-config\" conditions. [1]\n\nThere exist \"javax.servlet.error.exception\" and other standard Request attributes as defined in ch.10.9.1 of Servlet 3.1 specification, but IIRC they are used only when performing an error processing dispatch.\n\n[1] http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getParts%28%29",
      "(In reply to Konstantin Kolinko from comment #7)\n> (In reply to Mark Thomas from comment #5)\n> > I was thinking a using the existing attribute to trigger a 400 response and\n> > a new attribute to trigger a 413 response. That should cover all the current\n> > possibilities for parameter/part issues.\n> \n> -1.\n\nFair enough. How about using a second attribute to set the response code? If set use the defined code. If not set, use 400.",
      "I'd prefer being able to set the response code using an init-param. If we want to keep the current behavior and add on to it, it seems we need a second attribute to indicate the second condition. In either case, I think it woul dbe nice for the user to be able to customize the HTTP response code.\n\n[I don't like returning 413 (Entity Too Large) for \"too many request parameters\" unless it's actually a POST with a request entity.]",
      "I've patched trunk (9.0.x) to make the reason for the failure available as a request attribute that the FailedRequestFilter can then use to provide a better status code to the client.\n\nI'll give it a few days for folks to review and comment on the patch before back-porting it.",
      "No objections were raised so I have back-ported this to 8.0.x (for 8.0.25 onwards) and 7.0.x (for 7.0.64 onwards). I have also proposed it for 6.0.x.",
      "Any objections to applying the attached documentation patch?  I think it would save many users from having to search and dig up this post to realize they can use FailedRequestFilter to adjust the behavior that occurs when @maxPostSize is exceeded.",
      "Fixed in 6.0.x for 6.0.45 onwards."
    ],
    "creation_ts": "2015-06-13T07:42:06Z",
    "fixes": [
      58031
    ]
  },
  {
    "id": 69521,
    "summary": "Supporting for Korean Characters.",
    "description": "Hello.\n\nWhen I use a EL Express with Korean Character like ${\uc774\ub984}, there occurs an error.\n-------\nCaused by: org.apache.el.parser.ParseException: Encountered \" <ILLEGAL_CHARACTER> \"\\uc774 \"\" at line 1, column 3.\nWas expecting one of:\n    \"{\" ...\n    <INTEGER_LITERAL> ...\n    <FLOATING_POINT_LITERAL> ...\n    <STRING_LITERAL> ...\n    \"true\" ...\n    \"false\" ...\n    \"null\" ...\n    \"(\" ...\n    \"[\" ...\n    \"!\" ...\n    \"not\" ...\n    \"empty\" ...\n    \"-\" ...\n    <IDENTIFIER> ...\n    <IDENTIFIER> ...\n    \"(\" ...\n-----\nBut, If I use other languages like Japanese or Chinese charecters, there is no error.\n\nPlease, support for Korean Characters.\n\nThanks in advance.",
    "comments": [
      "Please provide examples of the working expressions using Japanese and/or Chinese characters to help us determine what is happening.",
      "Try to input these each value in any jsp file.\n\n- Korean characters : ${\uac70\ub9ac}\n- Japanese characters : ${\u30b9\u30c8\u30ea\u30fc\u30c8}\n- Chainese characters : ${\u8ddd\u79bb}\n\nThanks.",
      "https://github.com/apache/tomcat/blob/main/java/org/apache/el/parser/ELParser.jjt#L559\ndoes not include all the ranges in the world.\n\nDo we really really need this ?",
      "Yes, this is something we truly need.  \nMost JSP template engines nowadays support rendering views with Unicode.  \nHowever, JSP EL does not support Unicode.  \nPlease include at least support for Korean characters.\n\nThanks",
      "This could get messy. See https://github.com/jakartaee/expression-language/issues/278 for a full description of the problem.\n\nFor this specific issue, I will look at expanding the definition of LETTER and DIGIT to include all characters Java considers to be letters and digits respectively.\n\nLonger term, I expect the Tomcat EL implementations to align with the original definition for identifier of \"Java language identifier\" but that will depend on the outcome of the discussion around the EL issue.",
      "Fixed in:\n- 11.0.x for 11.0.3 onwards\n- 10.1.x for 10.1.35 onwards\n-  9.0.x for  9.0.99 onwards"
    ],
    "creation_ts": "2025-01-04T03:31:50Z",
    "fixes": [
      69521
    ]
  },
  {
    "id": 48701,
    "summary": "jsp:getProperty broken for certain cases",
    "description": "I've updated from tomcat6-6.0.18-9.jpp5 to tomcat6-6.0.24-2.jpp5\n\nThis breaks a lot of JSPs! Jasper simply denies to compile them. I hunted down the bug to a very simple example:\n\n<%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<c:set var=\"now\" value='<%= new java.util.Date() %>' />\n<jsp:getProperty name=\"now\" property=\"time\" />\n\nThis will simply output the current unix time (e.g. 1265641020987).\nOn tomcat 6.0.24 I get this:\n\norg.apache.jasper.JasperException: jsp:getProperty for bean with name 'now'. Name was not previously introduced as per JSP.5.3\n\tat org.apache.jasper.compiler.Generator$GenerateVisitor.visit(Generator.java:1083)\n\tat org.apache.jasper.compiler.Node$GetProperty.accept(Node.java:1124)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2411)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2417)\n\tat org.apache.jasper.compiler.Node$Root.accept(Node.java:495)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2361)\n\tat org.apache.jasper.compiler.Generator.generate(Generator.java:3383)\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:216)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:332)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:312)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:299)\n\tat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:589)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:317)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\nMy JDK is\njava version \"1.6.0_17\"\nJava(TM) SE Runtime Environment (build 1.6.0_17-b04)\nJava HotSpot(TM) Server VM (build 14.3-b01, mixed mode)\n\nPlease fix that! I assume that a lot of apps will break out there ...",
    "comments": [
      "To make it even more clear, this works:\n\n<jsp:useBean id=\"now\" class=\"java.util.Date\" />\n<jsp:getProperty name=\"now\" property=\"time\" />\n\nBut getProperty always fails when the bean is not created with useBean. It's not specific to <c:set>. Other constructions also fail.",
      "As per the error message at the beginning of the stack trace, the JSP is not valid.",
      "(In reply to comment #2)\n> As per the error message at the beginning of the stack trace, the JSP is not\n> valid.\n\nI'll just add that <c:set> does not create a scripting variable, it creates a scoped variable. Here's part of the spec section referenced in the stack trace (JSP.5.3):\n\nThe object named by the name must have been \u201cintroduced\u201d to the JSP processor using either the jsp:useBean action or a custom action with an associated VariableInfo entry for this name. If the object was not introduced in this manner, the container implementation is recommended (but not required) to raise a translation error, since the page implementation is in violation of the specification.\n\nLooks like that's what's happening...",
      "That's really bad because that worked up to 6.0.18. I can't remember any problems with such JSPs since tomcat 4 and 5. What about a compatibility switch to keep all that 3rd party apps from breaking?",
      "Reopening.\n\nReviewing implementation of o.a.j.compiler.ScriptingVariabler and what the specification says about objects, scripting variables, and introducing them:\n\n\n1. In Tomcat code we make no distinction between variables declared programmatically (through VariableInfo) and through TLD (TagVariableInfo).\n\nBoth introduce a java language variable (aka scripting variable) in the generated code.\n\nFrom JSP.7.1.2 of JSP/2.2 spec:\n\n\"Finally, the XML document is processed to create a JSP page implementation\nclass. This process may involve creating scripting variables. Each custom action\nwill provide information about variables, either statically in the TLD, or more\nflexibly by using the getVariableInfo method of a TagExtraInfo class.\"\n\n- both ways introduce a variable\n\n\n2. About the wording of JSP.5.3 I think that\nThere is no explicit requirement in the Spec to use TagVariableInfo to implement variables introduced through TLD at the time when we are generating the servlet code.  Thus I think the spec mentions VariableInfo in JSP.5.3, making no distinction.  Also maybe the wording was remained intact since JSP/1.1, and variable declarations in TLDs were introduced in JSP/1.2.\n\n\nThe place to fix this issue would be\nGenerator#GeneratorVisitor#visit(Node.CustomTag)\n- see \"JSP.5.3\" mentioned in a comment there",
      "Agreed. TagVariableInfo should be just as acceptable for this purpose.\n\nI have fixed this in trunk and proposed it for 6.0.x",
      "In r920880 of trunk I added a system property to allow disabling enforcement of JSP.5.3. This is proposed for 6.0 and 5.5.",
      "*** Bug 47822 has been marked as a duplicate of this bug. ***",
      "This has been applied to 5.5.x and will be included in 5.5.30 onwards.",
      "This has been applied to 5.5.x and will be included in 5.5.30 onwards.",
      "The patch has been applied to 6.0.x and will be included in 6.0.27 onwards.",
      "Still seeing this after upgrading to 6.0.29...\n\norg.apache.jasper.JasperException: jsp:getProperty for bean with name 'auth'. Name was not previously introduced as per JSP.5.3\n        at org.apache.tools.ant.ProjectHelper.addLocationToBuildException(ProjectHelper.java:574)\n        at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:422)\n        at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:144)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:306)\n        at org.apache.tools.ant.Task.perform(Task.java:401)\n        at org.apache.tools.ant.Target.execute(Target.java:338)\n        at org.apache.tools.ant.Target.performTasks(Target.java:365)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1237)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1094)\n        at org.apache.tools.ant.Main.runBuild(Main.java:669)\n        at org.apache.tools.ant.Main.startAnt(Main.java:220)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:215)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:90)",
      "(In reply to comment #12)\nAre you sure, that your jsp page is valid? If you are, please attach a war file with a sample web application that reproduces the issue.\n\nNote, that since 5.5.30 and 6.0.27 (as already is mentioned) you can disable the check for conformance with JSP.5.3. by defining a certain system property.\n\nhttp://tomcat.apache.org/tomcat-6.0-doc/config/systemprops.html\n\nI am re-closing this as FIXED."
    ],
    "creation_ts": "2010-02-08T07:02:56Z",
    "fixes": [
      48701
    ]
  },
  {
    "id": 49343,
    "summary": "AbstractReplicatedMap is not removed from channel.",
    "description": "AbstractReplicatedMap#init() is as follows.\n=====\nprotected void init(....) {\n    \n    ...skip...\n    this.rpcChannel = new RpcChannel(this.mapContextName, channel, this);\n    //add this map as a message listener\n    this.channel.addChannelListener(this);\n    //listen for membership notifications\n    this.channel.addMembershipListener(this);\n    \n    try {\n        //broadcast our map, this just notifies other members of our existence\n        broadcast(MapMessage.MSG_INIT, true);\n        //transfer state from another map\n        transferState();\n        //state is transferred, we are ready for messaging\n        broadcast(MapMessage.MSG_START, true);\n    } catch (ChannelException x) {\n        log.warn(\"Unable to send map start message.\");\n        throw new RuntimeException(\"Unable to start replicated map.\",x);\n    }\n}\n=====\n\nWhen ChannelException is thrown after this(AbstractReplicatedMap) is added to channel, \nRuntimeException is thrown.\nAnd AbstractReplicatedMap#init() is called from the constructor of \nAbstractReplicatedMap(LazyReplicatedMap or ReplicatedMap). \n\nIn a word, no one can remove this(AbstractReplicatedMap) added to channel.\n\nAs a result, trivial memory leak and IllegalArgumentException(\"Listener already exists:...) are caused. \n\n\nBest regards.",
    "comments": [
      "Created attachment 25485\nAbstractReplicatedMap's patch\n\nI made a patch.\nThis patch contains the same fix about RpcChannel.",
      "Fixed in trunk and proposed for 6.0.x.",
      "This fix applied to 6.0, will be in 6.0.30 onwards."
    ],
    "creation_ts": "2010-05-26T07:47:12Z",
    "fixes": [
      49343
    ]
  },
  {
    "id": 60997,
    "summary": "Enhance SemaphoreValve to support denied status and path matching",
    "description": "Hi,\n\nwould be great to enrich the SemaphoreValve to support few more things. Obvious and easy ones are:\n\n1. deniedStatus and have a default implementation of permitDenied setting this status (Note: if not possible in current valve a EnhancedSemaphoreValve would be good enough)\n2. controlConcurrency should enable to match a requestUri, I guess a includeRequestUris and excludeRequestUris is the way to go\n\nOn probably a bit more difficult side, it would be great to support asynchronism limiting. This one can require to move the valve to a filter to be able to wrap the AsyncContext to have the right hooks but this would make it fully functional.\n\nFinally: this valve provides concurrent limit but is there any plan to have rate limiting (based on a time slot)?",
    "comments": [
      "I started looking at 2) since I think I saw the request somewhere else as well in the past, but it was a bit messy (I tried using RequestFilterValve as well).\n\nInstead I added a new feature to the rewrite valve: https://github.com/apache/tomcat/commit/7a3bbc6e300ced35268fe1c46c90f6b5c752dc5c\nSince it allows skipping the next valve, if the semaphore valve is configured right after the rewrite valve, it can simply how over it if when a rule matches.",
      "Implemented in 11-M19, 10.1.20 and 9.0.88."
    ],
    "creation_ts": "2017-04-17T07:16:28Z",
    "fixes": [
      60997
    ]
  },
  {
    "id": 54044,
    "summary": "AccessLogValve using stale date/time with SimpleDateFormat",
    "description": "We are noticing old/stale date/times in out access logs. I copied (and scrubbed) the entries below from an access log from 2012-10-22.\n\n...,2012-10-15 18:00:56.705-0500,\"GET ...\n...,2012-10-22 10:29:01.801-0500,\"GET ...\n...,2012-10-22 10:29:01.802-0500,\"GET ...\n...,2012-10-22 10:29:01.803-0500,\"GET ...\n...,2012-10-22 10:29:01.804-0500,\"GET ...\n...,2012-10-15 18:00:56.804-0500,\"GET ...\n...,2012-10-15 18:00:56.857-0500,\"GET ...\n\nWe use using the SimpleDateFormat functionality and the beginTime prefix.  Our \"pattern\" is:\n\n%{X-Tomcat-Session}i,%S,%{X-Forwarded-For}i,%h,%u,%{begin:yyyy-MM-dd HH:mm:ss.SSSZ}t,&quot;%r&quot;,%s,%b,%p,%{Referer}i,&quot;%{User-Agent}i&quot;,%T\"\n\nIn the example above, jvm/tomcat instance was started on 2012-10-15 at 18:00:41 (a few seconds before the stuck time in the access log) so the  2012-10-15 18:00:56 times are likely related to some caching issues/problems.  We also occasionally see other log entries with incorrect (but not startup) dates/times.  For, example, we sometimes see yesterday's date in the access log.\n\nAlso, note that the millisecond times do appear to be correct in that they increase in a reasonable way and are unrelated to the date and second-truncated time.",
    "comments": [
      "Note that begin times can be old if your request take a long time to finish.\n\nCan you please add %D to your pattern, which will output the request duration in milliseconds. This is to check, whether the old time stamps belong to requests that took very long in processing.\n\nI suggest:\n\n%{X-Tomcat-Session}i,%S,%{X-Forwarded-For}i,%h,%u,%{begin:yyyy-MM-dd HH:mm:ss.SSSZ}t,&quot;%r&quot;,%s,%b,%p,%{Referer}i,&quot;%{User-Agent}i&quot;,%T,%{begin},%{end},%{end:yyyy-MM-dd HH:mm:ss.SSSZ}t,%D\"\n\nduring this debugging so you can check the consistency of begin time, end time and duration as well as consistency with the CLF formatted begin and end time stamps which are formatted by a slightly different format cache.",
      "I restarted earlier today with an updated pattern trying to get some more useful information.  The format was not the one you recommended (since it was before your request) but I added:\n\n%I - thread - in case the problem is thread related\n%t\n%{sec}t\n\nFor a final pattern of:\n\n%{X-Tomcat-Session}i,%S,%{X-Forwarded-For}i,%h,%u,%I,%t,%{sec}t,%{begin:yyyy-MM-dd HH:mm:ss.SSSZ}t,&quot;%r&quot;,%s,%b,%p,%{Referer}i,&quot;%{User-Agent}i&quot;,%T\n\nThe actual time of capture was 23/Oct/2012:14:49:59. I left on the %T data which is small.  These were not long duration requests.  Note the 11:18:18 entries. 11:18:18 is a few seconds after the jvm was started. I thought this might be relavent because of the child/parent caching logic in AccessLogValve.\n\n ... ,tomcat-exec-20,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 14:49:59.341-0500,\"GET ... ,0.000\n ... ,tomcat-exec-5,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 14:49:59.337-0500,\"GET ... ,0.005\n ... ,tomcat-exec-18,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 14:49:58.833-0500,\"GET ... ,0.590\n ... ,tomcat-exec-20,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 14:49:59.424-0500,\"GET ... ,0.002\n ... ,tomcat-exec-5,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 14:49:59.424-0500,\"GET ... ,0.009\n ... ,tomcat-exec-18,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.433-0500,\"GET ... ,0.001\n ... ,tomcat-exec-20,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 14:49:59.431-0500,\"GET ... ,0.008\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.444-0500,\"GET ... ,0.007\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.545-0500,\"GET ... ,0.007\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.555-0500,\"GET ... ,0.009\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.645-0500,\"GET ... ,0.004\n ... ,tomcat-exec-18,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.645-0500,\"GET ... ,0.006\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.654-0500,\"GET ... ,0.001\n ... ,tomcat-exec-18,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.653-0500,\"GET ... ,0.012\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.665-0500,\"GET ... ,0.012\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.765-0500,\"GET ... ,0.006\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.855-0500,\"GET ... ,0.006\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.865-0500,\"GET ... ,0.008\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.885-0500,\"GET ... ,0.012\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.901-0500,\"GET ... ,0.007\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.911-0500,\"GET ... ,0.010\n ... ,tomcat-exec-25,[23/Oct/2012:14:49:59 -0500],1351021799,2012-10-23 11:18:18.925-0500,\"GET ... ,0.010\n ... ,tomcat-exec-25,[23/Oct/2012:14:50:00 -0500],1351021800,2012-10-23 11:18:18.976-0500,\"GET ... ,0.082\n ... ,tomcat-exec-5,[23/Oct/2012:14:50:00 -0500],1351021800,2012-10-23 14:50:00.075-0500,\"GET ... ,0.010\n ... ,tomcat-exec-5,[23/Oct/2012:14:50:00 -0500],1351021800,2012-10-23 14:50:00.146-0500,\"GET ... ,0.011\n ... ,tomcat-exec-5,[23/Oct/2012:14:50:00 -0500],1351021800,2012-10-23 14:50:00.161-0500,\"GET ... ,0.012\n\nI can update the pattern to be the one you requested but it may take some time to see the issue crop up again. In the mean time the above data may be useful.",
      "I changed log format to the one requested (had to add a 't' to the after {begin} and {end}:\n\n%{X-Tomcat-Session}i,%S,%{X-Forwarded-For}i,%h,%u,%{begin:yyyy-MM-dd HH:mm:ss.SSSZ}t,&quot;%r&quot;,%s,%b,%p,%{Referer}i,&quot;%{User-Agent}i&quot;,%T,%{begin}t,%{end}t,%{end:yyyy-MM-dd HH:mm:ss.SSSZ}t,%D\n\nThe stuck/incorrect times in the data below are 10:00:04 and 10:05:40.  The actual timespan was between 11:01:59 and 11:02:01. You can see that these are not long duration requests (all less than a second.)\n\n\n... ,2012-10-24 11:01:59.288-0500,\"GET ... ,0.080,[24/Oct/2012:11:01:59 -0500],[24/Oct/2012:11:01:59 -0500],2012-10-24 11:01:59.368-0500,80\n... ,2012-10-24 11:01:59.568-0500,\"GET ... ,0.006,[24/Oct/2012:11:01:59 -0500],[24/Oct/2012:11:01:59 -0500],2012-10-24 11:01:59.574-0500,6\n... ,2012-10-24 11:01:59.755-0500,\"POST ... ,0.246,[24/Oct/2012:11:01:59 -0500],[24/Oct/2012:11:02:00 -0500],2012-10-24 11:02:00.001-0500,246\n... ,2012-10-24 10:05:40.932-0500,\"GET ... ,0.088,[24/Oct/2012:10:05:40 -0500],[24/Oct/2012:10:00:04 -0500],2012-10-24 10:00:04.020-0500,88\n... ,2012-10-24 10:00:04.020-0500,\"GET ... ,0.002,[24/Oct/2012:10:00:04 -0500],[24/Oct/2012:10:00:04 -0500],2012-10-24 10:00:04.022-0500,2\n... ,2012-10-24 11:01:59.753-0500,\"GET ... ,0.313,[24/Oct/2012:11:01:59 -0500],[24/Oct/2012:10:00:04 -0500],2012-10-24 10:00:04.066-0500,313\n... ,2012-10-24 10:00:04.072-0500,\"GET ... ,0.001,[24/Oct/2012:10:00:04 -0500],[24/Oct/2012:10:00:04 -0500],2012-10-24 10:00:04.073-0500,1\n... ,2012-10-24 10:05:40.813-0500,\"POST ... ,0.427,[24/Oct/2012:10:05:40 -0500],[24/Oct/2012:10:00:04 -0500],2012-10-24 10:00:04.240-0500,427\n... ,2012-10-24 10:00:04.227-0500,\"GET ... ,0.079,[24/Oct/2012:10:00:04 -0500],[24/Oct/2012:10:00:04 -0500],2012-10-24 10:00:04.306-0500,79\n... ,2012-10-24 11:02:00.370-0500,\"GET ... ,0.013,[24/Oct/2012:11:02:00 -0500],[24/Oct/2012:11:02:00 -0500],2012-10-24 11:02:00.383-0500,13\n... ,2012-10-24 11:02:00.398-0500,\"GET ... ,0.001,[24/Oct/2012:11:02:00 -0500],[24/Oct/2012:11:02:00 -0500],2012-10-24 11:02:00.399-0500,1\n... ,2012-10-24 11:02:00.684-0500,\"GET ... ,0.011,[24/Oct/2012:11:02:00 -0500],[24/Oct/2012:11:02:00 -0500],2012-10-24 11:02:00.695-0500,11\n... ,2012-10-24 10:00:04.379-0500,\"GET ... ,0.369,[24/Oct/2012:10:00:04 -0500],[24/Oct/2012:10:00:04 -0500],2012-10-24 10:00:04.748-0500,369\n... ,2012-10-24 10:00:04.363-0500,\"GET ... ,0.387,[24/Oct/2012:10:00:04 -0500],[24/Oct/2012:10:00:04 -0500],2012-10-24 10:00:04.750-0500,387\n... ,2012-10-24 10:00:04.922-0500,\"GET ... ,0.003,[24/Oct/2012:10:00:04 -0500],[24/Oct/2012:10:00:04 -0500],2012-10-24 10:00:04.925-0500,3\n... ,2012-10-24 10:00:04.972-0500,\"GET ... ,0.001,[24/Oct/2012:10:00:04 -0500],[24/Oct/2012:10:00:04 -0500],2012-10-24 10:00:04.973-0500,1\n... ,2012-10-24 11:02:01.089-0500,\"GET ... ,0.001,[24/Oct/2012:11:02:01 -0500],[24/Oct/2012:11:02:01 -0500],2012-10-24 11:02:01.090-0500,1\n... ,2012-10-24 11:02:01.088-0500,\"GET ... ,0.008,[24/Oct/2012:11:02:01 -0500],[24/Oct/2012:11:02:01 -0500],2012-10-24 11:02:01.096-0500,8",
      "Thanks for the detailed report. A code review suggests that AccessLogValve.DateFormatCache has some issues (e.g. offset is never set).\n\nI have started work on a unit test and that appears to have uncovered more issues but I need to check my unit test is correct. I am currently double-checking the unit test and will commit and along with any necessary fixes once that process is complete.",
      "Found a couple of bugs that have been fixed in trunk and 7.0.x. The fix will be in 7.0.33 onwards.",
      "Re: r1402604\n\nThere is a copy of DateFormatCache class in JULI:\norg.apache.juli.DateFormatCache\n\nFrom a quick look at it, it also needs the same fix. I have not run the test against it though.\n\n(The original plan was to keep just one copy of this class,\nas was shortly discussed on dev@ on 2011-06-23,\nhttp://tomcat.markmail.org/thread/iucbedl7pnszytc6\n)",
      "Fixed. I haven't removed the copy since they are not identical.",
      "This issue affects the cache used by org.apache.juli.OneLineFormatter in Tomcat 6.\n\nThe AccessLogValve is not affected (it does not have such cache there).\nOther JULI components are not affected.\n\nI proposed the patch (r1408459) for Tomcat 6.",
      "Fixed in Tomcat 6 by r1476547 , will be in 6.0.37."
    ],
    "creation_ts": "2012-10-23T15:38:56Z",
    "fixes": [
      54044
    ]
  },
  {
    "id": 30949,
    "summary": "After Failed Include, Request and Response not Unwrapped",
    "description": "In org.apache.catalina.core.ApplicationDispatcher.doInclude(ServletRequest \nrequest, ServletResponse response), after invoke() is called to perform the \ninclude, the request and response objects are normally unwrapped.  However, if \na ServletException or IOException is thrown, the unwrapping does not take place.\n\nThis leads to problems in environments in which cross context includes are \nbeing performed.  For example, \n\n1.  Web App A performs an include to a Servlet in Web App B\n2.  The Servlet in Web App B throws a ServletException\n3.  Web App A catches the ServletException and attempts to forward to an error \njsp.\n\nStep 3 above will fail due to the fact that the request has not been \nunwrapped.  The active request will contain the ServletContext of web app B and \nthe jsp file will not be found.",
    "comments": [
      "Ok. Since I don't want to use a finally for that (as the exception is rethrown \nin invoke), I think moving the unwrapping in the invoke method (before the \ncode which rethrows the exception) would be appropriate.",
      "That seems like a reasonable solution.",
      "OK, I've moved the ApplicationDispatcher unwrap requests to the invoke method \nas Remy suggested.  Done on both the Tomcat 5.0 and 5.5 CVS branches.",
      "I detect a similar problem with wrapped request at ApplicationDispatcher.forward und include.\nThe wrapped request are not recylced after an exceptions. Arrg!\n\n- With STRICT_SERVLET_COMPLAINS this means we have still a HTTPSession memory leak\n- and at cluster crossContext session replication are not triggered.\n\nCurrently the only chance I see, is a double try/catch implementation. Look at my checkin at tomcat \n5.5.24 revision  545127.\n\nBut I don't really like the double try/catch for wrapped request!\n\nPeter",
      "I'm running into an issue that I think is a side effect of this patch. When\nforward() calls invoke() the request object now gets unwrapped. Then the forward\nmethod again tries to unwrap the already unwrapped request. As a result I am\ngetting a ClassCastException in unwrapRequest (ApplicationDispatcher.java:814).\nIt seems like unwrapRequest should be setting wrappedRequest to null before\nexiting so subsequent calls to the method don't do anything. Does this seem\nreasonable?",
      "Mike - having stepped through the code, I don't see the problem you are\ndescribing. If you still see the issue, please open a new Bugzilla item and\nprovide the steps to reproduce and/or a simple test war.",
      "I have committed a fix for this that doesn't require additional\ntry/catch/finally blocks. See r572854 (TC5.5.x) and r572856 (TC6.0.x)"
    ],
    "creation_ts": "2004-08-30T23:54:36Z",
    "fixes": [
      30949
    ]
  },
  {
    "id": 67818,
    "summary": "SSL#setVerify()/SSLContext#setVerify() silently set undocumented default verify paths",
    "description": "Note: This applies to 2.0.x and 1.2.x\n\nConsider the following Connector (any Tomcat version):\n> <Connector port=\"18444\" connectionTimeout=\"20000\" keepAliveTimeout=\"7200000\" maxParameterCount=\"1000\"\n> \tmaxHttpHeaderSize=\"24576\" maxThreads=\"250\"\n> \tSSLEnabled=\"true\" scheme=\"https\" secure=\"true\"\n> \tdefaultSSLHostConfigName=\"deblndw024v.ad001.siemens.net\">\n> \t<SSLHostConfig hostName=\"deblndw024v.ad001.siemens.net\" protocols=\"TLSv1.2+TLSv1.3\"\n> \t\thonorCipherOrder=\"true\" disableSessionTickets=\"true\"\n> \t\tcertificateVerification=\"optional\" certificateVerificationDepth=\"5\"\n> \t\tciphers=\"HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!DSS:!SHA1:!SHA256:!SHA384\">\n> \t\t<Certificate certificateFile=\"/opt/openssl/deblndw024v.ad001.siemens.net/cert.crt\"\n> \t\t\tcertificateKeyFile=\"/opt/openssl/deblndw024v.ad001.siemens.net/key.crt\"\n> \t\t\tcertificateKeyPasswordFile=\"/opt/openssl/deblndw024v.ad001.siemens.net/password\" type=\"RSA\" />\n> \t\t<OpenSSLConf>\n> \t\t\t<OpenSSLConfCmd name=\"RequestCAFile\" value=\"/opt/openssl/siemens-medium+strong-clientcert-cacerts.crt\" />\n> \t\t\t<OpenSSLConfCmd name=\"NO_OCSP_CHECK\" value=\"true\" />\n> \t\t</OpenSSLConf>\n> \t</SSLHostConfig>\n> </Connector>\n\nConditions:\n* The certificate file does not contain a chain of the issuers\n* SSLCertificateChainFile (mod_ssl) or certificateChainFile (Tomcat) is not set\n* Neither SSLCACertificatePath/SSLCACertificateFile (mod_ssl) or caCertificateFile/caCertificatePath (Tomcat) is not set\n\nAccording then to my understanding Tomcat should construct any chain for the peer to verify the server certificate, nor when the server requests for for a client certificate would it be able to verify the client certificate chain.\n\nNow let's probe the server:\n> $ openssl s_client -connect deblndw024v:18444 -no-CApath -no-CAfile\n> CONNECTED(00000004)\n> Can't use SSL_get_servername\n> depth=2 C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZA1, OU = Siemens Trust Center, CN = Siemens Root CA V3.0 2016\n> verify error:num=19:self signed certificate in certificate chain\n> verify return:1\n> depth=2 C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZA1, OU = Siemens Trust Center, CN = Siemens Root CA V3.0 2016\n> verify return:1\n> depth=1 C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZE7, CN = Siemens Issuing CA Intranet Server 2022\n> verify return:1\n> depth=0 C = DE, O = Siemens, OU = SMD HVM DW, CN = deblndw024v.ad001.siemens.net\n> verify return:1\n> ---\n> Certificate chain\n>  0 s:C = DE, O = Siemens, OU = SMD HVM DW, CN = deblndw024v.ad001.siemens.net\n>    i:C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZE7, CN = Siemens Issuing CA Intranet Server 2022\n>  1 s:C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZE7, CN = Siemens Issuing CA Intranet Server 2022\n>    i:C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZA1, OU = Siemens Trust Center, CN = Siemens Root CA V3.0 2016\n>  2 s:C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZA1, OU = Siemens Trust Center, CN = Siemens Root CA V3.0 2016\n>    i:C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZA1, OU = Siemens Trust Center, CN = Siemens Root CA V3.0 2016\n> ---\n> Server certificate\n> -----BEGIN CERTIFICATE-----\n> MIIIvjCCBqagAwIBAgIUFZyE3zc5lFsDVaFS9w2zaDea4mYwDQYJKoZIhvcNAQEL\n> ...\n> tiR7NMIYlOYgW/cUNFfwJUJk8D0L92oKlmT6JAfDN+rahjtOTUXXw3MD7uZ58+6T\n> aYp+izk9yY90cqgrdGe82vv4kx2xkEozgvYlW2GyKg1Fhh9GYu64xn0ny4M5jE0N\n> eFdmSs7MqQZBF6HSlucSXbkVV3zvoltvILbWXrMVYldJGA==\n> -----END CERTIFICATE-----\n> subject=C = DE, O = Siemens, OU = SMD HVM DW, CN = deblndw024v.ad001.siemens.net\n> \n> issuer=C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZE7, CN = Siemens Issuing CA Intranet Server 2022\n> \n> ---\n> Acceptable client certificate CA names\n> C = DE, ST = Bayern, O = Siemens, serialNumber = ZZZZZZD2, CN = Siemens Issuing CA EE Auth 2021\n> C = DE, ST = Bayern, O = Siemens, serialNumber = ZZZZZZDD, CN = Siemens Issuing CA EE Network Smartcard Auth 2021\n> C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZB2, OU = Siemens Trust Center, CN = Siemens Issuing CA EE Auth 2020\n> C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZBD, OU = Siemens Trust Center, CN = Siemens Issuing CA EE Network Smartcard Auth 2020\n> C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZB6, OU = Siemens Trust Center, CN = Siemens Issuing CA Medium Strength Authentication 2020\n> C = DE, ST = Bayern, O = Siemens, serialNumber = ZZZZZZD6, CN = Siemens Issuing CA Medium Strength Authentication 2021\n> Requested Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512:ECDSA+SHA224:ECDSA+SHA1:RSA+SHA224:RSA+SHA1\n> Shared Requested Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512\n> Peer signing digest: SHA256\n> Peer signature type: RSA-PSS\n> Server Temp Key: X25519, 253 bits\n> ---\n> SSL handshake has read 7914 bytes and written 403 bytes\n> Verification error: self signed certificate in certificate chain\n> ---\n\nWhere does the chain come from when I have not set it? Reproducing the same in HTTPd gives only the leaf, not the chain. it turns out that the admin does not have real control over this because sslcontext.c sets the default verify paths without admin's consent and without any documentation. This is likely unwanted in many scenarios.\n\n>    if (!c->store) {\n>        if (SSL_CTX_set_default_verify_paths(c->ctx)) {\n>            c->store = SSL_CTX_get_cert_store(c->ctx);\n>            X509_STORE_set_flags(c->store, 0);\n>        }\n\nDepending on how the default trust store is configured this might work silently or produce unwanted effects.\nThe solution is simple: don't do it just like in mod_ssl, give the admin full control over this.\n\nApplied a patch and tried again:\n> $ openssl s_client -connect deblndw024v:18444 -no-CApath -no-CAfile\n> CONNECTED(00000004)\n> Can't use SSL_get_servername\n> depth=0 C = DE, O = Siemens, OU = SMD HVM DW, CN = deblndw024v.ad001.siemens.net\n> verify error:num=20:unable to get local issuer certificate\n> verify return:1\n> depth=0 C = DE, O = Siemens, OU = SMD HVM DW, CN = deblndw024v.ad001.siemens.net\n> verify error:num=21:unable to verify the first certificate\n> verify return:1\n> depth=0 C = DE, O = Siemens, OU = SMD HVM DW, CN = deblndw024v.ad001.siemens.net\n> verify return:1\n> ---\n> Certificate chain\n>  0 s:C = DE, O = Siemens, OU = SMD HVM DW, CN = deblndw024v.ad001.siemens.net\n>    i:C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZE7, CN = Siemens Issuing CA Intranet Server 2022\n> ---\n> Server certificate\n> -----BEGIN CERTIFICATE-----\n> MIIIvjCCBqagAwIBAgIUFZyE3zc5lFsDVaFS9w2zaDea4mYwDQYJKoZIhvcNAQEL\n> ...\n> aYp+izk9yY90cqgrdGe82vv4kx2xkEozgvYlW2GyKg1Fhh9GYu64xn0ny4M5jE0N\n> eFdmSs7MqQZBF6HSlucSXbkVV3zvoltvILbWXrMVYldJGA==\n> -----END CERTIFICATE-----\n> subject=C = DE, O = Siemens, OU = SMD HVM DW, CN = deblndw024v.ad001.siemens.net\n> \n> issuer=C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZE7, CN = Siemens Issuing CA Intranet Server 2022\n> \n> ---\n> Acceptable client certificate CA names\n> C = DE, ST = Bayern, O = Siemens, serialNumber = ZZZZZZD2, CN = Siemens Issuing CA EE Auth 2021\n> C = DE, ST = Bayern, O = Siemens, serialNumber = ZZZZZZDD, CN = Siemens Issuing CA EE Network Smartcard Auth 2021\n> C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZB2, OU = Siemens Trust Center, CN = Siemens Issuing CA EE Auth 2020\n> C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZBD, OU = Siemens Trust Center, CN = Siemens Issuing CA EE Network Smartcard Auth 2020\n> C = DE, ST = Bayern, L = Muenchen, O = Siemens, serialNumber = ZZZZZZB6, OU = Siemens Trust Center, CN = Siemens Issuing CA Medium Strength Authentication 2020\n> C = DE, ST = Bayern, O = Siemens, serialNumber = ZZZZZZD6, CN = Siemens Issuing CA Medium Strength Authentication 2021\n> Requested Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512:ECDSA+SHA224:ECDSA+SHA1:RSA+SHA224:RSA+SHA1\n> Shared Requested Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512\n> Peer signing digest: SHA256\n> Peer signature type: RSA-PSS\n> Server Temp Key: X25519, 253 bits\n> ---\n> SSL handshake has read 4045 bytes and written 403 bytes\n> Verification error: unable to verify the first certificate\n> ---\n> New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\n> Server public key is 4096 bit\n> Secure Renegotiation IS NOT supported\n> Compression: NONE\n> Expansion: NONE\n> No ALPN negotiated\n> Early data was not sent\n> Verify return code: 21 (unable to verify the first certificate)\n> ---\n\nAs one can see, truly no chain transmitted. Now I can properly construct the chain for the server certificate AND the chain for client certificate validation myself.\n\nI will provide a PR.",
    "comments": [
      "Tested the patch locally with my smartcard and Edge properly says:\nDie Verbindung mit dieser Website ist nicht sicher.deblndw024v.ad001.siemens.net hat ihr Anmeldezertifikat nicht akzeptiert, oder es wurde kein Anmeldezertifikat bereitgestellt.\nWenden Sie sich an Ihre Organisation.\nERR_BAD_SSL_CLIENT_AUTH_CERT\n\nRough translation: deblndw024v.ad001.siemens.net did not accept your certificate.\n\nNow lets add caCertificatePath=\"/opt/openssl/certs\" and retry:\n2023-10-18T22:39:55.656 [https-openssl-apr-18444-exec-2] 139.21.146.171 osipovmi@AD001.SIEMENS.NET \"GET /manager/html HTTP/1.1\" 200 13596 1197\n\nSo OpenSSL did accept my certificate which is issued by one of the accepted CA which is provided by RequestCAFile.",
      "Fixed in:\n- main for 2.0.7 and onwards\n- 1.2.x for 1.2.40 and onwards"
    ],
    "creation_ts": "2023-10-18T19:51:58Z",
    "fixes": [
      67818
    ]
  },
  {
    "id": 68559,
    "summary": "BadRequestException doesn't send back a 400 when using Async servlets",
    "description": "This is similar to https://bz.apache.org/bugzilla/show_bug.cgi?id=68037, but for BadRequestException.\n\nWhen using Async servlets I am neither able to set a error status nor am I able to get a correct 400 in the response.\n\nHowever it works for read timeouts correctly where I get a 408.\n\nReproducible test :\n \nimport org.apache.catalina.Context;\nimport org.apache.catalina.LifecycleException;\nimport org.apache.catalina.Wrapper;\nimport org.apache.catalina.connector.ClientAbortException;\nimport org.apache.catalina.connector.Connector;\nimport org.apache.catalina.core.StandardHost;\nimport org.apache.catalina.startup.Tomcat;\nimport org.apache.coyote.BadRequestException;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport javax.servlet.ReadListener;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.Socket;\nimport java.net.SocketTimeoutException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nimport static java.nio.charset.StandardCharsets.UTF_8;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.fail;\n\npublic class ReproducibleTest {\n\n    static Tomcat tomcat;\n\n    @BeforeAll\n    static void setup() throws LifecycleException {\n        tomcat = new Tomcat();\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Context ctx = tomcat.addContext(\"\", new File(\".\").getAbsolutePath());\n        Wrapper asyncWrapper = Tomcat.addServlet(ctx, \"TestAsync\", new TestAsyncServlet());\n        Wrapper syncWrapper = Tomcat.addServlet(ctx, \"TestSync\", new SyncServlet());\n        asyncWrapper.setAsyncSupported(true);\n        StandardHost host = (StandardHost) tomcat.getHost();\n        host.setErrorReportValveClass(null);\n        Connector connector = new Connector();\n        connector.setProperty(\"address\", \"http://localhost\");\n        connector.setPort(8000);\n        connector.setProperty(\"connectionTimeout\", String.valueOf(100));\n        connector.getProtocolHandler().setExecutor(executorService);\n        tomcat.getService().addConnector(connector);\n        ctx.addServletMappingDecoded(\"/async/*\", \"TestAsync\");\n        ctx.addServletMappingDecoded(\"/sync/*\", \"TestSync\");\n        tomcat.start();\n    }\n\n    @AfterAll\n    static void destroy() throws LifecycleException {\n        tomcat.stop();\n        tomcat.destroy();\n    }\n\n    @Test\n    @DisplayName(\"requests that time out while reading the payload get a 408\")\n    void timeoutGetsA408() throws Exception {\n        try (Socket s = new Socket(\"localhost\", 8000)) {\n            String request = \"GET /sync HTTP/1.1\\r\\nHost: localhost\\r\\ncontent-length: 100\\r\\n\\r\\n\";\n            sendBadRequest(s, request, 408);\n        }\n    }\n\n    @Test\n    @DisplayName(\"requests that time out while reading the payload get a 408\")\n    void timeoutGetsA408Async() throws Exception {\n        try (Socket s = new Socket(\"localhost\", 8000)) {\n            String request = \"GET /async HTTP/1.1\\r\\nHost: localhost\\r\\ncontent-length: 100\\r\\n\\r\\n\";\n            sendBadRequest(s, request, 408);\n        }\n    }\n\n    @Test\n    void badChunksAsync() throws IOException {\n        try (Socket s = new Socket(\"localhost\", 8000)) {\n            String request = \"GET /async HTTP/1.1\\r\\nHost: localhost\\r\\nTransfer-encoding: chunked\\r\\n\\r\\n1\\r\\na\\r\\r\";\n            sendBadRequest(s, request, 400);\n        }\n\n    }\n\n    @Test\n    void badChunks() throws Exception {\n        try (Socket s = new Socket(\"localhost\", 8000)) {\n            String request = \"GET /sync HTTP/1.1\\r\\nHost: localhost\\r\\nTransfer-encoding: chunked\\r\\n\\r\\n1\\r\\na\\r\\r\";\n            sendBadRequest(s, request, 400);\n        }\n    }\n\n    private static void sendBadRequest(Socket socket, String request, int expectedStatusCode) throws IOException {\n        OutputStream os = socket.getOutputStream();\n        os.write(request.getBytes(UTF_8));\n        InputStream is = socket.getInputStream();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is, UTF_8));\n        String opening = reader.readLine();\n        assertNotNull(opening, \"Didn't get back a response\");\n        StringBuilder sb = new StringBuilder(opening);\n\n        try {\n            assertTrue(opening.startsWith(\"HTTP/1.1 \" + expectedStatusCode), \"expected status code \" + expectedStatusCode + \" but got \" + opening);\n            boolean connectionClose = false;\n            while (reader.ready()) {\n                String line = reader.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                sb.append(\"\\n\").append(line);\n                if (\"connection: close\".equalsIgnoreCase(line)) {\n                    connectionClose = true;\n                }\n\n                assertFalse(line.contains(\"Exception Report\"));\n                assertFalse(line.contains(\"Status Report\"));\n            }\n\n            assertTrue(connectionClose, \"No 'Connection: close' header seen\");\n        } catch (Throwable t) {\n            fail(\"Response:\\n\" + sb, t);\n        }\n    }\n\n    static final class SyncServlet extends HttpServlet {\n        @Override\n        protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            try {\n                while (req.getInputStream().read() != -1) ;\n                resp.setStatus(200);\n                resp.flushBuffer();\n            } catch (ClientAbortException e) {\n                if(!resp.isCommitted()) {\n                    resp.sendError(408);\n                }\n            }\n        }\n    }\n\n    static final class TestAsyncServlet extends HttpServlet {\n        @Override\n        protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            req.startAsync();\n            req.getInputStream().setReadListener(new ReadListener() {\n\n                @Override\n                public void onDataAvailable() throws IOException {\n                    while (req.getInputStream().isReady()) {\n                        req.getInputStream().read();\n                    }\n                }\n\n                @Override\n                public void onAllDataRead() throws IOException {\n                    resp.setStatus(200);\n                    req.getAsyncContext().complete();\n                }\n\n                @Override\n                public void onError(Throwable t) {\n                    if (t instanceof BadRequestException || t instanceof SocketTimeoutException) {\n                        try {\n                            resp.setStatus(t instanceof BadRequestException ? 400 : 408);\n                            resp.flushBuffer();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    req.getAsyncContext().complete();\n                }\n            });\n        }\n    }\n}",
    "comments": [
      "Also similar to https://bz.apache.org/bugzilla/show_bug.cgi?id=68228",
      "https://bz.apache.org/bugzilla/show_bug.cgi?id=68037#c7",
      "I have already read the comment you are referencing. The solution by Mark works for SocketTimeout, but doesn't work for BadRequest.\n\nFurther even if Tomcat doesn't allow setting a status on BadRequest, it should at the least send back a 404 instead of just closing the connection.",
      "Any update on this? I can give fixing this a shot if no one else is planning to.",
      "I haven't looked at this yet but I suspect it may end up as WONTFIX.\n\nA bad request indicates a syntactically invalid request. At that point, it can be argued that given that the request is invalid, Tomcat can't tell what is going on so the only safe thing to do is to close the connection.",
      "I agree on the closing connection part. Its just weird that sync and async behave differently, one sends out a 400 and other doesn't.\n\nAlso the way you suggested in https://bz.apache.org/bugzilla/show_bug.cgi?id=68037#c7, doesn't work for BRE but works for SocketTimeout.",
      "How do you get a valid HTTP request (not a 400) but then find yourself in a \"Bad Request\" state once async gets started?",
      "I've been able to look at this some more. Thanks so much for the test case. It really speeds up the process.\n\nThe processing paths for sync and async are distinct. Currently the error handling in async is handled much further up the stack than sync. That is a factor in why async is more blunt in its error handling. I'm looking to see if I can make the error handling more nuanced for async.",
      "I've made a modification that should allow async error handling to write to the response. The provided test case now passes."
    ],
    "creation_ts": "2024-01-29T21:33:57Z",
    "fixes": [
      68559
    ]
  },
  {
    "id": 64467,
    "summary": "Http2 tomact server taking time in responding when 1st StreamId is a large integer value like 2147483641",
    "description": "Java version - jdk1.8.0_201\n\nWe are running a Tomcat Http2 Server and a Jetty http2 client.\n\nWhen we send the 1st request from jetty client to tomcat server with streamId as 2147483641, the 1st response from tomcat comes after almost 5 seconds.\n\nAfter further debugging we got to know that the problem seems to be because of the below code in Http2UpgradeHandler class:\n\nprivate void closeIdleStreams(int newMaxActiveRemoteStreamId) throws Http2Exception \n{\n         for (int i = maxActiveRemoteStreamId + 2; i < \n                                newMaxActiveRemoteStreamId; i += 2) \n            {\n\n             Stream stream = getStream(i, false);\n             if (stream != null) {\n                 stream.closeIfIdle();\n             }\n         }\n         maxActiveRemoteStreamId = newMaxActiveRemoteStreamId;\n     }\n\nWhen we take 1st StreamId as 2147483641, the above loop takes around 4~5 seconds to execute and hence, the response is delayed.",
    "comments": [
      "Thanks for the report and the research into the root cause.\n\nFixed in:\n- master for 10.0.0-M6 onwards\n- 9.0.x for 9.0.36 onwards\n- 8.5.x for 8.5.56 onwards"
    ],
    "creation_ts": "2020-05-22T10:05:20Z",
    "fixes": [
      64467
    ]
  },
  {
    "id": 63987,
    "summary": "Deprecate Realm#getRoles(Principal)",
    "description": "As discussed in Bug 63982, there is no good use for Realm#getRoles(Principal). It shall be deprecated and removed in Tomcat 10.",
    "comments": [
      "Fixed in:\n- master for 9.0.30 onwards\n- 8.5.x for 8.5.50 onwards"
    ],
    "creation_ts": "2019-12-05T10:23:42Z",
    "fixes": [
      63987
    ]
  },
  {
    "id": 56698,
    "summary": "Sessions will be backed up too often by PersistentManager",
    "description": "Created attachment 31793\nAdd a flag to PersistentManager whether it will save idle sessions once or always\n\nThe PersistentManager will save every Session which has not been accessed since maxIdleBackup time on every round.\n\nThe attached patch will introduce a flag, so that the admin can decide whether he wants to have the old behaviour, or the more efficient one of only saving sessions once, when they were accessed and idle for maxIdleBackup.\n\nThe patch gets a lot simpler, if we just change the behaviour and declare the old one as a bug :)\n\nTomcat 7 has the same problem and I could provide a patch for it, too.",
    "comments": [
      "Lets go with the more efficient behaviour. I see no good reason to introduce yet another configuration option just to enable inefficient behaviour to continue. Can you provide the simpler patch?",
      "Created attachment 31798\nPersist sessions only once while lastAccessedTime is not changed\n\nSimpler version of the previous patch. TestCase is included still.",
      "Created attachment 31799\nSimple version of the patch for tomcat 7\n\nSame functionality of the simpler patch for tomcat 7.",
      "Thanks for the report and for the patches.\n\nThis has been fixed in 8.0.x for 8.0.10 onwards and in 7.0.x for 7.0.55 onwards."
    ],
    "creation_ts": "2014-07-05T15:16:58Z",
    "fixes": [
      56698
    ]
  },
  {
    "id": 69131,
    "summary": "allowCorsPreflight=\"filter\" does not work with filter mappings other than \"/*\" for the CorsFilter",
    "description": "As I understand the AuthenticatorBase attribute allowCorsPreflight it should either always allow CORS preflight requests (\"always\"), never allow them (\"never\", default) or only if there is a CorsFilter filter mapping for the current requested URI (\"filter\").\n\nLooking at the code of the method allowCorsPreflightBypass(Request request) one can see that ONLY the filter mapping \"/*\" allows the preflight request to happen correctly. No other filter mappings does lead to the variable allowBypass to be set to true. In my opinion this is wrong.\n\nWhat if you configure your CorsFilter with the filter mapping \"/api/*\"? In this case the preflight requests will never be allowed if you configure allowCorsPreflight to \"filter\".\n\nI think in the innermost loop there should be a check against the current request URI to check if the CorsFilter is applied to the request. I can supply a pull request, if there is agreement on this.",
    "comments": [
      "I mentioned this as well when I reported this issue years ago and Mark provided the implementation for \"/*\" only.",
      "Going back to that conversation, the reason we went with \"/*\" only was that regarding supporting anything else:\n\n\"Not easily, no. You'd essentially have to recreate large chunks of\nApplicationFilterFactory.\"\n\nThe filter chain will (eventually) have the data you need but the complicating factor is that authentication, as a Valve, is going to happen long before the filter chain is created.\n\nHappy to consider possible solutions to this but I don't see an obvious/simple one at this point. If you have an idea then a PR would be great.",
      "How about making the static method matchFiltersURL of ApplicationFilterFactory public and using it in the AuthenticatorBase? In general there should be a very small amount of mappings for this one filter, so performance implications should be minimal.\n\nOther alternatives:\n- copy the static method over to AuthenticatorBase\n- extracting it into some utility class and using it from both classes",
      "That seems reasonable. Maybe move the method to o.a.catalina.util.FilterUtil\n\nIt isn't a perfect solution but it is an improvement on what we have now.",
      "I'll start work on moving the method to a new utility class now.\n\nRobert, are you still interested in providing a pull request for this?",
      "Scratch that. The change is trivial. I have it implemented locally. Just running some tests before I commit.",
      "Fixed in:\n- 11.0.x for 11.0.0-M22 onwards\n- 10.1.x for 10.1.26 onwards\n-  9.0.x for  9.0.91 onwards"
    ],
    "creation_ts": "2024-06-11T11:44:44Z",
    "fixes": [
      69131
    ]
  },
  {
    "id": 44391,
    "summary": "SSI handling of escaped characters broken",
    "description": "In org.apache.catalina.ssi.SSIProcessor the method parseParamNames is broken. If\nI have a SSI directive like <!--#set var=\"test\" value=\"blubb\\\"\\\"\" --> the method\ndetects three parameters instead of two. This is because there are two\nconsecutive escaped characters. Although the first one \\\" is detected correctly\nthe next one isn't because the flag escaped is still set to true, although this\ncharacter isn't escaped anymore.\n\nYou have to replace\n\nboolean escaped = false;\nfor (; bIdx < cmd.length() && quotes != 2; bIdx++) {\n  char c = cmd.charAt(bIdx);\n  // Need to skip escaped characters\n  if (c == '\\\\' && !escaped) {\n    escaped = true;\n    bIdx++;\n    continue;\n  }\n  escaped = false;\n  if (c == '\"') quotes++;\n}\n\nby \n\nfor (; bIdx < cmd.length() && quotes != 2; bIdx++) {\n  char c = cmd.charAt(bIdx);\n  // Need to skip escaped characters\n  if (c == '\\\\') {\n    bIdx++;\n    continue;\n  }\n  if (c == '\"') quotes++;\n}\n\nJust removing the flag escaped is sufficient, because you don't have to remember\nwhether the last character was escaped and that should have no influence to\nconsecutive characters.\n\nThe bug still exists in the HEAD revision of the repository.",
    "comments": [
      "Your proposed patch isn't quire right. For example, you have to know if the previous character is escaped or not if you have two \\ in a row.\n\nI have committed a fix to trunk and proposed it for 6.0.x.",
      "The patch has been applied to 6.0.x and will be in 6.0.17 onwards."
    ],
    "creation_ts": "2008-02-11T04:37:40Z",
    "fixes": [
      44391
    ]
  },
  {
    "id": 51580,
    "summary": "Severe error deploying WAR application (ExpandWar error)",
    "description": "Created attachment 27330\nCatalina log file with the error.\n\nWhen trying to deploy a WAR application (50MB approx) I get:\n\n\"SEVERE: Error deploying web application archive gestaoApolices.war\njava.lang.NullPointerException\"\n\nComplete stacktrace is attached.\n\nI've seen in the sources that this might be related with the correction of \"Bugzilla 33636\"\n\nLet me know if the war file is needed, in case you're not able to reproduce the problem.",
    "comments": [
      "I've just find out that the problem was in a specific file within the WAR:\n\n\"Cliente-TextExtractRules-A\u00e7oreana.properties\"\n\nThe file name has Portuguese accented char \"\u00e7\".\n\nAfter replace the char by \"c\" in that file, the deployment was done ok.",
      "Your WAR file is not valid. I suspect it was created with a zip utility rather than with jar. The default character sets are different. You need to use jar if you have file names that are use non-ASCII characters.",
      "Actually was using the zip's Ant task to produce the war file and I didn't realized that because it's a automatically generated build.xml from Google GWT.",
      "Zip uses platform default encoding to encode file names.\nJAR uses UTF-8.\n\n\njava.lang.NullPointerException\n        at org.apache.catalina.startup.ExpandWar.expand(ExpandWar.java:407)\n        at org.apache.catalina.startup.ExpandWar.expand(ExpandWar.java:138)\n\nIt looks as if InputStream reference in ExpandWar#expand(InputStream, File) was null. That is an earlier call to jarFile.getInputStream(jarEntry) on ExpandWar.java:135 returned null.\n\nThe Javadoc for JarFile#getInputStream(ZipEntry) does not say that it can return null. I would have expected a ZipException here.",
      "It seems like adding a null check here would be good, since NPE in Tomcat looks like a bug in Tomcat instead of an error in the WAR file. I'm re-opening for that reason.\n\nPlease re-close INVALID if you are adamant about not having a null check.",
      "I'm not overly concerned about this. If you want to patch it, go ahead. If you don't I'll eventually close this as WONTFIX.",
      "Cleon, can you attach a minimal WAR file that reproduces this issue? Also, if there are any environmental settings necessary, such as expandWars=\"false\", please let me know.",
      "Created attachment 27385\nMinimal war to reproduce the problem\n\nHere's the file. There's no special env settings, just import the file.\n\nRegards,\n   Cl\u00e9on",
      "Changing back to an enhancement. There is no Tomcat bug here.",
      "(In reply to comment #4)\n> Zip uses platform default encoding to encode file names.\n> JAR uses UTF-8.\n\nI'm not so sure that's true:\n\n$ echo $LC_CTYPE\nen_US.UTF-8\n\n$ jar tvf 51580.war \n     0 Sat Aug 13 21:06:34 EDT 2011 text_extraction_rules/\n   594 Sat Aug 13 21:06:34 EDT 2011 text_extraction_rules/Cliente-TextExtractRules-A\u00e7oreana.properties\n   570 Sat Aug 13 21:06:34 EDT 2011 text_extraction_rules/Cliente-TextExtractRules-Liberty.properties\n\n$ LC_CTYPE=en_US.ISO-8851-1 jar tvf 51580.war \n     0 Sat Aug 13 21:06:34 EDT 2011 text_extraction_rules/\n   594 Sat Aug 13 21:06:34 EDT 2011 text_extraction_rules/Cliente-TextExtractRules-A?oreana.properties\n   570 Sat Aug 13 21:06:34 EDT 2011 text_extraction_rules/Cliente-TextExtractRules-Liberty.properties\n\n$ unzip -v 51580.war \nArchive:  51580.war\n Length   Method    Size  Cmpr    Date    Time   CRC-32   Name\n--------  ------  ------- ---- ---------- ----- --------  ----\n       0  Stored        0   0% 2011-08-13 21:06 00000000  text_extraction_rules/\n     594  Stored      594   0% 2011-08-13 21:06 3271f2b8  text_extraction_rules/Cliente-TextExtractRules-A?oreana.properties\n     570  Stored      570   0% 2011-08-13 21:06 a00a7a2c  text_extraction_rules/Cliente-TextExtractRules-Liberty.properties\n--------          -------  ---                            -------\n    1164             1164   0%                            3 files\n\n\nWhen my file.encoding ends up being ISO-8859-1, jar acts just as stupidly as zip.",
      "Interestingly enough, Apache Ant's \"zip\" and \"jar\" tasks both have an \"encoding\" attribute to control the charset used for filenames, but they have a subtle difference in their default configurations.\n\nThe <zip> task defaults to the platform's default encoding while the <jar> task defaults to UTF-8 with a *strong* warning not to change the default <jar> encoding unless you know what you're doing.\n\nhttp://ant.apache.org/manual/Tasks/zip.html#encoding\n\nSo it looks like Cleon must have used <zip> instead of the much more appropriate <war> task to create his WAR file.\n\nStill, I think it's a good idea to throw a different kind of exception. NPEs make it look like there is an actual bug in Tomcat which is certainly not the case.",
      "Fixed in trunk and 7.0.x branch. Will be included in 7.0.22 onward."
    ],
    "creation_ts": "2011-07-28T22:41:57Z",
    "fixes": [
      51580
    ]
  },
  {
    "id": 42309,
    "summary": "Request: support for NIO in Embedded Tomcat",
    "description": "in org.apache.catalina.startup.Embedded there is no direct API to create an NIO\nconnector. This would be very helpful for all applications which use tomcat in\nembedded mode and require the CometProcessor.",
    "comments": [
      "Fixed,\njust call createConnector with \"org.apache.coyote.http11.http11NioProtocol\" as\nyour protocol parameter"
    ],
    "creation_ts": "2007-05-01T02:03:28Z",
    "fixes": [
      42309
    ]
  },
  {
    "id": 56777,
    "summary": "Allow configuration resources to be loaded from places other than straight off the filesystem",
    "description": "We're using embedded Tomcat in Spring Boot (https://github.com/spring-projects/spring-boot). Spring Boot allows a user to create an executable jar file that contains Tomcat and their application. The idea is that an application can, if so desired, be entirely contained within the jar with no external dependencies.\n\nCurrently, this breaks down if a key store or trust store is required for SSL configuration as Tomcat requires them to be readable directly from the filesystem rather than from within a jar file. I'd like to propose an enhancement to Tomcat that introduces a resource abstraction, allowing configuration resources to be loaded from within an archive and perhaps even broader than that. (Jetty, for example, allows a resource to be loaded from a URL).",
    "comments": [
      "*** Bug 57444 has been marked as a duplicate of this bug. ***",
      "Coming back to this having been prompted about it at $work. It doesn't look to be as big a task as I first thought. Some questions.\n\n1. In an ideal world, which Tomcat versions would you like this in? 8.0.x obviously. What about 7.0.x and 6.0.x? (a back-port to 6.0.x is unlikely without a very strong reason)\n\nI'm imagining that the implementation will look for some specific prefix / prefixes for specified configuration settings (keystore locations, memory user database, any others I spot reviewing the config docs) and if one of those prefixes is found use an appropriate mechanism to locate the resource. No prefix means assume a file path. Relative paths relative to CATALINA_BASE.\n\n2. What prefixes would you like to see supported and how do you expect each prefix to behave?",
      "(In reply to Mark Thomas from comment #2)\n\n> 1. In an ideal world, which Tomcat versions would you like this in? 8.0.x\n> obviously. What about 7.0.x and 6.0.x? (a back-port to 6.0.x is unlikely\n> without a very strong reason)\n\nWe definitely don't need it in 6.0.x. Spring IO Platform 1.1.x uses Tomcat 7.0.x so support for it there would be nice to have, although not essential. Boot 1.2 and 1.3 are both on Tomcat 8.\n\n> I'm imagining that the implementation will look for some specific prefix /\n> prefixes for specified configuration settings (keystore locations, memory\n> user database, any others I spot reviewing the config docs) and if one of\n> those prefixes is found use an appropriate mechanism to locate the resource.\n> No prefix means assume a file path. Relative paths relative to CATALINA_BASE.\n> \n> 2. What prefixes would you like to see supported and how do you expect each\n> prefix to behave?\n\nWould it be possible to use a URL to provide a resource and then use URL.openStream to read it? That's what Jetty does, I believe.",
      "I've done some quick tests and it looks like URL support is doable without breaking backwards compatability. I'm going to add support for \"classpath:\" URLs at the same time since a number of examples I've seen of this feature in other containers use class path URLs.\n\nI should have something ready for you to test later today or early tomorrow. Am I correct in assuming you'll want a 8.0.x snapshot published to test with?",
      "(In reply to Mark Thomas from comment #4)\n> I've done some quick tests and it looks like URL support is doable without\n> breaking backwards compatability.\n\nExcellent \n\n> I'm going to add support for \"classpath:\" URLs at the same time since a\n> number of examples I've seen of this feature in other containers use class\n> path URLs.\n\nFWIW, if you do add support for classpath: URLs, we probably won't use it in Spring Boot. For consistency with other resource loading, and what we've done for Jetty and Undertow, I expect we'll use Spring Framework's ResourceUtils to get a URL and then pass that to Tomcat.\n\n> I should have something ready for you to test later today or early tomorrow.\n\nGreat stuff. Thank you.\n\n> Am I correct in assuming you'll want a 8.0.x snapshot published to test with?\n\nA snapshot would be handy, but I'm also happy to build from source.",
      "This has now been implemented in trunk. It will be back-ported to 8.0.x but that is not a simple svn merge because of the TLS refactoring that took place between 8.0.x and trunk. Still on track to have that done by early tomorrow at the latest.",
      "Back-ported to 8.0.x and will be included in 8.0.28 onwards.",
      "Reopening for consideration of a backport to 7.0.x",
      "Hi folks, I will try to do the back-port to tomcat 7.x.",
      "Created attachment 33192\nback port fix of bug 56777 to tomcat 7.0.x\n\nback port fix of bug 56777 to tomcat 7.0.x.\nAllow trust stores, keystores, CRLs and the tomcat-users.xml file to be loaded from URLs as well as the file system.",
      "Created attachment 33193\nback port fix of bug 56777 to tomcat 7.0.x\n\nupdate patch, the previous patch is not correct, because webapps/docs/changelog.xml.orig is added by mistake.",
      "Hi,\n\nYou may want to see this issue 58518 which seems to be connected with this feature.\n\nBest Regards,\nVioleta Georgieva",
      "Okay, just give me some time to look into this issue.",
      "Created attachment 33220\npatch that also avoid bug 58518\n\nWell, since Mark has already fixed bug 58518, I have also back ported this fix into tomcat 7.0.x.\nPlease refer to the patches I provided.\nIn addition, I have also added a unit test case to cover bug 58518.",
      "(In reply to Huxing Zhang from comment #14)\n> Created attachment 33220 [details]\n> patch that also avoid bug 58518\n> \n> Well, since Mark has already fixed bug 58518, I have also back ported this\n> fix into tomcat 7.0.x.\n\nPlease check the following discussion\nhttp://marc.info/?t=144578052500001&r=1&w=2",
      "(In reply to Violeta Georgieva from comment #15)\n> (In reply to Huxing Zhang from comment #14)\n> > Created attachment 33220 [details]\n> > patch that also avoid bug 58518\n> > \n> > Well, since Mark has already fixed bug 58518, I have also back ported this\n> > fix into tomcat 7.0.x.\n> \n> Please check the following discussion\n> http://marc.info/?t=144578052500001&r=1&w=2\n\nThanks for your information, How about the following implementation ConfigFileLoader, which I think it can avoid:\n1) twice hard disk access.\n2) resolving file paths that contains space.\n\npublic static InputStream getInputStream(String location) throws IOException {\n        // Absolute URIs will be left alone\n        // Relative files will be resolved relative to catalina base\n        // Absolute files will be converted to URIs\n\n        // Location was originally always a file before URI support was added so\n        // try file first.\n\n        // First guess, an absolute file path\n        File file = new File(location);\n\n        if (!file.isAbsolute()) {\n            // Second guess, a file path relative to CATALINA_BASE\n            file = new File(CATALINA_BASE_FILE, location);\n        }\n\n        if (file.isFile()) {\n            return new FileInputStream(file);\n        }\n\n        // Third and final guess, a URI\n        URI uri = CATALINA_BASE_URI.resolve(location);\n        return uri.toURL().openStream();\n    }",
      "Yep, that is pretty much the solution I came up with.",
      "Created attachment 33230\npatch including latest ConfigFileLoader enhancement.",
      "(In reply to Huxing Zhang from comment #18)\n> Created attachment 33230 [details]\n> patch including latest ConfigFileLoader enhancement.\n\nHi,\n\nPlease do not remove DirContextURLStreamHandlerFactory, users can use it to provide additional stream handlers.\n\nRegards,\nVioleta",
      "I just renamed  DirContextURLStreamHandlerFactory to TomcatURLStreamHandlerFactory, which might not be good for backward compatibility.\nI will restore DirContextURLStreamHandlerFactory in my next patch.",
      "Created attachment 33268\nPatch to restore DirContextUrlStreamHandlerFactory",
      "Hi,\n\nThanks for the back-port.\nI back-ported the changes in the documentation also.\nThe fix will be available in Tomcat 7.0.66 onwards.\n\nRegards,\nVioleta"
    ],
    "creation_ts": "2014-07-28T09:27:20Z",
    "fixes": [
      56777
    ]
  },
  {
    "id": 62312,
    "summary": "Add Proxy Authentication support to websocket client",
    "description": "Created attachment 35880\nPatch to provide proxy authentication to websocket client\n\nThe attached patch provides proxy authentication support to the websocket client via the ClientEndpointConfig.",
    "comments": [
      "Created attachment 35887\nChange for proxy authentication with updated scheme selection algorithm\n\nThis attachment supersedes all previous attachments",
      "I've uploaded a 2nd patch file generated from git that supersedes the 1st patch file.  This patch file contains the following changes:\n\n1.  The original algorithm used to choose the proxy authentication scheme always chose the first Proxy-Authenticate header returned on the 407 response.  Of course the first proxy I tried this on supported NTLM.  So \"invalid authentication scheme\"  was logged and authorization failed.  I changed the algorithm to choose the first Proxy-Authenticate header that contained a scheme supported by the websocket client, ie Digest or Basic.\n\n2.  The algorithm used to choose the WWW authenticate scheme had the same problem as the proxy authenticate scheme so the same change was applied there.\n\n3.  The variable arguments supplied to getString were not being appended to the base message.  For instance, the exception messages for an unsupported auth scheme rendered as \"wsWebSocketContainer.unsupportedProxyAuthScheme\" rather than \"wsWebSocketContainer.unsupportedProxyAuthScheme 407 NTLM\".  {n} tokens were added to first argument of getSTring to support the appropriate number of variable arguments.",
      "Please provide a diff against trunk rather than a sequence of patch files.\n\nPlease remove all the getString {n} changes from the proposed diff. Substitution is correctly handled by Tomcat's StringManager implementation.\n\nThe patch is not using the StringManager correctly. New strings need to be defined in LocalStrings.properties\n\nPlease add ALv2 headers (as per the Tomcat source files) to all new files.\n\nPlease remove all @author tags.\n\nPlease document the new properties in web-socket-howto.xml",
      "Created attachment 35984\nGit diffs for proxy authentication support\n\ngit diff of trunk w/proxy auth changes vs trunk",
      "I've made the changes you outlined in your previous comments.  \n\nThe diff file also contains changes to do realm validation.\n\nLet me know if additional info is needed.",
      "I've made the changes you outlined in your previous comments.  \n\nThe diff file is against the trunk as of 6/22/2018.  It also contains changes to do realm validation.\n\nLet me know if additional info is needed.",
      "Is this available in any released version?",
      "(In reply to radhika.jaju@veritas.com from comment #7)\n> Is this available in any released version?\n\nNo.",
      "We need the proxy basic authentication support for websocket connection as we are using the tomcat websocket client library.\nAny possibility of this getting it bundled with the 9.0.x version of Tomcat?",
      "*** Bug 59758 has been marked as a duplicate of this bug. ***",
      "I'm looking at this now.",
      "Fixed in:\n- 10.1.x for 10.1.0-M18 onwards\n- 10.0.x for 10.0.24 onwards\n-  9.0.x for  9.0.66 onwards\n-  8.5.x for  8.5.83 onwards\n\nMany thanks to Joe Mokos for the original patch. While there was a lot of refactoring in the final set of commits, the underlying fix is exactly as proposed in the original patch.",
      "Wow, Thanks so much for quick resolution..",
      "It was only so quick due to the great work already done by Joe Mokos.",
      "Thanks Joe Mokos and Mark Thomas. Really appreciate it."
    ],
    "creation_ts": "2018-04-18T15:01:19Z",
    "fixes": [
      62312
    ]
  },
  {
    "id": 69615,
    "summary": "Potential Regression in Tomcat 9.0.97+(Including Tomcat 10 and Tomcat 11) \u2014 NoClassDefFoundError for Dynamically Loaded Classes",
    "description": "We would like to report a potential regression issue observed in Tomcat 9.0.97+, including Tomcat 10 and Tomcat 11, that appears to break expected behaviour regarding dynamically loaded JARs.\n\n\n## Issue Description:\n\nOur application is a WAR-based deployment running on Tomcat 11 with Java 21. The application allows importing extensions (JARs) at runtime, which are dynamically loaded using URLClassLoader.\nIn Tomcat 9.0.96 and earlier, dynamically loaded classes were immediately recognized without issues. However, starting from Tomcat 9.0.97, we encountered the following error when attempting to access classes from these dynamically loaded JARs:\n\njava.lang.NoClassDefFoundError: org/apache/logging/log4j/spi/ExtendedLogger\n\n\n## Steps to Reproduce:\n\n1. Deploy a WAR-based application on Tomcat 9.0.97+.\n2. Dynamically load a JAR (e.g. log4j-api-2.17.1.jar) using the following code:\n\n   URLClassLoader webappClassLoader = (URLClassLoader) Thread.currentThread().getContextClassLoader();\n   Method method = URLClassLoader.class.getDeclaredMethod(\"addURL\", URL.class);                                   \n   method.setAccessible(true);                                                                                      \n   method.invoke(webappClassLoader, new Object[]{jarUrl});\n\n3. Attempt to access a class from the dynamically loaded JAR, such as org.apache.logging.log4j.spi.ExtendedLogger.\n4. Observe the NoClassDefFoundError exception despite the JAR being successfully loaded.\n\n## Findings:\n\n\u2022 Debugging confirmed that the JAR was successfully loaded by the classloader.\n\u2022 Classes like org.apache.logging.log4j.LogManager and org.apache.logging.log4j.Logger were accessible, but org.apache.logging.log4j.spi.ExtendedLogger still resulted in a NoClassDefFoundError.\n\u2022 Restarting Tomcat resolves the issue, confirming it\u2019s related to Tomcat's internal caching.\n\n## Root Cause Analysis:\n\nThis issue appears to be related to the notFoundClassResourceCacheSize caching mechanism introduced in Tomcat 9.0.97.\n\u2022 If a class is requested before its JAR is loaded, Tomcat caches it as \"not found.\"\n\u2022 Even after dynamically loading the JAR, Tomcat does not reattempt the class lookup, causing a NoClassDefFoundError.\n\u2022 This behaviour differs from Tomcat 9.0.96 and earlier, where dynamically loaded JARs were recognized immediately without requiring a server restart.\n\n## Impact:\n\nThis caching behaviour is problematic for applications that rely on runtime JAR loading and introduces unexpected behaviour that breaks compatibility with previous Tomcat versions. Given that Tomcat has historically maintained backward compatibility, this change could be considered a regression.\n\n## Request:\n\nWe believe this behaviour deviates from expected functionality and may impact other applications that rely on dynamic class loading. We kindly request that the Tomcat team review this behaviour and consider addressing it in future releases to restore compatibility.",
    "comments": [
      "This report appears to be a duplicate of BZ 69447 which was fixed in 9.0.98. Have you tried 9.0.98 or any later version?",
      "(In reply to Chuck Caldarale from comment #1)\n> This report appears to be a duplicate of BZ 69447 which was fixed in 9.0.98.\n> Have you tried 9.0.98 or any later version?\n\nWe have the same problem on 11.0.2. So, I don't think this is the same problem. \nWe think that that this notFoundClassResource should be disabled by default, because the new functionality has the potential to cause regressions as it did in our case. \nCustomer would usually not expect everything to break in a minor version, hence the request to change the default for this setting.",
      "When are you calling WebappClassLoader.addURL()? During web application start or later?",
      "(In reply to Mark Thomas from comment #3)\n> When are you calling WebappClassLoader.addURL()? During web application\n> start or later?\n\nLater. After the web application is up and running.",
      "Tx.\n\nGiven you are using reflection to hack Tomcat's internals it isn't entirely unexpected that changes to how those internals work mean that you need to update your hack.\n\nTomcat will handle calls to addURL() during web application start but calls to addURL() while the application is running will also require an additional call to empty the notFoundClassResources cache.\n\nYou have a couple of immediate options:\n- disable the notFoundClassResources by setting notFoundClassResourceCacheSize=\"0\" on the Context\n- update your hack to clear that cache after you call addURL()\n\nAll of that said, we can be helpful here and ensure that when addURL() is called that we automatically clear the notFoundClassResources cache. It should be possible to do that in time for the next release round (early April).",
      "Fixed in:\n- 11.0.x for 11.0.6 onwards\n- 10.1.x for 10.1.40 onwards\n-  9.0.x for  9.0.103 onwards",
      "We are using the URLClassLoader class to dynamically load JARs using reflection (see the code below). Will your fix work with URLClassLoader?\n\n   URLClassLoader webappClassLoader = (URLClassLoader) Thread.currentThread().getContextClassLoader();\n   Method method = URLClassLoader.class.getDeclaredMethod(\"addURL\", URL.class);                                   \n   method.setAccessible(true);                                                                                      \n   method.invoke(webappClassLoader, new Object[]{jarUrl});",
      "As long as you are obtaining a reference to the web application class loader then yes."
    ],
    "creation_ts": "2025-03-18T17:26:11Z",
    "fixes": [
      69615
    ]
  },
  {
    "id": 66120,
    "summary": "j_security_check returns 408 if j_security_check request lands on different tomcat server from original server",
    "description": "Setup:\n1. Have two tomcat instances and session back-up with Memcached for failover.\n2. Use FormAuthenticator for authentication \n\nScenario:\n1. render login form from TC-instance-1\n2. submit login form request (j_security_check) to TC-instance-2 ( to simulate tomcat fail-over or load balancer routes the request to other instance for any reason )\n\nObservation: \nTC-instance-2 returns 408 \n\nAddition information:\nFrom commit https://github.com/apache/tomcat/commit/fd381e94f222831fd2bee697deb6246d417b8f33 form authenticator expects session id from session-note, \nSession note being transient, it\u2019s not serialized, not backed up by backup manager. This result into session is set to expire/null and cascading 408 error\n\nWith modern infrastructure failure is expected (like pod/node eviction [Kubernetes HPA trashing] or load balancers consistent hashing algorithm changes sticky ness ) so the failover is more frequent",
    "comments": [
      "Do we want to support this? It would mean finding a way to serialize:\n- the expected session ID (part of the CSRF protection)\n- the saved request \n\nThis looks to be doable although it would some effort to ensure that the serialization changes were done in a backwards compatible manner. We would also need to keep in mind that there may be further changes in serialization format in the future.",
      "Please remember that this issue would pop as random login failure ( on Kubernetes or similar cloud infra) mostly on prod/deployed env. \nIt took weeks for us to deduce this issue from random login error to definitive reproduceable steps. This would be the case for others as well ( last thing anyone suspect is tomcat).\n\nSo considering impact on user experience (credentials are stored in browser) and difficulties to reproduce/debug, I wish this to be fixed and documented until its fixed so users (of tomcat) are aware of this and saves bit of time",
      "My current thinking is that make this behaviour optional depending on the setting of the \"persistAuthentication\" attribute of the Manager.\n\nIf we do this that way, the change to the session serialization format can be handled in a backwards compatible manner.\n\nIf there are no objections, I intend to implement this in time for the August release round.",
      "I like making it optional",
      "Having started work on this it is more complex that it first appears.\n\nThe main reason is needing to make sure a cluster can perform a rolling upgrade. Getting this to work in a Tribes based cluster requires creating a new message type. Currently, receiving a new message type will trigger an error. This means users need to upgrade in two stages. First to a version that understands (or at least doesn't trigger an error) for the new message type. Second to a version that uses the new message type to transfer the session note.\n\nWe may decide to wait more than one release from implementing the first stage to the second.\n\nThe fix for non-cluster managers (which is what the original request was for) looks to be simpler and should be possible to provide in the next release.",
      "Slight change of plan.\n\n10.1.x will just fix this (the 10.1.x releases are still milestones).\n\n10.0.x and earlier will fix this but sending the new messages will be controlled by configuration and disabled by default. To upgrade from a version before this fix to using this fix would require two stages: 1) upgrade all nodes to a version with this fix 2) enable the configuration option to send the new messages on each node.",
      "Fixed in:\n- 10.1.x for 10.1.0-M18 onwards\n- 10.0.x for 10.0.24 onwards\n-  9.0.x for  9.0.66 onwards\n-  8.5.x for  8.5.83 onwards"
    ],
    "creation_ts": "2022-06-14T19:44:24Z",
    "fixes": [
      66120
    ]
  },
  {
    "id": 39592,
    "summary": "SSI does not correctly process HEAD request",
    "description": "Hello,\n\nI think there is a small bug in Tomcat 5.0 and 5.5 (at least I could see it already with many versions of \nTomcat).\n\nI use SSI \n          org.apache.catalina.ssi.SSIServlet\n\nand\n\n     <param-name>isVirtualWebappRelative</param-name>\n          <param-value>1</param-value>\n\n\nAll my pages (*.html) are processed by the SSI\n        <url-pattern>*.html</url-pattern>\n\nIf there is a normal GET request, SSI compiles a page and everything is just OK.\n\nHowever, for  the HEAD request to the same page (there is no need to compile the page) the SSI still \ntries to do it and generates a number of exceptions (see enclosed).\n\nThis error is not critical but overloads my catalina.out file. I do not think that it is difficult to fix it.\n\nI already reported this error to tomcat-dev, but decided to create a formal \"bug\" report at ASF Bugzilla \nto see if it was already fixed or not. This is not a big error, but it is annoying.\n\nThanks!\n\nWith the best regards,\nIgor Tetko\n\n*****\n\nApr 28, 2006 11:26:45 AM org.apache.catalina.core.ApplicationContext log\nSEVERE: #include--Couldn't include file: styles.html\njava.io.IOException: Couldn't find file: /incl/styles.html\n        at org.apache.catalina.ssi.SSIServletExternalResolver.getFileText(SSIServletExternalResolver.java:\n537)\n        at org.apache.catalina.ssi.SSIMediator.getFileText(SSIMediator.java:155)\n        at org.apache.catalina.ssi.SSIInclude.process(SSIInclude.java:44)\n        at org.apache.catalina.ssi.SSIProcessor.process(SSIProcessor.java:146)\n        at org.apache.catalina.ssi.SSIServlet.processSSI(SSIServlet.java:221)\n        at org.apache.catalina.ssi.SSIServlet.requestHandler(SSIServlet.java:187)\n        at org.apache.catalina.ssi.SSIServlet.doGet(SSIServlet.java:123)\n        at javax.servlet.http.HttpServlet.doHead(HttpServlet.java:270)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:706)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672)\n        at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:574)\n        at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:499)\n        at org.apache.catalina.ssi.SSIServletExternalResolver.getFileText(SSIServletExternalResolver.java:\n519)\n        at org.apache.catalina.ssi.SSIMediator.getFileText(SSIMediator.java:155)\n        at org.apache.catalina.ssi.SSIInclude.process(SSIInclude.java:44)\n        at org.apache.catalina.ssi.SSIProcessor.process(SSIProcessor.java:146)\n        at org.apache.catalina.ssi.SSIServlet.processSSI(SSIServlet.java:221)\n        at org.apache.catalina.ssi.SSIServlet.requestHandler(SSIServlet.java:187)\n        at org.apache.catalina.ssi.SSIServlet.doGet(SSIServlet.java:123)\n        at javax.servlet.http.HttpServlet.doHead(HttpServlet.java:270)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:706)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)\n        at org.apache.catalina.valves.FastCommonAccessLogValve.invoke\n(FastCommonAccessLogValve.java:495)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)\n        at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection\n(Http11BaseProtocol.java:664)\n        at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)\n        at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt\n(LeaderFollowerWorkerThread.java:80)\n        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n        at java.lang.Thread.run(Thread.java:613)",
    "comments": [
      "This is fixed in SVN and will be in 5.5.18 and later."
    ],
    "creation_ts": "2006-05-16T17:40:47Z",
    "fixes": [
      39592
    ]
  },
  {
    "id": 64488,
    "summary": "EL API: AccessControlException -- Import Handler",
    "description": "Created attachment 37286\nPatch\n\nHello,\n\nI encountered an AccessControlException when using the Tomcat 10.0.0-M5 EL API in Open Liberty. \n\nThe stack trace is provided below, but the exception is thrown starting on this line: jakarta.el.ImportHandler.findClass(ImportHandler.java:455)\n\nI would appreciate if someone look whether a security check should be added in the code. It appears to be a valid scenario. I've added a patch for reference (based off code from ExpressionFactory.java). \n\nWe also used the same Tomcat 10.0.0-M5 Jasper EL Implementation.\n\nThe application was run on the following JDK: \n\nopenjdk version \"1.8.0_222\"\nOpenJDK Runtime Environment (build 1.8.0_222-b10)\nEclipse OpenJ9 VM (build openj9-0.15.1, JRE 1.8.0 Mac OS X amd64-64-Bit Compressed References 20190717_298 (JIT enabled, AOT enabled)\nOpenJ9   - 0f66c6431\nOMR      - ec782f26\nJCL      - f147086df1 based on jdk8u222-b10)\n\nPlease let me know if you have any questions. Thank you. \n_________________________________________\n\nPermission: \n(\"java.io.FilePermission\" \"/Library/Java/JavaVirtualMachines/adoptopenjdk-8-openj9.jdk/Contents/Home/jre/lib/rt.jar\" \"read\")\nStack: \njava.security.AccessControlException: Access denied (\"java.io.FilePermission\" \"/Library/Java/JavaVirtualMachines/adoptopenjdk-8-openj9.jdk/Contents/Home/jre/lib/rt.jar\" \"read\")java.security.AccessController.throwACE(AccessController.java:176)\njava.security.AccessController.checkPermissionHelper(AccessController.java:238)\njava.security.AccessController.checkPermission(AccessController.java:385)\njava.lang.SecurityManager.checkPermission(SecurityManager.java:549)\ncom.ibm.ws.kernel.launch.internal.MissingDoPrivDetectionSecurityManager.checkPermission(MissingDoPrivDetectionSecurityManager.java:45)\ncom.ibm.oti.vm.AbstractClassLoader.findResource(AbstractClassLoader.java:194)\njava.lang.ClassLoader.getResource(ClassLoader.java:584)\njava.lang.ClassLoader.getResource(ClassLoader.java:586)\njava.lang.ClassLoader.getResource(ClassLoader.java:586)\ncom.ibm.ws.kernel.internal.classloader.BootstrapChildFirstJarClassloader.getResource(BootstrapChildFirstJarClassloader.java:110)\norg.eclipse.osgi.internal.loader.BundleLoader.findResource(BundleLoader.java:621)\norg.eclipse.osgi.internal.loader.ModuleClassLoader.getResource(ModuleClassLoader.java:216)\ncom.ibm.ws.classloading.internal.GatewayClassLoader.findResource(GatewayClassLoader.java:134)\ncom.ibm.ws.classloading.internal.GatewayClassLoader.getResource(GatewayClassLoader.java:116)\njava.lang.ClassLoader.getResource(ClassLoader.java:586)\njakarta.el.ImportHandler.findClass(ImportHandler.java:455)\njakarta.el.ImportHandler.resolveClass(ImportHandler.java:417)\njakarta.servlet.jsp.el.ScopedAttributeELResolver.getValue(ScopedAttributeELResolver.java:93)\norg.apache.jasper.el.JasperELResolver.getValue(JasperELResolver.java:110)\norg.apache.el.parser.AstIdentifier.getValue(AstIdentifier.java:94)\norg.apache.el.parser.AstValue.getValue(AstValue.java:137)\norg.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:190)\norg.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:794)\ncom.ibm._jsp._EL30StaticFieldsAndMethodsTests._jspService(_EL30StaticFieldsAndMethodsTests.java:109)\ncom.ibm.ws.jsp.runtime.HttpJspBase.service(HttpJspBase.java:100)",
    "comments": [
      "The ImportHandler code should not be made privileged.\n\nYou need to grant the necessary permissions to whatever code calls ImportHandler.\n\nIn a default Tomcat installation, the necessary permission should be granted in the catalina.policy file.\n\nIt is possible, but unlikely, that a privileged block is missing elsewhere. If you can provide the simplest possible JSP that triggers this issue on a clean Tomcat 10 install we can take a look.",
      "(In reply to volosied+apache from comment #0)\n> Permission: \n> (\"java.io.FilePermission\"\n> \"/Library/Java/JavaVirtualMachines/adoptopenjdk-8-openj9.jdk/Contents/Home/\n> jre/lib/rt.jar\" \"read\")\n\nHow does it happen that it does not have a read permission for \"rt.jar\"?\n\nIn your case (looking at the proposed patch - attachment 37286) it is a getResource() call that is blocked by lacking permissions. Does it mean that not only loading of resources, but loading classes from rt.jar is blocked as well? Why? For what purpose? (*)\n\nIs it a real-world configuration? Why is it configured like that?\n\n\n(*) E.g. looking a 'loadClass(name)' call a few lines later just below the code affected by the patch - at ImportHandler line 463. - Will it fail?\n\n\n(In reply to Mark Thomas from comment #1)\n> If you can provide the simplest possible JSP that triggers this issue on a\n> clean Tomcat 10 install we can take a look.\n\n+1\n\nI would like to see steps and code that are sufficient to reproduce the behaviour.\n\n(From your stack trace I guess that you are running a JSP page, but not from within Apache Tomcat.)",
      "(In reply to volosied+apache from comment #0)\n\nA pair of minor comments regarding the patch\n\n> +  @Override\n> +  public Boolean run() {\n> +      return cl.getResource(path) == null;\n> +  }\n\nThe code fragment above uses autoboxing. The code style in Tomcat is to use explicit boxing.\n\n(Configuration of compiler warnings for Eclipse IDE is documented in /res/ide-support/eclipse/java-compiler-errors-warnings.txt)\n\n> From:\n\nIf that was not intended, you may want to configure user.email setting in your clone of the repository.",
      "Hello,\n\nThank you so much for the quick replies. I looked more into my issue, and I have a better idea of what\u2019s occurring.  I do not believe anything is wrong with the ImportHandler after all. \n\nIn my  Open Liberty build, I had a development security property enabled,  unknown to me,  that logs AccessControl exceptions and allows the application to continue.  When I removed that property, I encountered a different error: jakarta.el.ELException: Function [:Boolean] not found. This may relate to the the fact that rt.jar contains the Boolean class (which EL doesn't have access to?).\n\nI tested the same JSP on Tomcat (with security enabled), and encountered the very same exception. \n\nThis is the troublesome EL Expression: \u201c${Boolean(true)}\u201d \n\nI tested it in Tomcat 7 and 9, and the same exception is thrown. The behavior is consistent everywhere.  However, can anyone explain it is that way (or point me to any resources)? My current understanding is that, when security is enabled, EL(or Tomcat?) doesn\u2019t have access, by default, to the java runtime jar, rt.jar? (Which may explain why the original error asked me add the java.io.FilePermission to the rt.jar)  Although I tried modifying the permissions in Tomcat but was unsuccessful in getting the EL code to run with security enabled.  \n\nHowever, I tested further, and the following code does work?  I\u2019m assuming because it\u2019s not going through EL? \n\n    <%\n        Boolean b = new Boolean(\"true\");\n        System.out.println(\"Boolean Result: \" + b);\n    %>\n\n    <%= b %>\n\nI\u2019m not very familiar with java security and, this is beyond what I originally started looking into, but, once again, thank you for your help. And I'll mark this issue as resolved/invalid. \n\nFull Exception: \n\njavax.el.ELException: Function [:Boolean] not found\n    org.apache.el.parser.AstFunction.getValue(AstFunction.java:148)\n    org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:190)\n    org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:701)\n    org.apache.jsp.el_jsp._jspService(el_jsp.java:163)\n    org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:71)\n    javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n    org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)\n    org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)\n    org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)\n    javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n    sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n    sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    java.lang.reflect.Method.invoke(Method.java:498)\n    org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282)\n    org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279)\n    java.security.AccessController.doPrivileged(AccessController.java:770)\n    javax.security.auth.Subject.doAsPrivileged(Subject.java:549)\n    org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\n    org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:170)\n    java.security.AccessController.doPrivileged(AccessController.java:734)\n    org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n    sun.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)\n    sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    java.lang.reflect.Method.invoke(Method.java:498)\n    org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282)\n    org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279)\n    java.security.AccessController.doPrivileged(AccessController.java:770)\n    javax.security.auth.Subject.doAsPrivileged(Subject.java:549)\n    org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\n    org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)",
      "At first glance, I'd expect that to work. Re-opening while I dig into what is going on...",
      "Thanks for the test case. It makes debugging what is going on a lot easier.\n\nI think there is a bug here.\n \nOver time we have added various optimisations to the ImportHandler to address performance issues caused by the ambiguity introduced in EL 3.0. A good summary of those ambiguities and the associated performance issues can be found in https://tomcat.markmail.org/thread/pcxxg4ql6mxjwcmd and the links in the first email of that thread.\n\nOne of those optimisations was to do a resource lookup before trying to load the class as this was considerably quicker for the \"not a class\" case and only marginally slower for the \"is a class\" case. It is this resource lookup that is failing due to a lack of read permission.\n\nGiven that this test is there to optimise the \"not a class\" case, that the return value is thrown away and that the class loading happens a few lines later, I think your proposed patch is along the right lines. We've been moving towards removing anonymous classes so I am going to try a variation of your patch that uses an inner class.",
      "Fixed in:\n- master for 10.0.0-M6 onwards\n- 9.0.x for 9.0.36 onwards\n- 8.5.x for 8.5.56 onwards\n\nTomcat 7 doesn't support EL 3.0"
    ],
    "creation_ts": "2020-06-01T21:32:38Z",
    "fixes": [
      64488
    ]
  },
  {
    "id": 52121,
    "summary": "corrupt gzip output when compression=on in server.xml",
    "description": "Created attachment 27886\nGzip Corruption Repro WAR\n\nThis appears to be same issue as posted by Christopher Taylor\nJun 30, 2011 at 8:05 am to Tomcat Users. The subject line has been preserved above.\n\nAs mentioned in the post, this seems to have arisen with this issue:\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=48738\n\nThe change introduced this class: FlushableGZIPOutputStream. When we started using this, we noticed that certain string flush sequences would result in corrupt gzip output. \n\nThe attached WAR provides a repro. The sequence of writes to the output stream that would\u2019ve been done by our server is mimicked in this case using a file system. There are 40 files each representing a flush. URL:\n\n\"http://localhost:8080/TomcatBugReportWAR\"\n\nI\u2019ve allowed the \u2018start\u2019 and \u2018end\u2019 request parameters to control to the starting and ending points. I\u2019ve also allowed an \u2018append\u2019 request parameter dump anything to the outputstream.\n\nThe defaults are 0, 40, and \u201c\u201d for start end and append respectively.\n\nThe following query string appears particularly interesting as it seems to be the smallest sequence that causes the corruption and the subsequent string that is appended after the output is the only thing that appears corrupted:\n\n\"http://localhost:8080/TomcatBugReportWAR?start=19&end=30&append=something\u201d\n\nIt\u2019s also possible to reproduce this using only the FlushableGZIPOutputStream without using Tomcat at all. See attached JAR.",
    "comments": [
      "Created attachment 27887\nIsolated Reproduction without using Tomcat",
      "Many thanks for the excellent test case. It looks like it was very difficult to track down. We really do appreciate your efforts on this.\n\nI have converted the stand-alone reproduction JAR to a Tomcat test case. It isn't yet in the standard test suite as it currently always fails.\n\nI noticed that the following is sufficient to reproduce the issue:\n- send parts 19 to 28, flush, 29, flush, close\n\nI have therefore merged parts 19 to 28 for the test case.\n\nThe failure is a CRC error.\n\nAt this point this looks like a JVM bug.\n\nWe don't normally address JVM bugs in the Tomcat codebase but if we can figure out exactly what causes this bug (it seems to be related to a very precise state) then we might be able to detect the state and prevent the flush that triggers the bug. Failing that, it should be possible to make use of the flushable GZIP filter configurable.\n\nAs a workaround, you may be able to add an explicit flush() to the page(s) where this occurs.",
      "Note that you can run the test by adding the following line to the build.properties file:\ntest.entry=org.apache.coyote.http11.filters.TesterFlushableGZIPOutputStream\n\nJust for reference:\nIf I run the test through Ant it fails in an odd way:\n\n[[[\nTestsuite: org.apache.coyote.http11.filters.TesterFlushableGZIPOutputStream\nTests run: 1, Failures: 0, Errors: 1, Time elapsed: 0,031 sec\n\nTestcase: testBug52121 took 0,016 sec\n\tCaused an ERROR\nnull\njava.lang.NullPointerException\n\tat org.apache.catalina.util.IOTools.flow(IOTools.java:74)\n\tat org.apache.catalina.util.IOTools.flow(IOTools.java:85)\n\tat org.apache.coyote.http11.filters.TesterFlushableGZIPOutputStream.testBug52121(TesterFlushableGZIPOutputStream.java:47)\n]]]\n\nI cannot explain this NPE.\n\nIf I run it as JUnit test from with Eclipse IDE I get the IO error:\n\n[[[\njava.io.IOException: Corrupt GZIP trailer\n\tat java.util.zip.GZIPInputStream.readTrailer(GZIPInputStream.java:203)\n\tat java.util.zip.GZIPInputStream.read(GZIPInputStream.java:94)\n\tat java.io.FilterInputStream.read(FilterInputStream.java:90)\n\tat org.apache.catalina.util.IOTools.flow(IOTools.java:74)\n\tat org.apache.catalina.util.IOTools.flow(IOTools.java:85)\n\tat org.apache.coyote.http11.filters.TesterFlushableGZIPOutputStream.testBug52121(TesterFlushableGZIPOutputStream.java:63)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n]]]\n\nThe sources are trunk@1197344, both were run with jdk 6u29 (build 1.6.0_29-b11) on Windows XP 32-bit.",
      "I think I fixed it with r1197382.\n\n\nRegarding the NPE when testing with Ant: it is a fault in the test case.\nThe resources are not copied when compiling the test classes. Thus classloader.getResourceAsStream() does not find the resource and returns null.",
      "Unfortunately, that hasn't fixed it. It just avoids the call that triggers the problem. I've added an additional write to expose the issue again. I also found a way to crash the JVM. This makes me more convinced this is as JVM bug.",
      "Several additional notes\n\nA link to the thread by Christopher Taylor mentioned by OP:\nhttp://tomcat.markmail.org/thread/v56xpi5uz4end7cd\n\nNote, that the Christopher Taylor's thread contains an attachment but only containing the corrupted gzip stream.\n\n1. I can observe the CRC error with 3-rd party tool, 7-zip.\n\nIt cannot decompress the file in Christopher Taylor's message, nether it can the one produced by the test case for this issue before I committed my changes. It reports CRC error.\n\nChristopher Taylor's file was produced by Tomcat 7.0.14.\n\nThus not only Java report that the stream is broken.\n\n2. According to the sources of deflate.c of zlib library that can be found in many placed, changing compression level which is performed by \"deflateParams\" call indeed causes deflate(strm, Z_PARTIAL_FLUSH) flushing the buffer.\n\nThat is in some old version of the code. In more recent ones it is just a deflate(strm, Z_BLOCK).\n\n\n3. Looking at the content of the streams produced by compression. Both the stream in Christopher Taylor's message and the one produced by the JUnit test case for this bug have uncompressed data near the end of the stream.\n\nThat is \"</id><version>\"... or \"<div \"... respectively - about 200 bytes of plain text.\n\nIt just means that the flush in deflateParams() call failed to flush the whole stream.\n\nThat happens when the output buffer used by deflate.c (that is configured by 'size' parameter in GZIPOutputStream constructor) is too small. There is a loop that deals with this in DeflaterOutputStream.deflate(). Because the effective compression level at that time is Deflater.NO_COMPRESSION the data is flushed uncompressed.\n\nThe following follows:\n1) If I increase size of the buffer by the following change in FlushableGZIPOutputStream constructor, the problem reported here disappears:\n\n-        super(os);\n+        super(os, 64*1024);\n\n\n4. The Java bugs 4255743 and 4813885 that are mentioned in the Javadoc for the FlushableGZIPOutputStream class are both fixed in Java 7.\n\nThere is an additional boolean argument to GZIPOutputStream and DeflaterOutputStream constructors in Java 7, \"syncFlush\". If it is set to true, then calling mere flush() results in flushing the compressor.\n\n5. Some documentation mentions that there is a trick in gzip when partial flush is performed. It sends either one block or two blocks.\n\nhttp://www.bolet.org/~pornin/deflate-flush.html",
      "Further fixed in r1197578\n\nI removed the trick with empty byte array and direct call to def.setInput(). Calling setInput() with empty data never happens in the standard write() method.",
      "The latest fix looks good to me. I have applied it to 7.0.x and it will be included in 7.0.23 onwards.\n\nMoving this issue to 6.0.x as it also needs to be fixed there.",
      "Created attachment 27905\n2011-11-07_tc6_FlushableGZIPOutputStream.patch\n\nPatch for Tomcat 6.0",
      "Applied to 6.0 with r1200603 and will be in 6.0.34.",
      "Reverted in 6.0 in r1200620. It is broken.\nBrowsers display empty page with compression=\"on\".\nWget says \"No data received\".\nAs if connection has been closed.\n\n\nDebugging with trunk, there is problem in OutputBuffer.close().\nIt does:\n        doFlush(false);\n        closed = true;\n\nIt closes underlying stream without closing FlushableGZIPOutputStream first.\nConsequently the attempt to write out the last byte at FlushableGZIPOutputStream#close() fails with an IOException.",
      "The issue in comment 11 fixed in trunk and 7.0 with r1200696 and r1200698 respectively, will be in 7.0.23.",
      "Created attachment 27924\n2011-11-11_tc6_FlushableGZIPOutputStream-v2.patch\n\nUpdated patch for 6.0.x.",
      "(In reply to comment #11)\n>> Debugging with trunk, there is problem in OutputBuffer.close().\n>> It does:\n>>         doFlush(false);\n>>         closed = true;\n>> \n>> It closes underlying stream without closing FlushableGZIPOutputStream first.\n>> Consequently the attempt to write out the last byte at\n>> FlushableGZIPOutputStream#close() fails with an IOException.\n\nJust to clear misinformation: the statements quoted above are wrong.\n\nIt behaved as if the stream were closed, but the real cause was finished Deflater. It has nothing to do with the underlying buffer and the code fragment above. See r1200696",
      "Fixed in 6.0 with r1201193 and will be in 6.0.34."
    ],
    "creation_ts": "2011-11-01T22:15:16Z",
    "fixes": [
      52121
    ]
  },
  {
    "id": 59317,
    "summary": "AsyncContextImpl breaks request URL containing spaces",
    "description": "The problem appears when performing async requests to URLs that contain a space in URI path. I have an application that performs an XHR POST to http://localhost:8080/api/alarms/:id. When I set id to 'foo bar' I get an error:\n\n\njava.lang.IllegalStateException: Could not get HttpServletRequest URI: Illegal character in path at index 36: http://localhost:8080/api/alarms/foo bar\n\tat org.springframework.http.server.ServletServerHttpRequest.getURI(ServletServerHttpRequest.java:99)\n\tat org.springframework.web.util.UriComponentsBuilder.fromHttpRequest(UriComponentsBuilder.java:282)\n\tat org.springframework.web.util.WebUtils.isSameOrigin(WebUtils.java:814)\n\tat org.springframework.web.cors.DefaultCorsProcessor.processRequest(DefaultCorsProcessor.java:71)\n\tat org.springframework.web.servlet.handler.AbstractHandlerMapping$CorsInterceptor.preHandle(AbstractHandlerMapping.java:503)\n\tat org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:134)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:954)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:968)\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:870)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:648)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:720)\n\tat org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:639)\n\tat org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:605)\n\tat org.apache.catalina.core.AsyncContextImpl$1.run(AsyncContextImpl.java:229)\n\tat org.apache.catalina.core.AsyncContextImpl.doInternalDispatch(AsyncContextImpl.java:391)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:208)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\n\tat org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:392)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1715)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:652)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.net.URISyntaxException: Illegal character in path at index 36: http://localhost:8080/api/alarms/foo bar\n\tat java.net.URI$Parser.fail(URI.java:2848)\n\tat java.net.URI$Parser.checkChars(URI.java:3021)\n\tat java.net.URI$Parser.parseHierarchical(URI.java:3105)\n\tat java.net.URI$Parser.parse(URI.java:3053)\n\tat java.net.URI.<init>(URI.java:588)\n\tat org.springframework.http.server.ServletServerHttpRequest.getURI(ServletServerHttpRequest.java:96)\n\t... 35 common frames omitted\n\n\nNon-async requests don't cause any problem. I use Spring Framework 4.2.5.\n\nDebugging revealed what happens:\n\nURI constructor expects an escaped URI (/api/alarms/foo%20bar). When AsyncDispatcher runs, it passes a ServletRequest implementation which getRequestURI() returns /api/alarms/foo bar. Non-async request handling passes an implementation that returns the escaped URI.\n\nAsyncContextImpl.dispatch() constructs a path from HttpServletRequest.getServletPath() and getPathInfo().\nThis path is used in ApplicationContext.getRequestDispatcher() where ApplicationDispatcher constructor is called with the path where it a request URI is expected.\n\nLater ApplicationDispatcher.wrapRequest() creates an ApplicationHttpRequest with a correct request URI but ApplicationDispatcher.doDispatch() calls wrequest.setRequestURI() passing a path not a URI.\n\nAs result the servlet handling the request receives an ApplicationHttpRequest with an incorrect requestURI field ( identical to servletPath field), despite including a RequestFacade in the request field that returns the correct (escaped) value in getRequestURI().\n\nI reproduced the bug on Tomcat 8.0.22, 8.0.30, 8.0.33 and 8.5.0 beta.",
    "comments": [
      "See also bug 57559.\n\nI'm close to marking this bug as a duplicate of that one but I do want to review the detail of exactly what is going on first.",
      "A few more notes as I investigate this.\n\nAsync and non-async behaviours are currently the same.\n- Both expect the path used to obtain the dispatcher to be decoded. This behavior was confirmed with the Servlet EG.\n- Both return the unencoded URI for req.getRequestURI(). That strikes me as wrong.",
      "The restriction the the request dispatcher (or the async dispatch) must be obtained with a decoded path has not changed. However, I have applied a fix that ensures that the result of the call to getRequestURI() after the dispatch returned an encoded URI.\n\nThis has been fixed in:\n9.0.x for 9.0.0.M5 onwards\n8.5.x for 8.5.1 onwards\n8.0.x for 8.0.34 onwards\n7.0.x for 7.0.70 onwards",
      "Hi,\n\nI believe this issue and the change brought with it are causing regressions in apps using Tomcat (such as XWiki).\n\nSee http://markmail.org/message/jwm5ip245empcghi\n\nDo you think you could review this issue in light of this? \n\nRight now, in XWiki land we're starting to have more and more uses reporting issues with Tomcat 7.0.69+ and 8.0.33+ (see http://jira.xwiki.org/browse/XWIKI-13556). And I cannot unencode the path passed to the RequestDispatcher since that makes it fail with other servlet containers... We're a bit stuck.\n\nThanks!",
      "So we ran into this too - with a customer who downloaded the latest rev of Tomcat 8.  Took us half the day yesterday and most of today to get to the bottom of it.  In troubleshooting, I tried using 7 instead but it was still failing there (and now I see that the change is in recent revs of all versions).\n\nIs there a setting we can use to revert to the previous behavior?  Or what's the best way to workaround/fix this?\n\nI'm not sure if it's in this particular set of changes, but if so, it looks like we might be able to turn it off...\n\nhttps://github.com/apache/tomcat/commit/eb195bebac8239b994fa921aeedb136a93e4ccaf",
      "The change done for this issue caused regression in the webapp and We wan into this of URL encoding. Few of the URLs that use : inside are getting encoded and the server is unable to locate the resource anymore.\n\ne.g. /data/parent:children/id is getting encoded as /data/parent%3Achildren/id. Due to this the app does not locate the resources on v7.0.70 as it was doing earlier. Is it possible to allow turning-off this URL-encoding to retain previous behavior?",
      "Potential regressions should be followed up on the users list in the first instance and be accompanied by simple test cases (JSPs can be useful for this) that demonstrate the problem. That will enable us to identify where the problem lies."
    ],
    "creation_ts": "2016-04-13T14:56:57Z",
    "fixes": [
      59317
    ]
  },
  {
    "id": 58275,
    "summary": "TLS prefixed ciphers are discarded with IBM JRE",
    "description": "Regarding IBM JRE ciphersuites, below IBM documentation says that \n\nhttps://www-01.ibm.com/support/knowledgecenter/SSYKE2_7.0.0/com.ibm.java.security.component.71.doc/security-component/jsse2Docs/ciphersuites.html\n\n+++++++\nNote: In the following list, the string \"SSL\" is interchangeable with \"TLS\" and vice versa. For example, where SSL_RSA_WITH_AES_128_CBC_SHA is specified, TLS_RSA_WITH_AES_128_CBC_SHA also applies.\n++++++++\n\n\nHowever if I set TLS prefixed ciphers using the setCiphers method of org.apache.coyote.http11.Http11Protocol object, it is not taking effect. I see the following bugzilla thread which says \n\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=57718\n\n+++\nIBM uses SSL_XXX for all it ciphers although it will accept TLS_XXX. When Tomcat compares the available ciphers against the requested ciphers it can't tell that SSL_XXX and TLS_XXX are the same.\n+++++++++++\n\nMy request here is to see we have some option to avoid this check of cipher list against the available ciphers?. If not, can we have such option, as a JVM parameter or something, so that we can make use of it to allow TLS prefixed ciphers with IBM JRE?",
    "comments": [
      "FYI that I am working on IBM Integration Bus product and we have our customers finding difficulty in setting TLS prefixed ciphers. IBM Integration Bus internally uses tomcat for all its listeners. So is my request to see if we have any such option there by we can avoid the rejection of TLS prefixed ciphers",
      "If the cipher suites are specified using the SSL_xxx form of the name rather than the TLS_xxx form does it work then?\n\nMy current thinking is that we can detect if we are running on an IBM JVM and then add the SSL_xxx form of the cipher after the TLS_xxx form in the list of ciphers so both are present.",
      "Yes, if cipher suites are specified using SSL_xxx then it works perfectly. However, customers who are familiar with Oracle JRE are tend to specify TLS prefix:P. So is the need to address this issue\n\nI have done a similar kind of patch for the time being where if we are running on IBM JRE, replace all TLS prefix with SSL prefix before calling setCiphers()\n\nHowever the check for a specific JRE provider and then renaming the actual cipher names doesnt sound right to me.  So is this my request to get your thoughts to have a  more generalized solution",
      "I think the ideal solution would be if IBM reported both the TLS_XXX and SSL_XXX forms of the cipher suite names (and any other support aliases) when asked which cipher suites it supports. Not doing this makes input validation rather tricky.\n\nDo you know anyone who works for IBM that has had a problem in this area that could advocate within IBM for the change? ;)\n\nI've added a work-around for IBM JREs in trunk, 8.0.x (for 8.0.27) and 7.0.x (for 7.0.65)."
    ],
    "creation_ts": "2015-08-23T15:11:48Z",
    "fixes": [
      58275
    ]
  },
  {
    "id": 43117,
    "summary": "Dangerousness of workDir setting on Context",
    "description": "Hi, I'd like to point out the dangerousness of workDir setting on Context.\n\nIf workDir is an empty string, i.e. workDir=AA, then workDir will be set as\nCATALINA_HOME.\nTherefore if application will be reloaded, then the files in CATALINA_HOME will\nbe deleted.\n\nI know this problem is caused by wrong configuration, but it is too dangerous,\nanyway.\n\nI propose a patch.\n\nIndex: /trunk/java/org/apache/catalina/core/StandardContext.java\n===================================================================\n--- /trunk/java/org/apache/catalina/core/StandardContext.java\t(revision 565643)\n+++ /trunk/java/org/apache/catalina/core/StandardContext.java\t(working copy)\n@@ -5006,7 +5006,7 @@\n \n         // Acquire (or calculate) the work directory path\n         String workDir = getWorkDir();\n-        if (workDir == null) {\n+        if (workDir == null || workDir.length() == 0) {\n \n             // Retrieve our parent (normally a host) name\n             String hostName = null;",
    "comments": [
      "Many thanks for the patch. It has been applied to trunk and proposed for 6.0.x and 5.5.x.",
      "The patch has been applied to 6.0.x and will be in 6.0.17 onwards.",
      "This has been fixed in 5.5.x and will be included in 5.5.27 onwards."
    ],
    "creation_ts": "2007-08-14T01:09:44Z",
    "fixes": [
      43117
    ]
  },
  {
    "id": 67926,
    "summary": "PEMFile prints unidentifiable string representation of ASN.1 OIDs",
    "description": "The following pattern is used:\n> sm.getString(\"pemFile....\", HexUtils.toHexString(oidBytes))\n\nThe result is a hex string which is not helpful. The ASN.1 DER encoding of an OID should be converted to a dotted string representation for users.\n\nAffected keys:\npemFile.unknownEncryptionAlgorithm\npemFile.unknownPkcs8Algorithm\npemFile.notPbkdf2\npemFile.unknownPrfAlgorithm\n\nHowto: https://learn.microsoft.com/en-us/windows/win32/seccertenroll/about-object-identifier?redirectedfrom=MSDN\n\nReference: https://lists.apache.org/thread/2x709tc8ms5jnd1s6drf3pons009sqdl\n\nE.g. for DES_EDE3_CBC as 1.2.840.113549.3.7 the output would be: 2a864886f70d0307. Little helpful.",
    "comments": [
      "Whether the user is provided with the OID in string or byte form doesn't change the fact that the PEM file isn't going to be usable.\n\nThe byte string is sufficient for us to diagnose the issue (and matches what Tomcat uses internally).\n\nI wasn't (and still aren't) convinced it was worth the effort to provide byte to string conversion for OIDs just for the error messages.\n\nThat said, if you want to write a byte to String formatter for OIDs then I'm not going to object.",
      "(In reply to Mark Thomas from comment #1)\n> Whether the user is provided with the OID in string or byte form doesn't\n> change the fact that the PEM file isn't going to be usable.\n> \n> The byte string is sufficient for us to diagnose the issue (and matches what\n> Tomcat uses internally).\n> \n> I wasn't (and still aren't) convinced it was worth the effort to provide\n> byte to string conversion for OIDs just for the error messages.\n> \n> That said, if you want to write a byte to String formatter for OIDs then I'm\n> not going to object.\n\nAgree, but from a user's PoV it makes it much much easier to seach online or here: http://www.oid-info.com/\n\nLet's leave it as an enhancement.",
      "I think the easiest solution is to use org.ietf.jgss.Oid.Oid(byte[]) and the invoke #toString()",
      "+1 - we are already using that class in the SPNEGO authenticator",
      "(In reply to Mark Thomas from comment #4)\n> +1 - we are already using that class in the SPNEGO authenticator\n\nI'll try prepare a PR for this.",
      "Fixed in:\n- main for 11.0.0-M14 and onwards\n- 10.1.x for 10.1.16 and onwards\n- 9.0.x  for 9.0.83 and onwards\n- 8.5.x for 8.5.96 and onwards"
    ],
    "creation_ts": "2023-10-25T09:39:35Z",
    "fixes": [
      67926
    ]
  },
  {
    "id": 46264,
    "summary": "Shutting down tomcat with large number of contexts is slow",
    "description": "Shutting down tomcat with large number of contexts is slow\n\nOn some of our sandbox testing environments, we have tomcat loaded with 30-40 contexts, and run a very large heap (2-3GB).  Most of these contexts are large applications which take anywhere from 5-10 seconds to shutdown each.  Most of the time spent shutting down each application is not spent using the local app server CPU, but shutting down remote resources (Announcing the application is going down over JMS, flushing write buffers, closing DB connections, closing JMS connections, closing log connections, etc.).  Shutting down tomcat typically takes minutes, because it shuts down one context at a time.",
    "comments": [
      "I propose that during the context shutdown, tomcat use multiple threads to shutdown the contexts in parallel.\n\nI have attached a patch which will fire off:\n\n2 x # of Cores\n\nThreads during the shutdown process and work in a FIFO manner shutting down the contexts in parallel.  I suspect even when shutting down contexts which are entirely local in nature (not using resources on remote systems) on a single CPU machine a parallel shutdown will increase the shutdown speed because of various waits, sleeps and other things that may be called in the destroy() method of servlets that can be done in parallel",
      "Created attachment 22912\nProposed patch",
      "I can confirm my patch still works on Tomcat 6.0.29",
      "(In reply to comment #3)\n> I can confirm my patch still works on Tomcat 6.0.29\n\nWould the java.util.concurrency package not provide a more elegant way of solving this problem?",
      "A few comments on the patch.\n\n1. Consider allowing the number of threads to be used to be configured (probably as a attribute of the host).\n\n2. Webapp start/stop time can vary widely. A more efficient solution would be to put all the webapps in a queue and have worker threads remove them one at a time.\n\n3. Both start and stop needs to be addressed.",
      "Created attachment 27755\nstarting contexts in parallel using an executor\n\nWhile this patch is not really for stopping context, but for starting them in parallel, it might be useful nontheless.\n\nThere are two different ways to configure the amount of threads for parallel deployment. First extend the Host element in server.xml with the new attribute parallelDeployment. A value greater 0 will be used. If no valid value was given that way, the system property hostConfig.parallelDeploymentCount will be tested. Again a value greater zero will be valid. If still no valid value could be found Runtime will be asked for the number of available processors.",
      "Hi Felix,\n\ndon't want to split hairs or paint bikesheds but the attribute name seems problematic: in TC 7 we call \"parallel deployment\" the possibility to serve multiple versions of the same context in parallel by deploying versioned contexts.\n\nSomething like startupConcurrency might be better (and I think the fact that it would also be used for shutdown is not a big deal).\n\nRegards,\n\nRainer",
      "I'm currently working on combining these two patches into a complete solution that covers multi-threaded deployment, and container start and stop.",
      "Created attachment 27758\nThreaded start, stop and deployment fo Contexts\n\nThis proposed patch (against trunk) provides threaded start/stop for Contexts and Hosts and threaded deployment for Contexts. It builds on the previous suggested patches and the discussion on the users mailing list.\n\nThe patch is provided for review and feedback. It will be amended or committed based on the feedback received.",
      "(In reply to comment #9)\n\n+        // Zero == Runtime.getRuntime().availableProcessors()\n+        // -ve  == Runtime.getRuntime().availableProcessors() - value\n+        // These two are the same\n+        result = Runtime.getRuntime().availableProcessors() - result;\n\nresult is negative, so it gets more threads than processors?\n\nYou would want \"+ result\" here and \"+ value\" in the comment and in docs.",
      "Created attachment 27759\nstarting contexts in parallel using an executor\n\nIn my testings, I have found that my patch sometimes throws exception deep inside tomcat. Those seem to come from incorrect locking of the digester in ContextConfig. I have corrected the initialization, so that findbugs is happy.\n\nBut while testing while writing this I got:\njava.lang.NullPointerException\n        at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1231)\n        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501)\n        at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:179)\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343)\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755)\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)\n        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)\n        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)\n        at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)\n        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205)\n        at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)\n        at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1537)\n        at org.apache.catalina.startup.ContextConfig.processContextConfig(ContextConfig.java:650)\n        at org.apache.catalina.startup.ContextConfig.contextConfig(ContextConfig.java:607)\n        at org.apache.catalina.startup.ContextConfig.init(ContextConfig.java:845)\n        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:340)\n        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n        at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:389)\n        at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)\n        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812)\n        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787)\n        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:655)\n        at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:653)\n        at org.apache.catalina.startup.HostConfig$1.run(HostConfig.java:563)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n        at java.lang.Thread.run(Thread.java:619)\n\nafter that the digester seems to be unusable and I get following:\norg.xml.sax.SAXException: FWK005 parse may not be called while parsing.\n        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1245)\n        at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)\n        at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1537)\n        at org.apache.catalina.startup.ContextConfig.processContextConfig(ContextConfig.java:650)\n        at org.apache.catalina.startup.ContextConfig.contextConfig(ContextConfig.java:587)\n        at org.apache.catalina.startup.ContextConfig.init(ContextConfig.java:845)\n        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:340)\n        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n        at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:389)\n        at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)\n        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812)\n        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787)\n        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:655)\n        at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:653)\n        at org.apache.catalina.startup.HostConfig$1.run(HostConfig.java:563)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n        at java.lang.Thread.run(Thread.java:619)\n\nAfter that I changed class variable digester in ContextConfig to an instance variable.\n\nI also implemented a simple \"same thread executor\" to be used when only one thread is configured.\n\nI renamed parallelDeployment to startupConcurrency as suggested by Rainer and extended Host to expose getters and setters.",
      "Created attachment 27760\nmake ContextConfig threadsafe\n\nSince Mark's patch is more elegant and complete than mine, it makes mine obsolete. But it has the same problem with the missing threadsafety of ContextConfig.\n\nThe attached patch makes Digester a member variable and the initialization more correct. With that I haven't seen an exception (yet).",
      "I've fixed the +/- issue locally and will include that in the next version of the patch. Thanks Konstantin for the catch.\n\nFelix, I think you have found one of the places where it is assumed context's are processed serially. I'm pretty sure there will be others or places where multiple threads don't help because of syncs (e.g. processing web.xml) I'll take a look through the Context init code and see what I can find. I'll include any fixes in the next version of the patch.",
      "Created attachment 27761\nThreaded start, stop and deployment for Contexts\n\nUpdated patch that:\n- fixes the issues identified by Konstantin\n- includes a variation of Felix's patch for context.xml parsing\n- fixes a similar issue with web.xml parsing\n- fixes an issue that meant the host's executor spun up threads every time it checked for new apps to deploy\n\nWith this patch applied, I see around 30% improvement in start time for 10s of small, simple applications. This is better, but not the improvement I was hoping for with 4 threads on an 8-core machine. The bulk of the time appears to be spent in XML parsing.\n\nI'm continuing to look into to this to see if there is scope for further improvement. Suggestions and/or additional analysis welcome.\n\nNote: The overhead of creating a digester per app is noticeable at ~5% so I think it is a price worth paying.",
      "There is a new Digester release (3.0), but I have no idea whether it would significantly improve speed and I suspect it's incompatible so could require non-trivial modifications elsewhere.",
      "(In reply to comment #15)\n> There is a new Digester release (3.0), but I have no idea whether it would\n> significantly improve speed\n\nFrom threading point of view it is still the same: Rule, Digester and xml parser are usable in a single thread at once only. I do not think that xml parsers can be multi-threaded.\n\nThere is new API to declare a factory that creates sets of rules (binder.RulesModule), but we already do something similar, e.g. WebRuleSet#addRuleInstances().\n\nDigester 3.0 release notes:\nhttp://commons.apache.org/digester/commons-digester-3.0/RELEASE-NOTES.txt",
      "The HashMap HostConfig#deployed is used by multiple threads, but is not synchronized.\nSo there could be problems, even if I haven't seen any yet.\n\nWe could either wrap it using Collections.synchronizedMap, change it to a real concurrent Map implementation or use the Future, we get from the executorService to manipulate it again in a single thread.",
      "Created attachment 27767\nThreaded start, stop and deployment for Contexts\n\nUpdated patch that:\n- fixes the concurrency issue with the map of deployed applications\n- completes the remaining TODOs in the patch\n- removes the use of threads to start/stop listeners etc to prevent memory leaks as that is no longer required if all start/stop is done on a separate, short-lived thread\n\nI think this patch is getting pretty close now. Feedback from users with large numbers of apps would be useful.",
      "(In reply to comment #18)\n> Created attachment 27767 [details]\n\nRe: startStopExecutor.allowCoreThreadTimeOut(true);\n\nI think that just using \"0\" instead of getStartStopThreadsInternal() as the value of first argument (corePoolSize) in ThreadPoolExecutor constructor will have the same effect. It is not much of a difference though.\n\nRe: Iterator<Future<Void>> iter = results.iterator();\n\nIt could be rewritten as for(Future<Void> future: results) loop.\nIn one place Future<?> is used, while I think it could be Future<Void> like in other places.\n\nRe: HostConfig\n\nI do not quite understand why to remove\n\"if (deploymentExists(cn.getName())) { return; }\"\nfrom the beginning of e.g. deployDescriptor() method.\n\nThe HostConfig#deployApps() method is called every 10 seconds to perform autodeployment (by HostConfig#check() called by HostConfig#lifecycleEvent())\nand without early return it will proceed to parsing context.xml file.\n\nRenaming s/dir/war/ can be done now, to slightly reduce future patch.",
      "> (In reply to comment #18)\n> > Created attachment 27767 [details]\n\nRe: HostConfig, one more:\n\n-hostConfig.deployWar=Deploying web application archive {0}\n\nThe above message should not have been removed from LocalStrings.properties file. It is used.\n\nRe: docs/config/host.xml, engine.xml:\n\nMaybe move the phrase about the default value to the end of the description.",
      "Created attachment 27769\nThreaded start, stop and deployment for Contexts\n\nUpdated patch that addresses review comments so far.",
      "In ContainerBase#initInternal the ThreadPoolExecutor gets initialized with a core pool size of \"0\", but if we call ContainerBase#setStartStopThreads core pool size gets set to maximum pool size. Is this intended, or have I misinterpreted the code?",
      "With core pool size set to \"0\" in ContainerBase#initInternal I get no concurrency at startup. It will be sequential only. If I change it back to \n\n  startStopExecutor = new ThreadPoolExecutor(getStartStopThreadsInternal(),\n                getStartStopThreadsInternal(), 10, TimeUnit.SECONDS,\n                startStopQueue);\n\nI get a concurrent startup. (Startup time for my 20 dummy applications go down from 16s to 9s)\n\n\nAs ContainerBase#initInternal is also called from StandardContext, each Context will get its own startStopExecutor. Is this really needed?",
      "(In reply to comment #23)\n> With core pool size set to \"0\" in ContainerBase#initInternal I get no\n> concurrency at startup. It will be sequential only. If I change it back to \n> \n>   startStopExecutor = new ThreadPoolExecutor(getStartStopThreadsInternal(),\n>                 getStartStopThreadsInternal(), 10, TimeUnit.SECONDS,\n>                 startStopQueue);\n> \n> I get a concurrent startup. (Startup time for my 20 dummy applications go down\n> from 16s to 9s)\n\nI'll take another look at that.\n\n> As ContainerBase#initInternal is also called from StandardContext, each Context\n> will get its own startStopExecutor. Is this really needed?\n\nIt isn't used at the moment and is likely to stay that way.",
      "(In reply to comment #19)\n> Re: startStopExecutor.allowCoreThreadTimeOut(true);\n> \n> I think that just using \"0\" instead of getStartStopThreadsInternal() as the\n> value of first argument (corePoolSize) in ThreadPoolExecutor constructor will\n> have the same effect. It is not much of a difference though.\n\nThis doesn't work since the queue is unbounded no more than one thread is every created.",
      "Created attachment 27772\nThreaded start, stop and deployment for Contexts\n\nUpdated version of the patch that restores the ability to start contexts in parallel.\nThe overhead (with the TCK webapps) of using a single thread is roughly what we have gained caching the global web.xml so users should see no change in the default config.\nOn an 8-core machine (and with the TCK webapps) I see a 50% reduction in start time when I use 4 threads.",
      "Created attachment 27846\nThreaded start, stop and deployment for Contexts\n\nUpdated patch without the line-ending issue of the previous one. I intend to apply this in the next day or so.",
      "This has been implemented in trunk and 7.0.x and will be included in 7.0.23 onwards.",
      "Some experience figures for 24 contents of which 12 are heavy applications:\n\n* original startup time with 7.0.21: 280 seconds\n* with  startStopThreads=\"16\": 30 seconds\n\nThank you!",
      "Where do we set the startStopThreads parameter value?",
      "(In reply to comment #30)\n> Where do we set the startStopThreads parameter value?\n\nIn the <Engine> component:\nhttp://tomcat.apache.org/tomcat-7.0-doc/config/engine.html\n\nPlease use the users' list for questions in the future.",
      "(In reply to comment #31)\n> (In reply to comment #30)\n> > Where do we set the startStopThreads parameter value?\n> \n> In the <Engine> component:\n> http://tomcat.apache.org/tomcat-7.0-doc/config/engine.html\n\nAlso <Host>:\nhttp://tomcat.apache.org/tomcat-7.0-doc/config/host.html\n\n> Please use the users' list for questions in the future.\n\nAbsolutely."
    ],
    "creation_ts": "2008-11-21T08:52:10Z",
    "fixes": [
      46264
    ]
  },
  {
    "id": 48112,
    "summary": "Closing curly brace in literal string incorrectly treated as expression terminator.",
    "description": "On tomcat 6.0.20 something like the following line in a JSP causes a exception:\n\n<c:out value=\"${fn:trim('{world}')}\"/>\n\nAfter removing the closing curly brace from the literal ('{world}' -> '{world') the JSP works. This behaviour seems specific to 6.0.20, as on 6.0.18 and 6.0.16 the line above works fine.\n\nExample of exception:\n=====================\norg.apache.jasper.JasperException: An exception occurred processing JSP page /test.jsp at line 11\n\n8: <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n9: </head>\n10: <body>\n11: <c:out value=\"${fn:trim('{world}')}\"/>\n12: </body>\n13: </html>\n\n\nStacktrace:\n\torg.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:505)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:416)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:267)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:717)\nroot cause\n\njavax.el.ELException: Error Parsing: ${fn:trim('{world}\n\torg.apache.el.lang.ExpressionBuilder.createNodeInternal(ExpressionBuilder.java:125)\n\torg.apache.el.lang.ExpressionBuilder.build(ExpressionBuilder.java:150)\n\torg.apache.el.lang.ExpressionBuilder.createValueExpression(ExpressionBuilder.java:194)\n\torg.apache.el.ExpressionFactoryImpl.createValueExpression(ExpressionFactoryImpl.java:68)\n\torg.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:934)\n\torg.apache.jsp.test_jsp._jspx_meth_c_005fout_005f0(test_jsp.java:98)\n\torg.apache.jsp.test_jsp._jspService(test_jsp.java:72)\n\torg.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:267)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:717)\nroot cause\n\norg.apache.el.parser.ParseException: Encountered \" <ILLEGAL_CHARACTER> \"\\' \"\" at line 1, column 11.\nWas expecting one of:\n    <INTEGER_LITERAL> ...\n    <FLOATING_POINT_LITERAL> ...\n    <STRING_LITERAL> ...\n    \"true\" ...\n    \"false\" ...\n    \"null\" ...\n    \"(\" ...\n    \")\" ...\n    \"!\" ...\n    \"not\" ...\n    \"empty\" ...\n    \"-\" ...\n    <IDENTIFIER> ...\n    \n\torg.apache.el.parser.ELParser.generateParseException(ELParser.java:2142)\n\torg.apache.el.parser.ELParser.jj_consume_token(ELParser.java:2024)\n\torg.apache.el.parser.ELParser.Function(ELParser.java:1207)\n\torg.apache.el.parser.ELParser.NonLiteral(ELParser.java:1114)\n\torg.apache.el.parser.ELParser.ValuePrefix(ELParser.java:1016)\n\torg.apache.el.parser.ELParser.Value(ELParser.java:965)\n\torg.apache.el.parser.ELParser.Unary(ELParser.java:947)\n\torg.apache.el.parser.ELParser.Multiplication(ELParser.java:711)\n\torg.apache.el.parser.ELParser.Math(ELParser.java:631)\n\torg.apache.el.parser.ELParser.Compare(ELParser.java:443)\n\torg.apache.el.parser.ELParser.Equality(ELParser.java:337)\n\torg.apache.el.parser.ELParser.And(ELParser.java:281)\n\torg.apache.el.parser.ELParser.Or(ELParser.java:225)\n\torg.apache.el.parser.ELParser.Choice(ELParser.java:182)\n\torg.apache.el.parser.ELParser.Expression(ELParser.java:174)\n\torg.apache.el.parser.ELParser.DynamicExpression(ELParser.java:146)\n\torg.apache.el.parser.ELParser.CompositeExpression(ELParser.java:43)\n\torg.apache.el.lang.ExpressionBuilder.createNodeInternal(ExpressionBuilder.java:93)\n\torg.apache.el.lang.ExpressionBuilder.build(ExpressionBuilder.java:150)\n\torg.apache.el.lang.ExpressionBuilder.createValueExpression(ExpressionBuilder.java:194)\n\torg.apache.el.ExpressionFactoryImpl.createValueExpression(ExpressionFactoryImpl.java:68)\n\torg.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:934)\n\torg.apache.jsp.test_jsp._jspx_meth_c_005fout_005f0(test_jsp.java:98)\n\torg.apache.jsp.test_jsp._jspService(test_jsp.java:72)\n\torg.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:267)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:717)",
    "comments": [
      "This has been fixed in trunk and will be proposed for 6.0.x after further testing.",
      "This has been fixed in 6.0.x and will be included in 6.0.23 onwards."
    ],
    "creation_ts": "2009-11-03T07:09:58Z",
    "fixes": [
      48112
    ]
  },
  {
    "id": 42071,
    "summary": "If a JSP throws an UnavailableException twice, an IllegalStateException occurs.",
    "description": "If a JSP throws an UnavailableException twice, an IllegalStateException occurs.\n\nfirst access:\nJSP throws UnavailableException.\n\nsecond access:\nIf the JSP throws an UnavailableException again then an IllegalStateException\noccurs and Tomcat returns status code:500 to the client.\n\nThe problem is not that the IllegalStateException occurs.\nThe problem is that the JSP can be called even though it cannot be used.",
    "comments": [
      "Created attachment 19924\nAn IllegalStateException does not occurred with this patch.\n\nAn IllegalStateException does not occurred with this patch.",
      "I don't see an ISE with the latest source from svn.\n\nIf you still see the ISE with the latest svn source, please re-open this issue\nand attach your JSP that shows the ISE.",
      "Created attachment 19974\nreappearance jsp\n\nreappearance jsp",
      "I see the ISE with the latest svn source.\n\nIt reappears in the following procedure.\n\nfirst request:\n/test.jsp?exp=true\n\nsecond request:\n/test.jsp?exp=true\n\n[JSP]\n<%@ page contentType=\"text/plain\" %>\n<%\n    String exp = request.getParameter(\"exp\");\n    if(\"true\".equalsIgnoreCase(exp)) {\n        throw new UnavailableException(\"error!!!\");\n    }\n    System.out.println(\"done!\");\n%>\ndone!",
      "This has been fixed in svn and will be included in 5.5.24 onwards and 6.0.12\nonwards.\n\nThanks for the report and the test case."
    ],
    "creation_ts": "2007-04-08T17:49:37Z",
    "fixes": [
      42071
    ]
  },
  {
    "id": 65714,
    "summary": "HTTPS connection error using NIO2 with security manager enabled",
    "description": "We found a problem with 8.5.73, 8.5.72, 9.0.55, 9.0.54 when we configure a SSL/TLS connector using Nio2 with Java Security Manger enabled, we are getting connection error 500 when accessing the default Tomcat root, (e.g. https://hostname:8443/) with log message: SEVERE org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor errors. \n\nWe are using Java 8 (e.g. 1.8.0.212b31). \n\nWe have tested this on Windows Server 2019 and RedHat Linux 7.\n\nWhen we change the connector configuration to use org.apache.coyote.http11.Http11NioProtocol the errors are not present.\n\nExample connector configuration\n--------------------------------\n\n    <Connector\n      port=\"8082\" \n      protocol=\"org.apache.coyote.http11.Http11Nio2Protocol\"\n      maxThreads=\"150\" \n      scheme=\"https\"\n      SSLEnabled=\"true\">\n      <SSLHostConfig>\n        <Certificate \n          certificateKeystoreFile=\"tomcat.jks\"\n          certificateKeystorePassword=\"xxxxx\"\n          type=\"RSA\" />\n      </SSLHostConfig>\n    </Connector>\n\nThe catalina.policy is the default one which comes with the 8.5.73 release\n\nExample Startup command\n------------------------\n# Note the environment variables CATALINA_HOME and CATALINA_BASE are custom to our environment\n\nexport JAVA_OPTS=\"-Djava.awt.headless=true -Djava.security.manager -Djava.security.policy=${CATALINA_BASE}/conf/catalina.policy -XX:+HeapDumpOnOutOfMemoryError -Xms512M -Xmx1024M -XX:MetaspaceSize=512m -XX:MaxMetaspaceSize=2048m\"\n\n${CATALINA_HOME}/bin/startup.sh \n\n\nTest command\n-------------\ncurl -k -i https://hostname:8082\nReturns:\nHTTP/1.1 500\nTransfer-Encoding: chunked\nDate: Tue, 30 Nov 2021 11:52:50 GMT\nConnection: close\n\nSometime I get \ncurl: (35) Encountered end of file\n\nor via browser\nreturns error 500\n\nError message in logs from 8.5.52 and 8.5.53\n--------------------------------------------\n(via curl and browser)\n2021-11-30T11:45:12.977Z SEVERE org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor doRun Error running socket processor\njava.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.org.apache.tomcat.util.net\")\n        at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)\n        at java.security.AccessController.checkPermission(AccessController.java:884)\n        at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\n        at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:329)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:411)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n        at org.apache.tomcat.util.net.SecureNio2Channel.processSNI(SecureNio2Channel.java:406)\n        at org.apache.tomcat.util.net.SecureNio2Channel.handshakeInternal(SecureNio2Channel.java:231)\n        at org.apache.tomcat.util.net.SecureNio2Channel.handshake(SecureNio2Channel.java:222)\n        at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.doRun(Nio2Endpoint.java:1616)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n        at org.apache.tomcat.util.net.AbstractEndpoint.processSocket(AbstractEndpoint.java:1125)\n        at org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler.completed(SecureNio2Channel.java:104)\n        at org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler.completed(SecureNio2Channel.java:97)\n        at sun.nio.ch.Invoker.invokeUnchecked(Invoker.java:126)\n        at sun.nio.ch.Invoker$2.run(Invoker.java:218)\n        at sun.nio.ch.AsynchronousChannelGroupImpl$1.run(AsynchronousChannelGroupImpl.java:112)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\n\nError message in logs from 9.0.54 and 9.0.55\n--------------------------------------------\n(via curl)\n2021-11-30T11:32:46.775Z SEVERE org.apache.tomcat.util.net.Nio2Endpoint setSocketOptions Error setting socket options\njava.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.org.apache.tomcat.util.net\")\n        at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)\n        at java.security.AccessController.checkPermission(AccessController.java:884)\n        at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\n        at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1564)\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:329)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:411)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n        at org.apache.tomcat.util.net.Nio2Endpoint.setSocketOptions(Nio2Endpoint.java:309)\n        at org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor.completed(Nio2Endpoint.java:451)\n        at org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor.completed(Nio2Endpoint.java:387)\n        at sun.nio.ch.Invoker.invokeUnchecked(Invoker.java:126)\n        at sun.nio.ch.Invoker$2.run(Invoker.java:218)\n        at sun.nio.ch.AsynchronousChannelGroupImpl$1.run(AsynchronousChannelGroupImpl.java:112)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:748)\n\n(via Browser)\n2021-11-30T11:40:12.471Z SEVERE org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor failed Socket accept failed\njava.security.AccessControlException: access denied (\"java.net.SocketPermission\" \"10.13.149.73:54048\" \"accept,resolve\")\n\tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)\n\tat java.security.AccessController.checkPermission(AccessController.java:884)\n\tat java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\n\tat java.lang.SecurityManager.checkAccept(SecurityManager.java:1167)\n\tat sun.nio.ch.UnixAsynchronousServerSocketChannelImpl$1.run(UnixAsynchronousServerSocketChannelImpl.java:223)\n\tat sun.nio.ch.UnixAsynchronousServerSocketChannelImpl$1.run(UnixAsynchronousServerSocketChannelImpl.java:219)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.nio.ch.UnixAsynchronousServerSocketChannelImpl.finishAccept(UnixAsynchronousServerSocketChannelImpl.java:219)\n\tat sun.nio.ch.UnixAsynchronousServerSocketChannelImpl.onEvent(UnixAsynchronousServerSocketChannelImpl.java:167)\n\tat sun.nio.ch.EPollPort$EventHandlerTask.run(EPollPort.java:293)\n\tat java.lang.Thread.run(Thread.java:748)\n\tat sun.misc.InnocuousThread.run(InnocuousThread.java:106)\n\nThere is a similar bugzillar reference https://bz.apache.org/bugzilla/show_bug.cgi?id=65577 with 8.5.70 with the same error \u201corg.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.doRun Error running socket processor\u201d.  The reply from Mark was fixed in 8.5.72, but it seems to be there still.",
    "comments": [
      "> -Djava.security.policy=${CATALINA_BASE}/conf/catalina.policy\n\nThe above value is just wrong. The value has to start with '=' (see Java documentation for \"java.security.policy\" for the meaning).\n\nSee how catalina.sh sets it, e.g.:\n\n-Djava.security.policy==\"$CATALINA_BASE\"/conf/catalina.policy\n\nNote how '=' character is doubled.",
      "Hi Konstantin,\nI have tried your recommendation but it didn't resolve the issue.\n\ndouble equal signs\n------------------\nexport JAVA_OPTS=\"-Djava.awt.headless=true -Djava.security.manager -Djava.security.policy==${CATALINA_BASE}/conf/catalina.policy -XX:+HeapDumpOnOutOfMemoryError -Xms512M -Xmx1024M -XX:MetaspaceSize=512m -XX:MaxMetaspaceSize=2048m -Djava.security.egd=file:/dev/./urandom\"\n\ndouble equal signs and double quotes around ${CATALINA_BASE}\n------------------------------------------------------------\nexport JAVA_OPTS=\"-Djava.awt.headless=true -Djava.security.manager -Djava.security.policy==\\\"${CATALINA_BASE}\\\"/conf/catalina.policy -XX:+HeapDumpOnOutOfMemoryError -Xms512M -Xmx1024M -XX:MetaspaceSize=512m -XX:MaxMetaspaceSize=2048m -Djava.security.egd=file:/dev/./urandom\"\n\nI don't think there is a problem with this setting because this setting worked with Nio and Nio2 before 8.5.70.",
      "The difference between '=' and '==' is that '=' means add this policy to the ones defined in the security properties files whereas '==' means only use this file.\n\nThe issue is valid. I can reproduce it. Working on a fix now.",
      "(In reply to Mark Thomas from comment #3)\n> The issue is valid. I can reproduce it. Working on a fix now.\n\nOK.\n\nNoting that there is nothing but Tomcat and Java code in stacktraces. I expect those to have full permissions, like Tomcat own code does. Is something unexpected with those threads?\n\n\n> java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.org.apache.tomcat.util.net\")\n\nSuch class loading errors can be omitted by preloading the affected classes. For known issues it is done by org.apache.catalina.security.SecurityClassLoad class.\n\nThis can also be done with \"classesToInitialize\" attribute of a org.apache.catalina.core.JreMemoryLeakPreventionListener configured in server.xml file.\n\n> java.security.AccessControlException: access denied (\"java.net.SocketPermission\" \"10.13.149.73:54048\" \"accept,resolve\")\n\nNo easy solution here. BTW this thread has only JRE code in stacktrace.",
      "This looks to be related to the NIO2 completion handlers. Secure connections do a handshake first so the main request processing is on a completion handler thread. These don't appear to have any security context associated with them although I need to dig into this some more.\n\nThe non-secure threads start processing on a standard executor thread - hence why they don't see this issue.\n\nMy concern at this point is that we could end up in a position of having to pre-load a much larger set of classes.\n\nIt is worth noting that the SecurityManager is deprecated in newer versions of Java and that support for running Tomcat under a SecurityManager is likely to be removed in the (distant) future.",
      "(In reply to Mark Thomas from comment #5)\n> This looks to be related to the NIO2 completion handlers. Secure connections\n> do a handshake first so the main request processing is on a completion\n> handler thread. These don't appear to have any security context associated\n> with them although I need to dig into this some more.\n> \n> The non-secure threads start processing on a standard executor thread -\n> hence why they don't see this issue.\n> \n> My concern at this point is that we could end up in a position of having to\n> pre-load a much larger set of classes.\n> \n> It is worth noting that the SecurityManager is deprecated in newer versions\n> of Java and that support for running Tomcat under a SecurityManager is\n> likely to be removed in the (distant) future.\n\nI couldn't immediately get it working as well. Instead, we could document that the security manager is not supported with NIO2, for now at least.",
      "I've found a workaround. The short version is when running under a security manager, have the handshake completion handlers for NIO2 always dispatch to a container thread. Slower, but it works. Commit will follow shortly (I just want to run the tests first).",
      "Fixed in:\n- 10.1.x for 10.1.0-M8 onwards\n- 10.0.x for 10.0.14 onwards\n- 9.0.x for 9.0.56 onwards\n- 8.5.x for 8.5.74 onwards",
      "Sounds great. Appreciate the quick turn around.  Don't mind a slower option for now. Looking forward to test this in the next release",
      "Please reopen this ticket. We installed latest Tomcat 9.0.56 still NIO2 issue isn't fix yet. \n\nNIO2 issues that go away when you specify NIO as the connector type. Or disable server manager\n\n2021-12-08T15:55:29.610Z SEVERE org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor failed Socket accept failed\njava.security.AccessControlException: access denied (\"java.net.SocketPermission\" \"10.81.154.81:58774\" \"accept,resolve\") \n  \n2021-12-08T15:55:30.428Z SEVERE org.apache.tomcat.util.net.Nio2Endpoint setSocketOptions Error setting socket options\njava.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.org.apache.tomcat.util.net\") \n  \nPlease look into it",
      "It appears that there is an OS component to this.\n\nThis works on MacOS but not on Linux (same Java vendor and version).",
      "We need NIO 2 issue to be fixed for both RHEL and Windows version\n\nCan we expedite this and release Tomcat 9.0.56 and 8.5.74 binaries for RHEL version As soon as possible ?",
      "This can't be fixed in Tomcat. Even when the security policy has an entry that is \"Allow everything to do everything\" the NIO2 code still triggers security exceptions when running under a SecurityManager. You could try raising a bug with your JRE vendor but, give the deprecation of the SecurityManager, I suspect that fixing this will not be a priority.\n\nYou have two options to solve this with Tomcat:\n- turn off the security manager\n- switch to NIO\n\nThe security manager has been deprecated in Java 17 and will eventually be removed. Now might be a good time to start to think about migrating away from using the SecurityManager.\n\nThere is very little between NIO and NIO2 in terms of performance. While individual benchmarks will demonstrate one is better than the other, the difference is typically small and in real world usage the different is smaller still.",
      "Do you want to keep the previous patch just in case ? It seems like it did something on your platform, then.",
      "(In reply to Remy Maucherat from comment #14)\n> Do you want to keep the previous patch just in case ? It seems like it did\n> something on your platform, then.\n\nI don't think so. I think there was something wrong with my testing of that patch.",
      "Hi,\nWhy woould NIO2 and SecurityManager works with 8.5.69 and earlier 8.5.x versions and 9.0.50 and earlier 9.5.x versions using the same platform RHEL 7 or Windows and the same Java version?\nAnd when upgrade to 8.5.70/9.0.52 or later version on the same platform this wouldn't work?\n\nIf this is not fixable on RHEL7 and Windows will there be a statement that NIO2 and Security Manager is not supported from later versions on these platforms?",
      "Good question. The SecurityManager is so rarely used I had assumed you found this issue switching to NIO2 rather than upgrading between versions.\n\nTime for a binary search to find the commit where this started...\n\nFound it:\nhttps://github.com/apache/tomcat/commit/dae37f4421\n\nThat makes sense since it changes the ThreadPoolExecutor implementation. See also bug 65454\n\nI don't know what the root cause is yet so I am re-opening this while I investigate further as there is a possibility that this is fixable.",
      "I now have a clearer picture of what is going on.\n\nThe fix for bug 65454 included an unintended change. The pre-starting of the core thread pool was removed. I'll restore that shortly. It also made a bug that was already present more obvious.\n\nWhen running under a security manager, the NIO2 acceptor uses an InnocuousThread to execute the completion handler for the acceptor. By design, the access control context associated with InnocuousThread instances is empty. When the accepted connection is passed to the executor, if a worker thread needs to be created, that thread inherits the access control context of the calling thread. When the calling thread is an InnocuousThread that access control context is empty so the work thread does not have the permissions it needs. That leads to security exceptions and failed requests.\n\nIf the core threads are pre-started they have the correct permissions and depending on timing new threads that are started will either be started from those threads and have the correct permissions or from the Acceptor and have the wrong permissions.\n\nThe next step is to see if I can find a way to avoid this issue.",
      "I have a solution and it has been committed for all current branches.\n\nFixed in:\n- 10.1.x for 10.1.0-M9 onwards\n- 10.0.x for 10.0.15 onwards\n- 9.0.x for 9.0.57 onwards\n- 8.5.x for 8.5.74 onwards\n\nAny testing in advance of those releases would be helpful. I can provide test builds if that helps.",
      "Thanks Mark. This sounds promising. For test in advance, where can we pull this image?",
      "Which version do you need and I'll create a test build for you.",
      "How about 8.5.74 and 9.0.57 on RHEL 7 and Windows?",
      "8.5.x:\nhttps://people.apache.org/~markt/dev/v8.5.72-4795df9/\n\n9.0.x:\nhttps://people.apache.org/~markt/dev/v9.0.57-115334b/\n\nThese are not official releases. They are development builds solely to test whether this bug has been fully fixed.",
      "Thanks. Will work on it.",
      "Hi Mark, I have carried out a number of connectivity tests.  Result as follow.\n\nTomcat 8.5.72-4795df9 and 9.0.57-115334b with Oracle Java JDK 9,11,13 (specifically 9.0.4, 11.0.2, 13.0.2) on RHEL 7 and Windows\nHTTP - pass\nHTTPS NIO - pass\nHTTPS NIO2 - pass.\n\nTomcat 8.5.72-4795df9 and 9.0.57-115334b with Oracle Java JRE 8 (1.8.0.212b31 or jdk_1.8.0.251) on RHEL 7 and Windows\nHTTP - failed\nHTTPS NIO - failed\nHTTPS NIO2 - failed\nSee errors from logs below.\n\nTest configuration is the one from the image.\nI only added this section in server.xml\n   <!-- HTTP Connector -->\n    <Connector\n      port=\"8081\"\n      connectionTimeout=\"20000\"\n      redirectPort=\"8082\"\n      protocol=\"HTTP/1.1\"\n    />\n <!-- HTTPS Connector -->\n    <Connector\n      port=\"8082\"\n      protocol=\"org.apache.coyote.http11.Http11Nio2Protocol\"\n      maxThreads=\"150\"\n      SSLEnabled=\"true\"\n      >\n      <SSLHostConfig>\n        <Certificate\n          certificateKeystoreFile=\"tomcat.jks\"\n          certificateKeystoreType=\"JKS\"\n          certificateKeystorePassword=\"XXXXXXXX\"\n          type=\"RSA\"\n        />\n      </SSLHostConfig>\n    </Connector>\n\n  <!-- HTTPS Connector -->\n    <Connector\n      port=\"8083\"\n      protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n      maxThreads=\"150\"\n      SSLEnabled=\"true\"\n      >\n      <SSLHostConfig>\n        <Certificate\n          certificateKeystoreFile=\"tomcat.jks\"\n          certificateKeystoreType=\"JKS\"\n          certificateKeystorePassword=\"XXXXXXXX\"\n          type=\"RSA\"\n        />\n      </SSLHostConfig>\n    </Connector>\n\n\nConnection test was done using curl.\nFor example\ncurl -k -i https://<fqdn>:8081 (for HTTP)\ncurl -k -i https://<fqdn>:8082 (for HTTPS NIO2)\ncurl -k -i https://<fqdn>:8083 (for HTTPS NIO)\n\nAll errors are related to java.lang.NoSuchMethodError .\nWas wonder if the test image is not compiled to support Java 8?\nGoing forward we will need Java 8 support.\n\n\nError logs\n-----------\nTomcat 8.5.72-4795df9\n\nHTTP\n\n11-Dec-2021 21:33:11.804 SEVERE [http-nio-8081-exec-1] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Error reading request, ignored\n        java.lang.NoSuchMethodError: java.nio.ByteBuffer.position(I)Ljava/nio/ByteBuffer;\n                at org.apache.coyote.http11.Http11InputBuffer.init(Http11InputBuffer.java:763)\n                at org.apache.coyote.http11.Http11Processor.setSocketWrapper(Http11Processor.java:740)\n                at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:499)\n                at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n                at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:849)\n                at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1677)\n                at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                at java.lang.Thread.run(Thread.java:748)\n11-Dec-2021 21:33:11.805 SEVERE [http-nio-8081-exec-1] org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun\n        java.lang.NoSuchMethodError: java.nio.ByteBuffer.limit(I)Ljava/nio/ByteBuffer;\n                at org.apache.coyote.http11.Http11InputBuffer.recycle(Http11InputBuffer.java:284)\n                at org.apache.coyote.http11.Http11Processor.recycle(Http11Processor.java:1637)\n                at org.apache.coyote.AbstractProtocol$ConnectionHandler.release(AbstractProtocol.java:1039)\n                at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:1007)\n                at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1677)\n                at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                at java.lang.Thread.run(Thread.java:748)\n\nHTTPS NIO\n11-Dec-2021 21:34:22.782 SEVERE [https-jsse-nio-8083-exec-1] org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun\n        java.lang.NoSuchMethodError: java.nio.ByteBuffer.limit(I)Ljava/nio/ByteBuffer;\n                at org.apache.tomcat.util.net.TLSClientHelloExtractor.<init>(TLSClientHelloExtractor.java:189)\n                at org.apache.tomcat.util.net.SecureNioChannel.processSNI(SecureNioChannel.java:289)\n                at org.apache.tomcat.util.net.SecureNioChannel.handshake(SecureNioChannel.java:179)\n                at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1652)\n                at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                at java.lang.Thread.run(Thread.java:748)\n\nHTTPS NIO2\n11-Dec-2021 21:34:50.917 SEVERE [https-jsse-nio2-8082-Acceptor-0] org.apache.tomcat.util.net.Nio2Endpoint.setSocketOptions\n        java.lang.NoSuchMethodError: java.nio.ByteBuffer.clear()Ljava/nio/ByteBuffer;\n                at org.apache.tomcat.util.net.SocketBufferHandler.reset(SocketBufferHandler.java:146)\n                at org.apache.tomcat.util.net.Nio2Channel.reset(Nio2Channel.java:58)\n                at org.apache.tomcat.util.net.SecureNio2Channel.reset(SecureNio2Channel.java:134)\n                at org.apache.tomcat.util.net.Nio2Endpoint.setSocketOptions(Nio2Endpoint.java:315)\n                at org.apache.tomcat.util.net.Nio2Endpoint$Acceptor.run(Nio2Endpoint.java:439)\n                at java.lang.Thread.run(Thread.java:748)\n\n\nTomcat 9.0.57-115334b\nHTTP\n11-Dec-2021 21:40:59.233 SEVERE [http-nio-8081-Acceptor] org.apache.tomcat.util.net.NioEndpoint.setSocketOptions Error setting socket options\n        java.lang.NoSuchMethodError: java.nio.ByteBuffer.clear()Ljava/nio/ByteBuffer;\n                at org.apache.tomcat.util.net.SocketBufferHandler.reset(SocketBufferHandler.java:213)\n                at org.apache.tomcat.util.net.NioChannel.reset(NioChannel.java:59)\n                at org.apache.tomcat.util.net.NioEndpoint.setSocketOptions(NioEndpoint.java:489)\n                at org.apache.tomcat.util.net.NioEndpoint.setSocketOptions(NioEndpoint.java:78)\n                at org.apache.tomcat.util.net.Acceptor.run(Acceptor.java:149)\n                at java.lang.Thread.run(Thread.java:748)\n\n\nHTTPS NIO\n\n11-Dec-2021 21:41:20.781 SEVERE [https-jsse-nio-8083-Acceptor] org.apache.tomcat.util.net.NioEndpoint.setSocketOptions Error setting socket options\n        java.lang.NoSuchMethodError: java.nio.ByteBuffer.clear()Ljava/nio/ByteBuffer;\n                at org.apache.tomcat.util.net.SocketBufferHandler.reset(SocketBufferHandler.java:213)\n                at org.apache.tomcat.util.net.NioChannel.reset(NioChannel.java:59)\n                at org.apache.tomcat.util.net.SecureNioChannel.reset(SecureNioChannel.java:93)\n                at org.apache.tomcat.util.net.NioEndpoint.setSocketOptions(NioEndpoint.java:489)\n                at org.apache.tomcat.util.net.NioEndpoint.setSocketOptions(NioEndpoint.java:78)\n                at org.apache.tomcat.util.net.Acceptor.run(Acceptor.java:149)\n                at java.lang.Thread.run(Thread.java:748)\n\nHTTPS NIO2\n11-Dec-2021 21:41:42.097 SEVERE [https-jsse-nio2-8082-exec-2] org.apache.tomcat.util.net.Nio2Endpoint.setSocketOptions Error setting socket options\n        java.lang.NoSuchMethodError: java.nio.ByteBuffer.clear()Ljava/nio/ByteBuffer;\n                at org.apache.tomcat.util.net.SocketBufferHandler.reset(SocketBufferHandler.java:213)\n                at org.apache.tomcat.util.net.Nio2Channel.reset(Nio2Channel.java:59)\n                at org.apache.tomcat.util.net.SecureNio2Channel.reset(SecureNio2Channel.java:134)\n                at org.apache.tomcat.util.net.Nio2Endpoint.setSocketOptions(Nio2Endpoint.java:321)\n                at org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor.completed(Nio2Endpoint.java:460)\n                at org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor.completed(Nio2Endpoint.java:396)\n                at sun.nio.ch.Invoker.invokeUnchecked(Invoker.java:126)\n                at sun.nio.ch.Invoker$2.run(Invoker.java:218)\n                at sun.nio.ch.AsynchronousChannelGroupImpl$1.run(AsynchronousChannelGroupImpl.java:112)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n                at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                at java.lang.Thread.run(T",
      "Reason is code has been compiled on Java 9+ which is not backward compatible.",
      "(In reply to Allan from comment #25)\n> Hi Mark, I have carried out a number of connectivity tests.  Result as\n> follow.\n> \n> Tomcat 8.5.72-4795df9 and 9.0.57-115334b with Oracle Java JDK 9,11,13\n> (specifically 9.0.4, 11.0.2, 13.0.2) on RHEL 7 and Windows\n> HTTP - pass\n> HTTPS NIO - pass\n> HTTPS NIO2 - pass.\n> \n> Tomcat 8.5.72-4795df9 and 9.0.57-115334b with Oracle Java JRE 8\n> (1.8.0.212b31 or jdk_1.8.0.251) on RHEL 7 and Windows\n> HTTP - failed\n> HTTPS NIO - failed\n> HTTPS NIO2 - failed\n> See errors from logs below.\n\nMichael is right. I built the tests builds on my development machine which uses Java 11 by default and I didn't change it. Release builds are always made with Java 8 for Tomcat 9 and Java 7 for Tomcat 8.\n\nIt is good that your testing confirms that the issue is fixed for Java 11. I am confident that it will also be fixed for Java 8. That said, if you want test builds that will run on Java 8 just let me know.",
      "(In reply to Mark Thomas from comment #27)\n> (In reply to Allan from comment #25)\n> > Hi Mark, I have carried out a number of connectivity tests.  Result as\n> > follow.\n> > \n> > Tomcat 8.5.72-4795df9 and 9.0.57-115334b with Oracle Java JDK 9,11,13\n> > (specifically 9.0.4, 11.0.2, 13.0.2) on RHEL 7 and Windows\n> > HTTP - pass\n> > HTTPS NIO - pass\n> > HTTPS NIO2 - pass.\n> > \n> > Tomcat 8.5.72-4795df9 and 9.0.57-115334b with Oracle Java JRE 8\n> > (1.8.0.212b31 or jdk_1.8.0.251) on RHEL 7 and Windows\n> > HTTP - failed\n> > HTTPS NIO - failed\n> > HTTPS NIO2 - failed\n> > See errors from logs below.\n> \n> Michael is right. I built the tests builds on my development machine which\n> uses Java 11 by default and I didn't change it. Release builds are always\n> made with Java 8 for Tomcat 9 and Java 7 for Tomcat 8.\n> \n> It is good that your testing confirms that the issue is fixed for Java 11. I\n> am confident that it will also be fixed for Java 8. That said, if you want\n> test builds that will run on Java 8 just let me know.\n\nThanks for the confirmation. I thought that maybe the case. There is no need to provide a Java 8 test image as you have already explained that this will be covered in the coming release. Lets hope all goes well.\n\nOther then that, I just want to thank you and your team for the quick turn around to resolve this issue.  You guys are awesome."
    ],
    "creation_ts": "2021-11-30T13:45:08Z",
    "fixes": [
      65714
    ]
  },
  {
    "id": 57154,
    "summary": "Failure of TestWsWebSocketContainer when directory %TEMP%\\test exists",
    "description": "Steps to reproduce:\n1) Go to the temporary directory (System.getProperty(\"java.io.tmpdir\")) and create a directory named \"test\" there.\n2) Run org.apache.tomcat.websocket.TestWsWebSocketContainer test case with Nio or Nio 2.\n\nThe following two test cases are failing: \ntestWriteTimeoutServerEndpoint\ntestWriteTimeoutServerContainer\n\nCause of the failure is the following ERROR:\nThe HTTP response from the server [HTTP/1.1 302 Found\n] did not permit the HTTP upgrade to WebSocket\njavax.websocket.DeploymentException: The HTTP response from the server [HTTP/1.1 302 Found\n] did not permit the HTTP upgrade to WebSocket\n\nThis test case configures DefaultServlet and tries to access\n\"ws://localhost:\" + getPort() + \"/test\".\n\nI suspect that Mapper responds with 302 redirect before the upgrade request reaches web application.\n\nThis issue is observed at Buildbot. See\nTEST-org.apache.tomcat.websocket.TestWsWebSocketContainer.NIO.txt\nTEST-org.apache.tomcat.websocket.TestWsWebSocketContainer.NIO2.txt\nfiles in http://ci.apache.org/projects/tomcat/tomcat8/logs/1634329/",
    "comments": [
      "Created attachment 32152\nTEST-org.apache.tomcat.websocket.TestWsWebSocketContainer.NIO.txt\n\nLog file from testing Tomcat 8 trunk (@r1634690)",
      "Created attachment 32153\nTEST-org.apache.tomcat.websocket.TestWsWebSocketContainer.NIO2.txt\n\nLog file from testing Tomcat 8 trunk (@r1634690)",
      "The root cause of this is indeed the redirect from the Mapper.\n\nThe redirect is a result of one of the requirements for welcome file processing. The Servlet spec is clear Tomcat can implement these any way it likes so the current Tomcat behaviour is valid.\n\nIt looks like the best solution for this bug is a fix for bug 57155.",
      "Fixed with the fixes for bug 57155.",
      "This test failure is reproducible with current Tomcat 7.0.x testsuite.\nNote that it does not happen by default, but only if one creates a %TEMP%\\test directory.\n\nPossible solutions:\na) Backport the feature from bug 57155 (for reference: r1635222).\nb) Reconfigure the tests to use some different temporary directory as docBase instead of the system-wide one.\nc) Improve Mapper.\nd) Close as WONTFIX.\n\na) is the best one, but requires some work as resource implementations differ between Tomcat 8 and 7.\n\nb) is an alternative way if a) is too hard.\n\nc) unlikely without further analysis.\n\nd) possible. A test configuration issue is not a show stopper.\n\nI am reopening this for Tomcat 7 now, so that it is not forgotten.",
      "Created attachment 32749\nbackport the feature from bug 57155 to Tomcat 7.0.x\n\nHi @Konstantin and @Mark, \n\nI have backported the feature from bug 57155 to Tomcat 7.0.x.\nWould you please kindly review the attached fix?\nThe main idea is borrowed from Mark's implementation in Tomcat 8.0.x.\n\nThe changes in the patch mainly includes:\n1) an EmptyDirContext implementation which is not backed by a file system.\n2) an enhancement in StandardContext that allows an application to be configured to have no docBase, precisely speaking, to have docBase to be null.\n3) changes in test cases that replacing unnecessary file system doc base with null doc base.",
      "Hi @Konstantin and @Mark, \n\nIs there any update on this?",
      "Thanks for the patch. It has been applied (with a few minor tweaks to silence some Eclipse warnings) to 7.0.x and will be included in 7.0.63 onwards.",
      "(In reply to Mark Thomas from comment #8)\n> Thanks for the patch. It has been applied (with a few minor tweaks to\n> silence some Eclipse warnings) to 7.0.x and will be included in 7.0.63\n> onwards.\n\nFor a reference, implementation of this feature in Tomcat 7 is\nr1681953 + r1724913\n\nComments working on backport to Tomcat 6\n==========================\n\n1). Currently null is an unsupported value for StandardContext.docBase.\n\nUsing the null value is going to fail with a NullPointerException thrown\nfrom a \"new File(null)\" call.\n\nSo implementing support for a null docBase is a new feature\nand does not break any existing one.\n\n\n2). There is a slight difference with Tomcat 7 that ApplicationContext and ReplicatedContext$ReplApplContext constructors accept additional argument basePath.\n\n    public ServletContext getServletContext() {\n        if (context == null) {\n            context = new ApplicationContext(getBasePath(), this);\n\nThis resulted in a stacktrace like this:\n\n  java.lang.NullPointerException\n     at java.io.File.<init>(File.java:194)\n     at org.apache.catalina.core.StandardContext.getBasePath(StandardContext.java:5179)\n     at org.apache.catalina.core.StandardContext.getServletContext(StandardContext.java:1932)\n     at org.apache.catalina.core.StandardContext.postWorkDirectory(StandardContext.java:5448)\n     at org.apache.catalina.core.StandardContext.start(StandardContext.java:4563)\n\nThe basePath value is used to implement methods ApplicationContext.getRealPath(String)\nand getResource(String).\n\n(For historic reference: commits that removed basePath field from ApplicationContext\nin Tomcat 7 are r784083 + r834220)\n\nIn both methods the use of basePath is conditioned on \"if (context.isFilesystemBased())\"\ncondition. So if StandardContext is not based on a filesystem, the value of basePath in ApplicationContext does not matter.\n\nThus I am going to change StandardContext.getBasePath() to return null for a null docBase,\ninstead of failing with a NullPointerException.",
      "Implemented in Tomcat 6 by r1725061 and will be in 6.0.45 onwards."
    ],
    "creation_ts": "2014-10-27T22:07:01Z",
    "fixes": [
      57154
    ]
  },
  {
    "id": 47774,
    "summary": "Illegal context class loader is used when HttpSessionListener is executed.",
    "description": "When HttpSessionListener is executed, illegal class loader is set to the context classLoader.\n\nI think that the problem is in CoyoteAdapter#parseSessionCookiesId method. \nJSESSION COOKIE is parsed in this method, and sessionId is set to the request. \n\nTo check sessionId, Request#isRequestedSessionIdValid method is called in this method. \nAnd, Session#isValid() might be called in Request#isRequestedSessionIdValid method. \nHowever, the context class loader of a current thread is StandardClassLoader. \nIt is not WebappClassLoader. \n\nFor instance,\nWhen the session has already passed session-timeout, \nSession#expire is executed.\nAt this time, the context class loader of the thread that executes HttpSessionListenner#sessionDestroyed is StanderdClassLoader. \nThis is not good. \nThe context class loader of the thread that executes HttpSessionListenner should be WebAppClassLoader. \n\n\nBest regards.",
    "comments": [
      "This has been fixed in trunk and proposed for 6.0.x.\n\nThanks for the report.",
      "The patch has been applied to 6.0.x and will be included in 6.0.23 onwards.",
      "I reopned this bug.\nThis is not fixed against 5.5.x.\ntherefore, proposed for 5.5.x.",
      "This fix applied to 5.5, will be in 5.5.30 onwards."
    ],
    "creation_ts": "2009-09-01T01:58:42Z",
    "fixes": [
      47774
    ]
  },
  {
    "id": 36923,
    "summary": "Deactivated EL expressions are not parsed for jsp expressions/scriptlets/etc",
    "description": "JavaServer Pages Specification 2.0, section JSP.3.3.2 says:\n---\nSince the syntactic pattern ${expr} was not reserved in the JSP specifications\nbefore JSP 2.0, there may be situations where such a pattern appears but the\nintention is not to activate EL expression evaluation but rather to pass through\nthe pattern verbatim. To address this, the EL evaluation machinery can be\ndeactivated as indicated in this section.\n[...]\nThe default mode for JSP pages in a Web Application delivered using a web.xml\nusing the Servlet 2.3 or earlier format is to ignore EL expressions; this\nprovides for backward compatibility.\n---\n\nHowever, even with deactivated EL expression evaluation, jsp code like:\n<%@ page isELIgnored=\"true\" %>${<%= \"Hello, world!\" %>}\n\nwill produce output like:\n${<%= \"Hello, world!\" %>}\n\nwhich is of course not backwards-compatible with Servlet 2.3 / JSP 1.2 container\n(e.g., Tomcat 4.x), where the output would be:\n${Hello, world!}\n\nThe ${...} syntax is widely used, and any pre-2.0 jsp pages having it would be\nincompatible with Tomcat 5.x even though the standard tries to ensure the\ncompatibility.",
    "comments": [
      "This bug has been fixed in trunk and proposed for 6.0.x\n\nFixing it in Tomcat 5 will require the back-porting of the isELIgnored work form Tomcat 6. I've started on that and will proposed a combined patch once I have completed my testing.",
      "I have proposed a port of the fix (with the parsing changes) to 5.5.x",
      "The fix has been applied to 6.0.x and will be included in 6.0.19 onwards.",
      "This has been fixed in 5.5.x and will be included in 5.5.28 onwards."
    ],
    "creation_ts": "2005-10-05T01:08:53Z",
    "fixes": [
      36923
    ]
  },
  {
    "id": 42039,
    "summary": "Tomcat doesn't output the stack trace of UnavailableException.",
    "description": "When UnavailableException is thrown from the Servlet:init, Tomcat doesn't output\nthe stack trace of UnavailableException.\n\nThe cause of problem is lost.\n\nTomcat should output the stack trace at the \"invoke\" method of\nStandardWrapperValue.",
    "comments": [
      "Created attachment 19907\nTomcat outputs the stack trace with this patch.\n\nTomcat outputs the stack trace with this patch.",
      "Your patch has been applied to svn and will be included in 5.5.24 and 6.0.12\nonwards.\n\nMany thanks."
    ],
    "creation_ts": "2007-04-03T16:54:58Z",
    "fixes": [
      42039
    ]
  },
  {
    "id": 52184,
    "summary": "Reduce log level for invalid cookies",
    "description": "Invalid cookies are fairly common. Firefox has them all the time. Tomcat logs fill up very quickly with this input. Tomcat doesn't log when there is an invalid HTTP request, as that would yield the same problem.co \n\nNov 14, 2011 3:15:27 PM org.apache.tomcat.util.http.Cookies processCookieHeader\nINFO: Cookies: Invalid cookie. Value not a token or quoted value\n\nhttp://vmc-ssrc-rh56.eng.vmware.com:8080/\n\nGET / HTTP/1.1\nHost: vmc-ssrc-rh56.eng.vmware.com:8080\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: gzip, deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nConnection: keep-alive\nCookie: __utma=106857756.14479066.1321292743.1321296794.1321304211.3; __utmz=106857756.1321304211.3.2.utmcsr=communities.example.com|utmccn=(referral)|utmcmd=referral|utmcct=/community/vmtn/appplatform/testapp_fire; s_nr=1321293934221; s_vi=[CS]v1|2760A9C4851D0F77-6000010260007567[CE]\nCache-Control: max-age=0",
    "comments": [
      "I'm against this change.\n\nDropping a cookie needs to logged by default. If an application is generating a lot of invalid cookies then the log level can always be increased to WARN for that logger.\n\nArguably the log level for dropping a cookie should be WARN anyway. It has already been dropped to INFO due to the frequency that it is observed and to allow the messages to be filtered out by setting the log level to WARN.",
      "I'd keep this open. As asking user to change their log level to avoid filling up their disks for invalid HTTP cookies is pretty much asking every admin to by default change the log level for a logger they've never heard of to avoid a DoS attack.\n\nIt's pretty much common sense. It's not an error in Tomcat, it's an invalid cookie. The logging of it, who does it benefit, the one admin that is looking for it, or the thousand admins getting invalid cookies?",
      "Changing the default log level to DEBUG is going to cause problems for system admins trying to work out why their app isn't working. Silently dropping invalid input data is not a good idea. There needs to be a warning somewhere.\n\nAn approach we have used elsewhere is to log the first instance of the problem at one level and subsequent instances at a lower level. It is a good idea to include in the first log message that further instances of the problem will be logged at a lower (disabled by default) log level. This addresses my concern that something needs to be logged and your DOS concern.",
      "Tomcat should be friendly both to developers and to those using it in production. \nIts default configuration is more developer-friendly, in many places.\n\n\nI think many admins do not look at INFO messages at all. So it seems reasonable to expect that the default log level in production would be set to WARNING.\n\nFrom developer's point of view I am against dropping severity level of this message.\n\n\n> It is a good idea to include in the first log message that further\n> instances of the problem will be logged at a lower (disabled by default)\n> log level.\n\nIn this case the first and subsequent messages are likely to come from different requests. I think it is better to have some time-based threshold strategy.\n\nI wonder whether it can be dealt at the logging library level. Otherwise it would be nice to have some helper class to deal with such logging issues. (+system property to configure the threshold?)\nThis issue is wider, because this place is not the only one that produces \"useless\" INFO messages.",
      "The httpd project is currently demoting all errors generated for client \ndiagnostic activity to a level lower-than [warn].  The appropriate 4xx\ncode is already being sent to the client, so the administrator or the\nweb author is free to enable various debugging aids if the reason for\nthat 4xx result is desired.  But for 99.9995% of the lifespan of that\nrunning server, nobody is interested in why the client is sending a bad\nURI, etc.  Most of these are not users, but friendly or malicious probes.",
      "I have implemented a solution for this that we can expand to other areas as required. The solution will be included in 7.0.24 onwards.",
      "REOPENing.\n\nThe new o.a.juli.logging.UserDataHelper class is missing from extras/tomcat-juli.jar.\nConsequently Tomcat fails fatally if you try to use the alternative tomcat-juli.jar from extras.\n\n\nThe DirectJDKLog class is also missing from extras. Apparently the changes applied to it have to be ported to commons-logging *.logging.impl.Jdk14Logger class. It is not fatal though and concerns only the accuracy of log messages.\n(In practice I think it is not a big concern, because the extras tomcat-juli jar is usually used to route logging to log4j. In that case the accuracy of java.util logging is irrelevant).",
      "Thanks for the catch. This should be fixed in trunk and 7.0.x now."
    ],
    "creation_ts": "2011-11-14T22:26:00Z",
    "fixes": [
      52184
    ]
  },
  {
    "id": 62712,
    "summary": "NPE in Manager TLS connector configuration diagnostics/Certificates",
    "description": "Created attachment 36146\nDebugging session in Eclipse\n\nWhen pressing this button, I do get a NPE:\n\n> java.lang.NullPointerException\n> \torg.apache.catalina.manager.ManagerServlet.getConnectorCerts(ManagerServlet.java:1814)\n> \torg.apache.catalina.manager.HTMLManagerServlet.sslConnectorCerts(HTMLManagerServlet.java:770)\n> \torg.apache.catalina.manager.HTMLManagerServlet.doGet(HTMLManagerServlet.java:144)\n> \torg.apache.catalina.manager.HTMLManagerServlet.doPost(HTMLManagerServlet.java:227)\n> \tjavax.servlet.http.HttpServlet.service(HttpServlet.java:661)\n> \tjavax.servlet.http.HttpServlet.service(HttpServlet.java:742)\n> \torg.apache.catalina.filters.CsrfPreventionFilter.doFilter(CsrfPreventionFilter.java:136)\n> \torg.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n> \torg.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:109)\n\nMy server.xml is:\n\n> <Connector port=\"8444\" connectionTimeout=\"20000\"\n> \tmaxHttpHeaderSize=\"24576\" maxThreads=\"250\"\n> \tSSLEnabled=\"true\" scheme=\"https\" secure=\"true\"\n> \tdefaultSSLHostConfigName=\"@main-host@\">\n> \t<SSLHostConfig hostName=\"@main-host@\" protocols=\"TLSv1.2\"\n> \t\t\thonorCipherOrder=\"true\" ciphers=\"HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!DSS\">\n> \t\t\t<Certificate certificateFile=\"/etc/opt/ssl/@main-host@/cert/public.pem\"\n> \t\t\t\t\tcertificateKeyFile=\"/etc/opt/ssl/@main-host@/key/private.pem\"\n> \t\t\t\t\tcertificateKeyPassword=\"@password@\"\n> \t\t\t\t\ttype=\"RSA\" />\n> \t</SSLHostConfig>\n> \t<SSLHostConfig hostName=\"@alias-host@\" protocols=\"TLSv1.2\"\n> \t\t\thonorCipherOrder=\"true\" ciphers=\"HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!DSS\">\n> \t\t\t<Certificate certificateFile=\"/etc/opt/ssl/@alias-host@/cert/public.pem\"\n> \t\t\t\t\tcertificateKeyFile=\"/etc/opt/ssl/@alias-host@/key/private.pem\"\n> \t\t\t\t\tcertificateKeyPassword=\"@password@\"\n> \t\t\t\t\ttype=\"RSA\" />\n> \t</SSLHostConfig>\n> </Connector>\n>\n\nRuntime config is:\n\n> 2018-09-11T11:18:31.570 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Server version:        Apache Tomcat/8.5.34\n> 2018-09-11T11:18:31.577 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:          Sep 4 2018 22:28:22 UTC\n> 2018-09-11T11:18:31.577 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Server number:         8.5.34.0\n> 2018-09-11T11:18:31.578 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               HP-UX\n> 2018-09-11T11:18:31.578 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            B.11.31\n> 2018-09-11T11:18:31.578 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          IA64N\n> 2018-09-11T11:18:31.578 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /opt/java8/jre\n> 2018-09-11T11:18:31.579 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0.14-hp-ux-b1\n> 2018-09-11T11:18:31.579 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Hewlett Packard Enterprise Company\n> 2018-09-11T11:18:31.579 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /var/opt/tomcat-services\n> 2018-09-11T11:18:31.580 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /opt/apache-tomcat-8.5.34\n> 2018-09-11T11:18:31.580 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=/var/opt/tomcat-services/conf/logging.properties\n> 2018-09-11T11:18:31.581 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\n> 2018-09-11T11:18:31.581 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Xms256M\n> 2018-09-11T11:18:31.581 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Xmx512M\n> 2018-09-11T11:18:31.582 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Xbootclasspath/p:/opt/apache-tomcat-8.5.34/bin/activedirectory-ldap-hack-0.2.1.jar\n> 2018-09-11T11:18:31.582 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.awt.headless=true\n> 2018-09-11T11:18:31.584 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dfile.encoding=UTF-8\n> 2018-09-11T11:18:31.584 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.security.auth.login.config=/opt/apache-tomcat-8.5.34/conf/login.conf\n> 2018-09-11T11:18:31.584 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djavax.security.auth.useSubjectCredsOnly=false\n> 2018-09-11T11:18:31.585 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.security.krb5.conf=/etc/krb5.conf\n> 2018-09-11T11:18:31.585 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Doracle.net.tns_admin=/net/smartld/admin/conf/oracle\n> 2018-09-11T11:18:31.585 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Doracle.net.wallet_location=/net/smartld/admin/conf/oracle/wallet\n> 2018-09-11T11:18:31.585 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=2048\n> 2018-09-11T11:18:31.586 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources\n> 2018-09-11T11:18:31.586 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.UMASK=027\n> 2018-09-11T11:18:31.586 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER=true\n> 2018-09-11T11:18:31.586 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dtomcat.systemEnv=IECMIG\n> 2018-09-11T11:18:31.587 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dmail.smtp.host=@mail-server@\n> 2018-09-11T11:18:31.587 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dmail.smtp.localhost=@main-host@\n> 2018-09-11T11:18:31.587 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.endorsed.dirs=/opt/apache-tomcat-8.5.34/endorsed\n> 2018-09-11T11:18:31.588 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=/var/opt/tomcat-services\n> 2018-09-11T11:18:31.588 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=/opt/apache-tomcat-8.5.34\n> 2018-09-11T11:18:31.588 INFORMATION [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=/var/opt/tomcat-services/temp\n> 2018-09-11T11:18:31.589 INFORMATION [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.6.3].\n> 2018-09-11T11:18:31.589 INFORMATION [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].\n> 2018-09-11T11:18:31.589 INFORMATION [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR/OpenSSL configuration: useAprConnector [true], useOpenSSL [true]\n> 2018-09-11T11:18:31.605 INFORMATION [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized [OpenSSL 1.0.2k  26 Jan 2017]\n> 2018-09-11T11:18:32.264 INFORMATION [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"https-openssl-apr-8444\"]\n> 2018-09-11T11:18:32.601 INFORMATION [main] org.apache.catalina.startup.Catalina.load Initialization processed in 2366 ms\n> 2018-09-11T11:18:32.669 INFORMATION [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]\n> 2018-09-11T11:18:32.670 INFORMATION [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.34\n\nPlease also see the attached screenshot. I assume that the code expects a JKS-based approach while I am using PEM files for OpenSSL.\n\nAre those buttons actually suited for non-JSSE?",
    "comments": [
      "The same happens for Trusted Certificates.",
      "It is the APR connector it doesn't like. Neither NIO+JSSE and NIO+OpenSSL trigger an NPE in this case. It happens in 9.0.x as well. Investigating...",
      "The same issue applies to the button below the one mentioned. Shall I spawn a new ticket for that?",
      "No need. I'll have it patched shortly.",
      "Thanks for the report.\n\nFixed in:\n- trunk for 9.0.13 onwards\n- 8.5.x for 8.5.35 onwards",
      "(In reply to Mark Thomas from comment #5)\n> Thanks for the report.\n> \n> Fixed in:\n> - trunk for 9.0.13 onwards\n> - 8.5.x for 8.5.35 onwards\n\nCharming, thanks!"
    ],
    "creation_ts": "2018-09-12T14:56:07Z",
    "fixes": [
      62712
    ]
  },
  {
    "id": 62603,
    "summary": "Changes in tag files are not reflected in the rendered view or they end up with a java.lang.NoClassDefFoundError",
    "description": "We have an application that contains jsps and tag files, when we deploy jsp/tag changes instead of reloading the webapp entirely we change those in the webapps folder, and let jsp reloading process do the work for us. \n\nFrom time to time, we suffer from two different kind of errors:\n\n1- java.lang.NoClassDefFoundError because the tag file used in a jsp is \"not found\", but the jsp and also the tag file are there (TOMCA_HOME/work/Catalina/localhost/ROOT/org/apache/jsp/...)\n\n2- changes in a tag file are never reflected in the rendered view(jsp)\n\n\nI've took some time to debug the jsp reloading code, and here are my thoughts\n\nJsp reloading process at the end is calling JspServlet.periodicEvent method which triggers the process by calling JspRuntimeContext's checkUnload and checkCompile methods\n\nJspRuntimeContext's jsps attribute is the one that contains jsps and tag references that are going to be checked from time to time, depending on checkInterval and development config values, to see if a JSP page (and its dependent files) need to be recompiled.\n\nJspRuntimeContext's jsps attribute is backed by a ConcurrentHashMap, so the insertion order MAY NOT be preserved when we iterate through the list of jsps and dependant files. Check JspRuntimeContext.checkCompile() method.\n\nThe order in which we iterate through the tags and jsps is relevant because when a change in a tag file is detected the .java and also .class files are generated and its JspServletWrapper.reload attribute is set to true, afterwards in the same JspRuntimeContext.checkCompile() loop, when the process detects that a jsp needs to be recompiled because is \"dependant\" on this tag file  TagFileProcessor.loadTagFile method will invoke the JspServletWrapper.loadTagFile method that belongs to the modified tag, and because its reload attribute was set to true JSpServletWrapper's tagHandler attribute will be loaded again. After this process the .java and .class file that belong to that jsp will be generated \n\nBut what would happen if we :\n- detect a change in the jsp first and generate the .java and .class files (jsp needs to be recompiled because of a change in one dependant tag). \n- receive a request that match that jsp which will set JspServletWrapper.reload attribute(set to true in the previous step) to false while still \"pointing\" to the old tag class\n- detect the change in the tag file which will recreate .java and .class files\n\nThen, depending on the order of the incoming request and the jsp detection process :\n- tag changes are not reflected in the rendered view\n- or even worse java.lang.NoClassDefFoundError\n\nSorry for this long description but it's not easy to explain :)",
    "comments": [
      "Thanks for the clear description of a tricky issue.\n\nI've been looking at potential solutions.\n\nHaving run through various scenarios my conclusion is that there is always a risk of problems if the reload flags are inconsistent across the web application. To avoid the potential problems, reloading needs to be prevented while the reload flags are being updated.\n\nI see two approaches to this:\n\n1. In JspSrvletWrapper.getServlet() assume reload == false while the loop in JspRuntimeContext.checkCompile() is processing.\n\n2. In JspSrvletWrapper.getServlet(), if reload == true && the loop in checkCompile() is processing pause the current request until checkCompile() completes.\n\nMy main concern with approach 1 is that it is possible, with (un)lucky timing that, after a resource is modified requests for that resource arrive during a checkCompile() processing window meaning the updated version of the resource is not seen even if it was modified multiple checkInterval periods ago. I don't think this is intuitive and coudl lead to unexpected behaviour.\n\nWith approach 2 the main concern is the length of the pause between the request being requested and processing starting. This is primarily driven by the time it takes to complete the checkCompile() loop.\n\nI am currently leaning towards approach 2 with some additional logging that will tell admins how long the chekcCompile() loop took to complete and how long individual requests were waiting.",
      "Thanks for the feedback Mark.\n\nWhat about this variant of number 1\n\n- In JspSrvletWrapper.getServlet() assume reload == false while the loop in JspRuntimeContext.checkCompile() is processing\n- Store all the JspServletWrappers affected by the previous step(in JspRuntimeContext ?)\n- When JspRuntimeContext.checkCompile() is completed, iterate through that \"list\" and reload them by invoking JspServletWrapper.getServlet\n\nI could send a PR/patch if you wish",
      "I like it. Thanks for the offer of a patch. Normally I'd say yes please but in this case this issue is blocking me getting the next set of releases out so I am going to start working on it immediately.\n\nOnce thing I did notice is that we'll also need to take account of firstTime to ensure we don;t skip compiling a new JSP because we are in the JspRuntimeContext.checkCompile() loop.",
      "Agree, great, thanks Mark!",
      "Fixed in:\n- trunk for 9.0.11 onwards\n- 8.5.x for 8.5.33 onwards\n- 7.0.x for 7.0.91 onwards\n\nI've tested this with a debugger and I can force a problem (updated tag doe snot take effect) before the patch but not afterwards. Additional review / testing welcome.",
      "I've reviewed the changes and everything looks good(I will test/debug it also next week)\n\nThanks",
      "Unable to reproduce the error with 8.5.33\n\nThanks"
    ],
    "creation_ts": "2018-08-07T18:44:55Z",
    "fixes": [
      62603
    ]
  },
  {
    "id": 64153,
    "summary": "ServerContainer is not available in ServletContext",
    "description": "After updating Tomcat from 9.0.30 to 9.0.31 our integration tests don't even start. Running Tomcat 9.0.31 in production works fine. In the integration tests we use \"org.apache.tomcat.embed:tomcat-embed-websocket\" so I guess the issue is somewhere there.\n\nWe use CometD and upon boot, the following exception is raised:\n\n```\njava.lang.IllegalArgumentException: Missing WebSocket ServerContainer\n        at org.cometd.websocket.server.WebSocketTransport.init(WebSocketTransport.java:72)\n        at org.cometd.server.BayeuxServerImpl.initializeServerTransports(BayeuxServerImpl.java:255)\n        at org.cometd.server.BayeuxServerImpl.doStart(BayeuxServerImpl.java:135)\n        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n        at org.cometd.server.CometDServlet.init(CometDServlet.java:64)\n        at org.cometd.annotation.AnnotationCometDServlet.init(AnnotationCometDServlet.java:52)\n        at javax.servlet.GenericServlet.init(GenericServlet.java:244)\n        at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1134)\n        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1089)\n        at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:983)\n        at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4871)\n        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5180)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n        at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)\n        at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n        at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n        at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\n        at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)\n        at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:841)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n        at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)\n        at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n        at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n        at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\n        at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)\n        at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n        at org.apache.catalina.core.StandardService.startInternal(StandardService.java:421)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n        at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:930)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n        at org.apache.catalina.startup.Tomcat.start(Tomcat.java:467)\n        ...\n```\n\nThe error is coming from this line:\n\nhttps://github.com/cometd/cometd/blob/3.1.12/cometd-java/cometd-java-websocket/cometd-java-websocket-javax-server/src/main/java/org/cometd/websocket/server/WebSocketTransport.java#L70\n\nThis is our initialization code:\n\n```\ntomcat = Tomcat.new\ntomcat.port = @port\ntomcat.connector.add_upgrade_protocol(Http2Protocol.new) # this will create the default connector\n\nbase_path = java.nio.file.Path.of(Dir.tmpdir, 'project/webapp').to_string\nroot_ctx = tomcat.add_context('/project', base_path)\nroot_ctx.add_mime_mapping('css', 'text/css')\nroot_ctx.add_mime_mapping('js', 'application/javascript')\nroot_ctx.loader = WebappLoader.new(JRuby.runtime.jruby_class_loader)\n\nctx_cfg = ProjectContextConfig.new\nctx_cfg.default_web_xml = tomcat.no_default_web_xml_path\nroot_ctx.add_lifecycle_listener(ctx_cfg)\n\ntomcat.start\n```\n\nI have no clue what could have changed and what is broken. Any suggestions as to how do I debug this would be appreciated.",
    "comments": [
      "The change that looks most closely related is bug 64021 but I don;t see how that could cause the WebSocket implementation not to be found.\n\nI'd start debugging around o.a.catalina.startup.WebappServiceLoader\n\nAlternatively, if you provide a simple test case that reproduces the issue we can take a look.",
      "Mark, thanks for the support. Here is a reproduction project:\n\nhttps://github.com/boris-petrov/tomcat-bug\n\nSorry for all the accidental complexity with Ruby and all that but it was the easiest way for me to reproduce the problem. Clone the repo and run \"gradle integrationTest\" in it. You'll see the error (there is also one about a missing \"saxon.jar\" - ignore that one). If you open \"build.gradle\" and change Tomcat's version from 9.0.31 to 9.0.30 and run \"gradle integrationTest\" again - you'll see the error gone (only the one for the missing jar will be there).\n\nPlease tell me if you need any more information from me.\n\nI run this on:\n\n%  gradle --version\n\n------------------------------------------------------------\nGradle 6.1.1\n------------------------------------------------------------\n\nBuild time:   2020-01-26 12:47:38 UTC\nRevision:     <unknown>\n\nKotlin:       1.3.61\nGroovy:       2.5.8\nAnt:          Apache Ant(TM) version 1.10.7 compiled on September 1 2019\nJVM:          13.0.2 (Oracle Corporation 13.0.2+8)\nOS:           Linux 5.5.5-arch1-1 amd64",
      "nokogiri 1.10.8 is broken. It includes jing.jar in the lib directory that in turn has a reference to saxon.jar in its classpath. That JAR is missing. I wondered if that failure was causing the WebSocket container failure but that does not seem to be the case.\n\nStill investigating.\n\nThis would be a lot easier with a WAR that I could deploy to my own Tomcat instance rather than trying to figure out how to get better logging and/or debugging working with a bunch of technologies I am unfamiliar with.",
      "Yes, I'm sorry the reproduction project is far from the best possible but it was easiest for me. You're more familiar with Tomcat itself and I believe that the important code is in `server_runner.rb` so if you could just use that as a blueprint to create a new project that reproduces the issue...? I guess the problem is somewhere in \"org.apache.tomcat.embed:tomcat-embed-websocket\" because that's what's missing when using a production/standalone Tomcat where the problem doesn't appear.\n\nAs for the missing JAR - as I said, that's not relevant here. In our own project we don't get that error. I'm not sure why it's here but it doesn't matter anyway - the \"real\" issue is visible even with it.",
      "It is the change for bug 64021.\n\nIt is caused by a difference between context.getParentClassLoader() and context.getLoader().getClassLoader().getParent().\n\nI haven't got a fix yet but it should be fairly simple,",
      "As a work-around, use:\n\nroot_ctx.parentClassLoader = JRuby.runtime.jruby_class_loader\n\nrather than\n\nroot_ctx.loader = WebappLoader.new(JRuby.runtime.jruby_class_loader)\n\nThe second approach is probably going to be deprecated.",
      "Fixed in:\n- master for 10.0.0-M2 onwards\n- 9.0.x for 9.0.32 onwards\n- 8.5.x for 8.5.52 onwards\n- 7.0.x for 7.0.101 onwards",
      "Thanks for the workaround, works like a charm! And thanks for the support and quick fix!"
    ],
    "creation_ts": "2020-02-18T13:05:10Z",
    "fixes": [
      64153
    ]
  },
  {
    "id": 64514,
    "summary": "classes missing from bootstrap.jar",
    "description": "When performing a jdeps analysis on bootstrap.jar in master we can see that there are two classes missing.\n\n> tomcat]$ jdeps -v -cp output/build/bin/tomcat-juli.jar output/build/bin/bootstrap.jar | grep \"not found\"\n> bootstrap.jar -> not found\n>    org.apache.catalina.startup.Bootstrap              -> org.apache.catalina.Globals                        not found\n>    org.apache.catalina.startup.Tool                   -> org.apache.catalina.Globals                        not found\n>    org.apache.catalina.startup.Tool                   -> org.apache.tomcat.util.ExceptionUtils              not found\n\nThe effective result of this is that when calculating either the OSGi or JPMS metadata these packages want to be imported. Since several other classes are cherry-picked into the jar it stands to reason that the assembly should be logically complete as to never encounter any hard to diagnose errors.",
    "comments": [
      "https://github.com/apache/tomcat/pull/296",
      "This issue was discussed on list and determined that if the missing parts being small and benign enough to copy into bootstrap, that might be the best solution as proposed by @markt:\n\n> If we created o.a.c.startup.Constants, defined the constants required by\n> the bootstrap classes there and then referenced those from o.a.c.Globals\n> would that help?\n\nIt did!\n\n> Is it Tool's use of ExceptionUtils that is causing that class to be\n> needed? If so would making Bootstrap.handleThrowable() package private\n> and using that instead help?\n\nIt does!\n\nI've tested these changed and they solve the packaging issue for both OSGi and JPMS.\n\nPR update coming.",
      "The outcome is essentially that both in usage and now in terms of real java dependencies, bootstrap has no dependencies outside of java.base and tomcat-juli.jar",
      "Thanks for the PRs.\n\nFixed in:\n- master for 10.0.0-M7 onwards\n- 9.0.x for 9.0.37 onwards\n- 8.5.x for 8.5.57 onwards\n\nNote that I back-ported this to 8.5.x even though 8.5.x doesn't use bnd to keep the code in sync for easier back-ports of future fixes."
    ],
    "creation_ts": "2020-06-11T03:18:37Z",
    "fixes": [
      64514
    ]
  },
  {
    "id": 44673,
    "summary": "ServletInputStream still readable even when closed",
    "description": "Created attachment 21716\nEcho \"OK\" if the behaviour is correct, \"KO\" otherwise\n\nInputBuffer does not check \"closed\" in any read, mark, skip operation, thus bytes can be read even when the application has requested to close the inputstream. This causes programming problems to go unnoticed. See the attached test case.",
    "comments": [
      "This has been fixed in 6.0.x and will be included in the next release.\nIt has been proposed for inclusion in 5.0.x.",
      "This has been fixed in 5.5.x and will be included in 5.5.27 onwards."
    ],
    "creation_ts": "2008-03-25T15:32:18Z",
    "fixes": [
      44673
    ]
  },
  {
    "id": 60035,
    "summary": "java.io.IOException: Too many open files",
    "description": "Upgraded from Spring Boot v1.3.6 to v.1.4.0, which in turn upgraded the embedded tomcat container from 8.0.36 to 8.5.4.\n\nWe are now seeing a bunch of the following exceptions after the app has been running for a number of hours:\n\n2016-08-24 00:00:03.129 ERROR 15154 --- [https-jsse-nio-172.30.72.54-30020-Acceptor-0] [] org.apache.tomcat.util.net.NioEndpoint   : Socket accept failed\n\njava.io.IOException: Too many open files\n        at sun.nio.ch.ServerSocketChannelImpl.accept0(Native Method)\n        at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:422)\n        at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:250)\n        at org.apache.tomcat.util.net.NioEndpoint$Acceptor.run(NioEndpoint.java:457)\n        at java.lang.Thread.run(Thread.java:745)\n\nRunning lsof for the Spring Boot pid shows thousands of entries like the following:\n\njava    9694 xxx 1251u  sock                0,6       0t0 6636870 can't identify protocol\n\nDowngrading to embedded tomcat 8.0.36 (whilst remaining on Spring Boot 1.4.0) fixes the issue.",
    "comments": [
      "I'm starting to look at this. I've already found and fixed an unrelated file descriptor leak and I can see a couple more places where fixes might be required. However, I haven't - yet - seen anything that looks like the leak described in this report.\n\nAny information on how to reproduce it would be very helpful. For example, does it require HTTPS, WebSocket, Servlet 3.0 Async or Servlet 3.1 non-blocking? A test case that generates the leak would be even better.",
      "Hi Mark\n\nI have been able to pinpoint that the issue started with 8.5.3.  8.5.2 seems to be ok.  \n\nI can see from the 8.5.3 changlog at least one change around sockets: \"Fix a cause of multiple attempts to close the same socket\"\n\nI downloaded, built and deployed the sample Spring Boot app from one of the tutorials.  Couldn't reproduce the issue, even with 8.5.4, although the app is pretty \"dumb\":\nhttps://spring.io/guides/gs/spring-boot/\nhttps://github.com/spring-guides/gs-spring-boot/archive/master.zip \n\nUsers connect to our app over https, and our app connects to ldap over http and other webservices over https.  No WebSocket, Servlet 3.0 Async or Servlet 3.1 non-blocking.\n\nCheers\nJoe",
      "Thanks for tracking down which version this appeared in. I'll take a look at the diff between the two tags. I agree that the change you highlight is a good place to start.",
      "I've reviewed the changes and I don't see anything problematic yet. There is what looks like a single fd leak on first use that I want to track down but that is unlikely to be related to this issue.\n\nGiven that you were able to test 8.5.2 and 8.5.3 that suggests you have a way of reproducing this. Can you share that?",
      "I think I have been able to reproduce this:\n\n- Run Tomcat on machine 1\n- Run abs test on machine 2\n- Disable network on machine 1\n\nOften, but not always, this leaves sockets open. I've searched through the commits to figure out when was introduced and have narrowed it down to this commit:\nhttp://svn.apache.org/viewvc?view=revision&revision=1746551\n\nNext up is figuring out why and fixing it.",
      "Good news. I've figured out the root cause and there will be a fix in the next release.\n\nIndirectly, r1746551 was the issue.\n\nThe problem occurs for TLS connections when the connection is dropped after the socket has been accepted but before the handshake is complete. The socket ended up in a loop:\n- timeout -> ERROR event\n- process ERROR (this is the new bit from r1746551)\n- try to finish handshake\n- need more data from client\n- register with poller for READ\n- wait for timeout\n- timeout ...\n\n... and around you go.",
      "This has been fixed in the following branches:\n- 9.0.x for 9.0.0.M10 onwards\n- 8.5.x for 8.5.5 onwards\n\n8.0.x and earlier were not affected.",
      "Hi Mark, Apologies Joe went quiet - but he left the company. Thanks for looking into this, it kind of brought down all the servers we deployed the upgrade onto so was pretty serious for us. What you have identified sounds a very likely candidate.\n\nWe'll update our tomcat jars and let you know how we go. Thanks again.",
      "All indications are that this fixed our issues. Thanks again.",
      "Thanks for confirming the fix.",
      "*** Bug 60555 has been marked as a duplicate of this bug. ***",
      "(In reply to Mark Thomas from comment #7)\n> This has been fixed in the following branches:\n> - 9.0.x for 9.0.0.M10 onwards\n> - 8.5.x for 8.5.5 onwards\n> \n> 8.0.x and earlier were not affected.\n\nAs mentioned in https://bz.apache.org/bugzilla/show_bug.cgi?id=60555#c4 this bug effects the 7.0 line as well. Can you please check and confirm based on @hiki's comments in 60555."
    ],
    "creation_ts": "2016-08-24T01:30:44Z",
    "fixes": [
      60035
    ]
  },
  {
    "id": 58284,
    "summary": "StandardSession attempts to silently write NonSerializable objects",
    "description": "Customer reported an issue with non-serializable objects when using our DynamoDB Session manager (https://github.com/aws/aws-dynamodb-session-tomcat/issues/30). After digging into the code it looks like StandardSession is attempting to do several things when giving non-serializable attributes. For top level objects that don't implement serializable it silently removes it. That code is working fine although I am a little wary that it doesn't fail as this could hide bugs in the users code and make it difficult for them to determine why a certain attribute isn't being persisted to the backing store. After that StandardSession attempts to write the remaining attributes to the ObjectOutputStream. If a serialization exception is encountered here (i.e. some object in the object graph does not implement Serializable) then the exception is caught and a special indicator NOT_SERIALIZED is written to the object stream and a warning is logged. Now internally ObjectOutputStream is handling the same exception and writing it's own special marker, TC_EXCEPTION, and the serialized exception object to the stream. This is written before StandardSession has a chance to write NOT_SERIALIZED. In StandardSession.readObject there is logic to skip deserializing any objects that have been written to the stream as NOT_SERIALIZED. This code can never actually be executed though as ObjectInputStream is checking if there are any occurences of TC_EXCEPTION and will deserialize the exception object, wrap it in a WriteAbortedException and throw it out. This causes a session with non-serializable objects in the attributes to be written \"successfully\" but causes an exception to be thrown when attempting to read that same session.\n\nI understand modifying StandardSession to now throw exceptions when non-serializable objects are encountered could be considered a breaking change so I propose adding some kind of overload or configuration to enable this behavior for users that want to opt in. Failing fast when non-serializable attributes are detected seems like the right way to go as this should be fixed in the customers code. I'm willing to submit a patch for this although I wanted to open the issue first to make sure you concur with my assessment and coding up a patch is worth my time.",
    "comments": [
      "I've written some unit tests that confirm the behaviour you've reported.\n\nI'm currently leaning towards trying to implement what the current code appears to be trying to do which is to log a warning but to carry on.",
      "Thanks for the update! If I understand correctly the suggested change would be to do away with the NOT_SERIALIZED marker in StandardSession and rely on TC_EXCEPTION in ObjectOutputStream. In write object we would catch the NotSerializableException, log a warning, and carry on. In read object we would catch the WriteAbortedException (potentially with additional checks to make sure it's due to a NonSerializableException), log a warning, and carry on. Is my understanding correct?",
      "Exactly.",
      "Sounds good to me. Would you prefer I submit a patch for this?",
      "Patches are always welcome!",
      "Great, I'll get started on it. Thanks for the guidance.",
      "Any progress?",
      "Ping? I'm likely to be in a position to start the next 8.0.x release soon and this needs to be fixed before the tag. If no patch is forthcoming, I'll likely end up writing the patch myself.",
      "Hey sorry the the delay in response. I was out of the office last week and haven't had a chance to start this. How soon is soon? I probably won't be able to get to this until later in the week.",
      "You probably have a day or two. I'll update the bug when I reach the point where I need the patch. If you can update it as well when you start work we should be able to avoid duplicating effort.",
      "Will do. Thanks Mark.",
      "Created attachment 33114\nPatch for bug\n\nHad some test failures but I think it's my local setup. Could you run it through the test suite to make sure it's good.",
      "Many thanks for the patch and the updated test case.\n\nI have applied it (with some very minor cosmetic changes) to trunk, 8.0.x (for 8.0.27 onwards) and 7.0.x (for 7.0.65 onwards).",
      "Fantastic. Thanks!"
    ],
    "creation_ts": "2015-08-26T17:02:30Z",
    "fixes": [
      58284
    ]
  },
  {
    "id": 68692,
    "summary": "Http11Nio2Protocol not using provided executor",
    "description": "We're using NIO2 with a StandardThreadExecutor we declared in our server.xml, and noticed in our logs that REST controllers run in a default thread pool, i.e. thread names in the format Thread-x are logged, e.g.\n\n2024-02-29 14:42:48,313 (Thread-6:[]) INFO ...\n\nUpon further debugging we noticed that the threadGroup field of the Nio2Endpoint is NULL. Looking at the source code, it seems that this condition in the bind() method evaluates to false:\n\nif (getExecutor() instanceof ExecutorService) {\n            threadGroup = AsynchronousChannelGroup.withThreadPool((ExecutorService) getExecutor());\n}\n\nwhich makes sense, since StandardThreadExecutor doesn't implement ExecutorService. We suspect that the NULL threadGroup causes NIO2 to use the default thread pool.\n\nIf we specify the thread attributes on the connector itself instead of passing an executor attribute, the correct channel group/thread pool is used:\n\n2024-02-29 15:15:07,166 (http-nio2-1776-exec-7:[]) INFO ...\n\nsince in that case, the endpoint instantiates a standard ThreadPoolExecutor which implements ExecutorService.\n\n       if (getUseVirtualThreads()) {\n            executor = new VirtualThreadExecutor(getName() + \"-virt-\");\n        } else {\n            TaskQueue taskqueue = new TaskQueue();\n            TaskThreadFactory tf = new TaskThreadFactory(getName() + \"-exec-\", daemon, getThreadPriority());\n            executor = new ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), 60, TimeUnit.SECONDS,taskqueue, tf);\n            taskqueue.setParent( (ThreadPoolExecutor) executor);\n        }",
    "comments": [
      "I think it is possible to upgrade the implementations to ExecutorService and I will do that. However, NIO2 needs its own exclusive pool so it is probably not very useful to configure a custom one like this.",
      "Hi Remy,\n\nThank you for the quick reply! Just to be clear, we are only passing this executor to a single connector, so it is used exclusively. \n\nI think that the current behaviour is a bit inconsistent in the sense that if one implemented a custom Catalina executor, e.g. a StandardThreadExecutor subclass which also implements ExecutorService, the executor and its thread pool would be used. This instanceof check is only visible in the source code, and it's not clear to consumers of the NIO2 connector.",
      "The fix will be in 11.0.0-M18, 10.1.20 and 9.0.87."
    ],
    "creation_ts": "2024-02-29T16:06:37Z",
    "fixes": [
      68692
    ]
  },
  {
    "id": 68495,
    "summary": "Unable to find match between the canonical context and the URI presented by the user agent",
    "description": "It seems that Bug 66488 was never really fixed. Because we saw several occastion where the request URL was overwritten by other Header data like User agent (or parts of the URL were deleted) like in these two instances:\n\nusing Tomcat Embedded 9.0.83\njava.lang.IllegalStateException: Unable to find match between the canonical context path [/app1] and the URI presented by the user agent [f=70d24a53-fe99-4f9c-a512-5f5abd5bce3]\n\nor\n\nusing the Standalone Tomcat 9.0.85\njava.lang.IllegalStateException: Unable to find match between the canonical context path [/app2] and the URI presented by the user agent [--WebKitFormBoundaryMVjw2B39oX3x4Oii]\n\nThe exception is thrown when a POST request was sent by the browser after the session timed out.\n\nWorkaround: Downgrade to Tomcat 9.0.35 (we didn't check later Versions in between the affected ones, yet).",
    "comments": [
      "Are you using any sort of monitoring agent? There have been multiple issues around how these access MessageByte instances.",
      "No response after a week.\n\nIf the requested information is not provided, the issue will be closed as WORKSFORME.",
      "Closing as WORKSFORME due to lack of response from OP.\n\nIf you still experience this issue and wish to re-open this bug please provide the minimum steps necessary - including any web application with source - to reproduce this issue.",
      "Also encountering this bug on upgrading from Tomcat 9.0.73 to 9.0.85\n\nAfter the upgrade I can replicate by logging in, bringing up a page, letting my session expire and then submitting a POST.  It brings up the login page and then after logging in throws a server error 500.\n\nDowngrading back to 9.0.73 worked to fix it.  I am not running any sort of monitoring agent.  It looks like the POST is getting mangled into a broken GET somehow?\n\nFrom the access log:\n\n10.64.249.226 - AN00040 [29/Feb/2024:13:53:24 -0600] \"POST e=ryan&fname=ryan&bed=&ssn=&idnum=&topNavSearc HTTP/1.1\" 500 1891\n\nError thrown:\n\nFeb 29, 2024 1:53:24 PM org.apache.catalina.core.StandardHostValve custom\nSEVERE: Exception Processing ErrorPage[errorCode=500, location=/error/ServletError.jsp]\njava.lang.IllegalStateException: Unable to find match between the canonical context path [/conline] and the URI presented by the user agent [e=ryan&fname=ryan&bed=&ssn=&idnum=&topNavSearc]\n\n\nWe are running tomcat using Java 8 on a RHEL 7 machine.",
      "No reproducible test case provided as required in comment #3 - returning to WORKSFORME",
      "Lol, I'll try to get you the test case tomorrow.  I assure you that this is a bug.",
      "Created attachment 39607\nSample web application to reproduce bug\n\nI am attaching a very simple web application that reliably reproduces this bug. To create this, I started with the \"Hello World\" Tomcat sample war and modified only hello.jsp, web.xml and added a Login.jsp.\n\nThis application is expecting an authentication realm named \"cortrac-login\". You could change this in web.xml. We are using Active Directory for authentication, but I wouldn't think that would matter.\n\nTo reproduce the bug:\n1) Navigate to sample/hello.jsp. It should prompt you to login.\n2) After logging in, let the session expire. I set the session timeout to 1 minute for easy testing\n3) Click the button on the page. If your session expired, you should be prompted to login again and after you do, you will see the error.\n\nNote the 2 lines in the hello.jsp\n<%= request.getParameter(\"navCurrentRid\") %> \n<%= request.getContextPath() %>\n\n\nThese 2 lines appear to be the core of the bug.  The request.getParameter seems to be corrupting the URI causing the request.getContextPath to error.\n\nPlease let me know if you need more information.\n  -Noah\n\nError returned:\n\nType Exception Report\n\nMessage An exception occurred processing [/hello.jsp] at line [21]\n\nDescription The server encountered an unexpected condition that prevented it from fulfilling the request.\n\nException\n\norg.apache.jasper.JasperException: An exception occurred processing [/hello.jsp] at line [21]\n\n18: </table>\n19: \n20: <%= request.getParameter(\"navCurrentRid\") %> \n21: <%= request.getContextPath() %>\n22: \n23:                  <form  action=\"\" method=\"post\" id=\"quicksearchform\" name=\"quicksearchform\">\n24: <input id=\"lname\" name=\"lname\" type=\"hidden\"><input id=\"fname\" name=\"fname\" type=\"hidden\"><input id=\"bed\" name=\"bed\" type=\"hidden\"><input id=\"ssn\" name=\"ssn\" type=\"hidden\"><input id=\"idnum\" name=\"idnum\" type=\"hidden\"><input id=\"topNavSearch\" name=\"topNavSearch\" type=\"hidden\" value=\"true\">\n\n\nStacktrace:\n\torg.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:610)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:489)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:379)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:327)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:623)\n\torg.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\n\torg.apache.catalina.filters.HttpHeaderSecurityFilter.doFilter(HttpHeaderSecurityFilter.java:129)\nRoot Cause\n\njava.lang.IllegalStateException: Unable to find match between the canonical context path [/sample] and the URI presented by the user agent [e=&fname=&bed=&ss]\n\torg.apache.catalina.connector.Request.getContextPath(Request.java:2136)\n\torg.apache.catalina.connector.RequestFacade.getContextPath(RequestFacade.java:583)\n\torg.apache.jsp.hello_jsp._jspService(hello_jsp.java:139)\n\torg.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:623)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:466)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:379)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:327)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:623)\n\torg.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\n\torg.apache.catalina.filters.HttpHeaderSecurityFilter.doFilter(HttpHeaderSecurityFilter.java:129)\nNote The full stack trace of the root cause is available in the server logs.",
      "Reopening the ticket based on providing a test case as requested.",
      "Before you ask, I just replicated this on a clean install of 9.0.85\n\nRHEL 9 JDK 8\n\nI only edited tomcat_users.xml to uncomment the admin user and change the password\n\nNote that to get the sample app to work with the UserDatabase realm, I had to edit the web.xml to change:  \n\n<auth-constraint>\n     <role-name>*</role-name>\n</auth-constraint>\n\nto:\n\n<auth-constraint>\n     <role-name>manager-gui</role-name>\n</auth-constraint>\n\nThe cortrac-login realm name that I mentioned above doesn't seem to matter.\n\nAfter this, the same steps as above replicate \n\n1) Navigate to sample/hello.jsp. It should prompt you to login.\n2) After logging in, let the session expire. I set the session timeout to 1 minute for easy testing\n3) Click the button on the page. If your session expired, you should be prompted to login again and after you do, you will see the error.",
      "I was able to reproduce the problem on 9.0.85, but not on 9.0.86 (nor on 11.0.0-M17). Looks like something fixed it recently, but there's nothing obvious to me in the changelog for 9.0.86.",
      "Ok so maybe there's still something with the query string then.",
      "Thanks for the test case. I am able recreate the issue now.\n\nThe root cause is a combination of this code in the FormAuthenticator:\nhttps://github.com/apache/tomcat/blob/9.0.x/java/org/apache/catalina/authenticator/FormAuthenticator.java#L637\n\nand the changes to MessageBytes back in 9.0.0-M5 and the fix for bug 66627 in 9.0.77.\n\nThis has been partially fix in 9.0.86 as a side-effect of bug 68026 but it looks as if query string is still affected.\n\nI have a more robust fix in mind that I want to test before committing. Assuming all goes well this should be fixed later today and included in the next release round.",
      "I was planning to do:\n    public String getQueryString() {\n        return coyoteRequest.queryString().toStringType();\n    }\n\nSince the idea from the FormAuthenticator is to change the MessageBytes type to String and toString no longer does it (but toStringType does).",
      "That was my first thought but:\n1. I didn't want correct behaviour of the FormAuthenticator to depend on caching decisions in Request that could - in theory - change over time\n2. I didn't cache query string when I last looked at it as there were some usage patterns that could trigger conversion back to byte\n\nMy plan (which looks to work) is to call toStringType() directly from FormAuthenticator",
      "Fixed in:\n- 11.0.x for 11.0.0-M18 onwards\n- 10.1.x for 10.1.20 onwards\n-  9.0.x for  9.0.87 onwards\n-  8.5.x for  8.5.100 onwards"
    ],
    "creation_ts": "2024-01-17T06:13:24Z",
    "fixes": [
      68495
    ]
  },
  {
    "id": 52444,
    "summary": "Classloading-based ServletContainerInitializer @HandlesTypes processing can result in long startup times",
    "description": "See 52326 for background, noting particularly the following:\n\n\"As long as SCI processing involves expensive classloading, larger applications will suffer from long startup times and thus be encouraged to \"shut off\" this functionality via metadata-complete='true'.\"\n\nThis issue, then, is intended to address classloading-based approach to @HandlesTypes processing by replacing it with something faster and generally less problematic.  ASM would be one way to get it done.",
    "comments": [
      "No functional bug here, moving to enhancement.",
      "*** Bug 52549 has been marked as a duplicate of this bug. ***",
      "Bringing across the list of suggestions from the duplicate...\n\n> a. if the class is an annotation, skip it\nFixed in trunk and 7.0.x and will be included in 7.0.26 onwards.\n\n> b. if the class doesn't extend/implement any interface skip it\nInteresting. Thinking about this some more, the current isAssignableFrom() test is actually broader than it needs to be since it will return true for X.class.isAssignableFrom(X.class) and there is no need to add X to the initializerClassMap in this case. Apart from that however, isAssignableFrom() is the right test and that makes things a little more complicated to implement solely using byte code due to how the code currently iterates over the JARs (traversing the class hierarchy is the tricky part). Should be doable but likely to require a fair amount of re-factoring.\n\n> c. Look at the class hierarchy - this is actually quite easy (since\n> there's only one parent) and don't load it unless it implements\n> ServletContextListener\nThis is not correct. HandlesType specify any class or interface.\n\n> d. if there are no Servlet initializers, don't load any classes\nThe code already does this.\n\n> e. if the class needs to be loaded use a throwaway classloader\nIf the class must be loaded to examine it yes, but hopefully it will be possible to avoid doing this.\n\nIn summary, b) is the only remaining problem to solve. The solution looks like requiring caching all the javaClass instances and then doing the HandlesTypes processing (and then throwing away the cache).",
      "Thanks for looking at this Mark. The more classes can be eliminated from loading, the better.\n\nCheers!",
      "> In summary, b) is the only remaining problem to solve. The solution looks like\n> requiring caching all the javaClass instances and then doing the HandlesTypes\n> processing (and then throwing away the cache).\n\nI was looking at using the bcel.util.SyntheticRepository when you fixed the\nannotations...",
      "(In reply to comment #5)\n> I was looking at using the bcel.util.SyntheticRepository when you fixed the\n> annotations...\n\nThat would work but you'd need an additional cache to save you parsing the interface hierarchy every time. I'm currently working on a custom cache. Should have something for tomorrow.",
      "I think I have a patch for this. The unit tests pass but I want to run the TCK as well before I commit anything. That'll be tomorrow at the earliest now.",
      "Unit tests and Servlet TCK pass so the fix has been committed to trunk and 7.0.x. It will be in 7.0.26 onwards.",
      "Thanks, Mark.  I've updated https://jira.springsource.org/browse/SPR-8894 and https://jira.springsource.org/browse/SPR-8945 to let affected users know that 7.0.26 should take care of this issue.",
      "Hi Mark,\n\nAs we also had this problem with our application, we have built a Tomcat from svn tip and when starting the application, we had the following stacktrace:\nCaused by: java.lang.NullPointerException\n\tat org.apache.tomcat.util.bcel.classfile.ClassParser.<init>(ClassParser.java:72)\n\tat org.apache.catalina.startup.ContextConfig.populateJavaClassCache(ContextConfig.java:2132)\n\tat org.apache.catalina.startup.ContextConfig.populateJavaClassCache(ContextConfig.java:2123)\n\tat org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:2058)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:2015)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1904)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1872)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1858)\n\nThis is due to the fact that classes present in the jar files may implement interfaces not present in the classpath (in our case, it's the optional commonj support in Spring's scheduling classes which rises this problem).\n\nWe solved this problem by checking that the inputStream \"is\" is different from null in populateJavaClassCache(String className).\n\nWith this fix, our application starts and the initialization is faster than with 7.0.25.\n\nHTH.\n\n-- \nGuillaume",
      "Can you add a patch as an attachment (in diff -u format) for your change?",
      "Created attachment 28245\nFixes a NPE on startup if classes reference class or interface which aren't in the classpath\n\nAs requested, here is the trivial patch we applied to fix the NPE we had on startup.",
      "Looking at the stack trace I reached the same conclusion as to the fix but implemented it sightly differently.\n\nThis has been fixed in trunk and 7.0.x/trunk and will be included in 7.0.26 onwards."
    ],
    "creation_ts": "2012-01-09T17:11:12Z",
    "fixes": [
      52444
    ]
  },
  {
    "id": 69713,
    "summary": "HTTP/2 DATA frame with padding cause error when HEADERS contains content-length field.",
    "description": "When HEADERS contains 'content-length' field and DATA frame is padded, it causes Connection error.\n\ntomcat-1  | 12-Jun-2025 02:18:55.721 FINE [https-openssl-nio-8443-exec-4] org.apache.coyote.http2.Http2UpgradeHandler.upgradeDispatch Connection error\ntomcat-1  |     org.apache.coyote.http2.ConnectionException: Connection [0], Stream [1], The content length header value [3] does not agree with the size of the data received [127]\ntomcat-1  |             at org.apache.coyote.http2.Stream.receivedData(Stream.java:684)\ntomcat-1  |             at org.apache.coyote.http2.Http2UpgradeHandler.startRequestBodyFrame(Http2UpgradeHandler.java:1553)\ntomcat-1  |             at org.apache.coyote.http2.Http2AsyncUpgradeHandler.startRequestBodyFrame(Http2AsyncUpgradeHandler.java:43)\ntomcat-1  |             at org.apache.coyote.http2.Http2Parser.readDataFrame(Http2Parser.java:191)\ntomcat-1  |             at org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler.completed(Http2AsyncParser.java:251)\ntomcat-1  |             at org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler.completed(Http2AsyncParser.java:167)\ntomcat-1  |             at org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler.completed(SocketWrapperBase.java:1040)\ntomcat-1  |             at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper$NioOperationState.run(NioEndpoint.java:1687)\ntomcat-1  |             at org.apache.tomcat.util.net.SocketWrapperBase$OperationState.start(SocketWrapperBase.java:987)\ntomcat-1  |             at org.apache.tomcat.util.net.SocketWrapperBase.vectoredOperation(SocketWrapperBase.java:1358)\ntomcat-1  |             at org.apache.tomcat.util.net.SocketWrapperBase.read(SocketWrapperBase.java:1214)\ntomcat-1  |             at org.apache.tomcat.util.net.SocketWrapperBase.read(SocketWrapperBase.java:1190)\ntomcat-1  |             at org.apache.coyote.http2.Http2AsyncParser.readFrame(Http2AsyncParser.java:140)\ntomcat-1  |             at org.apache.coyote.http2.Http2Parser.readFrame(Http2Parser.java:87)\ntomcat-1  |             at org.apache.coyote.http2.Http2UpgradeHandler.upgradeDispatch(Http2UpgradeHandler.java:356)\ntomcat-1  |             at org.apache.coyote.http2.Http2AsyncUpgradeHandler.upgradeDispatch(Http2AsyncUpgradeHandler.java:43)\ntomcat-1  |             at org.apache.coyote.http2.Http2AsyncParser$PrefaceCompletionHandler.completed(Http2AsyncParser.java:130)\ntomcat-1  |             at org.apache.coyote.http2.Http2AsyncParser$PrefaceCompletionHandler.completed(Http2AsyncParser.java:62)\ntomcat-1  |             at org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler.completed(SocketWrapperBase.java:1040)\ntomcat-1  |             at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper$NioOperationState.run(NioEndpoint.java:1687)\ntomcat-1  |             at org.apache.tomcat.util.net.SocketWrapperBase$OperationState.start(SocketWrapperBase.java:987)\ntomcat-1  |             at org.apache.tomcat.util.net.SocketWrapperBase.vectoredOperation(SocketWrapperBase.java:1358)\ntomcat-1  |             at org.apache.tomcat.util.net.SocketWrapperBase.read(SocketWrapperBase.java:1214)\ntomcat-1  |             at org.apache.tomcat.util.net.SocketWrapperBase.read(SocketWrapperBase.java:1190)\ntomcat-1  |             at org.apache.coyote.http2.Http2AsyncParser.readConnectionPreface(Http2AsyncParser.java:57)\ntomcat-1  |             at org.apache.coyote.http2.Http2UpgradeHandler.init(Http2UpgradeHandler.java:248)\ntomcat-1  |             at org.apache.coyote.http2.Http2AsyncUpgradeHandler.init(Http2AsyncUpgradeHandler.java:43)\ntomcat-1  |             at org.apache.coyote.http2.Http2UpgradeHandler.upgradeDispatch(Http2UpgradeHandler.java:334)\ntomcat-1  |             at org.apache.coyote.http2.Http2AsyncUpgradeHandler.upgradeDispatch(Http2AsyncUpgradeHandler.java:43)\ntomcat-1  |             at org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:60)\ntomcat-1  |             at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:57)\ntomcat-1  |             at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)\ntomcat-1  |             at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)\ntomcat-1  |             at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\ntomcat-1  |             at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)\ntomcat-1  |             at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)\ntomcat-1  |             at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\ntomcat-1  |             at java.base/java.lang.Thread.run(Thread.java:1583)\n\nThe test of padded DATA frame is here\nhttps://github.com/apache/tomcat/blob/main/test/org/apache/coyote/http2/Http2TestBase.java#L388\nhttps://github.com/apache/tomcat/blob/main/test/org/apache/coyote/http2/TestHttp2Section_6_1.java#L50\n\nBut it tests only the case that HEADERS frame does not contain 'content-length' field.",
    "comments": [
      "Created attachment 40047\nProposed patch\n\nHttp2Parser.readDataFrame has two suspicious uses of payloadSize when dataLength should be used instead.",
      "We might want to update a few method parameter names for consistency as well.",
      "Correctly handle an HTTP/2 data frame that includes\n        padding when the headers include a content-length. (remm/markt)",
      "Fixed in:\n- 11.0.x for 11.0.9 onwards\n- 10.1.x for 10.1.43 onwards\n-  9.0.x for  9.0.107 onwards"
    ],
    "creation_ts": "2025-06-12T10:57:53Z",
    "fixes": [
      69713
    ]
  },
  {
    "id": 64644,
    "summary": "wrong state of WsSession on network outage",
    "description": "Created attachment 37382\na web project to start a ws server and index.html showing value of active websocket connections\n\nThis issue happens on any Linux OS, when we have a remote websocket connection stable and then, network drops.\n\nIf the application is writing on that websocket channel, then the lastActiveTime keeps on getting updated even if there is no network. \n\nThe writes are successful for next ~15 minutes because the keep-alive interval for tcp is 15 minutes. \n\nThus, from the time network was dropped to next 15 minutes the WsSession is shown as active.\n\nAnd if the application is not writing anything on that channel, then after the maxIdleTimeout the WsSession.checkExpiration closes the connection. \n\nBut when application is writing it shows wrong state of websocket session. \n\nSteps to reproduce:\n\n1. Start the attached web project on a linux OS. It sets the maxIdleTimeout to 10 seconds and if any websocket session is created it sends a message every 2 seconds.\n\n2. On any remote system connect a websocket session. I used the \"smart websocket client\" extension in chrome. \n\n3. Check that the /WebsocketActiveTimeIssue/index.html shows 1.\n\n4. Drop the network connection between the client and server. I was using a VM so, I disconnected the network from Oracle virtual box.\n\n5. For next 15 minutes that webpage will keep showing 1. \n\nRoot cause:\nTomcat updates the lastActiveTime anytime application writes anything on that channel.\n\nThus, WsSession.checkExpiration() method never expires it unless the transport layer throws an error which happens only after 15 minutes.\n\nEffect:\nIn my product, I need to show the devices which are connected to my IoT platform. The devices send the ping every T seconds (T is much less than maxIdleTimeout), thus, if there were any Idle Read events, then I could use that to close the connection and show the device as disconnected.\n\nSuggestion:\nHave two types of active times. viz. One for read and one for write:\nThrow an IdleRead or IdleWrite event when any of the active times are passed the maxIdle timeout.\n\n\nI have tried a fix on my system. But I don't know how to raise a PR with that. Though I am on the dev mailing list but got recently added.",
    "comments": [
      "Created attachment 37383\na web project to start a ws server and index.html showing value of active websocket connections",
      "(In reply to Saksham Verma from comment #1)\n> Created attachment 37383 [details]\n> a web project to start a ws server and index.html showing value of active\n> websocket connections\n\nUse the latest attachment to reproduce the issue. Ignore the first attachment.",
      "PR: https://github.com/apache/tomcat/pull/330/files\n\nCould any maintainer please review.",
      "This issue describes one particular drawback of the max idle timeout feature of WebSocket sessions in the Java WebSocket spec.\n\nI've been thinking about various WebSocket usage patterns and whether there was a way to add a custom option that changed how this was treated. E.g. only applied to reads, only applied to writes, etc.). My conclusion is that to cover all possible use cases you need three idle timeouts:\n- maxIdleTimeout (the current value)\n- maxIdleReadTimeout\n- maxIdleWriteTimeout\n\nThis is probably something that needs to be added to the Jakarta WebSocket 2.1 spec. I've created https://github.com/eclipse-ee4j/websocket-api/issues/356 to track this\n\nTo address this in current Tomcat versions, I am thinking of a couple of custom properties in the user properties Map associated with the session.",
      "As per your suggestion(In reply to Mark Thomas from comment #4)\n> This issue describes one particular drawback of the max idle timeout feature\n> of WebSocket sessions in the Java WebSocket spec.\n> \n> I've been thinking about various WebSocket usage patterns and whether there\n> was a way to add a custom option that changed how this was treated. E.g.\n> only applied to reads, only applied to writes, etc.). My conclusion is that\n> to cover all possible use cases you need three idle timeouts:\n> - maxIdleTimeout (the current value)\n> - maxIdleReadTimeout\n> - maxIdleWriteTimeout\n> \n> This is probably something that needs to be added to the Jakarta WebSocket\n> 2.1 spec. I've created\n> https://github.com/eclipse-ee4j/websocket-api/issues/356 to track this\n> \n> To address this in current Tomcat versions, I am thinking of a couple of\n> custom properties in the user properties Map associated with the session.\n\n\n\nAs per this suggestion I have raised another PR\nhttps://github.com/apache/tomcat/pull/346\nincluding the supporting tests. \n\nCould you please review it?\n\nWe need to deploy this fix for our product Thingworx as it is impacting many of our customers.",
      "Fixed in:\n- master for 10.0.0-M8 onwards\n- 9.0.x for 9.0.38 onwards\n- 8.5.x for 8.5.58 onwards\n- 7.0.x for 7.0.106 onwards\n\nThanks for the PR and for adapting it based on feedback.",
      "(In reply to Mark Thomas from comment #6)\n> Fixed in:\n> - master for 10.0.0-M8 onwards\n> - 9.0.x for 9.0.38 onwards\n> - 8.5.x for 8.5.58 onwards\n> - 7.0.x for 7.0.106 onwards\n> \n> Thanks for the PR and for adapting it based on feedback.\n\nCould you please provide a tentative Date for 9.0.38 release?"
    ],
    "creation_ts": "2020-08-04T10:47:22Z",
    "fixes": [
      64644
    ]
  },
  {
    "id": 43914,
    "summary": "HTTP spec violation when generating HTTP redirects for folders without trailing slash",
    "description": "Copy the attached static.war into $CATALINA_HOME/webapps. Then start the server \nand paste this HTTP request in netcat:\n\nGET /static/name%20with%20spaces HTTP/1.1\nUser-Agent: Jakarta Commons-HttpClient/3.0\nHost: localhost:8080\n\nTomcat will answer with the following HTTP redirect:\n\nHTTP/1.1 302 Moved Temporarily\nServer: Apache-Coyote/1.1\nLocation: http://localhost:8080/static/name with spaces/\nTransfer-Encoding: chunked\nDate: Tue, 20 Nov 2007 13:46:12 GMT\n\nObserve the Location: header. It has raw unencoded spaces in the URL which is \nin clear violation of the HTTP specification.",
    "comments": [
      "Created attachment 21160\nminimal webapp that demonstrates the problem",
      "Created attachment 21161\nsimple fix\n\nI have no idea what the preferred internal Tomcat method for encoding URLs is,\nI just copied the URLEncoder stuff from DefaultServlet.",
      "I have been through RFC2616 and can't see anywhere that states that the location\nheader for a 302 must be encoded. Please provide reference(s) to the section(s)\nthat require this.",
      "Section 14.30 of RFC2616 specifies the Location header as:\n\n   Location       = \"Location\" \":\" absoluteURI\n\nThen, in section 3.2.1 it specifies the definition of absoluteURI:\n\n   For definitive information on\n   URL syntax and semantics, see \"Uniform Resource Identifiers (URI):\n   Generic Syntax and Semantics,\" RFC 2396 [42] (which replaces RFCs\n   1738 [4] and RFC 1808 [11]). This specification adopts the\n   definitions of \"URI-reference\", \"absoluteURI\", \"relativeURI\", \"port\",\n   \"host\",\"abs_path\", \"rel_path\", and \"authority\" from that\n   specification.\n\nMoving on to RFC2396, in section 3 you can find the start of the absoluteURI \nBNF. If you follow the production you will eventually see that the basic \ncharacters of the individual path components come down to this:\n\n      pchar         = unreserved | escaped |\n                      \":\" | \"@\" | \"&\" | \"=\" | \"+\" | \"$\" | \",\"\n\nBasically, the above says it can only contain unreserved characters and the \ncharacters explicitly specified, all the rest must be escaped.\n\nLook into sections 2.3 and 2.4.1 for the exact definitions of \"unreserved\" and \n\"escaped\", and you will see that none of them include the space character, \nwhich means \"pchar\" doesn't include it, which in turn means \"absoluteURI\" \ndoesn't include it, which means eventually that the Location header can't \ninclude it either. Same goes for many other special characters not explicitly \ncovered by \"pchar\", not just space.",
      "Thanks for the pointer. That makes perfect sense.\n\nI have applied your patch to trunk and proposed it for 6.0.x and 5.5.x",
      "Fixed in Tomcat 6.0.x.",
      "Fixed in 5.5.x and will be included in 5.5.26 onwards."
    ],
    "creation_ts": "2007-11-20T05:53:53Z",
    "fixes": [
      43914
    ]
  },
  {
    "id": 55120,
    "summary": "ISA exception is thrown during application start when there is annotated ServerEndpoint POJO",
    "description": "Created attachment 30462\nPatch in PojoMethodMapping\n\nWhen there is ServerEndpoint annotated Pojo with OnOpen method accepting two parameters\n@OnOpen\npublic void onOpen(Session session, EndpointConfig config)\n\nISA is thrown. The case is valid according the javadoc\nhttp://docs.oracle.com/javaee/7/api/javax/websocket/OnOpen.html\n\nThe problem is in the getPathParams of PojoMethodMapping as it considers only Session for valid type that could not have PathParam annotation. When EndpointConfig parameter is checked current implementation require presence of PathParam annotation. Here is the patch and extended test TestPojoEndpointBase case",
    "comments": [
      "Actually the problem is bigger. The EndpointConfig parameter is not propagated when the annotated OnOpen method is invoked. There is NPE in buildArgs method of PojoMethodMapping. Here I propose new patch handling both issues and corresponding test case extension.",
      "Created attachment 30463\nhandling of EndpointConfig param\n\nchanges in PojoEndpointBase PojoMethodMapping and TestPojoEndpointBase to accommodate passing of EndpointConfig parameter in OnOpen annotated method.",
      "Thanks for the patch. It has been applied to trunk and will be included in 8.0.0 onwards. I did make a number of changes:\n\n1. I did some refactoring in r1495208 the meant the patch needed some small tweaks.\n\n2. The patch always looked for an EndpointConfig parameter rather than only on OnOpen methods.\n\n3. We always use spaces instead of tabs.\n\n4. I changed a few line breaks.\n\n5. I fixed a typo in a test method name.\n\n6. I amended the test to check that the config was actually passed."
    ],
    "creation_ts": "2013-06-19T10:10:35Z",
    "fixes": [
      55120
    ]
  },
  {
    "id": 23950,
    "summary": "[PATCH] Context.listBindings(...) broken?",
    "description": "I believe that the Context.listBindings(...) methods should return an\nEnumeration that returns resolved Objects, not references.  The current\nimplementation does not make an effort to resolve References to Objects prior to\nreturning the Binding.  It also should hold Exceptions until the enumeration has\nbeen fully traversed.  A possible patch is noted below (verified against 1.4,\nspot-checked for pre-1.4).\n\n\nIndex: NamingContextBindingsEnumeration.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/naming/NamingContextBindingsEnumeration.java,v\nretrieving revision 1.1\ndiff -u -r1.1 NamingContextBindingsEnumeration.java\n--- NamingContextBindingsEnumeration.java\t2 Nov 2000 06:14:16 -0000\t1.1\n+++ NamingContextBindingsEnumeration.java\t20 Oct 2003 14:58:28 -0000\n@@ -67,9 +67,12 @@\n import java.util.Hashtable;\n import java.util.Vector;\n import java.util.Enumeration;\n+import javax.naming.CompositeName;\n+import javax.naming.Context;\n import javax.naming.NamingException;\n import javax.naming.NamingEnumeration;\n import javax.naming.Binding;\n+import javax.naming.spi.NamingManager;\n \n /**\n  * Naming enumeration implementation.\n@@ -85,13 +88,17 @@\n     // ----------------------------------------------------------- Constructors\n \n \n-    public NamingContextBindingsEnumeration(Vector entries) {\n+    public NamingContextBindingsEnumeration(Vector entries, Context ctx,\nHashtable env) {\n         enum = entries.elements();\n+\t\tthis.ctx = ctx;\n+\t\tthis.env = env;\n     }\n \n \n-    public NamingContextBindingsEnumeration(Enumeration enum) {\n+    public NamingContextBindingsEnumeration(Enumeration enum, Context ctx,\nHashtable env) {\n         this.enum = enum;\n+\t\tthis.ctx = ctx;\n+\t\tthis.env = env;\n     }\n \n \n@@ -103,6 +110,11 @@\n      */\n     protected Enumeration enum;\n \n+    private Hashtable env;\n+    private Context ctx;\n+    private Binding next;\n+    private Exception trouble;\n+    private boolean runtimeExc;\n \n     // --------------------------------------------------------- Public Methods\n \n@@ -110,9 +122,10 @@\n     /**\n      * Retrieves the next element in the enumeration.\n      */\n-    public Object next()\n-        throws NamingException {\n-        return nextElement();\n+    public Object next() {\n+\t\tObject ret = next;\n+\t\tnext = null;\n+\t\treturn ret;\n     }\n \n \n@@ -121,7 +134,35 @@\n      */\n     public boolean hasMore()\n         throws NamingException {\n-        return enum.hasMoreElements();\n+\t\tif (next != null) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (enum.hasMoreElements()) {\n+\t\t\ttry {\n+\t\t\t\tNamingEntry entry = (NamingEntry)enum.nextElement();\n+\t\t\t\tString name = entry.name;\n+\t\t\t\tObject obj = NamingManager.getObjectInstance(entry.value, new\nCompositeName(name), ctx, env);\n+\t\t\t\tnext = new Binding(name, entry.value.getClass().getName(), obj, true);\n+\t\t\t\treturn true;\n+\t\t\t} catch (NamingException e) {\n+\t\t\t\ttrouble = e;\n+\t\t\t} catch (RuntimeException e) {\n+\t\t\t\ttrouble = e;\n+\t\t\t\truntimeExc = true;\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tNamingException ne = new NamingException();\n+\t\t\t\tne.setRootCause(e);\n+\t\t\t\ttrouble = ne;\n+\t\t\t}\n+\t\t}\n+\t\tif (trouble != null) {\n+\t\t\tif (runtimeExc) {\n+\t\t\t\tthrow (RuntimeException)trouble;\n+\t\t\t} else {\n+\t\t\t\tthrow (NamingException)trouble;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n     }\n \n \n@@ -133,16 +174,17 @@\n     }\n \n \n-    public boolean hasMoreElements() {\n-        return enum.hasMoreElements();\n-    }\n-\n-\n-    public Object nextElement() {\n-        NamingEntry entry = (NamingEntry) enum.nextElement();\n-        return new Binding(entry.name, entry.value.getClass().getName(), \n-                           entry.value, true);\n-    }\n+\tpublic boolean hasMoreElements() {\n+\t\ttry {\n+\t\t\treturn hasMore();\n+\t\t} catch (NamingException e) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\tpublic Object nextElement() {\n+\t\treturn next();\n+\t}\n \n \n }\nIndex: NamingContext.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/naming/NamingContext.java,v\nretrieving revision 1.8\ndiff -u -r1.8 NamingContext.java\n--- NamingContext.java\t8 Nov 2001 21:02:04 -0000\t1.8\n+++ NamingContext.java\t20 Oct 2003 14:58:38 -0000\n@@ -429,7 +429,7 @@\n         while ((!name.isEmpty()) && (name.get(0).length() == 0))\n             name = name.getSuffix(1);\n         if (name.isEmpty()) {\n-            return new NamingContextBindingsEnumeration(bindings.elements());\n+            return new NamingContextBindingsEnumeration(bindings.elements(),\nthis, env);\n         }\n         \n         NamingEntry entry = (NamingEntry) bindings.get(name.get(0));\nIndex: resources/FileDirContext.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/naming/resources/FileDirContext.java,v\nretrieving revision 1.15\ndiff -u -r1.15 FileDirContext.java\n--- resources/FileDirContext.java\t6 Nov 2002 09:57:17 -0000\t1.15\n+++ resources/FileDirContext.java\t20 Oct 2003 14:59:01 -0000\n@@ -389,7 +389,7 @@\n \n         Vector entries = list(file);\n \n-        return new NamingContextBindingsEnumeration(entries);\n+        return new NamingContextBindingsEnumeration(entries, this, env);\n \n     }\n \nIndex: resources/WARDirContext.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/naming/resources/WARDirContext.java,v\nretrieving revision 1.5\ndiff -u -r1.5 WARDirContext.java\n--- resources/WARDirContext.java\t28 Feb 2002 07:04:36 -0000\t1.5\n+++ resources/WARDirContext.java\t20 Oct 2003 14:59:10 -0000\n@@ -374,12 +374,12 @@\n     public NamingEnumeration listBindings(Name name)\n         throws NamingException {\n         if (name.isEmpty())\n-            return new NamingContextBindingsEnumeration(list(entries));\n+            return new NamingContextBindingsEnumeration(list(entries), this, env);\n         Entry entry = treeLookup(name);\n         if (entry == null)\n             throw new NamingException\n                 (sm.getString(\"resources.notFound\", name));\n-        return new NamingContextBindingsEnumeration(list(entry));\n+        return new NamingContextBindingsEnumeration(list(entry), this, env);\n     }",
    "comments": [
      "I have tested list() and listBindings() for NamingContext and FileDirContext and\ndo not see anything in the values returned to suggest that the values returned\ndo not conform to the Context.list() and Context.listBindings() interface.\n\nGiven that the behaviour is as expected, I see no need to apply the suggested\npatch. If you have a test case that does demonstrate a problem, please provide\nit. Without any such test case no further action will be taken on this issue\nwhich will be marked as invalid.\n\nAlso, it should be noted that the patch as is has a problem in that next() can\nno longer be called consecutively. A call to hasMore() is required before next()\ncan be called.",
      "Created attachment 17315\nPossible patch to address this issue\n\nHere is an updated (and less ambitious) patch that should address the\nlistBinding issue noted.",
      "Created attachment 17316\nserver.xml snippet to support test case",
      "Created attachment 17317\njar file containing test ObjectFactory and Object classes and sources",
      "Created attachment 17318\nJSP to support test case",
      "Sorry about the lack of clarification on this one.  The problem seems to arise \nwhen using a custom ObjectFactory.  To reproduce the problem:\n\nplace uploaded JSP into webapp\nplace uploaded (ObjectFactory) jar file in WEB-INF/lib\nedit server.xml to uploaded snippet:\n\n<Resource name=\"list/foo\" type=\"TestObject\"/>\n<ResourceParams name=\"list/foo\">\n  \n<parameter><name>factory</name><value>factory.TestObjectFactory</value></paramet\ner>\n</ResourceParams>\n\n<Environment name=\"list/num\" type=\"java.lang.Integer\" value=\"42\"/>\n\nThe JSP verifies that the listBinding method return an appropriate class type \nfor the foo object in the list Context.  The current implementation returns an \ninstance of org.apache.naming.ResourceRef instead of TestObject.  The \nlistBindings method seems to work fine for primitives defined as Environment \nobjects.\n\nThe patch included is against the latest branch of Tomcat (I'm not sure how the \nnaming subpackage is distributed and whether the changes can apply to less \nrecent versions).  In an effort to maintain pre-1.4 compatibility some \ncompromises are made in the exception handling of the nextElement and next \nmethods -- it would be preferable for it use a 1.4 nested Exception.\n\nI hope this helps.  Thanks!",
      "Thanks for the clarification and a special thanks for the test case.\n\nI think I can see what the problem is. Have a quick read of section 5.1.5 of\nthis link first http://java.sun.com/j2se/1.4.2/docs/guide/jndi/spec/jndi/jndi.5.html\n\nSome of the objects being returned, including those created by a custom\nObjectFactory are References. To quote part of the doc referenced above \"When\nthe result of an operation such as Context.lookup() or Binding.getObject() is a\nReference object, JNDI attempts to convert the reference into the object that it\nrepresents before returning it to the client.\"\n\nAs far as I can see, there is no code in Binding.getObject() that will do this.\nTomcat implements it's own Context and there is code in NamingContext.lookup()\nthat resolves references (aka external links). It isn't completely clear to me\nright now where this lookup should occur in the case of Context.listBindings()\nbut as far as I can tell, if we add a <code>if (entry.value instanceof\nReference)</code> test in NamingContextBindingsEnumeration and resolve any\nReferences we find it should fix the problem. I'll work on a patch to do this.",
      "Upon further investigation it seems like the resolution from Reference to \nObject should always be handled by NamingContext.  This allows NamingContext to \nreplace its internally stored Reference with the resolved Object, which would \nnot happen if resolution was managed directly by \nNamingContextBindingsEnumeration (including my patch).  If it is not \nimplemented this way then Objects with the same name returned from listBindings\n(...) may not equal those returned by lookup(...).  I don't know if this is \ncontractually required by the JNDI SPI but it seems safer to ensure equality.",
      "I have applied a fix for this to TC4 and TC5 that uses NamingContext.lookup() to\nresolve references.\n\nSee http://marc.theaimsgroup.com/?l=tomcat-dev&m=113649730824960&w=2"
    ],
    "creation_ts": "2003-10-20T17:56:35Z",
    "fixes": [
      23950
    ]
  },
  {
    "id": 29727,
    "summary": "JNDI env-entry not reload when context reloaded",
    "description": "If environment entries are changed in web.xml, and the application context is \nrestarted, the values in the JNDI context are the old values.\n\nIf the environment entries are changed via the Tomcat 'admin' interface, then \nthe values provided to the context are correct.\n\nThe following code is can be used to check the environment:\n\n        try {\n            InitialContext ic = new InitialContext();\n            NamingEnumeration enum = ic.listBindings(\"java:comp/env\");\n\n            while (enum.hasMore()) {\n                Binding binding = (Binding) enum.next();\n                jndi.setProperty(binding.getName(), \"\" + binding.getObject());\n                System.out.println(\"jndi setting: \" + binding.getName() + \"=\" \n+ binding.getObject());\n            }\n        } catch (NamingException e) {\n            System.err.println(\"unable to read JNDI settings, \" + e);\n        }\n\n\nThe web.xml fragment looks as follows:\n\n\t<env-entry>\n\t\t<env-entry-name>DatabaseURL</env-entry-name>\n\t\t<env-entry-value>jdbc:hsqldb:hsql://localhost</env-entry-value>\n\t\t<env-entry-type>java.lang.String</env-entry-type>\n\t</env-entry>",
    "comments": [
      "The JNDI context is discarded between restarts, so I doubt that this is the\ncase. I recommend you investigate the issue further.",
      "as I said, the application works correctly (i.e. the new value is picked up) \nwhen the environment value is changed via the Tomcat Admin interface, but does \nnot work when the value is changed by manually editting the web.xml and \nstop/start the application.\n\nSo how can this be an application level problem?\n\nThe only thing I can thing of is that it is somehow related to a Classloader \nissue??? But I am not sure why it would work with the Admin interface then.",
      "also, I found someone else reported the same issue on the mailing list...\n\nhttp://archives.real-time.com/pipermail/tomcat-users/2003-March/103584.html",
      "The code as posted can't be compiled: what's the \"jndi\" variable?\n\nIf you post a complete test case, i.e. a WAR file that I can drop into my \nTomcat installation to reproduce your problem, I'll be glad to look at it.\n\nIn addition, can you please test 5.0.28, the latest stable Tomcat 5.0 release \nat the time of this writing?",
      "Created attachment 12809\nwar file to demonstrate env-entry problem",
      "I have posted the war file. I ran the test against 5.0.28 - no change, problem \nstill exists. Thanks for looking into this.\n\nTo test:\n\ninstall war in server\n\nbrowse to <webserver>/<context>/listenv.jsp\n\n-  the current value of the env-entry should be displayed\n\nchange the web.xml env-entry using some text editor.\n\nreload the context, or allow tomcat to auto reload on change.\n\nbrowse to <webserver>/<context>/listenv.jsp (refresh needs to be performed)\n\n-  the OLD value is still displayed\n\nchange the env-entry using the tomcat 'admin' web interface. post changes.\n\nbrowse to <webserver>/<context>/listenv.jsp (refresh needs to be performed)\n\n-  the NEW value is still displayed",
      "Could you please consider the following modification of\norg.apache.catalina.core.NamingContextListener class:\n\nit was:\n\npublic void lifecycleEvent(LifecycleEvent event) {\n...\n            // Binding the naming context to the class loader\n            if (container instanceof Context) {\n                // Setting the context in read only mode\n                ContextAccessController.setReadOnly(getName());\n                try {\n                    ContextBindings.bindClassLoader\n                        (container, container,\n                         ((Container)\ncontainer).getLoader().getClassLoader());\n                } catch (NamingException e) {\n                    log(sm.getString(\"naming.bindFailed\", e));\n                }\n            }\n...\n}\n\nI think, it should be:\n\n\npublic void lifecycleEvent(LifecycleEvent event) {\n...\n            // Binding the naming context to the class loader\n            if (container instanceof Context) {\n\n\n\n               namingResources.addPropertyChangeListener(this);\n\n\n\n                // Setting the context in read only mode\n                ContextAccessController.setReadOnly(getName());\n                try {\n                    ContextBindings.bindClassLoader\n                        (container, container,\n                         ((Container)\ncontainer).getLoader().getClassLoader());\n                } catch (NamingException e) {\n                    log(sm.getString(\"naming.bindFailed\", e));\n                }\n            }\n...\n}\n\n\nThank you,\nIgor",
      "Created attachment 13292\nIf Environment entry is changed using admin app, the change is not visisble in JNDI. Patch to solve this problem",
      "Sorry, this patch is wrong :-( Please do not apply it",
      "The comments from Igor are not correct. It works ok if you change the variable\nvia the admin interface - it does not work if you manually change the web.xml,\nand stop/restart the web application.",
      "Updating version to 5.0.28.",
      "The chances of this getting fixes in Tomcat 5.0.x are now slim.  Can either or\nboth of you test with 5.5.7 (or 5.5.9 which will be out in a couple of days) and\nlet us know if it works or not?  That would be great...",
      "I did a simple test with tomcat 5.5.9. Environment entries are reloaded when \ncontext is reloaded.\n\nBut if I change environment entry in admin application, it is not reloaded. To \nforce application to see new entries user will have to reload context, which is \ndangerous operation.\n\nIt would be great if application would see new value after changing it in admin \napplication too.\n\n(In reply to comment #12)\n> The chances of this getting fixes in Tomcat 5.0.x are now slim.  Can either or\n> both of you test with 5.5.7 (or 5.5.9 which will be out in a couple of days) \nand\n> let us know if it works or not?  That would be great...",
      "That's pointless: accessing JNDI is costly, and is supposed to be read only in\nthe first place. As a result, webapps should be reading values, etc, in init,\nand that's it.",
      "My original bug, is that if the web.xml file is modified (via text editor, etc.)\nwhile the context is running, and the context is restarted, the container is\nsupposed to detect this and load the new JNDI values.\n\nThis is according to the J2EE specification.\n\nThis does not occur in 5.0. I have not yet tested with the 5.5 release, but\nbased on the fact that nothing has been posted as a direct fix for this, I am\nfairly certain the problem still exists.",
      "As a developer I want to have possiblity to change environment entries without \nrestarting, reloading ... My application should work 24/7 and I do not want to \nrestart or reload application because of I need to change only one parameter.\n\nEnvironment entries are very convinient to store init parameters. And I do not \nwant to change parameters too often. But it would be nice if I could change \nsomething in application parameters without restart.\n\nI can \"change\" environment entries in admin application. What is this feature \nfor, if it do not do anything, just changes value in admin?",
      "This can be done via JMX. Assume you have a webapp called /myapp with a JNDI\nenvironment string called i/need. It can be queried via the JMPXproxy in the\nmanager app. Here's the ouput example:\n\nName:\nCatalina:type=Environment,resourcetype=Context,path=/myapp,host=localhost,name=i/need\nmodelerType: org.apache.catalina.mbeans.ContextEnvironmentMBean\nclassName: org.apache.catalina.deploy.ContextEnvironment\nname: i/need\noverride: false\ntype: java.lang.String\nvalue: less cowbell\n\nSo your search URL would be (unescaped for readability ...)\nhttp://localhost/manager/jmxproxy?qry=Catalina:type=Environment,resourcetype=Context,path=/myapp,host=localhost,name=i/need\n\nAnd can be set via\nhttp://localhost/manager/jmxproxy?set=Catalina:type=Environment,resourcetype=Context,path=/myapp,host=localhost,name=i/need&att=value&val=more+cowbell\n\nMore information:\nhttp://jakarta.apache.org/tomcat/tomcat-5.0-doc/manager-howto.html#What%20is%20JMX%20Proxy%20Servlet",
      "Reopening bug. you cannot close as won't fix. your solution is not related to\nthis bug. This is a different bug, in that manual changes made to a web.xml\nfile, are not seen in the JNDI environment after a context restart. This is not\nadhering to the J2EE specification.",
      "Sure I can close the bug ;) This will not be fixed.",
      "Sorry, but you are an idiot, or have very little reading comprehension skills.\n\nThis bug needs to be fixed, it is not J2EE compliant. You do not need to fix the\nrequest in comment #13, that changes are visible in the JNDI context without a\nreload when changes are made via the admin interface. There is not in J2EE that\nstates that a container must update the JNDI context in real-time, but not sure\nthat the feature wouldn't be helpful as Igor has pointed out.",
      "(In reply to comment #20)\n> Sorry, but you are an idiot\n\nThat sounds good to me :)\n\nTo translate since you apparently have very little general comprehension skills,\nthis minor issue will not be fixed in the 5.0.x branch.",
      "How is it a minor issue? Do you run any large, multiple server, sites at all? It\nis fairly common to update deployed application by copying new web.xml files to\nthe deployment directories, and then use the Tomcat weburl to restart the context.",
      "Why is this bug not moved to the 5.5 branch then?\n\nThe J2EE specification states that the JNDI variables for an application are\nreloaded during a CONTEXT RESTART. This is the only way for init() methods in a\nservlet to retrieve any changed values.\n\nThis bug is NOT related to Igor's comments where he wants JNDI changes to be\nvisible as they are made.\n\nFor what it is worth, I tested this behavior with Jetty and it works as expected.",
      "Tested against 5.5.x and is still present. I am working on a fix...\n\nNote, I am only considering the original bug report.",
      "This is fixed in svn and will be in 5.5.21 onwards."
    ],
    "creation_ts": "2004-06-21T22:56:25Z",
    "fixes": [
      29727
    ]
  },
  {
    "id": 43702,
    "summary": "Class Files Have Unnecessarily Long Names when Using SimpleTags",
    "description": "I have been using Tomcat 5.5.7 (though I have checked this on the\nlatest 5.5 and 6.0 releases too) and had some problems with very\nlong class file names when using the SimpleTag interface for a\ncustom tag in a JSP document (the XML representation).\n\nFrom my reading of the code in Jasper, and my observation of the files\non my disk, if I have a JSP file \"WebContent/mypages/MyPage.jspx\",\nthen a class file named \"work/org/apache/jsp/mypages/MyPage_jspx.class\"\nwill be generated by Jasper.\n\nIf I use the SimpleTag interface for one of my custom tags on that\nJSP, a \"helper\" class (an inner class of the \"MyPage_jspx\" class) is\nalso generated. The naming convention appends \"Helper\" to the \"outer\"\nclass name to create the inner class name resulting in a class file\nnamed \"work/org/apache/jsp/mypages/MyPage_jspx$MyPage_jspxHelper.class\".\n\nAs there is only one \"helper\" class required, it could just be named\n\"Helper\", instead of \"MyPage_jspxHelper\". The \"outer\" class provides\na namespace that is duplicated unnecessarily in the name of the inner\nclass. Another alternative would be to generate this as an independent\nclass instead of an inner class (they could reside in the same source\nfile).\n\nThis may not seem to be a particularly important issue, but it becomes\na real problem if the name of the JSP is very long. We generate JSP\nfiles from other sources that often use very long names (the names\nare chosen by our customers, so we do not have a lot of control over\nhow long they can get). We have recently started to use the SimpleTag\ninterface to try to reduce the size of the Java classes generated by\nJasper (the generated code is more compact, as there is less code needed\nto handle return values, etc.) However, we quickly found that if a\ndeveloper's project directory was deeply nested on the file system\n(i.e., the path to the \"work\" directory) and/or the JSPs had long names\n(some names were as long as 96 characters) that the filesystem path\nlength limit on Windows was exceeded and we got \"class not found\"\nerrors from Tomcat at run-time for classes that clearly existed on the\nfilesystem. I have seen these errors before in other circumstances and\nthey are caused when the path length limit is exceeded.\n\nA trivial change to the Jasper code generator to avoid replicating the\nname of the \"outer\" class in the name of the inner \"helper\" class would\ngo a long way to alleviating this problem. I cannot think of any reason\nwhy this would not be a useful improvement to Jasper. It is a one line\nchange to the constructor of the \"org.apache.jasper.compiler.Generator\"\nclass where the FragmentHelperClass object is created (and probably in\nsome other area where references to this helper are generated into the\nservlet code).\n\nOther improvements to the compactness of the generated code could also\nbe made by more extensive use of \"import\" statements, but that would\nprobably not have any effect on the size of the \".class\" file after\ncompilation (or would it?).\n\nFor our part, we have had to stop using the SimpleTag interface for\nour custom tags, and have to start investigating a way of truncating\nlong JSP file names to avoid being caught out by Jasper's verbosity\nand the Windows path length limit.\n\nShould I report this issues separately against Tomcat 6?",
    "comments": [
      "I have proposed a patch for tc6. If accepted, I'll propose a backport to 5.5.x",
      "Fixed in trunk and 6.0.x. Proposed for 5.5.x.",
      "Fixed in svn for 5.5.x. Will be in 5.5.26 onwards."
    ],
    "creation_ts": "2007-10-26T03:17:17Z",
    "fixes": [
      43702
    ]
  },
  {
    "id": 69588,
    "summary": "Allow linking subresources independent of <Resources> in context.xml",
    "description": "Coming from https://lists.apache.org/thread/ysnqs6665wccfosl1kqqndfy2wjd95ll\n\nIt would be helpful if the following would be possible:\n> <Resources>\n>   <PostResources base=\"/foo/prod\" className=\"org.apache.catalina.webresources.DirResourceSet\"\n>     webAppMount=\"/dav\" readOnly=\"true\" allowLinking=\"true\" />\n> ...\n> </Resources>\n\nThis shouldn't be necessarily limited to PostResources, but to any resource set which can be linked.\nMoreover, one shouldn't be forced to enable allowLinking on <Resources> level.",
    "comments": [
      "If allowLinking is set to true at the <Resources> level, what happens to any nested resource sets that are defined:\n\n1. Nothing. allowLinking for the nested resource set is configured only on the nested resource set.\n\n2. The value set at the <Resources> level takes precedence and any value set on the nested resource set is ignored.\n\n3. The value set at the <Resources> level becomes the default for the nested resource set but can be overridden on a nested resource set if required.\n\nI'm leaning towards 3 as that will be backwards compatible with the existing setting and allow per nested resource set configuration.",
      "(In reply to Mark Thomas from comment #1)\n> If allowLinking is set to true at the <Resources> level, what happens to any\n> nested resource sets that are defined:\n> \n> 1. Nothing. allowLinking for the nested resource set is configured only on\n> the nested resource set.\n> \n> 2. The value set at the <Resources> level takes precedence and any value set\n> on the nested resource set is ignored.\n> \n> 3. The value set at the <Resources> level becomes the default for the nested\n> resource set but can be overridden on a nested resource set if required.\n> \n> I'm leaning towards 3 as that will be backwards compatible with the existing\n> setting and allow per nested resource set configuration.\n\nI agree with you and think 3 makes sense here. If locally not set, inherit from parent.",
      "(In reply to Michael Osipov from comment #2)\n> If [not] locally not set, inherit from parent.\n\nThis certainly upholds the Principle of Least Surprise.",
      "Fixed in:\n- 11.0.x for 11.0.7 onwards\n- 10.1.x for 10.1.41 onwards\n-  9.0.x for  9.0.105 onwards"
    ],
    "creation_ts": "2025-02-18T10:54:55Z",
    "fixes": [
      69588
    ]
  },
  {
    "id": 55638,
    "summary": "[websocket] Tomcat corrupts binary websocket messages when using the NIO connector",
    "description": "Created attachment 30907\nTest case\n\nWhen writing a binary websocket message with about 25 KB, the client will get corrupted data starting on Offset 0x2000 when running Tomcat with the NIO connector.\n\n\nTo reproduce:\n\n1) Checkout current trunk (r1529816) and apply the attached patch locally. This will modify the Echo example so that the JavaScript sends a Base64-encoded String to Tomcat, and Tomcat will decode it as byte[] array and send it back using a binary websocket message. The JavaScript will then compare each byte and report if differences are found.\n\n2) Start Tomcat using the NIO connector on 64-Bit Windows with a 64-bit JVM.\n\n3) Open the Echo example (http://localhost:8080/examples/websocket/echo.xhtml) with Firefox or Chrome.\n\n4) The page will print lines such as the following:\nOffset 0x2000: Excepted [0x80] but got [0x89]\nOffset 0x2001: Excepted [0xE4] but got [0x50]\nOffset 0x2002: Excepted [0x69] but got [0x4E]\nOffset 0x2003: Excepted [0xDD] but got [0x47]\nOffset 0x2004: Excepted [0x8F] but got [0x0D]\nOffset 0x2005: Excepted [0x9A] but got [0x0A]\n[...]\n\nThis indicates that there were differences between the sent and the received message.\n\n\n5) If you try this with the APR connector, the page will print: \"No errors found.\"\nso with APR the problems don't occur.\n\nIf you try this with the BIO connector (and repeatedly press F5 in Firefox), the page will sometimes print \"No errors found\", but sometimes it will print nothing as then Tomcat did not call the EchoAnnotation#echoMessage method.",
    "comments": [
      "All fixed in trunk. Need to test a little more before back-porting.",
      "Autobahn tests pass. CI system looks OK. Changes have been back-ported to 7.0.x"
    ],
    "creation_ts": "2013-10-07T16:36:31Z",
    "fixes": [
      55638
    ]
  },
  {
    "id": 66009,
    "summary": "M-TLS Fails, no user is found because \"OID.2.5.4.5\" is used as field name instead of \"SERIALNUMBER\", in Subject",
    "description": "We upgraded from Tomcat 9.0.60 to 9.0.62 and the Mutual-TLS failed.\n\nLogging from Tomcat 9.0.60 (M-TLS Works)\n01 org.apache.catalina.authenticator.AuthenticatorBase.invoke Security checking request POST /speer/soap/services/somefunctionality\n02 org.apache.catalina.realm.RealmBase.findSecurityConstraints   Checking constraint 'SecurityConstraint[MijnvfRealm]' against POST /services/somefunctionality --> true\n03 org.apache.catalina.realm.RealmBase.findSecurityConstraints   Checking constraint 'SecurityConstraint[MijnvfRealm]' against POST /services/somefunctionality --> true\n04 org.apache.catalina.authenticator.AuthenticatorBase.invoke Calling hasUserDataPermission()\n05 org.apache.catalina.realm.RealmBase.hasUserDataPermission   User data constraint already satisfied\n06 org.apache.catalina.authenticator.AuthenticatorBase.invoke Calling authenticate()\n07 org.apache.catalina.realm.CombinedRealm.authenticate Attempting to authenticate user [CN=cn, O=o, L=l, ST=st, C=c, SERIALNUMBER=00000001804415183000] with realm [org.apache.catalina.realm.UserDatabaseRealm]\n08 org.apache.catalina.realm.RealmBase.authenticate Authenticating client certificate chain\n09 org.apache.catalina.realm.RealmBase.authenticate  Checking validity for 'CN=cn, O=o, L=l, ST=st, C=c, SERIALNUMBER=00000001804415183000'\n10 org.apache.catalina.realm.RealmBase.authenticate  Checking validity for 'CN=cnCA, O=o, C=c'\n11 org.apache.catalina.realm.RealmBase.getPrincipal Got user name from X509 certificate: [CN=cn, O=o, L=l, ST=st, C=c, SERIALNUMBER=00000001804415183000]\n12 org.apache.catalina.realm.CombinedRealm.authenticate Authenticated user [CN=cn, O=o, L=l, ST=st, C=c, SERIALNUMBER=00000001804415183000] with realm [org.apache.catalina.realm.UserDatabaseRealm]\n13 org.apache.catalina.authenticator.AuthenticatorBase.register Authenticated 'CN=cn, O=o, L=l, ST=st, C=c, SERIALNUMBER=00000001804415183000' with type 'CLIENT_CERT'\n14 org.apache.catalina.authenticator.AuthenticatorBase.invoke Calling accessControl()\n15 org.apache.catalina.realm.RealmBase.hasResourcePermission   Checking roles GenericPrincipal[CN=cn, O=o, L=l, ST=st, C=c, SERIALNUMBER=00000001804415183000()]\n16 org.apache.catalina.realm.RealmBase.hasRole Username [CN=cn, O=o, L=l, ST=st, C=c, SERIALNUMBER=00000001804415183000] has role [correctUser]\n17 org.apache.catalina.realm.RealmBase.hasResourcePermission Role found:  correctUser\n18 org.apache.catalina.authenticator.AuthenticatorBase.invoke Successfully passed all security constraints\n\n\nLogging from Tomcat 9.0.62 (M-TLS fails, no/wrong user found)\n01 org.apache.catalina.authenticator.AuthenticatorBase.invoke Security checking request POST /speer/soap/services/somefunctionality\n02 org.apache.catalina.realm.RealmBase.findSecurityConstraints   Checking constraint 'SecurityConstraint[MijnvfRealm]' against POST /services/somefunctionality --> true\n03 org.apache.catalina.realm.RealmBase.findSecurityConstraints   Checking constraint 'SecurityConstraint[MijnvfRealm]' against POST /services/somefunctionality --> true\n04 org.apache.catalina.authenticator.AuthenticatorBase.invoke Calling hasUserDataPermission()\n05 org.apache.catalina.realm.RealmBase.hasUserDataPermission   User data constraint already satisfied\n06 org.apache.catalina.authenticator.AuthenticatorBase.invoke Calling authenticate()\n07 org.apache.catalina.realm.CombinedRealm.authenticate Attempting to authenticate user [CN=cn, O=o, L=l, ST=st, C=c, SERIALNUMBER=00000001804415183000] with realm [org.apache.catalina.realm.UserDatabaseRealm]\n08 org.apache.catalina.realm.RealmBase.authenticate Authenticating client certificate chain\n09 org.apache.catalina.realm.RealmBase.authenticate  Checking validity for 'CN=cn, O=o, L=l, ST=st, C=c, SERIALNUMBER=00000001804415183000'\n10 org.apache.catalina.realm.RealmBase.authenticate  Checking validity for 'CN=cnCA, O=o, C=c'\n11 org.apache.catalina.realm.RealmBase.getPrincipal Got user name from X509 certificate: [CN=cn, O=o, L=l, ST=st, C=c, OID.2.5.4.5=00000001804415183000]\n12 org.apache.catalina.realm.CombinedRealm.authenticate Failed to authenticate user [CN=cn, O=o, L=l, ST=st, C=c, SERIALNUMBER=00000001804415183000] with realm [org.apache.catalina.realm.UserDatabaseRealm]\n13 org.apache.catalina.authenticator.AuthenticatorBase.invoke Failed authenticate() test\n\n\nIf you look at line 11, in both logging you can see that \"OID.2.5.4.5\" is used in Tomcat 9.0.62 and \"SERIALNUMBER\" in Tomcat 9.0.60. While in all other instances \"SERIALNUMBER\" is used.\nBecause of this correct user can not be found. \n\nPossible workaround: is to add the \"OID.2.5.4.5\" version also to the \"tomcat-users.xml\" file (not tested yet, but I expect id to work). \n\nWe are running Tomcat in Docker and are using the \"tomcat:9-jdk11\" container as base image.\nWhen we reverted to the container using Tomcat 9.0.60 it worked again.\n\nPossible suspect is release 9.0.61, and the change in Coyote,\nhttps://tomcat.apache.org/tomcat-9.0-doc/changelog.html",
    "comments": [
      "(In reply to Maikel from comment #0)\n> Possible suspect is release 9.0.61, and the change in Coyote,\n> https://tomcat.apache.org/tomcat-9.0-doc/changelog.html\n\nI recommend you investigate this further.\n\nThe relevant change is not in the changelog I think:\nhttps://github.com/apache/tomcat/commit/38d2c138a102a793bce630056fbca7088b7e05a3\nhttps://github.com/apache/tomcat/commit/b21268dcebc3d470430227978caa4f168a3346d4\nIs this really equivalent in all cases ?",
      "Although, I haven't analyzed recent changes, the problem you see is different representations of the ASN.1 encoded subject DN.\n\nHere (https://github.com/apache/tomcat/blob/431f08b66e27411decb52e1333dd886cc181a854/java/org/apache/catalina/realm/RealmBase.java#L454-L455) it uses https://docs.oracle.com/javase/8/docs/api/javax/security/cert/X509Certificate.html#getIssuerDN-- which does not describe the format which is applied, but X509SubjectDnRetriever uses RFC 1779 (https://github.com/apache/tomcat/blob/431f08b66e27411decb52e1333dd886cc181a854/java/org/apache/catalina/realm/X509SubjectDnRetriever.java#L31) which is totally outdated. Moreover, depending on the X.500 Principal format you select Java maintains an internal map which OIDs can be reasonably mapped from ASN.1 to a string. Especially 2.5.4.5 is a total mess.\n\nI have a certificate processing application at work where I apply a custom formatting to properly canonicalize RFC 2253 formatted output with all possible OIDs Java will not map by default. I assume the codebase in Tomcat needs to be analyzed and apply similar. (My custom approach bases on the way OpenSSL handles DNs)",
      "(In reply to Remy Maucherat from comment #1)\n> (In reply to Maikel from comment #0)\n> > Possible suspect is release 9.0.61, and the change in Coyote,\n> > https://tomcat.apache.org/tomcat-9.0-doc/changelog.html\n> \n> I recommend you investigate this further.\n> \n> The relevant change is not in the changelog I think:\n> https://github.com/apache/tomcat/commit/38d2c138a102a793bce630056fbca7088b7e05a3\n> https://github.com/apache/tomcat/commit/b21268dcebc3d470430227978caa4f168a3346d4\n> Is this really equivalent in all cases ?\n\nTo help investigate this:\n\nNote that an implementation of org.apache.catalina.realm.X509UsernameRetriever that was changed by those commits is configurable, with \"X509UsernameRetrieverClassName\" attribute on a Realm.\n\nhttps://tomcat.apache.org/tomcat-9.0-doc/config/realm.html\n\nSo that you can configure your own.",
      "Thanks for the comments. Overall I would need a test certificate to see what each different method does. I don't know why getName(X500Principal.RFC1779) was used in X509UsernameRetriever instead of getName(X500Principal.RFC2253) or simply getName() (which simply uses X500Principal.RFC2253).\n\nAlternately, you can try to test by using X509UsernameRetrieverClassName as Konstantin said (thanks, great tip !).",
      "Thanks for the information, I did not know I could use X509UsernameRetrieverClassName to change the behavior. We where using the certificate functionality out of the box with only some changes in the config files.\n\nI now use the workaround by adding the \"OID.2.5.4.5\" version also in the  \"tomcat-users.xml\" file. That works.",
      "(In reply to Remy Maucherat from comment #1)\n> https://github.com/apache/tomcat/commit/\n> b21268dcebc3d470430227978caa4f168a3346d4\n\nMy guess is that the above patch will fix this issue.\n\nCan you please provide a copy of the certificate and we can double-check the behavior of getSubjectDN() vs getX500Principal().getName() vs getX500Principal().getName(X500Principal.RFC1779)?\n\nAlternatively, we could provide you with a simple Java utility to look at the cert and print those values.",
      "Actually, this ought to do the trick:\n\n\nimport java.security.cert.Certificate;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\n\nimport javax.security.auth.x500.X500Principal;\n\n\npublic class CertInfo {\n    public static void main(String[] args) throws Exception {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        Certificate cert = cf.generateCertificate(System.in);\n\n        if(cert instanceof X509Certificate) {\n            System.out.println(\"Certificate is X.509\");\n            X509Certificate xc = (X509Certificate)cert;\n\n            System.out.println(\"getSubjectDN: \" + xc.getSubjectDN());\n            System.out.println(\"getSubjectX500Principal.getName: \" + xc.getSubjectX500Principal().getName());\n            System.out.println(\"getSubjectX500Principal.getName(RFC1779): \" + xc.getSubjectX500Principal().getName(X500Principal.RFC1779));\n        }\n    }\n}",
      "Using your test, I can see that getName(RFC1779) formatting matches getSubjectDN, and RFC2253 does not.\n\nNow, with a certificate with more stuff inside, I get something where getSubjectDN returns EMAILADDRESS= and all the getName ones replace that with OID.1.2.840.113549.1.9.1=, which reproduces the bug. Replacing getSubjectDN with getSubjectX500Principal is simply not equivalent, so resolving the deprecation will require more effort (see comment 2 ;) ).",
      "However getSubjectX500Principal().toString() returns the same result as getSubjectDN().getName() (I did look at the JVM code to find options ;) ), so I will revert to using that since the idea was not to changes things.",
      "The fix will be in Tomcat 10.1.0-M15, 10.0.21, 9.0.63, 8.5.79.",
      "Thanks for the quick reply and fixing the issue."
    ],
    "creation_ts": "2022-04-12T09:07:51Z",
    "fixes": [
      66009
    ]
  },
  {
    "id": 64938,
    "summary": "response.setCharacterEncoding(null) should clear previous charset",
    "description": "I have a filter set response charset to UTF-8 globally, one of my servlets want remove charset encoding from response Content-Type, for example \nresponse.setCharacterEncoding(null);\nresponse.setContentType(\"application/wasm\");\nIt still generate invalid \"application/wasm;charset=UTF-8\" because \"response.setCharacterEncoding(null)\" is noop, currently there is no way to clear previous charset.\n\nhttps://github.com/apache/tomcat/blob/master/java/org/apache/coyote/Response.java#L502",
    "comments": [
      "Jetty is respect this\n\nhttps://github.com/eclipse/jetty.project/blob/jetty-10.0.x/jetty-server/src/main/java/org/eclipse/jetty/server/Response.java#L1000",
      "The behaviour of other Servlet containers is irrelevant. What matters is the Sevlet specification.\n\nYou could argue that the ServletResponse.setCharacterEncoding Javadoc does not permit null to be passed as the character set. Neither does it define the failure mode if an invalid character encoding is specified. This is one of the many areas where the spec could be better defined.\n\nOne workaround may be to define the default character encoding in web.xml with:\n\n<response-character-encoding>UTF-8</response-character-encoding>\n\nrather than via the filter. Although that won't help if some resources require UTF-8 to be set explicitly.\n\nAnother possible workaround is ServletResponse.reset().\n\nThe interplay of setLocale(), setContentType() and setChjaracterEncoding() along with getWriter() and the web.xml default encoding (and probably at least one other bit I have forgotten) means that this might not be as simple as it first looks.\n\nI can see the use case for being able to use null here so I'm planning on looking at this later today with a view to implementing it. I'll also see if we can get the Javadoc clarified that null undoes any previous call (assuming getWriter() hasn't been called etc.)",
      "According to the javadoc, null is probably not a valid value (it says: \"charset: a String specifying only the character set defined by IANA\", so \"null\" is obviously not one of these). Unlike other places, it is not specified to throw an IAE or something like that.",
      "The current Javadoc certainly implies null is not valid here but I can see how allowing it might be useful.\n\nI've opened https://github.com/eclipse-ee4j/servlet-api/issues/377\n\nSwitching to NEEDINFO as the way forward will be guided by how the spec project decides to clarify this.",
      "The spec project has provided clarification via updated Javadoc. Strictly that only applies to the next iteration of the Servlet spec but do I intend to look at applying this to current Tomcat versions.",
      "I've implemented the changes agreed in the Jakarta Servlet project for 10.0.x. They will be in 10.0.3 onwards.\n\nI have started a discussion on the dev@ list to determine if the changes should be back-ported and how configurable - if at all - they should be in earlier versions.",
      "Fixed in:\n- 10.0.x for 10.0.3 onwards\n- 9.0.x for 9.0.44 onwards\n- 8.5.x for 8.5.64 onwards"
    ],
    "creation_ts": "2020-11-27T08:43:54Z",
    "fixes": [
      64938
    ]
  },
  {
    "id": 57441,
    "summary": "EL Lambda expression in a JSP fails with The function incr must be used with a prefix when a default namespace is not specified",
    "description": "Run the following Lambda EL expression in a JSP \n\n${incr = x->x+1; incr(10)}\n\nfails with this exception,\n\nmessage /TestLambda.jsp (line: 59, column: 42) The function incr must be used with a prefix when a default namespace is not specified\n\ndescription The server encountered an internal error that prevented it from fulfilling this request.\n\nexception\n\norg.apache.jasper.JasperException: /TestLambda.jsp (line: 59, column: 42) The function incr must be used with a prefix when a default namespace is not specified\n\torg.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42)",
    "comments": [
      "Reproducible in 8.0.17.\n\nThe exception occurs during Validator$ValidateVisitor.validateFunctions() call.\n\nStacktrace in 8.0.17:\n\n org.apache.jasper.JasperException: /test.jsp (line: 1, column: 9) The function incr must be used with a prefix when a default namespace is not specified\n\tat org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:41)\n\tat org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:275)\n\tat org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:107)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor$1FVVisitor.visit(Validator.java:1585)\n\tat org.apache.jasper.compiler.ELNode$Function.accept(ELNode.java:139)\n\tat org.apache.jasper.compiler.ELNode$Nodes.visit(ELNode.java:214)\n\tat org.apache.jasper.compiler.ELNode$Visitor.visit(ELNode.java:256)\n\tat org.apache.jasper.compiler.ELNode$Root.accept(ELNode.java:61)\n\tat org.apache.jasper.compiler.ELNode$Nodes.visit(ELNode.java:214)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.validateFunctions(Validator.java:1607)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.prepareExpression(Validator.java:1612)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:750)\n\tat org.apache.jasper.compiler.Node$ELExpression.accept(Node.java:950)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2434)\n\tat org.apache.jasper.compiler.Node$Root.accept(Node.java:464)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)\n\tat org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1846)\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:217)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:356)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:336)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:323)\n\tat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:570)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:356)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:396)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:340)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:725)",
      "I think it is time to ditch Jasper's partial EL parser and use o.a.el.lang.ExpressionBuilder.createNode() to fully parse the EL with a 'proper' EL implementation and then process those nodes.\n\nThe down side is that I think this would be the first thing to make Jasper depend on Tomcat's EL implementation rather than any EL implementation. Users would still be free to use another EL impl at runtime - Jasper would just always use Tomcat's impl directly so it can access the parsed nodes. (I need to check the dependency issues. The poms already show a dependency here.)\n\nThe upside should be an end to the steady stream of bugs with every new major release as the various new EL features are found to break the simple EL parsing Jasper does. A side benefit is deleting more code and I'm always happy when I can provide the same or better functionality with less code.",
      "Is it at all possible to reliably validate functions at compile time?\n\nMaybe whitelist functions that have name only with no prefix?\n\n\nBTW, it is possible to use javax.el.ImportHandler.importStatic() to declare a function by importing a static method of a class.  An example of manipulating ImportHandler at run time is in bug 57142.  If it is manipulated at run time, it means that the information is not available at compile time to perform validation.\n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=57142#c1",
      "(In reply to Konstantin Kolinko from comment #3)\n> Is it at all possible to reliably validate functions at compile time?\n\nYou are right. As of EL 3.0 this is no longer possible.\n\n> Maybe whitelist functions that have name only with no prefix?\n\nI think that is the only option at this point. In fact, I can't see any other option that would work because of the point you make below:\n\n> BTW, it is possible to use javax.el.ImportHandler.importStatic() to declare\n> a function by importing a static method of a class.  An example of\n> manipulating ImportHandler at run time is in bug 57142.  If it is\n> manipulated at run time, it means that the information is not available at\n> compile time to perform validation.\n> \n> https://issues.apache.org/bugzilla/show_bug.cgi?id=57142#c1\n\nHmm. If we have no choice but to whitelist functions with no prefix then there might not be a need for the switch to the full EL parser.\n\nI think it is worth raising this with the JSP maint lead. I'll do that shortly.",
      "Fixed by whitelisting function names without a namespace. I have a query in the the JSP maintenance lead in case an alternative approach is decided."
    ],
    "creation_ts": "2015-01-14T04:21:20Z",
    "fixes": [
      57441
    ]
  },
  {
    "id": 45195,
    "summary": "Possible regression issue with HttpSession.getAtttribute()",
    "description": "We just upgraded from Tomcat 5.0.x to 5.5.26.  In Tomcat 5.0.x, the following code returned NULL to obj:\n\nHttpSession session = request.getSession(true);\nObject obj = session.getAttribute(null);\n\nIn Tomcat 5.5.26, that same code raises this exception:\n\njava.lang.NullPointerException\njava.util.Hashtable.get(Unknown Source)\norg.apache.catalina.session.StandardSession.getAttribute(StandardSession.java:1024) org.apache.catalina.session.StandardSessionFacade.getAttribute(StandardSessionFacade.java:110) NewServlet.processRequest(NewServlet.java:29) NewServlet.doGet(NewServlet.java:52) javax.servlet.http.HttpServlet.service(HttpServlet.java:690) javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\n\nI know how to code around it, but doesn't this qualify as a bug, at least for regression purposes?\n\nFYI: I'm using JDK 5.",
    "comments": [
      "The spec is non-specific in this case.\n\nYou could argue this either way but the fix should be trivial. I'll take a look.",
      "This has been fixed in trunk and proposed for 6.0.x and 5.5.x\n\nThanks for the report.",
      "This has been fixed in 6.0.x and will be included in 6.0.17 onwards.",
      "This has been fixed in 5.5.x and will be included in 5.5.27 onwards."
    ],
    "creation_ts": "2008-06-12T11:59:07Z",
    "fixes": [
      45195
    ]
  },
  {
    "id": 52328,
    "summary": "Massive garbage production observed when using the response writer",
    "description": "In our application we used to use Tomcat 5, by writing our content directly to the response writer in our servlet:\n\nWriter w = response.getWriter();\nw.append(...)\n\n\nWe have regularly measured performance of our application under stress with multiple simultaneous requests per second.\n\nWe recently upgraded to Tomcat 7, and immediately observed a performance degradation of 10% on the request roundtrip on the same machine and the same tests, compared to our application deployed on Tomcat 5.\n\nProfiling with JProfiler showed that we got massive amount of transient objects {{java.nio.HeapCharBuffer}} produced - 400Mb+ within a few minutes.\n\nThe way we are writing the response is by multiple statements of {{append}} of small strings or single chars, which used to work properly. For experiment, we wrapped the response writer with a {{BufferedWriter}} with a buffer of 64k. This brought our application's performance back to normal.\n\nWe see this as either a:\n- anti-pattern usage since Tomcat 6/7, in which case please provide some documentation about that.\n- bug in the C2BConverter that is applied per every call to the CoyoteWriter write methods, which generates the garbage buffers per every call.\n\nWe know that the response stream has a 8k buffer by default. Nevertheless, this buffer comes after the encoding step and as such it is too late to help with the garbage. Perhaps Tomcat can buffer before it encodes?\n\nStill, so much transient objects for just a pattern of eligible use of the servlet API seems a bug to me.",
    "comments": [
      "Some more information why we did what we did to work around this, and possibly hint how this can be resolved inside Tomcat: the documentation at \nhttp://docs.oracle.com/javase/6/docs/api/java/io/OutputStreamWriter.html\nstates there to wrap in a buffered writer in order to \"to avoid frequent converter invocations\", which have a cost. In this case, the observed garbage.",
      "r411577 looks to be the commit the triggered this issue",
      "Looking at this some more, I think we'll need to be careful around recycling, resetting and flushing but the most efficient way to fix this is to remove the calls to conv.flush() after every write. The C2BConvertor already has a buffer, so lets use it.\n\nI'll start looking at a patch along these lines and doing some testing.",
      "(In reply to comment #3)\n> the most efficient way to fix this is to remove the\n> calls to conv.flush() after every write. The C2BConvertor already has a buffer,\n> so lets use it.\n\nInteresting, but maybe cut 7.0.24 first? The change sounds risky so it will need some time to review.\n\nI do not see what flush() calls you are talking about. Maybe that will be more clear from the patch.",
      "Created attachment 28132\nInitial ideas\n\nMy initial idea (attached) was quite simple. There isn't the buffering I thought there was in the Converter so there is scope to add some buffering and further improve performance.",
      "Forgot to add the performance numbers for adding 100,000 single characters through a Writer.\nBefore\n129ms without wrapping the Writer in a BufferedWriter\n 37ms with wrapping the Writer in a BufferedWriter\n\nAfter\n77ms without wrapping\n28ms with wrapping\n\nI'm still looking at the best place to insert a Buffer before the conversion.",
      "If I insert a Buffer before the converter then the figures drop to:\n20ms without wrapping\n7ms with wrapping\n\nClearly the CoyoteWriter has some in-built overhead that adding a Buffer helps with. I don't want to provide a Buffer inside CoyoteWriter as that adds more complexity that I want to deal with right now.",
      "That initial patch is no good. It triggers a bunch of unit test failures. I am working on an improved patch now.",
      "Unit tests now work on trunk. I'm just running the TCK before I look at back-porting it.",
      "JSP and Servlet TCK pass for trunk (apart from the Servlet signature tests that are expected to fail since some changes have already been made for Servlet 3.1).\n\nI'll look at back-porting these tomorrow.\n\nNikolay,\nWhat are the chances of you being able to test your app with these changes? I can provide a snapshot release build if necessary.",
      "Yes, Mark, we can test it pretty quick. If you would provide us with a patched distribution package, we will test:\n- Query response in our application (having removed our buffering wrapper) deployed in the patched Tomcat.\n- Memory consumption (whether we get too many transient objects of the originally observed type).\n\nCheers,\n  Nikolay",
      "Excellent. I'll put a dev build up on my people.apache.org space and provide a link when it is available.\n\nFor reference, both the flushing changes and adding an internal buffer a[ppear to help performance in all cases. Here are some figures from the latest version of the test case which I'll commit shortly:\n\nTrunk without internal buffer but with flushing patch\nWrite length:      1, Buffered: n, Time: 86143369ns\nWrite length:      1, Buffered: y, Time: 18922557ns\nWrite length:     10, Buffered: n, Time:  4281841ns\nWrite length:     10, Buffered: y, Time:  1817266ns\nWrite length:    100, Buffered: n, Time:  1687881ns\nWrite length:    100, Buffered: y, Time:  1185908ns\nWrite length:   1000, Buffered: n, Time:  1243862ns\nWrite length:   1000, Buffered: y, Time:  1160367ns\nWrite length:  10000, Buffered: n, Time:  1147934ns\nWrite length:  10000, Buffered: y, Time:  1281448ns\nWrite length: 100000, Buffered: n, Time:  1204381ns\nWrite length: 100000, Buffered: y, Time:  1218129ns\n\n\nTrunk with internal buffer and flushing patch\nWrite length:      1, Buffered: n, Time: 27663008ns\nWrite length:      1, Buffered: y, Time: 15468331ns\nWrite length:     10, Buffered: n, Time:  1718582ns\nWrite length:     10, Buffered: y, Time:  1938994ns\nWrite length:    100, Buffered: n, Time:  1110883ns\nWrite length:    100, Buffered: y, Time:  1233152ns\nWrite length:   1000, Buffered: n, Time:   933836ns\nWrite length:   1000, Buffered: y, Time:  1259017ns\nWrite length:  10000, Buffered: n, Time:  1024246ns\nWrite length:  10000, Buffered: y, Time:  1168732ns\nWrite length: 100000, Buffered: n, Time:  1015159ns\nWrite length: 100000, Buffered: y, Time:  1074527ns\n\n7.0,x with no patches\nWrite length:      1, Buffered: n, Time: 137147272ns\nWrite length:      1, Buffered: y, Time:  18676195ns\nWrite length:     10, Buffered: n, Time:  10390213ns\nWrite length:     10, Buffered: y, Time:   2038188ns\nWrite length:    100, Buffered: n, Time:   2008351ns\nWrite length:    100, Buffered: y, Time:   1200196ns\nWrite length:   1000, Buffered: n, Time:   1261317ns\nWrite length:   1000, Buffered: y, Time:   1217747ns\nWrite length:  10000, Buffered: n, Time:   1117065ns\nWrite length:  10000, Buffered: y, Time:   1081037ns\nWrite length: 100000, Buffered: n, Time:   1471004ns\nWrite length: 100000, Buffered: y, Time:   1134857ns",
      "Numbers look great! Can't wait to try it out. \n\nIf all well, we would appreciate information about planning/estimation when to expect a 7.0.x release with the patch inside.",
      "Give it 30 minutes and there should be a full Tomcat 7 distribution (src, bin, docs) uploaded to:\nhttp://people.apache.org/~markt/dev/tomcat-7/v7.0.24-r1230243/\n\nPlease note the usual caveats for builds such as this:\n- This is *NOT* an ASF release.\n- This is a development build intended solely for testing this issue\n- There has been zero testing of this build\n\nRegarding a 7.0.24 release. I intend to roll it just as soon as the open 7.0.x bugs are all resolved . How long that takes depends on how many bugs are raised, how hard they are to fix and how much life gets in the way.\n\nHint: The more help there is investigating and fixing the currently open 7.0.x bugs (excluding enhancements) the quicker there will be a 7.0.24 release.\n\nI am marking this as fixed as is usual once a patch has been applied to the release branch. If any issues are discovered, we can re-open the issue.",
      "Regarding the artifact, we will test it. Do I understand correctly that this artifact contains a current 7.0.24 (candidate) + the fix?\n\nWe will test this to the best of our procedure. For a clean cut (no noise from other stuff) relative performance measurement however, ideally we would have preferred to test a stable tag (e.g., 7.0.23) + the fix. Nevertheless, the degradation before showed quite a big number, so I expect to confirm a clear improvement from this fix.\n\nThe fix is not critical for our product - we have a sufficiently good workaround, although the additional flushing fix will further improve the situation. I'll note to watch for the 7.0.24 so we update to it in a subsequent release of our product.",
      "(In reply to comment #15)\n> Regarding the artifact, we will test it. Do I understand correctly that this\n> artifact contains a current 7.0.24 (candidate) + the fix?\n\nCorrect.\n\n> We will test this to the best of our procedure. For a clean cut (no noise from\n> other stuff) relative performance measurement however, ideally we would have\n> preferred to test a stable tag (e.g., 7.0.23) + the fix. Nevertheless, the\n> degradation before showed quite a big number, so I expect to confirm a clear\n> improvement from this fix.\n\nFair point. Reviewing the  for 7.0.24 changelog, there are quite a few changes but none that jump out as having a performance impact so the results should be good enough. Let us know how you get on.",
      "Ok, so we confirm that our application + the patched tomcat 7 is back to the levels of performance of our application and the tomcat 5. We did not see any functional regressions either, so from our side it looks good. Our current workaround for the unpatched tomcat 7 yields the same numbers, so we are safe until a release comes out.\n\nThanks for the quick reaction!\n\nYou may want to add to the general pre-release QA procedure, some performance test similar to the unit tests you made, just to avoid bugs like this drag their dirty feet through 2 major releases :D."
    ],
    "creation_ts": "2011-12-14T11:03:38Z",
    "fixes": [
      52328
    ]
  },
  {
    "id": 42944,
    "summary": "plus sign in url-pattern in servlet-mapping does not work",
    "description": "Hi all,\n\nI had servlet-mappings that contain plus signs (they were created by JspC), e.g.:\n\n    <servlet-mapping>\n      <servlet-name>org.apache.jsp.suchergebnis_005fbu_002bbb_jsp</servlet-name>\n      <url-pattern>/suchergebnis_bu+bb.jsp</url-pattern>\n    </servlet-mapping>\n\nThis mapping does not work (the referred class is present)! When I change the\noriginal file names of the JSPs such that the plus signs are replaced by a minus\nsigns the following mapping results:\n\n    <servlet-mapping>\n      <servlet-name>org.apache.jsp.suchergebnis_005fbu_002dbb_jsp</servlet-name>\n      <url-pattern>/suchergebnis_bu-bb.jsp</url-pattern>\n    </servlet-mapping>\n\nNow the mapping works.\n\nTherefore I assume that there is a bug in handling servlet mappings with plus\nsigns in their url pattern.",
    "comments": [
      "This has been fixed in svn for 5.5.x and 6.0.x and will be included in the next\nrelease of each."
    ],
    "creation_ts": "2007-07-20T09:32:19Z",
    "fixes": [
      42944
    ]
  },
  {
    "id": 54338,
    "summary": "Class cast exception in tagPlugin Set generated code",
    "description": "Created attachment 29786\nTest case for \"Set\"\n\nIt uses \"Class.cast\" to convert an object to a given class in the code generated by tagPlugin \"Set\".\n\nIt causes an exception when the value is primitive type,\nHere is a sample,\n\nCaused by: java.lang.ClassCastException: Cannot cast class java.lang.Integer to int\n        at java.lang.Class.cast(Class.java:1711)\n        at org.apache.jsp.WEB_002dINF.views.error_jsp._jspService(error_jsp.java:108)\n        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)\n        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:432)\n        ... 52 more\n\n\nThe correct way is to use \"ELSupport.coerceToType\".\nAttached a patch and test case for this issue.",
    "comments": [
      "Created attachment 29787\nPatch for Set.java",
      "Is it appropriate to perform a \"coerce\" instead of a simple cast? (I don't know whether the spec covers this case). If the only problem is primitive types, I think this can be solved without the complexity of formal coercion.",
      "Yes.\n\nThe problem isn't only from primitive types.\nPerform a \"coerce\" is a better choice.\n\n(In reply to comment #2)\n> Is it appropriate to perform a \"coerce\" instead of a simple cast? (I don't\n> know whether the spec covers this case). If the only problem is primitive\n> types, I think this can be solved without the complexity of formal coercion.",
      "It is not a question of what is appropriate or what is best, the JSTL specification requires that an EL coerce is used.\n\nI'm looking at this now. The test case is going to need some work.",
      "Many thanks for the patch. It has been applied to trunk and 7.0.x and will be included in 7.0.35 onwards.\n\nI added a different test case to trunk that tests that the coercion works rather than tests the source code for a particular string. Note that the trunk tests for the tag plug-ins depend on the new resources implementation so they have not been back-ported to 7.0.x."
    ],
    "creation_ts": "2012-12-21T12:00:09Z",
    "fixes": [
      54338
    ]
  },
  {
    "id": 56611,
    "summary": "No need to call method.isAnnotationPresent() then call method.getAnnotation.",
    "description": "Created attachment 31702\norg.apache.catalina.core.DefaultInstanceManager\n\nJust call method.getAnnotation(EJB.class) once, since isAnnotationPresent is also implmented by calling getAnnotation. \n\njava.lang.reflect.AccessibleObject:\n    public boolean isAnnotationPresent(\n        Class<? extends Annotation> annotationClass) {\n        return getAnnotation(annotationClass) != null;\n    }",
    "comments": [
      "Thanks for the patch.\n\nIt has been applied )with slight tweaks for formatting) to 8.0.x for 8.0.9 onwards and to 7.0.x for 7.0./55 onwards. I also fixed all the additional instances of the same problem elsewhere in the code base.",
      "I fixed several other usages of isAnnotationPresent() method, missed by Mark.\nIt will be in 8.0.10, 7.0.55 onwards."
    ],
    "creation_ts": "2014-06-10T08:36:41Z",
    "fixes": [
      56611
    ]
  },
  {
    "id": 64509,
    "summary": "Rfc6265CookieProcessor mishandles commas in $Version=1 cookie header",
    "description": "Created attachment 37299\ntest code\n\n(Tested in both 9.0.33 and 9.0.36, but 9.0.36 wasn't available in the drop-down when I opened this bug report.)\n\nRfc6265CookieProcessor tries to accept a comma as a cookie pair separator for $Version=1 cookie headers, but it gets it wrong. It also behave differently from the legacy parser. For this Cookie: header value\n\n $Version=1;first=1,second=2;third=3;case=justCOMMA\n\nthe new parser loses cookies \"first\" and \"second\" (logs an invalid cookie warning). The legacy parser does not.\n\nHere is a small test program (also attached) that parses headers with both processors. The test values include both \"$Version=1\" cookie headers and the same with no version attribute. I believe the RFC-6265 parsing is not trying to honor the comma, which is fair enough.\n\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\npackage aside;\n\nimport org.apache.tomcat.util.http.LegacyCookieProcessor;\nimport org.apache.tomcat.util.http.MimeHeaders;\nimport org.apache.tomcat.util.http.Rfc6265CookieProcessor;\nimport org.apache.tomcat.util.http.ServerCookie;\nimport org.apache.tomcat.util.http.ServerCookies;\n\npublic class TC9CookieParsingTest {\n  private static final String[] cookieHeaderValues = {\n      \"$Version=1;first=1;second=2;third=3;case=justSEMI\",\n      \"first=1;second=2;third=3;case=justSEMI\",\n      \"$Version=1;first=1,second=2;third=3;case=justCOMMA\",\n      \"first=1,second=2;third=3;case=justCOMMA\",\n      \"$Version=1;first=1,;second=2;third=3;case=COMMAthenSEMI\",\n      \"first=1,;second=2;third=3;case=COMMAthenSEMI\",\n      \"$Version=1;first=1;,second=2;third=3;case=SEMIthenCOMMA\",\n      \"first=1;,second=2;third=3;case=SEMIthenCOMMA\",\n  };\n  public static void main(String[] args) {\n    for (final String cookieHeaderValue: TC9CookieParsingTest.cookieHeaderValues) {\n      TC9CookieParsingTest.parseWithRfc6265Parser(cookieHeaderValue);\n      TC9CookieParsingTest.parseWithLegacyParser(cookieHeaderValue);\n    }\n  }\n\n  private static void parseWithRfc6265Parser(final String cookieHeaderValue) {\n    final MimeHeaders headers = new MimeHeaders();\n    headers.addValue(\"Cookie\").setString(cookieHeaderValue);\n    final ServerCookies serverCookies = new ServerCookies(10);\n    final Rfc6265CookieProcessor processor = new Rfc6265CookieProcessor();\n    processor.parseCookieHeader(headers, serverCookies);\n    final int howMany = serverCookies.getCookieCount();\n    System.out.println(\"\\n====================\\nRfc6265CookieProcessor 'Cookie: \" + cookieHeaderValue + \"'\");\n    for (int ii=0; ii<howMany; ++ii) {\n      final ServerCookie sc = serverCookies.getCookie(ii);\n      System.out.println(ii + \" cookie: '\" + sc.getName() + \"' = '\" + sc.getValue() + \"'\");\n    }\n  }\n\n  private static void parseWithLegacyParser(final String cookieHeaderValue) {\n    final MimeHeaders headers = new MimeHeaders();\n    headers.addValue(\"Cookie\").setString(cookieHeaderValue);\n    final ServerCookies serverCookies = new ServerCookies(10);\n    final LegacyCookieProcessor processor = new LegacyCookieProcessor();\n    processor.parseCookieHeader(headers, serverCookies);\n    final int howMany = serverCookies.getCookieCount();\n    System.out.println(\"--------------------\\nLegacyCookieProcessor 'Cookie: \" + cookieHeaderValue + \"'\");\n    for (int ii=0; ii<howMany; ++ii) {\n      final ServerCookie sc = serverCookies.getCookie(ii);\n      System.out.println(ii + \" cookie: '\" + sc.getName() + \"' = '\" + sc.getValue() + \"'\");\n    }\n  }\n}\n\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\nHere is the output from a run of the test program:\n\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n====================\nRfc6265CookieProcessor 'Cookie: $Version=1;first=1;second=2;third=3;case=justSEMI'\n0 cookie: 'first' = '1'\n1 cookie: 'second' = '2'\n2 cookie: 'third' = '3'\n3 cookie: 'case' = 'justSEMI'\n--------------------\nLegacyCookieProcessor 'Cookie: $Version=1;first=1;second=2;third=3;case=justSEMI'\n0 cookie: 'first' = '1'\n1 cookie: 'second' = '2'\n2 cookie: 'third' = '3'\n3 cookie: 'case' = 'justSEMI'\n\n====================\nRfc6265CookieProcessor 'Cookie: first=1;second=2;third=3;case=justSEMI'\n0 cookie: 'first' = '1'\n1 cookie: 'second' = '2'\n2 cookie: 'third' = '3'\n3 cookie: 'case' = 'justSEMI'\n--------------------\nLegacyCookieProcessor 'Cookie: first=1;second=2;third=3;case=justSEMI'\n0 cookie: 'first' = '1'\n1 cookie: 'second' = '2'\n2 cookie: 'third' = '3'\n3 cookie: 'case' = 'justSEMI'\n\n====================\nRfc6265CookieProcessor 'Cookie: $Version=1;first=1,second=2;third=3;case=justCOMMA'\n0 cookie: 'third' = '3'\n1 cookie: 'case' = 'justCOMMA'\n--------------------\nLegacyCookieProcessor 'Cookie: $Version=1;first=1,second=2;third=3;case=justCOMMA'\n0 cookie: 'first' = '1'\n1 cookie: 'second' = '2'\n2 cookie: 'third' = '3'\n3 cookie: 'case' = 'justCOMMA'\n\n====================\nRfc6265CookieProcessor 'Cookie: first=1,second=2;third=3;case=justCOMMA'\n0 cookie: 'third' = '3'\n1 cookie: 'case' = 'justCOMMA'\n--------------------\nLegacyCookieProcessor 'Cookie: first=1,second=2;third=3;case=justCOMMA'\n0 cookie: 'first' = '1'\n1 cookie: 'second' = '2'\n2 cookie: 'third' = '3'\n3 cookie: 'case' = 'justCOMMA'\n\n====================\nRfc6265CookieProcessor 'Cookie: $Version=1;first=1,;second=2;third=3;case=COMMAthenSEMI'\n0 cookie: 'first' = '1'\n1 cookie: 'second' = '2'\n2 cookie: 'third' = '3'\n3 cookie: 'case' = 'COMMAthenSEMI'\n--------------------\nLegacyCookieProcessor 'Cookie: $Version=1;first=1,;second=2;third=3;case=COMMAthenSEMI'\n0 cookie: 'first' = '1'\n1 cookie: 'second' = '2'\n2 cookie: 'third' = '3'\n3 cookie: 'case' = 'COMMAthenSEMI'\n\n====================\nRfc6265CookieProcessor 'Cookie: first=1,;second=2;third=3;case=COMMAthenSEMI'\n0 cookie: 'second' = '2'\n1 cookie: 'third' = '3'\n2 cookie: 'case' = 'COMMAthenSEMI'\n--------------------\nLegacyCookieProcessor 'Cookie: first=1,;second=2;third=3;case=COMMAthenSEMI'\n0 cookie: 'first' = '1'\n1 cookie: 'second' = '2'\n2 cookie: 'third' = '3'\n3 cookie: 'case' = 'COMMAthenSEMI'\n\n====================\nRfc6265CookieProcessor 'Cookie: $Version=1;first=1;,second=2;third=3;case=SEMIthenCOMMA'\n0 cookie: 'first' = '1'\n1 cookie: 'third' = '3'\n2 cookie: 'case' = 'SEMIthenCOMMA'\n--------------------\nLegacyCookieProcessor 'Cookie: $Version=1;first=1;,second=2;third=3;case=SEMIthenCOMMA'\n0 cookie: 'first' = '1'\n1 cookie: 'second' = '2'\n2 cookie: 'third' = '3'\n3 cookie: 'case' = 'SEMIthenCOMMA'\n\n====================\nRfc6265CookieProcessor 'Cookie: first=1;,second=2;third=3;case=SEMIthenCOMMA'\n0 cookie: 'first' = '1'\n1 cookie: 'third' = '3'\n2 cookie: 'case' = 'SEMIthenCOMMA'\n--------------------\nLegacyCookieProcessor 'Cookie: first=1;,second=2;third=3;case=SEMIthenCOMMA'\n0 cookie: 'first' = '1'\n1 cookie: 'second' = '2'\n2 cookie: 'third' = '3'\n3 cookie: 'case' = 'SEMIthenCOMMA'\n\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\nI've had a quick look at the parser code. I suspect the problem lines in org.apache.tomcat.util.http.parser.Cookie, near line 274:\n\n            skipResult = skipByte(bb, COMMA_BYTE);\n            if (skipResult == SkipResult.FOUND) {\n                parseAttributes = false;\n            }\n            skipResult = skipByte(bb, SEMICOLON_BYTE);\n            if (skipResult == SkipResult.EOF) {\n                parseAttributes = false;\n                moreToProcess = false;\n            } else if (skipResult == SkipResult.NOT_FOUND) {\n                skipInvalidCookie(bb);\n                continue;\n            }\n\nEven though we've just found the COMMA_BYTE, it's still a failure if we don't then fint the SEMICOLON_BYTE. I suspect that wanted to be an \"else if\", but since the parser is kind of complicated I hesitate to claim that's a definitive fix. It might break some other edge case.",
    "comments": [
      "Thanks for the reminder. I've added 9.0.36 to the list of versions and updated the version for this issue. I'll look at the detail of the report next.",
      "Fixed in:\n- master for 10.0.0-M7 onwards\n- 9.0.x for 9.0.37 onwards\n- 8.5.x for 8.5.57 onwards\n\n7.0.x is not affected.\n\nThanks for the report. You were right about the location of the bug. There were a couple of other places the same bug was present. I've fixed them an added a parameterised test case that should test all combinations.",
      "Thanks for the quick action on this."
    ],
    "creation_ts": "2020-06-09T20:26:23Z",
    "fixes": [
      64509
    ]
  },
  {
    "id": 69471,
    "summary": "CloseNowException logged in ApplicationDispatcher",
    "description": "I'm using a connector with HTTP/2 enabled in Tomcat 10.1.33 and sometimes we receive a RST_STREAM from the client before we have written the response fully. That will cause an error to be logged by the ApplicationDispatcher, but isn't this a valid scenario that shouldn't be logged as an error?\n\t\t\nWhen the HTTP/2 stream receives a RST_STREAM (indicating that the client is no longer interested in the response) then the stream is immediately closed. But since the request is still going on, writing to that closed stream will cause org.apache.coyote.http2.Stream to throw a CloseNowException with cause StreamException: \"Connection [e4cc], Stream [129], This stream is in state [CLOSED_RST_RX] and is not writable\"\n\nThe ApplicationDispatcher.invoke(...) will then log this error since CloseNowException extends IOException.\n\nMy question is, should this be logged as an error or should it instead be handle similar to a BadRequestException and ClientAbortException and not be logged?\n\nCan this in ApplicationDispatcher.invoke(...):\n\n} catch (BadRequestException e) {\n\tioException = e;\n} catch (IOException e) {\n\twrapper.getLogger().error(sm.getString(\"applicationDispatcher.serviceException\", wrapper.getName()), e);\n\tioException = e;\n}\n\nbe changed to this:\n\n} catch (BadRequestException e) {\n\tioException = e;\n} catch (CloseNowException e) {\n\tioException = e;\n} catch (IOException e) {\n\twrapper.getLogger().error(sm.getString(\"applicationDispatcher.serviceException\", wrapper.getName()), e);\n\tioException = e;\n}\n\nOr will that cause any other problems? Is there other cases where a CloseNowException should be logged in ApplicationDispatcher?\n\nAlso, I can see that in StandardWrapperValve that both BadRequestException and CloseNowException are logged at debug level, while IOException on error level. So making this change in ApplicationDispatcher would make it more consistent with how StandardWrapperValve handles CloseNowException.\n\nAny thoughts?\n\nThis is the full stacktrace logged:\n\nServlet.service() for servlet [default] threw exception:\norg.apache.coyote.CloseNowException: Connection [e4cc], Stream [129], This stream is in state [CLOSED_RST_RX] and is not writable\n\tat org.apache.coyote.http2.Stream.doStreamCancel(Stream.java:304)\n\tat org.apache.coyote.http2.Http2UpgradeHandler.reserveWindowSize(Http2UpgradeHandler.java:946)\n\tat org.apache.coyote.http2.Stream$StreamOutputBuffer.flush(Stream.java:1120)\n\tat org.apache.coyote.http2.Stream$StreamOutputBuffer.doWrite(Stream.java:1035)\n\tat org.apache.coyote.http2.Http2OutputBuffer.doWrite(Http2OutputBuffer.java:57)\n\tat org.apache.coyote.Response.doWrite(Response.java:633)\n\tat org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:329)\n\tat org.apache.catalina.connector.OutputBuffer.appendByteArray(OutputBuffer.java:746)\n\tat org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:667)\n\tat org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:376)\n\tat org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:354)\n\tat org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:103)\n\tat org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:95)\n\tat org.apache.catalina.servlets.DefaultServlet.serveResource(DefaultServlet.java:1076)\n\tat org.apache.catalina.servlets.DefaultServlet.doGet(DefaultServlet.java:508)\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)\n\tat org.apache.catalina.servlets.DefaultServlet.service(DefaultServlet.java:498)\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:632)\n\tat org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:408)\n\tat org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:303)\n\tat org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:267)\n\tat org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler.handleRequest(DefaultServletHttpRequestHandler.java:130)\n\tat org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.catalina.filters.HttpHeaderSecurityFilter.doFilter(HttpHeaderSecurityFilter.java:129)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:598)\n\tat org.apache.catalina.valves.rewrite.RewriteValve.invoke(RewriteValve.java:543)\n\tat org.apache.catalina.valves.SSLValve.invoke(SSLValve.java:193)\n\tat org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:731)\n\tat org.apache.catalina.valves.RequestFilterValve.process(RequestFilterValve.java:355)\n\tat org.apache.catalina.valves.RemoteAddrValve.invoke(RemoteAddrValve.java:54)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n\tat ch.qos.logback.access.tomcat.LogbackValve.invoke(LogbackValve.java:267)\n\tat org.apache.catalina.valves.SSLValve.invoke(SSLValve.java:193)\n\tat org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:731)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\n\tat org.apache.coyote.http2.StreamProcessor.service(StreamProcessor.java:469)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\n\tat org.apache.coyote.http2.StreamProcessor.process(StreamProcessor.java:101)\n\tat org.apache.coyote.http2.StreamRunnable.run(StreamRunnable.java:35)\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\nCaused by: org.apache.coyote.http2.StreamException: Connection [e4cc], Stream [129], This stream is in state [CLOSED_RST_RX] and is not writable\n\tat org.apache.coyote.http2.Stream.doStreamCancel(Stream.java:296)\n\t... 96 common frames omitted",
    "comments": [
      "Aligning ApplicationDispatcher with StandardWrapperValve seems reasonable to me. The message will still be logged if folks need it but the majority of the exceptions are going to be caused by the client going away.",
      "Fixed in:\n- 11.0.x for 11.0.2 onwards\n- 10.1.x for 10.1.34 onwards\n-  9.0.x for  9.0.98 onwards"
    ],
    "creation_ts": "2024-11-22T15:58:48Z",
    "fixes": [
      69471
    ]
  },
  {
    "id": 60043,
    "summary": "suspectTimeout does not work as expected without removeAbandoned=\"true\" which does not match its documentation",
    "description": "Already posted this to the mailinglist here:\n\nhttp://tomcat.10.x6.nabble.com/Question-about-suspectTimeout-property-of-pool-configuration-possible-Bug-does-only-work-with-removed-td5054070.html\n\nIf you configure the pool to have:\n\n logAbandoned=\"true\"\n suspectTimeout=\"120\"\n\nset it does not report leaked connections even if you got leaked connections hanging in the busy queue.\nTo me this looks like a bug.\n\nDocs tell this:\n\n\n  Similar to to the removeAbandonedTimeout value but instead of treating\n  the connection as abandoned, and potentially closing the connection,\n  this simply logs the warning if logAbandoned is set to true.\n\n\nLooking at the code however the suspect() method of a connection is only called from the PoolCleaner thread in the \"checkAbandoned()\" method.\n\nBut before calling that one it does check the pool configuration like this:\n\nif (pool.getPoolProperties().isRemoveAbandoned())\n                        pool.checkAbandoned();\n\nbut i don't want to configure removeAbandoned to true - i just want to get the suspect working like expected from reading the documentation of the property without actually removing the leaked connections.\n\nImho this needs to be changed - either the condition here is extended to look for suspectTimeout or the suspect is called in an extra method - i don't care which one is used ;).",
    "comments": [
      "Thanks for the report.\nThe fix will be in :\n- 9.0.x for 9.0.0.M10 onwards\n- 8.5.x for 8.5.5 onwards\n- 8.0.x for 8.0.37 onwards\n- 7.0.x for 7.0.71 onwards"
    ],
    "creation_ts": "2016-08-25T11:11:45Z",
    "fixes": [
      60043
    ]
  },
  {
    "id": 49929,
    "summary": "AJP APR connector to mod_jk can result in SEND_BODY_CHUNK message after END_RESPONSE message",
    "description": "Hi,\n\nEnvironment:\nOS: RHEL 5.5 (fully patched)\nApache HTTPD: 2.2.3 (from OS vendor)\nmod_jk: 1.2.30 (downloaded from Tomcat site and compiled locally)\nTomcat: 6.0.29 (binary distribution from apache.org)\nJVM: 1.6.0_21 (Sun, 64-bit).\n\nWhen running httpd/mod_jk in trace mode we are seeing one or two\nSEND_BODY_CHUNK messages of length 4 (referred to as a 'flush' message\nfrom now on) just before the END_RESPONSE message.  I see this even when\nquerying the Tomcat Manager (manager/html) home page so this is not our\napplication specifically.\n\nOur problem is that in a servlet that retrieves a file that is then sent\nto the client we are receiving a 'flush' message _after_ the\nEND_RESPONSE message. On the next request, mod_jk sees this a breach in\nthe protocol, closes the socket and results in poor performance and\nmissed requests.  The files are significantly bigger than the standard\n8k buffers (~500kb).\n\nThe relevant servlet is a Spring Controller (some details omitted) that\ndoes the following:\n\npublic ModelAndView handle(HttpServletRequest request,\nHttpServletResponse response, Object command, BindException errors)\nthrows Exception {\n        ...\n        ... image is a byte buffer containing an image ...\n        response.setContentType(image.getMimeType());\n        response.setContentLength(image.getImage().length);\n        FileCopyUtils.copy( image.getImage(), response.getOutputStream();\n\n        return null;\n}\n\nWe were using a manual explicit flush() and close() on the output stream\ninstead of using FileCopyUtils. When we did that, we got two 'flush'\nmessages but one was still after the END_RESPONSE.\n\nFileCopyUtils closes the OutputStream automatically but doesn't flush it\nas we were doing previously doing manually.\n\nFor example:\nFull trace level logs available at: http://pastebin.com/KsHeXT58\n\nhome page requests (/), result in a 301 to /home.action.  This produces\na double 'flush' before the END_REQUEST message (only debug level\nshown):\n\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_unmarshal_response::jk_ajp_common.c (660): status = 301\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_unmarshal_response::jk_ajp_common.c (667): Number of headers is = 5\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_unmarshal_response::jk_ajp_common.c (723): Header[0] [Set-Cookie] =\n[JSESSIONID=FA47238C8C9976E37793701F10A2D923.jvm1; Path=/]\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_unmarshal_response::jk_ajp_common.c (723): Header[1] [Location] =\n[home.action]\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_unmarshal_response::jk_ajp_common.c (723): Header[2] [Connection] =\n[close]\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_unmarshal_response::jk_ajp_common.c (723): Header[3] [Content-Type]\n= [text/html]\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_unmarshal_response::jk_ajp_common.c (723): Header[4]\n[Content-Length] = [4]\n\nThen comes the body content:\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): received from\najp13 pos=0 len=8 max=8192\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): 0000    03 00 04\n0D 0A 0D 0A 00 00 00 00 00 00 00 00 00  - ................\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\nws_write::mod_jk.c (507): written 4 out of 4\n\n1st flush message\n\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): received from\najp13 pos=0 len=4 max=8192\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): 0000    03 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00  - ................\n\n2nd flush message\n\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): received from\najp13 pos=0 len=4 max=8192\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): 0000    03 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00  - ................\n\nNormal END_MESSAGE\n\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): received from\najp13 pos=0 len=2 max=8192\n[Mon Sep 13 11:47:37.460 2010] [31725:1144342848] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): 0000    05 01 00\n00 00 00 00 00 00 00 00 00 00 00 00 00  - ................\n\nThe home page retrieval proceeds in exactly the same manner (including\nthe two 'flush' messages.\n\nHowever when we try this against the file retrieval servlet above\n(remember files are ~500k) we get the following behaviour instead:\n\nHeaders received by mod_jk from the request:\n[Mon Sep 13 11:47:38.118 2010] [31728:1147218240] [debug]\najp_unmarshal_response::jk_ajp_common.c (660): status = 200\n[Mon Sep 13 11:47:38.118 2010] [31728:1147218240] [debug]\najp_unmarshal_response::jk_ajp_common.c (667): Number of headers is = 2\n[Mon Sep 13 11:47:38.118 2010] [31728:1147218240] [debug]\najp_unmarshal_response::jk_ajp_common.c (723): Header[0] [Content-Type]\n= [image/jpeg]\n[Mon Sep 13 11:47:38.118 2010] [31728:1147218240] [debug]\najp_unmarshal_response::jk_ajp_common.c (723): Header[1]\n[Content-Length] = [532874]\n\nNow the data ...\n[Mon Sep 13 11:47:38.118 2010] [31728:1147218240] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): received from\najp13 pos=0 len=8188 max=8192\n[Mon Sep 13 11:47:38.118 2010] [31728:1147218240] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): 0000    03 1F F8\nFF D8 FF E0 00 10 4A 46 49 46 00 01 01  - .........JFIF...\n\n... lots of messages like that above ...\n\nFinally once complete (last data write shown):\n\n[Mon Sep 13 11:47:38.533 2010] [31728:1147218240] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): 0390    A5 29 4A\nFF D9 00 00 00 00 00 00 00 00 00 00 00  - .)J.............\n[Mon Sep 13 11:47:38.533 2010] [31728:1147218240] [debug]\nws_write::mod_jk.c (507): written 914 out of 914\n\nThe end of the request (note - no flush message at all)\n\n[Mon Sep 13 11:47:38.533 2010] [31728:1147218240] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): received from\najp13 pos=0 len=2 max=8192\n[Mon Sep 13 11:47:38.533 2010] [31728:1147218240] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): 0000    05 01 00\n00 00 00 00 00 00 00 00 00 00 00 00 00  - ................\n\nConnection now supposedly reset for reuse:\n\n[Mon Sep 13 11:47:38.533 2010] [31728:1147218240] [debug]\najp_process_callback::jk_ajp_common.c (1940): AJP13 protocol: Reuse is\nOK\n[Mon Sep 13 11:47:38.533 2010] [31728:1147218240] [debug]\najp_reset_endpoint::jk_ajp_common.c (757): (jvm1) resetting endpoint\nwith sd = 17 \n[Mon Sep 13 11:47:38.533 2010] [31728:1147218240] [debug]\najp_done::jk_ajp_common.c (3010): recycling connection pool slot=0 for\nworker jvm1\n[Mon Sep 13 11:47:38.534 2010] [31728:1147218240] [debug]\njk_handler::mod_jk.c (2602): Service finished with status=200 for\nworker=balancer\n\nThe problem occurs the next time that connection is used:\n\n[Mon Sep 13 11:47:38.535 2010] [31728:1147218240] [debug]\nmap_uri_to_worker_ext::jk_uri_worker_map.c (1036): Attempting to map URI\n'/scripts/css/jquery-ui-1.8.2.custom.css' from 4 maps\n[Mon Sep 13 11:47:38.535 2010] [31728:1147218240] [debug]\nfind_match::jk_uri_worker_map.c (850): Attempting to map context URI\n'/*=balancer' source 'JkMount'\n[Mon Sep 13 11:47:38.535 2010] [31728:1147218240] [debug]\nfind_match::jk_uri_worker_map.c (863): Found a wildchar match\n'/*=balancer'\n[Mon Sep 13 11:47:38.535 2010] [31728:1147218240] [debug]\njk_handler::mod_jk.c (2462): Into handler jakarta-servlet\nworker=balancer r->proxyreq=0\n[Mon Sep 13 11:47:38.535 2010] [31728:1147218240] [debug]\nwc_get_worker_for_name::jk_worker.c (116): found a worker balancer\n[Mon Sep 13 11:47:38.535 2010] [31728:1147218240] [debug]\nwc_get_name_for_type::jk_worker.c (293): Found worker type 'lb'\n[Mon Sep 13 11:47:38.535 2010] [31728:1147218240] [debug]\ninit_ws_service::mod_jk.c (978): Service protocol=HTTP/1.1 method=GET\nssl=false host=(null) addr=10.16.0.71 name=10.16.0.40 port=80\nauth=(null) user=(null) laddr=10.16.0.40 raddr=10.16.0.71\nuri=/scripts/css/jquery-ui-1.8.2.custom.css\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\nservice::jk_lb_worker.c (1118): service sticky_session=1\nid='FA47238C8C9976E37793701F10A2D923.jvm1'\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\nget_most_suitable_worker::jk_lb_worker.c (946): searching worker for\npartial sessionid FA47238C8C9976E37793701F10A2D923.jvm1\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\nget_most_suitable_worker::jk_lb_worker.c (954): searching worker for\nsession route jvm1\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\nget_most_suitable_worker::jk_lb_worker.c (968): found worker jvm1 (jvm1)\nfor route jvm1 and partial sessionid\nFA47238C8C9976E37793701F10A2D923.jvm1\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\nservice::jk_lb_worker.c (1161): service worker=jvm1 route=jvm1\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\najp_get_endpoint::jk_ajp_common.c (3093): acquired connection pool\nslot=0 after 0 retries\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\najp_marshal_into_msgb::jk_ajp_common.c (605): ajp marshaling done\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\najp_service::jk_ajp_common.c (2376): processing jvm1 with 2 retries\n\nbegin by sending 'cping', we expect 'cpong'\n\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (1152): sending to\najp13 pos=4 len=5 max=16\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (1152): 0000    12 34\n00 01 0A 00 00 00 00 00 00 00 00 00 00 00  - .4..............\n\nBut we receive ... SEND_BODY_CHUNK of leght 4, i.e. client flush (!)\n\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): received from\najp13 pos=0 len=4 max=16\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1336): 0000    03 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00  - ................\n\nOops - better close stuff etc. From here things just shutdown\n\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [warn]\najp_handle_cping_cpong::jk_ajp_common.c (906): awaited reply cpong,\nreceived 3 (0 / 5) instead. Closing connection\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\njk_shutdown_socket::jk_connect.c (722): About to shutdown socket 17\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\njk_shutdown_socket::jk_connect.c (803): shutting down the read side of\nsocket 17\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [debug]\njk_shutdown_socket::jk_connect.c (813): Shutdown socket 17 and read 5\nlingering bytes in 0 sec.\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [info]\najp_send_request::jk_ajp_common.c (1518): (jvm1) failed sending request,\nsocket -1 prepost cping/cpong failure (errno=0)\n[Mon Sep 13 11:47:38.536 2010] [31728:1147218240] [info]\najp_send_request::jk_ajp_common.c (1574): (jvm1) all endpoints are\ndisconnected, detected by connect check (0), cping (1), send (0)\n\nThus resulting in broken behaviour because left-over flush method was\npresent in queue.\n\nHas anyone seen this before? Can anyone help?\n\nThanks,\n\nAdditional information:\n\nworkers.properties:\nworker.list=jk-status\nworker.jk-status.type=status\nworker.jk-status.read_only=true\nworker.list=jk-manager\nworker.jk-manager.type=status\nworker.list=balancer\nworker.balancer.type=lb\nworker.balancer.error_escalation_time=0\nworker.balancer.max_reply_timeouts=10\nworker.balancer.balance_workers=jvm1\nworker.balancer.balance_workers=jvm2\nworker.jvm2.reference=worker.template\nworker.jvm2.host=fmp-dun-tapp2\nworker.jvm2.port=10303\nworker.jvm2.activation=A\n\n# Used for jkmanager / status\nworker.list=jvm1\nworker.jvm1.reference=worker.template\nworker.jvm1.host=localhost\nworker.jvm1.port=10303\nworker.jvm1.activation=A\n\nworker.template.type=ajp13\nworker.template.socket_connect_timeout=5000\nworker.template.socket_keepalive=true\nworker.template.ping_mode=A\nworker.template.ping_timeout=10000\nworker.template.connection_pool_minsize=0\nworker.template.connection_pool_timeout=600\nworker.template.reply_timeout=300000\nworker.template.recovery_options=3\n\nmod_jk.conf:\nLoadModule jk_module modules/mod_jk.so\n\n<IfModule jk_module>\n    JkWorkersFile components/workers.properties\n    JkLogFile \"|/usr/sbin/rotatelogs /var/log/httpd/mod_jk_log 86400\"\n    JkLogLevel info\n    JkShmFile logs/mod_jk.shm\n    LogFormat \"%v %h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\"\n\\\"%{User-Agent}i\\\" \\\"%{Cookie}i\\\" \\\"%{Set-Cookie}o\\\" %{pid}P %{tid}P\n%{JK_LB_FIRST_NAME}n %{JK_LB_LAST_NAME}n ACC %{JK_LB_LAST_ACCESSED}n ERR\n%{JK_LB_LAST_ERRORS}n BSY %{JK_LB_LAST_BUSY}n %{JK_LB_LAST_STATE}n %D\"\nextended_jk\n    JkStripSession On\n    JkWatchdogInterval 60\n</IfModule>\n\nRelevant httpd.conf global entries:\nTimeout 120\nKeepAlive On\nMaxKeepAliveRequests 0\nKeepAliveTimeout 15\n\n#Worker MPM\nStartServers         2\nMaxClients         150\nMinSpareThreads     25\nMaxSpareThreads     75 \nThreadsPerChild     25\nMaxRequestsPerChild  0\n\nRelevant vhost entry:\n<Directory \"/var/www/files/\" >\n        Options FollowSymLinks\n        AllowOverride None\n        Order allow,deny\n        Allow from all\n</Directory>\n\n<Directory \"/var/www/www.example.com/\" >\n        Options FollowSymLinks\n        AllowOverride None\n        Order allow,deny\n        Allow from all\n</Directory>\n\n<VirtualHost _default_:80>\n        ServerName www.example.com\n        DocumentRoot \"/var/www/www.example.com\"\n        \n        ErrorDocument 404 /404.jsp\n        \n        CacheEnable mem /\n        CacheIgnoreHeaders Set-Cookie\n        # Not available: CacheIgnoreURLSessionIdentifiers jsessionid\n\n        # These files should be made part of the static build structure.\n        Alias /files/ \"/var/www/files/\"\n        \n        JkMount /|* balancer\n        JkUnMount /manager/* balancer\n        JkUnMount /files/* balancer\n        JkStripSession on\n</VirtualHost>\n\n<VirtualHost _default_:443>\n        ServerName www.example.com\n        DocumentRoot \"/var/www/www.example.com\"\n        \n        ErrorDocument 404 /404.jsp\n\n        CacheEnable mem /\n        CacheIgnoreHeaders Set-Cookie\n        # Not available: CacheIgnoreURLSessionIdentifiers jsessionid\n\n        Alias /files/ \"/var/www/files/\"\n                \n        SSLEngine on\n        \n        SSLProtocol All -SSLv2\n        SSLCipherSuite ALL:!aNULL:!ADH:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:\n+MEDIUM\n        SSLOptions +OptRenegotiate\n        \n        SSLCertificateFile /etc/pki/tls/certs/server.crt\n        SSLCertificateKeyFile /etc/pki/tls/key/server.key\n        SSLCertificateChainFile /etc/pki/tls/certs/server-chain.crt\n        SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt \n        \n        SSLVerifyClient none\n        \n        SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire\n        <Files ~ \"\\.(cgi|shtml|phtml|php3?)$\">\n            SSLOptions +StdEnvVars\n        </Files>\n        <Directory \"/var/www/cgi-bin\">\n            SSLOptions +StdEnvVars\n        </Directory>\n        \n        SetEnvIf User-Agent \".*MSIE.*\" \\\n                 nokeepalive ssl-unclean-shutdown \\\n                 downgrade-1.0 force-response-1.0\n\n        JkMount /|* balancer\n        \n        JkUnMount /manager/* balancer\n        JkUnMount /files/* balancer\n        JkStripSession on\n</VirtualHost>\n\nTomcat server.xml\n\n<?xml version='1.0' encoding='utf-8'?>\n<Server port=\"10300\" shutdown=\"SHUTDOWN\">\n\n        <Listener\nclassName=\"org.apache.catalina.core.AprLifecycleListener\"\n                SSLEngine=\"on\" />\n        <Listener className=\"org.apache.catalina.core.JasperListener\" />\n        <Listener\nclassName=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n        <Listener\nclassName=\"org.apache.catalina.mbeans.ServerLifecycleListener\" />\n        <Listener\nclassName=\"org.apache.catalina.mbeans.JmxRemoteLifecycleListener\"\n                rmiRegistryPortPlatform=\"10301\"\n                rmiServerPortPlatform=\"10302\"\n                useLocalPorts=\"true\" />\n        <Listener\nclassName=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n\n        <GlobalNamingResources>\n                <Resource name=\"UserDatabase\" auth=\"Container\"\n                        type=\"org.apache.catalina.UserDatabase\"\ndescription=\"User database\nthat can be updated and saved\"\n                        factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n                        pathname=\"conf/tomcat-users.xml\" />\n\n        </GlobalNamingResources>\n\n        <Service name=\"Catalina\">\n\n                <Executor name=\"ajpThreadPool\" namePrefix=\"tc-ajp-exec-\"\n                        maxThreads=\"200\" minSpareThreads=\"4\" />\n                <Executor name=\"httpThreadPool\" namePrefix=\"tc-http-exec-\"\n                        maxThreads=\"50\" minSpareThreads=\"4\" />\n                <Connector executor=\"ajpThreadPool\"\nenableLookups=\"false\"\n                        port=\"10303\"\nprotocol=\"org.apache.coyote.ajp.AjpAprProtocol\"\n                        redirectPort=\"443\" />\n\n                <Connector executor=\"httpThreadPool\"\nenableLookups=\"false\"\n                        port=\"10304\"\nprotocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n                        connectionTimeout=\"20000\"\nredirectPort=\"10305\" />\n                <Connector executor=\"httpThreadPool\"\nenableLookups=\"false\"\n                        port=\"10305\"\nprotocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n                        SSLEnabled=\"true\" scheme=\"https\" secure=\"true\"\nconnectionTimeout=\"20000\"\n                        SSLCACertificateFile=\"${tomcat.directconn.SSLCACertificateFile}\"\n\nSSLCertificateChainFile=\"${tomcat.directconn.SSLCertificateChainFile}\"\n                        SSLCertificateFile=\"${tomcat.directconn.SSLCertificateFile}\"\n                        SSLCertificateKeyFile=\"${tomcat.directconn.SSLCertificateKeyFile}\"\n                        SSLProtocol=\"TLSv1\" />\n\n                <Engine name=\"Catalina\" defaultHost=\"localhost\"\n                        jvmRoute=\"jvm${tomcat.clusterid}\">\n\n                        <Cluster\nclassName=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"\n                                channelSendOptions=\"6\">\n\n                                <Manager\nclassName=\"org.apache.catalina.ha.session.BackupManager\"\n                                        expireSessionsOnShutdown=\"false\"\nnotifyListenersOnReplication=\"true\"\n                                        mapSendOptions=\"6\" />\n                                <Channel\nclassName=\"org.apache.catalina.tribes.group.GroupChannel\">\n                                        <Membership\nclassName=\"org.apache.catalina.tribes.membership.McastService\"\n                                                address=\"228.0.0.4\"\nport=\"45564\" frequency=\"500\"\ndropTime=\"3000\" />\n                                        <Receiver\nclassName=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n                                                address=\"auto\"\nport=\"5000\" selectorTimeout=\"100\" maxThreads=\"6\" />\n\n                                        <Sender\n\nclassName=\"org.apache.catalina.tribes.transport.ReplicationTransmitter\">\n                                                <Transport\n\nclassName=\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\" />\n                                        </Sender>\n                                        <Interceptor\n\nclassName=\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\" />\n                                        <Interceptor\n\nclassName=\"org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor\" />\n                                        <Interceptor\n\nclassName=\"org.apache.catalina.tribes.group.interceptors.ThroughputInterceptor\" />\n                                </Channel>\n\n                                <Valve\nclassName=\"org.apache.catalina.ha.tcp.ReplicationValve\"\n                                        filter=\".*\\.gif;.*\\.js;.*\n\\.jpg;.*\\.png;.*\\.htm;.*\\.html;.*\\.css;.*\n\\.txt;\"\n                                        statistics=\"true\" />\n\n                                <Valve\nclassName=\"org.apache.catalina.ha.session.JvmRouteBinderValve\" />\n\n                                <ClusterListener\n\nclassName=\"org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener\" />\n                                <ClusterListener\n\nclassName=\"org.apache.catalina.ha.session.ClusterSessionListener\" />\n                        </Cluster>\n\n                        <Realm\nclassName=\"org.apache.catalina.realm.UserDatabaseRealm\"\n                                resourceName=\"UserDatabase\" />\n\n                        <Host name=\"localhost\" appBase=\"webapps\"\nunpackWARs=\"false\"\n                                autoDeploy=\"false\" xmlValidation=\"false\"\nxmlNamespaceAware=\"false\">\n                        </Host>\n                        <Host name=\"aob\" appBase=\"aob\"\n                                unpackWARs=\"false\" autoDeploy=\"false\"\nxmlValidation=\"false\"\n                                xmlNamespaceAware=\"false\">\n                                <Alias>example2.com</Alias>\n                        </Host>\n                </Engine>\n        </Service>\n</Server>",
    "comments": [
      "There was a patch supplied by Rainer Jung which we used to get more information out of mod_jk.  It was how we realised there were out-of order messages in the queue on the Tomcat side.\n\nPatch:\n--- jk_ajp_common.c     2010-02-23 08:26:02.000000000 +0100\n+++ jk_ajp_common.c.debug       2010-09-02 18:24:41.429730000 +0200\n@@ -904,9 +904,9 @@\n                        cmd < JK_AJP13_SEND_BODY_CHUNK ||\n                        cmd > AJP13_CPONG_REPLY) {\n                    jk_log(l, JK_LOG_WARNING,\n-                       \"awaited reply cpong, received %d instead. \"\n+                       \"awaited reply cpong, received %d (%d / %d) \n instead. \"\n                        \"Closing connection\",\n-                       cmd);\n+                       cmd, i, ae->last_op);\n                   /* We can't trust this connection any more. */\n                   ajp_abort_endpoint(ae, JK_TRUE, l);\n                   JK_TRACE_EXIT(l);",
      "Mladen Turk wrote in email on tomcat-users list [Tue, 14 Sep 2010 07:50:55 +0200]:\n\nFor AJP APR connector 'if (actionCode == ActionCode.ACTION_CLIENT_FLUSH)'\ndoesn't check if the socket was already virtually closed\nso I guess that would be a first thing to look at.\nWe cannot just check for finished flag thought, cause recycle() would reset that.\nInstead if there was getOutputSteam() we would need to directly\ninvalidate that stream. This means we would need to remember that stream\nsomewhere.\n\nFurther more the wrapped socket is 'long' pointing to the\nnative pointer, so we don't have object notification on\nphysical socket close (that's another problem that manifests\nin JVM core for detached sockets).",
      "Thanks for filing that. I'll take a look into that.\nIt would be nice if you could provide a simple jsp or\nservlet test case (without third party packages)\nto speed up the hacking.",
      "Created attachment 26055\ntestcase: Servlet for writing directly to output stream\n\nThis is a test servlet for writing simple data directly to the output stream. It should trigger the issue in this bug",
      "I have tried your test servlet, but I cannot see anything suspicious.\nThere is no additional packets following the lorem ipsum.\nTested on Tomcat 6.0.29, 6.0.x trunk and Tomcat 7.\nBoth APR and JIO endpoints behave the same.",
      "Hi,\n\nWhen using the test servlet the problem appears on the next request when its on the same socket so its a good idea to have a static file around to request immediately after executing the test servlet.  The way we did this was to use Jmeter with only 1 thread but executing the two requests in sequence with no wait time.\n\nWith Apache HTTPD you should see mod_jk (in debug mode) detect an explicit flush packet and reset the socket instead of the usual CPONG expected response as reported originally.\n\nThanks,\n\nBrett",
      "I'm still not been able to reproduce the stuff.\nI don't use jmeter but rather a simple ab which can only hit a\nsingle uri, so this might be the reason why its not manifested there.\n\nBTW, does it happen only with APR connector, or with JIO as well?",
      "I can't reproduce this with the latest Tomcat 6 code with either the BIO AJP connector or the APR AJP connector. A check of the mod_jk debug log confirms that that cping/cpong works as expected.\n\nI have been using the supplied Servlet and a 46k static file.\n\nWithout a test case to reproduce this issue, this bug is heading towards being closed as \"works for me\" .",
      "(In reply to comment #8)\n> I can't reproduce this with the latest Tomcat 6 code with either the BIO AJP\n> connector or the APR AJP connector. A check of the mod_jk debug log confirms\n> that that cping/cpong works as expected.\n> \n> I have been using the supplied Servlet and a 46k static file.\n> \n> Without a test case to reproduce this issue, this bug is heading towards being\n> closed as \"works for me\" .\n\nHi,\n\nI've tried to reproduce this in a test application as well and the problem just doesn't occur.  At present, we can only generate it using our application, sorry.\n\nDon't know how to progress this further now. :(\n\nRegards,\n\nBrett",
      "The test solution would have to use the same sort of writer\n(image in your case I suppose)\nWe know that image classes can crash the APR connector because\nthey try to manage the socket by themselves so double close\ncan occur. This might also cause the SBC to been send after\nthe EOR since with AJP the physical socket is not closed.\n\nAgain without a workable test case it's just a guess.",
      "Without a reproducible test case this is eventually going to get closed as WONTFIX.",
      "Can you check if r1066772 fixes the issue?\nIt's for trunk, but applying it for 6.0.x should be trivial",
      "Hi Mladen,\n\nWe switched from using Apache HTTPD to HAproxy late last year because of this issue... therefore it might take me quite a while to verify this.\nI'll try, but no guarantees.\n\nBest Regards,\n\nBrett",
      "Hey - we just ran into this issue this week, and I finally managed to track it down to this bug after a good two days of work. Gotta get this fixed. I will attempt to both come up with a simple test case and try the provided patch next week.",
      "I've proposed r1066772 for 6.0.x since it is the right thing to do and it may help fix this issue. Confirmation that it does fix it would still be helpful.",
      "The fix has been back-ported and absent any reports to the contrary, the assumption is that the issue is fixed."
    ],
    "creation_ts": "2010-09-14T11:52:20Z",
    "fixes": [
      49929
    ]
  },
  {
    "id": 64386,
    "summary": "WebdavServlet does not send \"getlastmodified\" property for resource collections",
    "description": "The property is only set for resources (files), not for resource collections (directories) for no reason. Various DAV clients show weird values like 1899-01-01 or something else.\n\nA simple patch makes it work:\ndiff --git a/java/org/apache/catalina/servlets/WebdavServlet.java b/java/org/apache/catalina/servlets/WebdavServlet.java\nindex 371de111c9..228bab0032 100644\n--- a/java/org/apache/catalina/servlets/WebdavServlet.java\n+++ b/java/org/apache/catalina/servlets/WebdavServlet.java\n@@ -2087,6 +2082,8 @@ public class WebdavServlet extends DefaultServlet {\n                     generatedXML.writeElement(\"D\", \"resourcetype\", XMLWriter.NO_CONTENT);\n                 }\n             } else {\n+                generatedXML.writeProperty(\"D\", \"getlastmodified\",\n+                        FastHttpDateFormat.formatDate(lastModified));\n                 generatedXML.writeElement(\"D\", \"resourcetype\", XMLWriter.OPENING);\n                 generatedXML.writeElement(\"D\", \"collection\", XMLWriter.NO_CONTENT);\n                 generatedXML.writeElement(\"D\", \"resourcetype\", XMLWriter.CLOSING);",
    "comments": [
      "Fixed in:\n- master for 10.0.0-M5 and onwards\n- 9.0.x  for 9.0.35 and onwards\n- 8.5.x for 8.5.55 and onwards\n- 7.0.x for 7.0.104 and onwards"
    ],
    "creation_ts": "2020-04-28T22:10:26Z",
    "fixes": [
      64386
    ]
  },
  {
    "id": 54602,
    "summary": "B2CConverter character decode underflow leaves bytes in buffer",
    "description": "If a request contains a uri that ends in a multi byte character which is missing a byte the extra bytes are left in a buffer which is reused by a future request.\n\nThe problem comes from two different things:\n1) If B2CConverter tries to convert a ByteChunk which ends in a character underflow it does not convert that last character and it is left in a buffer in B2CConver.\n\n2) The B2CConverter in org.apache.catalina.connector.Request is not recycled with the rest of the objects. It looks like this is done intentionally based on the comment above it's declaration.\n\nThe issue with B2CConverter can be demonstrated with the code below, which is a simplification of what is done inside of CoyoteAdapter.convertURI():\n\n<code>\nB2CConverter conv = new B2CConverter(\"UTF-8\");\nByteChunk bc = new ByteChunk();\nCharChunk cc = new CharChunk();\nbyte[] bytes = { 0x61, 0x62, 0x63, 0x64, -8, -69, -73, -77 };\n\nbc.append(bytes, 0, bytes.length);\ncc.allocate(bc.getLength(), -1);\nconv.convert(bc, cc, cc.getBuffer().length - cc.getEnd());\nSystem.out.println(cc);\n\ncc.recycle();\nbc.recycle();\n\nbc.append(bytes, 0, bytes.length);\ncc.allocate(bc.getLength(), -1);\nconv.convert(bc, cc, cc.getBuffer().length - cc.getEnd());\nSystem.out.println(cc);\n</code>\n\nIf the B2CConverter was recycled with everything else in Request this would prevent a previous request from corrupting the next request but it doesn't fix the issue that a character is dropped from the initial decode.\n\nI tried playing with B2CConverter and the only way I could get the convert to get everything was by ignoring the limit argument and reading to the end of the stream. It looks like tomcat8 is moving in this direction with the move to NIO, however I tried playing with the latest B2CConverter and was still seeing issues with the given byte sequence.",
    "comments": [
      "I do see code that is meant to recycle the converter. Do you have a test case / can you write a Tomcat unit test that demonstrates that the converter isn't being recycled?\n\nIncomplete byte sequences should result in a 400 response. I'll take a look at why this isn't happening.",
      "Part of the problem here is that the UTF-8 decoder should reject bytes 5-8 as an invalid sequence but doesn't. That is a JVM bug that needs to be reported to Oracle.\n\nGiven the widespread use of UTF-8 I suspect we'll need to look at using the stricter UTF-8 decoder we use in WebSocket more widely.\n\nA second issue (that doesn't affect this report) is that the leftover byte array is not big enough for the decoders available in the JRE.",
      "InputStreamReader defaults to replacement characters so it won't reject those characters just replace them with the replacement.\n\nThe underlying InputStreamReader holds on to those remaining bytes because it is waiting for the last byte or end of stream but because B2CCoverter doesn't try to read any more it never sees the the end of stream.\n\nIf B2CConver was changed to just read until ReadConvertor returned -1 then the bytes wouldn't be left behind and the those last 4 bytes would be replaced with the replacement character.\n\nIf you want invalid UTF-8 to be rejected you would have to update the constructor of ReadConvertor to call super which takes a CharsetDecoder which uses CodingErrorAction.REPORT, but that is a much bigger change.\n\nI'll work on the test at some point, but I don't have the time currently to get that working.",
      "The original report was about URI processing. Now you are talking about request bodies.\n\nThere are multiple issues here. So far I have found / suspect:\na) Invalid sequences are not rejected quickly enough\nb) Partial sequences are not rejected\nc) There is no mechanism for a client of the API to indicate input is complete\nd) The storage for bytes left over between calls is not bug enough for all charsets\ne) Leftover bytes may remain between requests\n\na) is a JVM bug that we can work-around\nb) is a consequence of c)\nc) is now fixed in trunk but the callers of the API need to be reviewed\nd) is fixed in trunk\ne) needs further investigation\n\nAlso, the handling of incomplete/partial data may need to be different for URIs and request bodies. There is an argument for request bodies to be more tolerant.",
      "Where do you think I started talking about request bodies?\n\norg.apache.catalina.connector.Request uses a B2CConverter for URIDecoding the variable is called URIConverter. B2CConverter uses ReadConverter, which is a very thin wrapper around InputStreamReader, to do its conversions.InputStreamReader when constructed with just a Charset, like ReadConverter does, calls StreamDecoder.forInputStreamReader() to construct a StreamDecoder. StreamDecoder when not constructed with a CharsetDecoder uses CodingErrorAction.REPLACE for both malformed input and unmappable characters.",
      "Yes, this is confusing to you probably. Your problem with URI processing and trunk was that I forgot to port a call to recycle, which likely caused a problem there [and you can ignore the rest, it doesn't concern you]. As for non trunk, the code is really a bit hopeless IMO.\n\nMark doesn't know the new bit of code in trunk, so that's what he's looking into, and he's apparently busy trying to convince himself it needs tons of improvements. Actually, only d) looks real (and nobody complained so far about it, not enough creative encoding use I guess). I found trying to deal with end of input, for example, does not add any value. That's why there's a isUnderflow flag, it will do the same thing in a more generic way.",
      "(In reply to comment #5)\n> Where do you think I started talking about request bodies?\n\nSorry about the confusion. You were looking at 7.0.x and I was looking at trunk. When you mentioned an InputStream I started thinking request body as trunk doesn't use a Writer to do the conversion.\n\nTo Remy's point, I think there are a handful of bugs, inconsistences and potential improvements in both trunk and 7.0.x and there are likely to be differences between the two branches. Exactly what is a bug and what is an improvement is somewhat academic as I intend to address all of them.\n\nMy plan is to write some more test cases for trunk, get them to pass in trunk, back-port the tests to 7.0.x and then get the tests passing in 7.0.x.",
      "Thanks again for this bug report. It promoted me to take a much closer look at UTF-8 decoding and I found a number of edge cases in both URI processing and request body processing.\n\ntrunk is now using the Apache Harmony based UTF-8 decoder for all UTF-8 bytes to chars conversion including URIs and request bodies. The test cases have also been expanded considerably.\n\nThe next step is to copy the test cases to 7.0.x and then review. I suspect the fix will involve porting Remy's new B2CConverter to 7.0.x.",
      "I have ported Remy's improved converter to 7.0.x and have also switched to the new UTF-8 decoder. The test cases have also been ported and all pass."
    ],
    "creation_ts": "2013-02-22T20:06:36Z",
    "fixes": [
      54602
    ]
  },
  {
    "id": 56010,
    "summary": "JspFactory.getPageContext with JspWriter.DEFAULT_BUFFER throws IllegalArgumentException",
    "description": "When a servlet calls JspFactory.getPageContext() with JspWriter.DEFAULT_BUFFER, Tomcat Japser throws IllegalArgumentException.\n\nPageContext pageContext = JspFactory.getDefaultFactory().getPageContext(this, req, resp, null, false, JspWriter.DEFAULT_BUFFER, true);\n\n\njava.lang.IllegalArgumentException: Buffer size <= 0\n\torg.apache.jasper.runtime.JspWriterImpl.<init>(JspWriterImpl.java:81)\n\torg.apache.jasper.runtime.PageContextImpl._initialize(PageContextImpl.java:154)\n\torg.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:125)\n\torg.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:112)\n\torg.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:65)\n\tdvt.jsp.jaspertest.JspFactoryTestServlet.doGet(JspFactoryTestServlet.java:21)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:621)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:728)\n\n\n\nBased on the description of JspFactory.getPageContext(), if buffer size is JspWriter.DEFAULT_BUFFER(-1), PageContext must treat it as implementation default, which in case is org.apache.jasper.Constants#DEFAULT_BUFFER_SIZE(8192).\n\n\nbuffer - size of buffer in bytes, JspWriter.NO_BUFFER if no buffer, JspWriter.DEFAULT_BUFFER if implementation default.\n\nfrom http://docs.oracle.com/javaee/7/api/javax/servlet/jsp/JspFactory.html#getPageContext(javax.servlet.Servlet, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.String, boolean, int, boolean)\n\n\nNote that -Dorg.apache.jasper.runtime.JspFactoryImpl.USE_POOL=false should be specified.",
    "comments": [
      "Created attachment 31206\nTest Source\n\nI suggest that org.apache.jasper.runtime.PageContextImpl needs to check if buffer size is JspWriter.DEFAULT_BUFFER and adjust it to default.\n\norg.apache.jasper.runtime.PageContextImpl#initialize(..)\n\n\n        if (bufferSize == JspWriter.DEFAULT_BUFFER) {\n            bufferSize = Constants.DEFAULT_BUFFER_SIZE;\n        }\n        if (this.baseOut == null) {\n            this.baseOut = new JspWriterImpl(response, bufferSize, autoFlush);\n        } else {\n            this.baseOut.init(response, bufferSize, autoFlush);\n        }",
      "Thanks for the report and the suggested fix.\n\nI have committed the fix to 8.0.x along with a test case and it will be included in 8.0.0 onwards.\n\nThe same change has been applied to 7.0.x and it will be included in 7.0.51 onwards.",
      "As far as I am reading, such value can only be used when calling the JspFactory.getPageContext() API directly. The buffer size that can be used in JSP configurations (in a page directive or in jsp-property-group) is either \"none\" (0) or is measured in kilobytes. (ch. JSP.1.10.1, JSP.3.3.10)\n\nBut I agree that this feature is a part of the API.\n\nProposed for 6.0.",
      "Fixed in 6.0.x for 6.0.40 onwards."
    ],
    "creation_ts": "2014-01-15T03:34:23Z",
    "fixes": [
      56010
    ]
  },
  {
    "id": 64240,
    "summary": "http 0.9 request return nothing",
    "description": "when send http 0.9 request to tomcat, the server will return nothing and close the TCP connection.\nthe request contains only one line:\n\"GET /CRLF\"\nthere is no space between / and CRLF\n\nif there is one space between / and CRLF, tomcat will return content in response\n\nbut this bug can't be reproduced every time\nafter restart tomcat, it maybe disappear\nand may next time restart, it maybe appear",
    "comments": [
      "Tomcat tightened up the HTTP 0.9 parsing. It looks like there is an issue with requests of the form:\n\nGET / LF\n\nPrior to the parsing changes, this would have been accepted as a (malformed) HTTP 0.9 request. It is now rejected as an invalid HTTP 1.1 request. The HTTP 0.9 spec allows either way of handling the request.\n\nI'll take a look to see if the parsing can be relaxed to accept requests like this without creating problems elsewhere.\n\nI'm curious. What clients are you using that sent malformed HTTP 0.9 requests?",
      "(In reply to Mark Thomas from comment #1)\n> Tomcat tightened up the HTTP 0.9 parsing. It looks like there is an issue\n> with requests of the form:\n> \n> GET / LF\n> \n> Prior to the parsing changes, this would have been accepted as a (malformed)\n> HTTP 0.9 request. It is now rejected as an invalid HTTP 1.1 request. The\n> HTTP 0.9 spec allows either way of handling the request.\n> \n> I'll take a look to see if the parsing can be relaxed to accept requests\n> like this without creating problems elsewhere.\n> \n> I'm curious. What clients are you using that sent malformed HTTP 0.9\n> requests?\n\n\nmy tomcat is behinde one F5 load balancer, F5 have http monitor to check the tomcat's health. The default send string of F5 http monitor is \"GET /CRLF\", total 7 bytes.  when tomcat close the socket without return anything, F5 think tomcat is out of service.\nbelow is the tcpdump of F5 monitor connection:\n\n22:45:04.215888 IP 172.16.97.5.15379 > 172.16.28.103.ircu-4: Flags [S], seq 3311525713, win 5840, options [mss 1460,sackOK,TS val 3987447303 ecr 0,nop,wscale 7], length 0\n\t0x0000:  4500 003c 20ba 4000 3f06 4575 ac10 6105  E..<..@.?.Eu..a.\n\t0x0010:  ac10 1c67 3c13 1a0c c561 df51 0000 0000  ...g<....a.Q....\n\t0x0020:  a002 16d0 d51c 0000 0204 05b4 0402 080a  ................\n\t0x0030:  edab 9e07 0000 0000 0103 0307            ............\n22:45:04.215910 IP 172.16.28.103.ircu-4 > 172.16.97.5.15379: Flags [S.], seq 3991552491, ack 3311525714, win 14480, options [mss 1460,sackOK,TS val 3320472856 ecr 3987447303,nop,wscale 7], length 0\n\t0x0000:  4500 003c 0000 4000 4006 652f ac10 1c67  E..<..@.@.e/...g\n\t0x0010:  ac10 6105 1a0c 3c13 edea 41eb c561 df52  ..a...<...A..a.R\n\t0x0020:  a012 3890 5872 0000 0204 05b4 0402 080a  ..8.Xr..........\n\t0x0030:  c5ea 6518 edab 9e07 0103 0307            ..e.........\n22:45:04.217823 IP 172.16.97.5.15379 > 172.16.28.103.ircu-4: Flags [.], ack 1, win 46, options [nop,nop,TS val 3987447305 ecr 3320472856], length 0\n\t0x0000:  4500 0034 20bb 4000 3f06 457c ac10 6105  E..4..@.?.E|..a.\n\t0x0010:  ac10 1c67 3c13 1a0c c561 df52 edea 41ec  ...g<....a.R..A.\n\t0x0020:  8010 002e bf9e 0000 0101 080a edab 9e09  ................\n\t0x0030:  c5ea 6518                                ..e.\n22:45:04.217849 IP 172.16.97.5.15379 > 172.16.28.103.ircu-4: Flags [P.], seq 1:8, ack 1, win 46, options [nop,nop,TS val 3987447305 ecr 3320472856], length 7\n\t0x0000:  4500 003b 20bc 4000 3f06 4574 ac10 6105  E..;..@.?.Et..a.\n\t0x0010:  ac10 1c67 3c13 1a0c c561 df52 edea 41ec  ...g<....a.R..A.\n\t0x0020:  8018 002e eb1c 0000 0101 080a edab 9e09  ................\n\t0x0030:  c5ea 6518 4745 5420 2f0d 0a              ..e.GET./..\n22:45:04.217858 IP 172.16.28.103.ircu-4 > 172.16.97.5.15379: Flags [.], ack 8, win 114, options [nop,nop,TS val 3320472858 ecr 3987447305], length 0\n\t0x0000:  4500 0034 24f6 4000 4006 4041 ac10 1c67  E..4$.@.@.@A...g\n\t0x0010:  ac10 6105 1a0c 3c13 edea 41ec c561 df59  ..a...<...A..a.Y\n\t0x0020:  8010 0072 bf51 0000 0101 080a c5ea 651a  ...r.Q........e.\n\t0x0030:  edab 9e09                                ....\n22:45:04.219749 IP 172.16.28.103.ircu-4 > 172.16.97.5.15379: Flags [F.], seq 1, ack 8, win 114, options [nop,nop,TS val 3320472860 ecr 3987447305], length 0\n\t0x0000:  4500 0034 24f7 4000 4006 4040 ac10 1c67  E..4$.@.@.@@...g\n\t0x0010:  ac10 6105 1a0c 3c13 edea 41ec c561 df59  ..a...<...A..a.Y\n\t0x0020:  8011 0072 bf4e 0000 0101 080a c5ea 651c  ...r.N........e.\n\t0x0030:  edab 9e09                                ....\n22:45:04.220836 IP 172.16.97.5.15379 > 172.16.28.103.ircu-4: Flags [F.], seq 8, ack 2, win 46, options [nop,nop,TS val 3987447308 ecr 3320472860], length 0\n\t0x0000:  4500 0034 20bd 4000 3f06 457a ac10 6105  E..4..@.?.Ez..a.\n\t0x0010:  ac10 1c67 3c13 1a0c c561 df59 edea 41ed  ...g<....a.Y..A.\n\t0x0020:  8011 002e bf8e 0000 0101 080a edab 9e0c  ................\n\t0x0030:  c5ea 651c                                ..e.\n22:45:04.220850 IP 172.16.28.103.ircu-4 > 172.16.97.5.15379: Flags [.], ack 9, win 114, options [nop,nop,TS val 3320472861 ecr 3987447308], length 0\n\t0x0000:  4500 0034 24f8 4000 4006 403f ac10 1c67  E..4$.@.@.@?...g\n\t0x0010:  ac10 6105 1a0c 3c13 edea 41ed c561 df5a  ..a...<...A..a.Z\n\t0x0020:  8010 0072 bf49 0000 0101 080a c5ea 651d  ...r.I........e.\n\t0x0030:  edab 9e0c                                ....\n\nyou can see the real payload data is \"47 45 54 20 2f 0d 0a\" (7 bytes in Hex)",
      "(In reply to Mark Thomas from comment #1)\n> Tomcat tightened up the HTTP 0.9 parsing. It looks like there is an issue\n> with requests of the form:\n> \n> GET / LF\n> \n> Prior to the parsing changes, this would have been accepted as a (malformed)\n> HTTP 0.9 request. It is now rejected as an invalid HTTP 1.1 request. The\n> HTTP 0.9 spec allows either way of handling the request.\n> \n> I'll take a look to see if the parsing can be relaxed to accept requests\n> like this without creating problems elsewhere.\n> \n> I'm curious. What clients are you using that sent malformed HTTP 0.9\n> requests?\n\n\nI think the \"GET /CRLF\" is a valid HTTP 0.9 requet\nin RFC1945:\n\nSimple-Request  = \"GET\" SP Request-URI CRLF\n\nand one strange thing is sometime tomcat will response content for this kind of request and sometime won't.",
      "Why is 0.9 support not removed by now ? It sounds *quite* ridiculous to still have it (clients which insist would still get something back).",
      "(In reply to Remy Maucherat from comment #4)\n> Why is 0.9 support not removed by now ? It sounds *quite* ridiculous to\n> still have it (clients which insist would still get something back).\n\n+1 for this in Tomcat 10.",
      "(In reply to Remy Maucherat from comment #4)\n> Why is 0.9 support not removed by now ? It sounds *quite* ridiculous to\n> still have it (clients which insist would still get something back).\n\nIt is F5's default setting :(\nand we can't change F5's setting by ourselves :(",
      "(In reply to dingli from comment #6)\n> (In reply to Remy Maucherat from comment #4)\n> > Why is 0.9 support not removed by now ? It sounds *quite* ridiculous to\n> > still have it (clients which insist would still get something back).\n> \n> It is F5's default setting :(\n> and we can't change F5's setting by ourselves :(\n\nYou have paid for a commercial product you should have support for that. mod_proxy does a simple HEAD request against / with HTTP/1.1. Works flawlessly.",
      "(In reply to Michael Osipov from comment #7)\n> (In reply to dingli from comment #6)\n> > (In reply to Remy Maucherat from comment #4)\n> > > Why is 0.9 support not removed by now ? It sounds *quite* ridiculous to\n> > > still have it (clients which insist would still get something back).\n> > \n> > It is F5's default setting :(\n> > and we can't change F5's setting by ourselves :(\n> \n> You have paid for a commercial product you should have support for that.\n> mod_proxy does a simple HEAD request against / with HTTP/1.1. Works\n> flawlessly.\n\nyes, we can make a ticket to network maintenance department and wait.\nit is a long time process :(\n\nanyway, the upgrade from 8.5.50 to 8.5.51/8.5.53 will break some tomcat instance behind F5 load balancer.",
      "Anyway, about the actual \"issue\", I don't see how it happens right now.",
      "I fail to see the problem so I added a test case to test HTTP/0.9 support (using \"GET /CRLF\"), and it works for me.",
      "(In reply to Michael Osipov from comment #5)\n> (In reply to Remy Maucherat from comment #4)\n> > Why is 0.9 support not removed by now ? It sounds *quite* ridiculous to\n> > still have it (clients which insist would still get something back).\n> \n> +1 for this in Tomcat 10.\n\n-1 for this in Tomcat 10.\n\nThere are a huge number of stupid devices in the world that nobody can change. Sure, you can tell everyone using NoName-brand WiFi light bulbs that HTTP/0.9 is dead, but you can't tell F5 that HTTP/0.9 is dead and they had better upgrade.",
      "(In reply to Christopher Schultz from comment #11)\n> (In reply to Michael Osipov from comment #5)\n> > (In reply to Remy Maucherat from comment #4)\n> > > Why is 0.9 support not removed by now ? It sounds *quite* ridiculous to\n> > > still have it (clients which insist would still get something back).\n> > \n> > +1 for this in Tomcat 10.\n> \n> -1 for this in Tomcat 10.\n> \n> There are a huge number of stupid devices in the world that nobody can\n> change. Sure, you can tell everyone using NoName-brand WiFi light bulbs that\n> HTTP/0.9 is dead, but you can't tell F5 that HTTP/0.9 is dead and they had\n> better upgrade.\n\nThis is the same discussion as with the dropped reason phrase. HTTP/1.1. has been introduced almost 21 years ago. If F5 Networks did not manage to update their code in 21 years, they won't do it ever.",
      "(In reply to Michael Osipov from comment #12)\n> (In reply to Christopher Schultz from comment #11)\n> > (In reply to Michael Osipov from comment #5)\n> > > (In reply to Remy Maucherat from comment #4)\n> > > > Why is 0.9 support not removed by now ? It sounds *quite* ridiculous to\n> > > > still have it (clients which insist would still get something back).\n> > > \n> > > +1 for this in Tomcat 10.\n> > \n> > -1 for this in Tomcat 10.\n> > \n> > There are a huge number of stupid devices in the world that nobody can\n> > change. Sure, you can tell everyone using NoName-brand WiFi light bulbs that\n> > HTTP/0.9 is dead, but you can't tell F5 that HTTP/0.9 is dead and they had\n> > better upgrade.\n> \n> This is the same discussion as with the dropped reason phrase. HTTP/1.1. has\n> been introduced almost 21 years ago. If F5 Networks did not manage to update\n> their code in 21 years, they won't do it ever.\n\nF5 can send HTTP/1.0 or HTTP/1.1 request in http monitor. but ths stupid thing is  the default setting is HTTP/0.9 \n\nwe have change the F5 setting last night,now it works for tomcat 8.5.53",
      "(In reply to Remy Maucherat from comment #10)\n> I fail to see the problem so I added a test case to test HTTP/0.9 support\n> (using \"GET /CRLF\"), and it works for me.\n\nyesterday I can reproduce the bug in my local windows machine and local Ubuntu VM sometime(NOT everytime)\nbut I can't reproduce it today :(\nmaybe it is related with some corner case ? such as uninitialized variable or memory?\n\nBut for tomcat 8.5.51, I can reproduce it everytime\ntomcat 8.5.51 won't send content for \"GET /CRLF\" same as 8.5.53\nthe difference is 8.5.53 will close the socket immediately  \n8.5.51 will keep the socket open and close the socket after 20 seconds\n\nbelow is the tomcat 8.5.51 catalina log:\n\n20-Mar-2020 13:13:37.718 FINE [http-nio-8080-exec-3] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Processing socket [org.apache.tomcat.util.net.NioChannel@6fc5100f:java.nio.channels.SocketChannel[connected local=/192.168.31.50:8080 remote=/192.168.31.6:51783]] with status [OPEN_READ]\n20-Mar-2020 13:13:37.719 FINE [http-nio-8080-exec-3] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Found processor [null] for socket [org.apache.tomcat.util.net.NioChannel@6fc5100f:java.nio.channels.SocketChannel[connected local=/192.168.31.50:8080 remote=/192.168.31.6:51783]]\n20-Mar-2020 13:13:37.719 FINE [http-nio-8080-exec-3] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Popped processor [org.apache.coyote.http11.Http11Processor@2d8c7e6c] from cache\n20-Mar-2020 13:13:37.719 FINE [http-nio-8080-exec-3] org.apache.coyote.http11.Http11InputBuffer.parseRequestLine Received [GET /^M\n]\n20-Mar-2020 13:13:37.725 FINE [http-nio-8080-exec-3] org.apache.coyote.AbstractProcessorLight.process Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@3eced8ba:org.apache.tomcat.util.net.NioChannel@6fc5100f:java.nio.channels.SocketChannel[connected local=/192.168.31.50:8080 remote=/192.168.31.6:51783]], Status in: [OPEN_READ], State out: [LONG]\n20-Mar-2020 13:13:57.751 FINE [http-nio-8080-exec-4] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Processing socket [org.apache.tomcat.util.net.NioChannel@6fc5100f:java.nio.channels.SocketChannel[connected local=/192.168.31.50:8080 remote=/192.168.31.6:51783]] with status [ERROR]\n20-Mar-2020 13:13:57.751 FINE [http-nio-8080-exec-4] org.apache.coyote.AbstractProtocol$ConnectionHandler.process Found processor [org.apache.coyote.http11.Http11Processor@2d8c7e6c] for socket [org.apache.tomcat.util.net.NioChannel@6fc5100f:java.nio.channels.SocketChannel[connected local=/192.168.31.50:8080 remote=/192.168.31.6:51783]]\n20-Mar-2020 13:13:57.751 FINE [http-nio-8080-exec-4] org.apache.coyote.AbstractProtocol.removeWaitingProcessor Removed processor [org.apache.coyote.http11.Http11Processor@2d8c7e6c] from waiting processors\n20-Mar-2020 13:13:57.752 FINE [http-nio-8080-exec-4] org.apache.coyote.AbstractProcessorLight.process Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@3eced8ba:org.apache.tomcat.util.net.NioChannel@6fc5100f:java.nio.channels.SocketChannel[connected local=/192.168.31.50:8080 remote=/192.168.31.6:51783]], Status in: [ERROR], State out: [CLOSED]\n20-Mar-2020 13:13:57.753 FINE [http-nio-8080-exec-4] org.apache.coyote.AbstractProtocol$ConnectionHandler.release Pushed Processor [org.apache.coyote.http11.Http11Processor@2d8c7e6c]",
      "(In reply to Remy Maucherat from comment #4)\n> Why is 0.9 support not removed by now ? It sounds *quite* ridiculous to\n> still have it (clients which insist would still get something back).\n\n+1 from me too.",
      "(In reply to dingli from comment #13)\n> F5 can send HTTP/1.0 or HTTP/1.1 request in http monitor. but ths stupid\n> thing is  the default setting is HTTP/0.9 \n> \n> we have change the F5 setting last night,now it works for tomcat 8.5.53\n\nIn that case, I can probably withdraw my -1. It would be nice to know if there are any major players out there who still *require* anything like HTTP/0.9.",
      "There is a regression in 8.5.51 (and probably 9.0.31, 7.0.100 and 10.0.0-M1) that means HTTP 0.9 requests of the form \"GET /CRLF\" are not processed correctly. The root cause is the improved CRLF parsing for headers. The CRLF on the request line is not fully parsed so the LF gets passed to the header parsing that then waits for more data. This is why the 20s timeout is observed with 8.5.51.\n\nWith 8.5.53 things are better but there is still an edge case. \"GET / LF\" which is either a malformed but allowable HTTP 0.9 request or an illegal HTTP /1.1 request (Tomcat opts for HTTP 0.9) may fail if the request line is split across multiple packets (which you may see when testing depending on the testing tools you use).\n\nI'm working on a fix for this edge case.",
      "The final edge case has been fixed in:\n- master for 10.0.0-M4 onwards\n- 9.0.x for 9.0.34 onwards\n- 8.5.x for 8.5.54 onwards\n- 7.0.x for 7.0.104 onwards"
    ],
    "creation_ts": "2020-03-19T03:18:43Z",
    "fixes": [
      64240
    ]
  },
  {
    "id": 66203,
    "summary": "Better error message than \"llegalStateException: No output folder\" in JspCompilationContext.createOutputDir()",
    "description": "in org.apache.jasper.JspCompilationContext.createOutputDir(JspCompilationContext.java:697), please\n\n1) say which folder is attempted to be created\n2) what userId the current tomcat is running under\n3) what permission rights are found on the super-directory\n\nThis would make it a lot easier to diagnose.\n\nProbably it was a permission rights problem as in\nhttps://stackoverflow.com/questions/18348741/message-java-lang-illegalstateexception-no-output-folder",
    "comments": [
      "1. I do not like adding details like that to an exception message.\n\nAs can be seen from the stackoverflow link, the error message is being shown to a visitor of a web site.\n\nShowing them installation details is a bad idea.\n\n\n2. It should be possible to add a log statement.\n\nE.g. the actual path of a directory.\n\nThough note that\n\na. There exists a\norg.apache.catalina.startup.VersionLoggerListener\n\nIt already logs valuable information.\n\nb. A care would better be taken to do not flood the logs.\n\nIt should not be logged more often than usual JSP compilation errors, when Jasper is configured with development=false.\n\n\n> 1) say which folder is attempted to be created\n\nThe \"catalina.base\" directory is logged.\nIt is possible to derive the rest of the path from there.\n\n\n> 2) what userId the current tomcat is running under\n\nThis will be logged if VersionLoggerListener is configured with logProps=true. The \"user.name\" property is it.\n\nMaybe it is worth to improve VersionLoggerListener to log a value of the \"user.name\" property unconditionally, by default.\n\nThough if Tomcat is launched via jsvc, Tomcat may initialize under one user, and then start under another one.\n \nhttps://commons.apache.org/proper/commons-daemon/jsvc.html\n\n\n> 3) what permission rights are found on the super-directory\n\nA failing File.mkdirs() call does not provide such details.\n\nAlso, what is meant by permissions differs between operating systems.",
      "I've added an ERROR level log message that reports the full path to the directory that can't be created. That should be sufficient for the system admin to debug the issue.\n\nI agree with Konstantin that permissions management varies too much between operating systems for provision of more detailed debugging information to be practical.\n\nThe message gets logged once per compilation failure (not once per request to the JSP). Given that JSP compilation is fundamentally broken in these circumstances, that level of logging does not seem excessive.",
      "Fixed in:\n- 10.1.x for 10.1.0-M21 onwards\n- 10.0.x for 10.0.25 onwards\n-  9.0.x for  9.0.66 onwards\n-  8.5.x for  8.5.83 onwards"
    ],
    "creation_ts": "2022-08-04T10:27:54Z",
    "fixes": [
      66203
    ]
  },
  {
    "id": 66209,
    "summary": "CPU regression when classpath Bloom filters are active",
    "description": "Created attachment 38363\nPatch with one-line fix and relevant unit test\n\nOn applications with large classpaths, enabling UseBloomFilterForArchives tremendously accelerates classpath scans by performing early exits on each jar, rather than accessing the manifest.  Unfortunately the underlying Bloom filters can be cleaned at runtime by AbstractArchiveResourceSet.gc(), which forces the next classpath scan to reinitialize the entire set of bloom filters.  On our large application we are therefore observing both huge improvements to startup, and huge cpu regressions while handling traffic.\n\nI've attached a patch containing a one-line fix, as well as a unit test that detects the error.",
    "comments": [
      "This patch essentially trades memory for performance. We have some users that won't want to make that trade - even if the memory concerned is relatively small.\n\nGiven the competing demands here, I think we need to find a way to make this configurable. Whether that is by expanding useBloomFilterForArchives beyond a simple boolean, by tweaking the background processing frequency or by a new configuration option is TBD. I want to mull this over a little bit before making any changes.\n\nThoughts?",
      "I had a hand in the original implementation, and the intent was always to create the Bloom filters once and keep them around forever.  In our internal implementation (Tomcat 8) we did exactly that.  Relative to the intent, this is a bug.\n\nHowever, you have a valid point that the current state may be acceptable for some users, and changing it could cause challenges.  FWIW the memory footprint is quite small - we saw ~1.5MB of heap to accommodate ~4000 jars.\n\nI'll defer to your judgment.  Adding another configuration parameter is certainly doable.",
      "(In reply to Mark Thomas from comment #1)\n> This patch essentially trades memory for performance. We have some users\n> that won't want to make that trade - even if the memory concerned is\n> relatively small.\n> \n> Given the competing demands here, I think we need to find a way to make this\n> configurable. Whether that is by expanding useBloomFilterForArchives beyond\n> a simple boolean, by tweaking the background processing frequency or by a\n> new configuration option is TBD. I want to mull this over a little bit\n> before making any changes.\n> \n> Thoughts?\n\n+1\n\ntrue = use the bloom filter as exists today\nfalse = do not use the bloom filter\nwankel = use the bloom filter with cache-purges\n\nI think it makes sense to re-name/alias the current setting to something more clear such as \"archiveIndexing\" with values like \"simple\", \"bloom\" and now \"purged-bloom\" or whatever.",
      "> I think it makes sense to re-name/alias the current setting to something\n> more clear such as \"archiveIndexing\" with values like \"simple\", \"bloom\" and\n> now \"purged-bloom\" or whatever.\n\nI like this suggestion.",
      "As the set of entries in Jar is known in advance, and the entries are not modified, Xor Filter might be better.\n\nSee \nhttp://web.stanford.edu/class/archive/cs/cs166/cs166.1216/lectures/13/Slides13.pdf#page=49\n\nhttps://github.com/FastFilter/xorfilter",
      "(In reply to Vladimir Sitnikov from comment #5)\n> As the set of entries in Jar is known in advance, and the entries are not\n> modified, Xor Filter might be better.\n> \n> See \n> http://web.stanford.edu/class/archive/cs/cs166/cs166.1216/lectures/13/\n> Slides13.pdf#page=49\n> \n> https://github.com/FastFilter/xorfilter\n\nThank you for the links!  It appears to me that Xor has lower memory usage but increases the cost of a lookup.  For our applications, that is the wrong tradeoff, however it may work as another value of \"archiveIndexing\".",
      "> It appears to me that Xor has lower memory usage but increases the cost of a lookup\n\nWould you please clarify why you expect Xor filters to have a slower lookup?\n\nSee https://arxiv.org/pdf/1912.08258.pdf\nTable 3. Membership-test benchmark results, 25% find. Timings are in nanosecond per query.\n\n\nXor filters might be faster than Bloom filters.\n\nThe key tradeoff is that Bloom filter allow \"adding more elements to the set\", while Xor filter does not support \"add(...)\" command.",
      "Sure - looking at the specific code in https://github.com/FastFilter/xorfilter/blob/master/xorfilter.go vs https://github.com/apache/tomcat/blob/9.0.x/java/org/apache/catalina/webresources/JarContents.java, the Bloom filter uses two hashes and two bitwise lookups; the Xor filter uses three hashes and three reduce operations.  Two hashes vs three is an implementation detail but the extra work of the reduces, although small, may come down to the number of instructions required.  I don't have the expertise to address that point, but at a minimum there are more method calls and any associated overhead.\n\nAs I reread the code though, I notice that the current JarContents code uses a fixed-length array of bits, and the Xor filter uses a variable length array of uint8.  Fixed vs. variable length can be addressed, but bit vs uint8 certainly does.  For a given number of buckets, the JarContents implementation will therefore be far smaller in memory.  I think?\n\nHowever, this conversation isn't tied to the bug/feature/behavior about memory cleanup.  Might be interesting to chase this separately as an enhancement.",
      "Sounds like we have general agreement on updating the configuration switch to contain more than just true/false, so the remaining questions are:\n\n1. Do we indeed agree?\n2. Should I do the updated patch, or is one of the committers available to do it?  I'm willing.\n\n Thanks!\n   John",
      "Thanks for the offer of a patch. Please go ahead.",
      "I'm working with John on the updated patch. I'm going to go ahead with updating the \"UseBloomFilterForArchives\" setting to something similar to what Christopher mentioned:\n\n> I think it makes sense to re-name/alias the current setting to something\n> more clear such as \"archiveIndexing\" with values like \"simple\", \"bloom\" and\n> now \"purged-bloom\" or whatever.\n\nDo we know of a similar change that was made in the past?",
      "A related issue: it should probably be on the WebResourceRoot rather than the context.\n\ntrimSpaces for JSPs did something similar (boolean -> String).",
      "I'm worried that adding a new switch on WebResourceRoot that depends on the old switch on Context (for backwards-compatibility) could confuse the config for applications",
      "(In reply to Rahul Jaisimha from comment #13)\n> I'm worried that adding a new switch on WebResourceRoot that depends on the\n> old switch on Context (for backwards-compatibility) could confuse the config\n> for applications\n\nWe made similar changes in the past (between 7.0.x and 8.0.x) for allowLinking and friends. If we follow the same pattern, the setting would move to WebResourceRoot for 10.1.x but remain on the Context for 10.0.x and earlier.",
      "Here's what I'll do: For 9.0.x and 10.0.x, I'll add a third option to the existing switch \"useBloomFilterForArchives\" and support the following options: [\"true\", \"false\", \"purged\"]. This is similar to what was done with trimSpaces: \n\nhttps://github.com/apache/tomcat/commit/b527e70e3089c1e3fe499439ef8838e8a3730f36#diff-ead8d9adcc700eb19d039da0cf41ec2806ac11a669a575129176b0ae1ba52a84\n\nFor 10.1.x, I'll remove \"useBloomFilterForArchives\" from Context and add \"archiveIndexing\" in WebResourceRoot which supports the following options: [\"simple\", \"bloom\", \"purged-bloom\"].\n\nIs that ok?",
      "(In reply to Rahul Jaisimha from comment #15)\n> Here's what I'll do: For 9.0.x and 10.0.x, I'll add a third option to the\n> existing switch \"useBloomFilterForArchives\" and support the following\n> options: [\"true\", \"false\", \"purged\"]. This is similar to what was done with\n> trimSpaces: \n> \n> https://github.com/apache/tomcat/commit/\n> b527e70e3089c1e3fe499439ef8838e8a3730f36#diff-\n> ead8d9adcc700eb19d039da0cf41ec2806ac11a669a575129176b0ae1ba52a84\n> \n> For 10.1.x, I'll remove \"useBloomFilterForArchives\" from Context and add\n> \"archiveIndexing\" in WebResourceRoot which supports the following options:\n> [\"simple\", \"bloom\", \"purged-bloom\"].\n> \n> Is that ok?\n\nI apologize, I just want to update my previous comment. The supported options for 9.0.x and 10.0.x for \"useBloomFilterForArchives\" will be [\"true\", \"false\", \"retained\"].\n\nTrue: purged bloom filter\nFalse: no bloom filter\nRetained: Updated bloom filter without purging",
      "+1",
      "I want to add an IllegalArgumentException to the setter if the input value is unrecognized for [\"true\", \"false\", \"retained\"]. Assuming this is the right thing to do, how do I get the localized/internationalized exception message to use for this?. I can update LocalStrings.properties but I don't know how to update LocalStrings_es.properties or LocalStrings_de.properties for the new exception message.",
      "You don't need to. Volunteers will complete those translations over time. For languages without a translation, the English version will be used.",
      "We've realized the proposed change (updating useBloomFilterForArchives from boolean to String) is a breaking change, since the setter for this value is exposed publically. The two options to get around this and maintain backward-compatibility are:\n\n1. Mark the boolean Setter as Deprecated and add a String Setter. The Getter would remain a boolean and return whether a bloom filter is to be used (true for \"TRUE\" and \"RETAINED\"). A second getter would have to be exposed to understand if useBloomFilterForArchives is \"RETAINED\". This could also be boolean.\n\n2. Maintain the original boolean \"useBloomFilterForArchives\" and add a second boolean parameter \"retainBloomFilter\". The logic for re-initializing the bloom filter would depend on both parameters. \"retainBloomFilter\" will default to false and will maintain the existing behavior for \"useBloomFilterForArchives\". The existing behavior will also be retained if \"useBloomFilterForArchives\" is false. Only if \"retainBloomFilter\" is true and \"useBloomFilterForArchives\" is true, then will the bloom filter avoid re-initialization.\n\nFor 10.1.x we will maintain the same solution, since this can be non-backwards-compatible:\n\n> For 10.1.x, I'll remove \"useBloomFilterForArchives\" from Context and add \"archiveIndexing\" in WebResourceRoot which supports the following options: [\"simple\", \"bloom\", \"purged-bloom\"].",
      "10.1.x is now stable so the plan needs to account for that too.\n\nGiven the context how about this:\n\n- leave useBloomFilterForArchives as a boolean on the Context\n  - deprecate this for all versions (to be removed in Tomcat 11)\n- add archiveIndexing as a String attribute on WebResourceRoot",
      "(In reply to Mark Thomas from comment #21)\n> 10.1.x is now stable so the plan needs to account for that too.\n> \n> Given the context how about this:\n> \n> - leave useBloomFilterForArchives as a boolean on the Context\n>   - deprecate this for all versions (to be removed in Tomcat 11)\n> - add archiveIndexing as a String attribute on WebResourceRoot\n\nI like this solution. In that case, \"useBloomFilterForArchives\" will be honored if \"archiveIndexing\" is \"false\" (default). If \"archiveIndexing\" is set (any value other than \"false\"), then it will override \"useBloomFilterForArchives\".\n\nAgree with this behavior?",
      "+1",
      "Created attachment 38402\nUpdated patch that makes the bloom filter purging configurable",
      "Created attachment 38403\nUpdated patch that makes the bloom filter purging configurable - Tomcat9",
      "I've attached the updated patch diffs that contain the configurable \"archiveIndexStrategy\" on WebResourceRoot as discussed. The diff is slightly different in tomcat9.0.x due to some file name changes between 9.0.x and 10.0.x. 10.0.x and 10.1.x diffs look the same.",
      "Thanks for the patches. I applied a slightly modified version.\n\nFixed in:\n- 10.1.x for 10.1.2 onwards\n-  9.0.x for  9.0.69 onwards",
      "I was looking over the changes, and should AbstractSingleArchiveResourceSet also rely upon the same configuration honor the retain and bloom filter setting?\n\nIt makes for inconsistent behavior if only one of the ArchiveResourceSet classes uses it.",
      "(In reply to gabriel.hollies from comment #28)\n> I was looking over the changes, and should AbstractSingleArchiveResourceSet\n> also rely upon the same configuration honor the retain and bloom filter\n> setting?\n> \n> It makes for inconsistent behavior if only one of the ArchiveResourceSet\n> classes uses it.\n\nWhy do you think it doesn't?"
    ],
    "creation_ts": "2022-08-11T18:06:43Z",
    "fixes": [
      66209
    ]
  },
  {
    "id": 57142,
    "summary": "JSP 2.3 & EL 3.0 - %page import directive & EL ImportHandler",
    "description": "The JSP 2.3 Spec mentions in \"Table JSP.1-8\" \"Page Directive Attributes\" that \"An import attribute describes the types that are available to\nthe scripting environment.\" \n\nSo if you had a JSP page with <%page import=\"org.test.*\" the \"org.test\" package reference does not make it into the EL context's ImportHandler for resolving classes. This all does depend however, if as by the term \"scripting environment\" the EL expressions are included.\n\nIf JSP 2.3 is to support resolving static fields etc(Bug #57141), like enums then it makes sense that the import attribute would make available those packages/classes to the EL processor. To make custom classes/enums work other than the default java.lang.* for example ${MyCarEnum.PONTIAC == car.make}\n\nThe current workaround for importing packages into the EL processor in jsp pages is to use something like the following in the contextInitialized method inside a ServletContextListener...\n\nJspFactory.getDefaultFactory().getJspApplicationContext(sce.getServletContext()).addELContextListener((ELContextEvent e) -> {\n    e.getELContext().getImportHandler().importPackage(\"org.test.util\");\n    e.getELContext().getImportHandler().importPackage(\"org.test.enums\");\n});",
    "comments": [
      "This is one of several areas that could benefit from some clarification in the JSP spec.\n\nNote the approach suggested above will add the imports to every JSP page in the application. On a per page basis you can use:\n<%\npageContext.getELContext().getImportHandler().importStatic(\"java.lang.Integer.MAX_VALUE\");\n%>\n\nMy current thinking os that this behaviour could be optional - i.e. controlled by configuration - until such time as there is some clarification in the JSP spec.",
      "Marking this as an enahncement request.\n\nConfiguration via a servlet context init-param is probably the way I'd look to implement this. Not sure whether to enable or disable by default at this point.",
      "> The JSP 2.3 Spec mentions in \"Table JSP.1-8\" \"Page Directive Attributes\" that\n> \"An import attribute describes the types that are available to\n> the scripting environment.\" \n\nOriginally the \"scripting environment\" as mentioned in JSP spec is just the java language. If that covers EL as well then it would better be explicitly explained as a chapter in section JSP.2 that defines interaction between EL and JSP.\n\n\nIn chapter JSP.1.10.1 The page Directive in Table JSP.1-8 it also says that\n\"Packages java.lang.*, javax.servlet.*, javax.servlet.jsp.*, and javax.servlet.http.* are imported implicitely by the JSP container.\"\n\nThe EL.3.0 chapter 1.22.1 Access Restrictions and Imports says that only \"java.lang.*\" is imported, for security reasons.\n\n[quote]\nFor security, the following restrictions are enforced.\n... 3. Except for classes with java.lang.* package names, a class has to be explicitly imported before its static fields or methods can be referenced.\n[/quote]\n\nSo if page imports should affect the EL, then how does it deal with those default imports from servlet packages?  The safer default would be to just import java.lang.*, but it would be odd to require someone to explicitly import those servlet packages with @page directive.",
      "I think it would be fair to say to merge the two statements. JSP spec says as you stated, \"Packages java.lang.*, javax.servlet.*, javax.servlet.jsp.*, and javax.servlet.http.* are imported implicitly by the JSP container.\"\n\nThen the EL spec says \"For security, the following restrictions are enforced.\n... 3. Except for classes with java.lang.* package names, a class has to be explicitly imported before its static fields or methods can be referenced.\"\n\nMeaning that \"javax.servlet.*, javax.servlet.jsp.* and javax.servlet.http.*\" would NOT be included by default into the EL import handler. Unless \"explicitly\" imported using @page import=\"\".\n\nBecause at face value when you make a JSP page that you specify <@page import=\"org.test.*\"... you expect EL to be able to use those objects. After you call ${MyCarEnum.PONTIAC} you start bashing your head as to why X server is bugged as <%= MyCarEnum.PONTIAC %> is working, and the current recommendation is to use EL instead of scriptlets. Not only does this confuse the user on what to do next and how to get it working (they would need to find this page, and use Marks work-around or apply to all of jsp) it also confuses IDE makers as to how to provide auto-complete for EL syntax, the page directive would make the most sense.\n\nI also would provide this functionality by default until the spec is clarified(how long will that take), because a user is just going to think this is a bug and try to work around it with scriptlets most likely. Or if you guys have the contacts to get an official clarification that would be ideal.\n\nThese comments are however just my two cents.",
      "Those are all good points. Please can you add them to https://java.net/jira/browse/JSP-44 ?",
      "Thanks Mark. I'll add them tonight",
      "It seems that the clarification recommendation(per kchung on the JIRA link mentioned in comment#5) is that EL is covered by the \"scripting environment\" label in relation to the JSP page import attribute. The EL environment should contain all the default packages that are included in JSP, to keep it consistent. Those being java.lang.*, javax.servlet.*, javax.servlet.jsp.*, and javax.servlet.http.*\n\nAlso currently the imports should be resolved in the ScopedAttributeELResolver for now, as bug#57141 corrects already",
      "Fixed in trunk. I'll leave it a few days for folks to comment before back-porting it to 8.0.x.",
      "Reviewing r1642233 and r1642280.\n\nIn general:\na) I wonder whether we can do some work once when JSP page servlet class initializes, instead of doing everything a-new on each request.\n\nb) I wonder whether all ImportHandler.importFoo() methods can be made faster. \n\nc) I think that pageContext.getELContext() is not fast, as it has to initialize the ELContext, and ELContext is not reused between requests.\n\n\nFor b):\n======\n1. E.g. is Class.forName(), Package.getPackage() validation needed at import time? Can it store imports as Map<String shortName,String fullName> and defer Class.forName() calls?\n\nFrom Javadoc, I do not see a need for validation at import time.\n\nhttp://docs.oracle.com/javaee/7/api/javax/el/ImportHandler.html\n\nThe javadoc mentions trivial \"class name contains '.'\" check. We need to do lastIndexOf('.') to split class name from package name and \"no '.'\" found is a clear error condition.\n\n\n2. I think there is a bug in ImportHandler.findClass().\n\nIt shall not use Class.forName(), but use TCCL. I expect that Class.forName() does not use WebappClassLoader and that it cannot load webapp classes.\n\n(Not tested)\n\nAs a contrast, ImportHandler.importPackage() already uses TCCL when validating a Package.\n\n\nFor c):\n=====\n3. Move the code that initializes imports from JSP class (the code that Generator adds in r1642233) and move it into PageContextImpl.getELContext() where ELContext is created.\n\nThis removes the need for PageInfo.isELUsed() flag added in r1642233 and premature initialization of ELContext that Generator adds to JSP pages.  The PageContextImpl.getELContext() method may initialize it when it is needed for the first time.\n\nTrivial\n======\n4. in ImportHandler.findClass() r1642280:\nThe \"int modifiers = clazz.getModifiers();\" call can be skipped when validate==false.",
      "Per comment #9's mention of #2 I ran into this issue with the class loader before, I believe what I was doing was accessing EL 3.0 classes directly in the context initialize listener and it could not see my classes, I ended up writing my own EL Resolver that resolved my classes, since my resolver was created in the servlets class loader.\n\nI wasn't sure how to fix it or how its truly suppose to function so I didn't report it and made my own work around.\n\nAs for \"C\" is it better to reuse the ELContext instead of creating it each time? Wouldn't the object need to be reset and synchronized for every request to that jsp? I didn't look at the code so I don't know the in's and outs of how jsps are processed, but if you wanted to do that maybe a ThreadModel would work to avoid synchronizing, just a thought.",
      "(In reply to Konstantin Kolinko from comment #9)\n> a)\n\nWe could do some pre-processing of the imports. Not sure how much it would speed things up. Needs some testing to see if this part is a bottle neck.\n\n> b) 1.\n\nYes, I think things could be deferred which should give some performance improvements. Again, testing is required to see how much gain we get from this.\n\n> b) 2.\n\nAgreed. Possible bug. Need to test and confirm.\n \n> c)\n\nPageContextImpl doesn't have access to the imports. They'd have to be exposed somehow e.g. via the Servlet.",
      "Switch this to bug now we have clarification of the required behaviour from the spec lead.",
      "a) and c) are addressed in r1644516 for trunk.\n\nLooking at b) next.",
      "b) address in r1644523 for trunk.",
      "This has been fixed in 8.0.x for 8.0.16 onwards."
    ],
    "creation_ts": "2014-10-24T21:57:09Z",
    "fixes": [
      57142
    ]
  },
  {
    "id": 50984,
    "summary": "Manager application fails to report stranded artifacts when undeploying",
    "description": "[NOTE: this is tomcat 7.0.11, not 7.0.10, but the version is not given as a choice, I therefore file it as 7.0.10, which I suspect has the same bug]\n\nScenario:\n\n* tomcat starts, as user u1, with only the manager application in place;\n* it is configured as to not deploy automatically;\n* user u1 copies a webapp tree into $CATALINA_HOME/webapps, which it\ncan since it has write/execute access to this directory;\n* the manager webapp is called to deploy that new web application;\n* [in between, credentials on the deployed webapp directory are\nchanged so that user u1 cannot remove the webapp at all]\n* the manager webapp is called to undeploy that application, BUG: it\nanswers OK, but it is not.\n\nThe manager webapp documentation explicitly states that undeploying an\napplication means that the webapp tree is removed - but of course, in\nthis case it isn't. Use case below, where $CATALINA_HOME/webapps is a symlink to /var/lib/o3/tomcat/installs:\n\n----\n# Only manager webapp running initially\n[o3@tomcat-r8 cockpit]$ wget -O - -q --http-user=tomcat\n--http-password=tomcat  http://localhost:8080/manager/text/list|sed 1d\n/manager:running:6:/usr/share/tomcat7/webapps/manager\n# webapp tree is created by other means. Now deploying the application:\n[o3@tomcat-r8 cockpit]$ wget -O - -q --http-user=tomcat --http-password=tomcat http://localhost:8080/manager/text/deploy'?path=/cockpit&war=file:/var/lib/o3/tomcat/installs/cockpit'\nOK - Deployed application at context path /cockpit\n[...]\n# In another terminal:\n[root@tomcat-r8 installs]# pwd\n/var/lib/o3/tomcat/installs\n# All files are created with umask 022. Just change the owner:\n[root@tomcat-r8 installs]# chown -R root.root cockpit/\n[...]\n# Back to the first terminal:\n[o3@tomcat-r8 cockpit]$ wget -O - -q --http-user=tomcat --http-password=tomcat\nhttp://localhost:8080/manager/text/undeploy?path=/cockpit\nOK - Undeployed application at context path /cockpit\n# Here is the bug: even though the command returns OK, the tree still exists.\n# The webapp is stopped, but it is not undeployed.\n[o3@tomcat-r8 cockpit]$ wget -O - -q --http-user=tomcat\n--http-password=tomcat  http://localhost:8080/manager/text/list|sed 1d\n/manager:running:9:/usr/share/tomcat7/webapps/manager  \n/cockpit:stopped:0:cockpit\n# Listing the contents of $CATALINA_HOME/webapps, we see that the tree is still \n# there:\n[o3@tomcat-r8 cockpit]$ ls /var/lib/o3/tomcat/installs\ncockpit\n----\n\nThe documentation states:\n\n----\nWARNING - This command will delete any web application artifacts that exist within appBase directory (typically \"webapps\") for this virtual host. This will\ndelete the the application .WAR, if present, the application directory resulting either from a deploy in unpacked form or from .WAR expansion as well as the XML Context definition from $CATALINA_BASE/conf/[enginename]/[hostname]/ directory.\n----\n\nThis turns out to be false in this case. While the application is stopped, the web application artifacts are NOT removed. The\nundeploy command should have failed with, say \"FAIL - context was stopped but some articats remain, check access rights\". What's more, the logs\ndon't mention that the webapp tree has failed to be removed at all.\n\nIf I chown back the webapp tree to its rightful owner, then the webapp\nis indeed undeployed as intended: all artifacts are destroyed.\n\nThe culprit code seems to be at org/apache/catalina/manager/ManagerServlet.java, methods undeploy() and undeployDir(). Both use the .delete() method of File objects, but fail to check their return code.",
    "comments": [
      "Version added to database and issue updated.",
      "Fixed in 7.0.x and will be included in 7.0.12 onwards."
    ],
    "creation_ts": "2011-03-28T03:42:36Z",
    "fixes": [
      50984
    ]
  },
  {
    "id": 63556,
    "summary": "Mark request as forwarded in RemoteIpValve and RemoteIpFilter",
    "description": "In some situations you'd like to know from a component whether your request has been forwarded by a reverse proxy.\n\nA real life usecase:\n\nHTTPd => Tomcat; Tomcat does auth, logs in access.log => HTTPd => logs in access.log, REMOTE_USER is empty. Logs are inconsistent.\n\nIf this flag is set AuthenticatorBase can check this and write request#getRemoteUser() + auth method to the response headers which HTTPd can picked up and make access.log consistent.\n\nThis is required by: 62496\n\nA PR is in preparation.",
    "comments": [
      "PR delivered: https://github.com/apache/tomcat/pull/178\n\nWill then back port.",
      "Fixed in:\n- master for 9.0.23 onwards\n- 8.5.x for 8.5.44 onwards\n- 7.0.x for 7.0.95 onwards"
    ],
    "creation_ts": "2019-07-09T14:00:46Z",
    "fixes": [
      63556
    ]
  },
  {
    "id": 68546,
    "summary": "Performance optimization in PageContextImpl.getELContext()",
    "description": "Created attachment 39554\nSpeed test\n\nA high-volume, latency sensitive application reports that org.apache.jasper.runtime.PageContextImpl.getELContext() uses 0.11% of cpu, of which 0.07% is local to the method.  A portion of that comes from iterating across sparse HashSets (packageImports and classImports), the cost of which grows linearly with array size (null buckets are scanned).\n\nIn the most common case, our JSPs rely on the three auto-generated packages and 1-2 classes.  For example, this generated code block from our busiest JSP:\n\n static {\n    _jspx_imports_packages = new java.util.HashSet<>();\n    _jspx_imports_packages.add(\"javax.servlet\");\n    _jspx_imports_packages.add(\"javax.servlet.http\");\n    _jspx_imports_packages.add(\"javax.servlet.jsp\");\n    _jspx_imports_classes = new java.util.HashSet<>();\n    _jspx_imports_classes.add(\"com.<proprietary>ViewModel\");\n    _jspx_imports_classes.add(\"com.<proprietary>Helper\");\n  }\n\nMost JVMs initialize HashMap arrays to length 16, so the code above generates one array that is 3/16th full and another that is 2/16th full.  Each page request scans the full 16-slot array.\n\nA few alternatives exist:\n1. Right-size the Set allocation.  The entries in the Set are fixed and known at the time of code generation so should be an easy change.\n2. Switch to LinkedHashSet<>.  Iteration becomes trivial.\n3. Combine the two: right-size a LinkedHashSet<>.\n\nThe attached speed test shows a big improvement with #2 (right-sizing) but a greater improvement from either #1 or #3.",
    "comments": [
      "Sorry, error with the numbering in the last sentence: the attached speed test shows a big improvement with #1 (right-sizing) but a greater improvement from either #2 or #3.",
      "Ok, this sounds reasonable looking at the code.\nhttps://github.com/apache/tomcat/blob/main/java/org/apache/jasper/compiler/Generator.java#L623",
      "Thanks !\nThe fix will be in 11.0.0-M17, 10.1.19, 9.0.86 and 8.5.99.",
      "This changed reached prod and had the (small) expected impact.  Thanks!",
      "The initial sizing to LinkedHashSet is not factoring-in the load factor (0.75 by default), thus resulting in some unnecessary re-hashing.\n\n\nhttps://github.com/apache/tomcat/blob/b58963db1384ac286774a0d894a49fea0e1414de/java/org/apache/jasper/compiler/Generator.java#L624\n\nShould this be either of the following?\n\nCompute statically during JSP generation (more hiding of the implementation details):\n\nout.print(Integer.toString((int) Math.ceil(packages.size() / 0.75f));\n\n\nCompute on the fly (more per-request overhead):\n\nout.print(\"(int) Math.ceil(\");\nout.print(Integer.toString(packages.size()));\nout.print(\" / 0.75f)\");\n\n\n\nShould we open a separate issue for this?",
      "I don't know if I can edit previous comment.  Probably just \"0.75\" instead of \"0.75f\" to avoid float to double conversion before call to Math.ceil",
      "Re-opening so this doesn't get forgotten",
      "This is an interesting callout, thanks - I assumed that `HashMap`/`LinkedHashMap` viewed initialCapacity as the number of entries to hold, and calculated the array size separately using initialCapacity and loadfactor as you illustrated.  Looking at JVM source, that is not the case.\n\nHowever, `HashMap(int, float)` delegates the calculation to a static utility method, `tableSizeFor(int)` which rounds up to the lowest power of two >= the requested capacity.  That will hide some of the penalty from the error.\n\nOther thoughts:\n1. I *think* the impact of this is small, thanks to the power-of-two.  Small is greater than zero.\n2. Directly calculating the length of an internal table feels wrong, but will produce the best possible outcome.  The power of two logic will often result in wasted space regardless but it's still better than not providing the capacity hint.",
      "Which operation are we trying to optimize, here? Is it startup-time of the JSP when it's first put into service?\n\nIf so, simply multiplying the import count by a constant should create enough initial capacity to avoid re-hashes.\n\nI like the first proposal where we simply multiply by some factor (e.g. 4/3). I don't see a reason to add more math at runtime.\n\nBut I don't see *any* per-request impact, here, unless I've very much missing something.",
      "I agree, no per-request impact.",
      "My analysis agrees with Chris's. There might be a re-hash during start-up that multiplying by 4/3 would address although the impact of that is going to be pretty minimal. The runtime impact is going to be zero.",
      "I've applied the additional optimisation."
    ],
    "creation_ts": "2024-01-26T16:54:10Z",
    "fixes": [
      68546
    ]
  },
  {
    "id": 44282,
    "summary": "WebappClassLoader.findClass calls getClassLoader without privileges",
    "description": "When logging is in TRACE mode or lower,\norg.apache.catalina.loader.WebappClassLoader.findClass(String) calls\ngetClassLoader() without a privileged block.  With security enabled, this will\ncause a SecurityException if the RuntimePermission to getClassLoader is not granted.",
    "comments": [
      "I have committed a patch to trunk and proposed the fix for 5.5.x and 6.0.x",
      "This has been fixed in 6.0.x and will be included in 6.0.17 onwards.",
      "This has been fixed in 5.5.x and will be included in 5.5.27 onwards."
    ],
    "creation_ts": "2008-01-22T23:50:47Z",
    "fixes": [
      44282
    ]
  },
  {
    "id": 41739,
    "summary": "The servlet with the value 0 in <load-on-startup> tag must be loaded at first.",
    "description": "Servlet 2.4 specification says:\n---\nIf the value is a positive integer or 0, the container must load\nand initialize the servlet as the application is deployed. \nThe container must guarantee that servlets marked with lower integers\nare loaded before servlets marked with higher integers.\n---\nI think the servlet with value 0 in <load-on-startup> tag must be loaded at the \nfirst.\n\nHowever, Tomcat loads the servlet at the last.",
    "comments": [
      "Thanks for the report. This has been fixed in svn and will be included in the\nnext release."
    ],
    "creation_ts": "2007-03-01T06:09:41Z",
    "fixes": [
      41739
    ]
  },
  {
    "id": 60087,
    "summary": "Bouncy Castle in WEB-INF/lib not working on Tomcat 8 when unpackWars=false",
    "description": "This is basically same issue but with a test project provided that you can debug\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=57736\n\nWhat happens is javax.crypto.JarVerifier.verifySingleJar complains about unsigned content which in fact there's not such content in the jar but for some reason all WAR resources appear as jar's content\n\njava.util.jar.JarException: jar:file:/C:/Users/bahisha/work/apache-tomcat-8.0.36/webapps/test.war!/WEB-INF/lib/bcprov-jdk16-1.46.jar has unsigned entries - WEB-INF/lib/bcprov-jdk16-1.46.jar",
    "comments": [
      "Created attachment 34206\ntest war zip part 1",
      "Created attachment 34207\ntest war zip part 2",
      "I reproduced error on Tomcat 8.0.x with unpackWARs=\"false\".\nError because of the getLocation(), which returns codeBaseURL for resource file.\nLocation URL is \njar:file:/some_path/webapps/test.war!/WEB-INF/lib/bcprov-jdk16-1.46.jar, but\n((JarURLConnection)url.openConnection()).getJarFile() connects to the test.war instead bcprov-jdk16-1.46.jar, because the test.war before separator '!/'.\nWe need jar:war: path to access resource inside of test.war file (because it doesn't unpack). This is example of the URL which have to be used in given test:\njar:war:file:/some_path/webapps/test.war*/WEB-INF/lib/bcprov-jdk16-1.46.jar!/\n\nI looked at sources and notice that getLocation() returns AbstractArchiveResource.codeBaseUrl field, for war resources this field generates in constructor JarWarResource, I changed constructor of JarWarResource for codeBaseUrl:\nbefore codeBaseUrl=\"jar:\" + baseUrl + \"!/\" + archivePath\nafter  codeBaseUrl=\"jar:war:\" + baseUrl + \"*/\" + archivePath+\"!/\"\n\nI rebuilt tomcat and tried attached test, everything works fine, \nBut I have doubts in solution correctness, because codeBaseUrl uses in WebappClassLoaderBase.getPermissions() function, which gets permissions for codeSource. In current version, for codeSource /some_path/webapps/test.war!/WEB-INF/lib/bcprov-jdk16-1.46.jar, getPermissions returns permission collection for test.war,  but after changes of codeBaseURL getPermissions() returns permissions for bcprov-jdk16-1.46.jar which\nlocated in war archive.\n\nCould somebody confirm that changing JarWarResource's constructor is a right solution?",
      "Unfortunately, it doesn't appear to be as clear cut as I would like.\n\nIf we look at how the JRE constructs a code path for a JAR, it returns a \"file:\" URL to the JAR, not a \"jar:\" URL. Therefore, if Tomcat is to be consistent with that, the current behavior is correct.\n\nHowever, the JarVerifier accepts either a \"file:\" or \"jar:\" URL for a JAR and ignores the possibility of JARs in WARs etc entirely.\n\nReturning \"jar:\" URLs and \"jar:war:\" URLs would fix JarVerifier but might break other functionality. I need to do some more testing with the security manager.",
      "This has been fixed in the following branches:\n- 9.0.x for 9.0.0.M11 onwards\n- 8.5.x for 8.5.6 onwards\n- 8.0.x for 8.0.38 onwards\n\n7.0.x and earlier versions were not affected.\n\nFixing this required refactoring of the web resources handling to use the Tomcat specific 'war:file:...' URL protocol to refer to WAR files and their contents rather than the standard 'jar:file:...' form. A side-effect of the refactoring is that when using packed WARs, it is now possible to reference a WAR and/or specific JARs within a WAR in the security policy file used when running under a SecurityManager.",
      "This solution has introduced a new issue resolving resources url.\nI've made a project to test this behaviour https://github.com/didiez/tomcat-bug-60087\n\nRun the main-app to see the problem. If built changing tomcat.version to 8.5.5 everything works as expected.",
      "(In reply to Diego D\u00edez Ricondo from comment #6)\n> This solution has introduced a new issue resolving resources url.\n> I've made a project to test this behaviour\n> https://github.com/didiez/tomcat-bug-60087\n> \n> Run the main-app to see the problem. If built changing tomcat.version to\n> 8.5.5 everything works as expected.\n\nUpdate the status in favor to the archives.\nThis has been fixed:\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=60391"
    ],
    "creation_ts": "2016-09-06T12:35:56Z",
    "fixes": [
      60087
    ]
  },
  {
    "id": 56581,
    "summary": "When an error occurs on a long JSP page, do not loose last chunk of printed text",
    "description": "Created attachment 31680\ntest.jsp\n\n(Reproducible with the current trunk @1598763\n\nIf there is a JSP page that generates a lot of text and then encounters an error, the client receives only 8K*n bytes of text. The last chunk of text - before the actual place of the error is lost and not sent to the client.\n\nTo reproduce:\n1. Deploy the attached test.jsp and call it.\n2. Actual behaviour:\nThe last line of text is \"970 \".\nIf you save the result, it will be 16384 (16 Kb) (with LF line ends).\n\nExpected behaviour:\nThe last line of text is \"1000 Hello world!\".\n\nMy motivation for this enhancement request is that seeing all the text before the error place would make it easier to locate the error.\n\nAlso the lost ~8K of text may contain something valuable for the client.\n\nThe current workaround is to look into localhost.date.log for the actual stack trace. The stacktrace is for generated java file. It may contain a JSP source snippet, but not always.",
    "comments": [
      "For reference:\nCurrent \"Error handling\" thread on dev@\nhttp://tomcat.markmail.org/thread/znillhttbmvsl5e5",
      "As a note:\nThe error handling changes in trunk (r1600449 and follow-ups) have not fixed this issue. The behaviour is the same as earlier - the output is truncated at \"970 \".\n\nTested with trunk @1600674.",
      "Looking into generated test_jsp.java,  I see that _jspService method ends with the following:\n\n[[[\n    } catch (java.lang.Throwable t) {\n      if (!(t instanceof javax.servlet.jsp.SkipPageException)){\n        out = _jspx_out;\n        if (out != null && out.getBufferSize() != 0)\n          try { out.clearBuffer(); } catch (java.io.IOException e) {}\n        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);\n        else throw new ServletException(t);\n      }\n    } finally {\n]]]\n\nSo there is a call to JspWriterImpl.clearBuffer() that clears its buffer.\n\nI can think of two ways to fix:\na) If I had access to JspWriterImpl internals then,\n\nif (out.flushed)\n out.flushBuffer();\nelse\n out.clearBuffer();\n\nThe motivation is that if we cannot undo, then do not lose what we already have generated.\n\nI think this way is wrong. The underlying stream can have a larger buffer. While out.flushed is true, the underlying stream may not have been flushed yet.\n\nb) \nif (response.isCommitted()) {\n out.flush();\n} else {\n out.clearBuffer();\n}\n\nAlthough \"b)\" is a bit more invasive, I think it is a way to go. It is also good that it can be implemented using public APIs.",
      "Committed in r1600899 and will be in 8.0.9.\n\nBy the way, the try/catch{IOException} on those lines originates from r451231.",
      "Applied to Tomcat 7 in r1602584 and will be in 7.0.55 onwards."
    ],
    "creation_ts": "2014-05-31T13:54:17Z",
    "fixes": [
      56581
    ]
  },
  {
    "id": 57446,
    "summary": "Catalina presents a wrapped ServletContext in de-init phase to application listeners",
    "description": "JSF Applications (Mojarra 2.2.x) fail to shutdown properly, because Catalina presents a wrapped ServletContext (NoPluggabilityServletContext) in de-init phase (e.g. stop webapp cmd issued via jmx). The problem here is that the wrapped ServletContext (NoPluggabilityServletContext) does not appear to be \"equal\" (equals, etc. methods not delegated) as the one in the init phase (start). I filed a bug on the mojarra JIRA: https://java.net/jira/browse/JAVASERVERFACES-3687 but it was not accepted, because they argue this is a container issue. Maybe a workaround could fix it for context \"comparing\" webapps. In this case the mojarra implementation uses a List (CopyOnWriteArrayList) to match (contains) if the ServletContext has been initialized. So a delegation of the \"equals\" method in the NoPluggabilityServletContext class could do the fix, but might cause other sideeffects in the container, which i didn't lookout. A more detailed approach would be to get a light on the specification - what doues it say about the ServletContext instance and presented proxies in the application lifecycle.",
    "comments": [
      "Seeing the same ServletConext for contextInitialized() and contextDestroyed() seems like a reasonable expectation to me. I'd agree that this is something that the Tomcat folks need to take a look at. It is on my list for the coming week.",
      "This has been fixed in trunk, 8.0.x (for 8.0.18 onwards) and 7.0.x (for 7.0.58 onwards).",
      "Just checked the issue with the latest trunk. Seems like it is still not fixed. Now the org.apache.catalina.core.StandardContext$NoPluggabilityServletContext is presented in the init phase. And a org.apache.catalina.core.ApplicationContextFacade in the de-init. How i understand the issue; it is a must to present the same context instance in init and de-init phase?",
      "Check again. This has been fixed and includes a test case to confirm the correct behaviour. Please do not reopen this issue unless you can provide a patch to the existing test case that demonstrates a problem."
    ],
    "creation_ts": "2015-01-15T12:11:30Z",
    "fixes": [
      57446
    ]
  },
  {
    "id": 67628,
    "summary": "OpenSSLCipherConfigurationParser#parse() produces misleading false positive cipher warnings",
    "description": "This likely happens in all maintained versions I have just observed this in 8.5.94-dev. This one tooks me some hours to understand and analyze, after 7129db33aa2797b8da17a9aeffeedfafdc725e7a I see false positive warnings which are almost impossible to analyze for many users.\n\nI am running off Java 8 and OpenSSL 1.1.1t (HP-UX), 1.1.1w-freebsd/3.0.11 (FreeBSD).\n\nConsider the following config in server.xml:\n> <SSLHostConfig hostName=\"...\" protocols=\"TLSv1.2+TLSv1.3\"\n>   honorCipherOrder=\"true\" disableSessionTickets=\"true\"\n>   ciphers=\"HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!DSS:!SHA1:!SHA256:!SHA384\">\n>     <Certificate certificateFile=\"...\" certificateKeyFile=\"...\" certificateKeyPassword=\"...\" type=\"RSA\" />\n> </SSLHostConfig>\n\nSuddenly I see the following warning:\n> 2023-10-05T21:36:05.274 WARNUNG [main] org.apache.tomcat.util.net.SSLUtilBase.getEnabled Some of the specified [ciphers] are not supported by the SSL engine and have been skipped: [[TLS_DH_DSS_WITH_AES_256_GCM_SHA384, TLS_DH_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_AES_128_CCM_SHA256, TLS_DH_DSS_WITH_AES_128_GCM_SHA256, TLS_DH_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256]]\n\nI have started diffing my config back and forth, but wasn't able to spot the issue comparing my cipher expression compared to ALL. Added the following diff to better understand the issue:\n> diff --git a/java/org/apache/tomcat/util/net/SSLUtilBase.java b/java/org/apache/tomcat/util/net/SSLUtilBase.java\n> index d300737f69..7f62a18ca7 100644\n> --- a/java/org/apache/tomcat/util/net/SSLUtilBase.java\n> +++ b/java/org/apache/tomcat/util/net/SSLUtilBase.java\n> @@ -175,0 +176,1 @@ public abstract class SSLUtilBase implements SSLUtil {\n> +        log.info(\"[\" + name + \"] with configured: \" + configured + \", implemented: \" + implemented + \", enabled: \" + enabled);\n\nStill doesn't work out for me. Looking at SslUtilBase:\n>        List<String> configuredCiphers = sslHostConfig.getJsseCipherNames();\n>        Set<String> implementedCiphers = getImplementedCiphers();\n\nReturns false data! While #getImplementedCiphers() truly returns the implemented ciphers by the underlying OpenSSL version, sslHostConfig.getJsseCipherNames() does NOT invoke OpenSSL at all. It invokes \"OpenSSLCipherConfigurationParser.parse(getCiphers());\" which gives me:\n> TLS_AES_128_CCM_SHA256\n> TLS_AES_128_GCM_SHA256\n> TLS_AES_256_GCM_SHA384\n> TLS_CHACHA20_POLY1305_SHA256\n> TLS_DHE_RSA_WITH_AES_128_CCM\n> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n> TLS_DHE_RSA_WITH_AES_256_CCM\n> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n> TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384\n> TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_DH_DSS_WITH_AES_128_GCM_SHA256\n> TLS_DH_DSS_WITH_AES_256_GCM_SHA384\n> TLS_DH_RSA_WITH_AES_128_GCM_SHA256\n> TLS_DH_RSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_ECDSA_WITH_AES_128_CCM\n> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDHE_ECDSA_WITH_AES_256_CCM\n> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256\n> TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384\n> TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384\n> TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\n> TLS_RSA_WITH_AES_128_CCM\n> TLS_RSA_WITH_AES_128_GCM_SHA256\n> TLS_RSA_WITH_AES_256_CCM\n> TLS_RSA_WITH_AES_256_GCM_SHA384\n> TLS_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_RSA_WITH_ARIA_256_GCM_SHA384\n\nThe parsing and IANA mapping is done by Tomcat, NOT OpenSSL. Now let's invoke OpenSSL:\n> # openssl version\n> OpenSSL 1.1.1t  7 Feb 2023\n> # openssl ciphers -stdname 'HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!DSS:!SHA1:!SHA256:!SHA384' | cut -d ' ' -f 1 | sort\n> TLS_AES_128_GCM_SHA256\n> TLS_AES_256_GCM_SHA384\n> TLS_CHACHA20_POLY1305_SHA256\n> TLS_DHE_RSA_WITH_AES_128_CCM\n> TLS_DHE_RSA_WITH_AES_128_CCM_8\n> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n> TLS_DHE_RSA_WITH_AES_256_CCM\n> TLS_DHE_RSA_WITH_AES_256_CCM_8\n> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n> TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384\n> TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_ECDHE_ECDSA_WITH_AES_128_CCM\n> TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8\n> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDHE_ECDSA_WITH_AES_256_CCM\n> TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8\n> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256\n> TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384\n> TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384\n> TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_RSA_WITH_AES_128_CCM\n> TLS_RSA_WITH_AES_128_CCM_8\n> TLS_RSA_WITH_AES_128_GCM_SHA256\n> TLS_RSA_WITH_AES_256_CCM\n> TLS_RSA_WITH_AES_256_CCM_8\n> TLS_RSA_WITH_AES_256_GCM_SHA384\n> TLS_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_RSA_WITH_ARIA_256_GCM_SHA384\n> $ openssl version\n> OpenSSL 1.1.1w-freebsd  11 Sep 2023\n> $ openssl ciphers -stdname 'HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!DSS:!SHA1:!SHA256:!SHA384' | cut -d ' ' -f 1 | sort\n> TLS_AES_128_GCM_SHA256\n> TLS_AES_256_GCM_SHA384\n> TLS_CHACHA20_POLY1305_SHA256\n> TLS_DHE_RSA_WITH_AES_128_CCM\n> TLS_DHE_RSA_WITH_AES_128_CCM_8\n> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n> TLS_DHE_RSA_WITH_AES_256_CCM\n> TLS_DHE_RSA_WITH_AES_256_CCM_8\n> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n> TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384\n> TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_ECDHE_ECDSA_WITH_AES_128_CCM\n> TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8\n> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDHE_ECDSA_WITH_AES_256_CCM\n> TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8\n> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256\n> TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384\n> TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384\n> TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_RSA_WITH_AES_128_CCM\n> TLS_RSA_WITH_AES_128_CCM_8\n> TLS_RSA_WITH_AES_128_GCM_SHA256\n> TLS_RSA_WITH_AES_256_CCM\n> TLS_RSA_WITH_AES_256_CCM_8\n> TLS_RSA_WITH_AES_256_GCM_SHA384\n> TLS_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_RSA_WITH_ARIA_256_GCM_SHA384\n> $ openssl version\n> OpenSSL 3.0.11 19 Sep 2023 (Library: OpenSSL 3.0.11 19 Sep 2023)\n> $ openssl ciphers -stdname 'HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!DSS:!SHA1:!SHA256:!SHA384' | cut -d ' ' -f 1 | sort\n> TLS_AES_128_GCM_SHA256\n> TLS_AES_256_GCM_SHA384\n> TLS_CHACHA20_POLY1305_SHA256\n> TLS_DHE_RSA_WITH_AES_128_CCM\n> TLS_DHE_RSA_WITH_AES_128_CCM_8\n> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n> TLS_DHE_RSA_WITH_AES_256_CCM\n> TLS_DHE_RSA_WITH_AES_256_CCM_8\n> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n> TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_ECDHE_ECDSA_WITH_AES_128_CCM\n> TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8\n> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDHE_ECDSA_WITH_AES_256_CCM\n> TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8\n> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_RSA_WITH_AES_128_CCM\n> TLS_RSA_WITH_AES_128_CCM_8\n> TLS_RSA_WITH_AES_128_GCM_SHA256\n> TLS_RSA_WITH_AES_256_CCM\n> TLS_RSA_WITH_AES_256_CCM_8\n> TLS_RSA_WITH_AES_256_GCM_SHA384\n\nOn Windows, compiled according to our instruction and patches:\n> PS> .\\openssl version\n> OpenSSL 1.1.1w  11 Sep 2023\n> PS> .\\openssl ciphers -stdname  'HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!DSS:!SHA1:!SHA256:!SHA384' | foreach-object { $_.split(\" \")[0]} | sort-object\n> TLS_AES_128_GCM_SHA256\n> TLS_AES_256_GCM_SHA384\n> TLS_CHACHA20_POLY1305_SHA256\n> TLS_DHE_RSA_WITH_AES_128_CCM\n> TLS_DHE_RSA_WITH_AES_128_CCM_8\n> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n> TLS_DHE_RSA_WITH_AES_256_CCM\n> TLS_DHE_RSA_WITH_AES_256_CCM_8\n> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n> TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384\n> TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_ECDHE_ECDSA_WITH_AES_128_CCM\n> TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8\n> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDHE_ECDSA_WITH_AES_256_CCM\n> TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8\n> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256\n> TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384\n> TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384\n> TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_RSA_WITH_AES_128_CCM\n> TLS_RSA_WITH_AES_128_CCM_8\n> TLS_RSA_WITH_AES_128_GCM_SHA256\n> TLS_RSA_WITH_AES_256_CCM\n> TLS_RSA_WITH_AES_256_CCM_8\n> TLS_RSA_WITH_AES_256_GCM_SHA384\n> TLS_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_RSA_WITH_ARIA_256_GCM_SHA384\n> PS> .\\openssl version\n> OpenSSL 3.0.11 19 Sep 2023 (Library: OpenSSL 3.0.11 19 Sep 2023)\n> PS> .\\openssl ciphers -stdname  'HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!DSS:!SHA1:!SHA256:!SHA384' | foreach-object { $_.split(\" \")[0]} | sort-object\n> TLS_AES_128_GCM_SHA256\n> TLS_AES_256_GCM_SHA384\n> TLS_CHACHA20_POLY1305_SHA256\n> TLS_DHE_RSA_WITH_AES_128_CCM\n> TLS_DHE_RSA_WITH_AES_128_CCM_8\n> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n> TLS_DHE_RSA_WITH_AES_256_CCM\n> TLS_DHE_RSA_WITH_AES_256_CCM_8\n> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n> TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384\n> TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_ECDHE_ECDSA_WITH_AES_128_CCM\n> TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8\n> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDHE_ECDSA_WITH_AES_256_CCM\n> TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8\n> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256\n> TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384\n> TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n> TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384\n> TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n> TLS_RSA_WITH_AES_128_CCM\n> TLS_RSA_WITH_AES_128_CCM_8\n> TLS_RSA_WITH_AES_128_GCM_SHA256\n> TLS_RSA_WITH_AES_256_CCM\n> TLS_RSA_WITH_AES_256_CCM_8\n> TLS_RSA_WITH_AES_256_GCM_SHA384\n> TLS_RSA_WITH_ARIA_128_GCM_SHA256\n> TLS_RSA_WITH_ARIA_256_GCM_SHA384\n\nOpenSSL gives us less ciphers than the Tomcat parser. So whetever I have requested from OpenSSL and verified on the command line is not what is passed to OpenSSL. This is confusing and not documented (?). Especially because I have excluded DSS explicitly, but it is back with a warning.\n\n----------\n\nIdeally\n\n(a) either the data is retrieved live from OpenSSL,\n(b) or documentation and log message somehow depict that this might not always be correct.",
    "comments": [
      "Looking at apps/ciphers.c we could the same from Java, almost identical to:\nhttps://github.com/apache/tomcat/blob/eb884fff4670ca7294442d0a196fbc7d6ec576ad/java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java#L71-L99\n\nI bet that this can be moved to a static method which can take in ciphers method arg instead of \"ALL\" literal.",
      "Here is the gist with the data: https://gist.github.com/michael-o/0b4a5c4a9362a5477c1dbca6c8ba28cb",
      "I think this is a documentation issue.\n\nThe intention was to:\n- allow OpenSSL notation to be used with JSSE\n- track ciphers and behaviour of latest OpenSSL development branch\n- have consistent (as possible) behaviour between JSSE and OpenSSL for the same cipher definition\n\nIt does this by converting the notation to a list of ciphers and then passing that to JSSE or OpenSSL.\n\nThat behaviour changes if you use a different version of OpenSSL is something that I think is good to highlight.\n\nWe could better document this by:\n- adding most of the above (not necessarily exactly in that form) to the docs for ciphers\n- amend the log message to note that this is expected if you run on older JDKs and/or older OpenSSL and reference the cipher docs\n\nThoughts?",
      "(In reply to Mark Thomas from comment #3)\n> I think this is a documentation issue.\n> \n> The intention was to:\n> - allow OpenSSL notation to be used with JSSE\n> - track ciphers and behaviour of latest OpenSSL development branch\n> - have consistent (as possible) behaviour between JSSE and OpenSSL for the\n> same cipher definition\n\nThis makes sense and I totally understand that.\n\n> It does this by converting the notation to a list of ciphers and then\n> passing that to JSSE or OpenSSL.\n> \n> That behaviour changes if you use a different version of OpenSSL is\n> something that I think is good to highlight.\n> \n> We could better document this by:\n> - adding most of the above (not necessarily exactly in that form) to the\n> docs for ciphers\n> - amend the log message to note that this is expected if you run on older\n> JDKs and/or older OpenSSL and reference the cipher docs\n\nI think we can do better by supplying \"ciphers\" to an SSL handle instead of decrypting it on our own and then match. This would reduce the false positive. If SunJSSE/OpenJSSE is used then this remain the same. The mismatch for me does not happen because it matches the latest OpenSSL dev branch, but the comparison is not faire because sources are incorrect.\nThough, improving docs for people to better understand the warning is always good.",
      "If we pass ciphers directly to OpenSSL then we get different behaviour between JSSE and OpenSSL. This is the issue the current design is trying to avoid - or at least highlight when it happens.\n\nWhat you are seeing is intended behaviour.\n\nI remain of the view that better docs and a better log message is the way to address this.",
      "(In reply to Mark Thomas from comment #5)\n> If we pass ciphers directly to OpenSSL then we get different behaviour\n> between JSSE and OpenSSL. This is the issue the current design is trying to\n> avoid - or at least highlight when it happens.\n\nBut we both know that JSSE and OpenSSL are different no matter what we do. Why don't we put that into consider and be fair about that fact.\n\n> What you are seeing is intended behaviour.\n> \n> I remain of the view that better docs and a better log message is the way to\n> address this.\n\nI agree with you that behavior should be consistent wherever possible, but documentation has to mention where it differs for obvious reasons.\n\nLet's work on docs first.",
      "Fixed in:\n- 11.0.x for 11.0.0-M14 onwards\n- 10.1.x for 10.1.16 onwards\n-  9.0.x for  9.0.83 onwards\n-  8.5.x for  8.5.96 onwards\n\nThe description of ciphers and the log message should be a lot clearer now.\n\nI couldn't reproduce the DSS issue so there may be another issue here that needs a new bug report.\n\nGenerally, I'd expect to see two types of bugs with this code.\n\n1. Interpretation errors. These take the form of a test added to TestOpenSSLCipherConfigurationParser with a valid ciphers string that fails when run with the latest OpenSSL dev buld.\n\n2. Test errors. Any test in TestOpenSSLCipherConfigurationParser that passes with the latest OpenSSL dev build but fails with the latest build of one or more older branches.This usually means we haven;t taken full account of a change between OpenSSL versions in the tests.",
      "(In reply to Mark Thomas from comment #7)\n> Fixed in:\n> - 11.0.x for 11.0.0-M14 onwards\n> - 10.1.x for 10.1.16 onwards\n> -  9.0.x for  9.0.83 onwards\n> -  8.5.x for  8.5.96 onwards\n> \n> The description of ciphers and the log message should be a lot clearer now.\n\nJust tested. From a documentation PoV, this is fine now, though I wonder how many people will run OpenSSL from main instead of the LTS branch.\n\n> I couldn't reproduce the DSS issue so there may be another issue here that\n> needs a new bug report.\n> \n> Generally, I'd expect to see two types of bugs with this code.\n> \n> 1. Interpretation errors. These take the form of a test added to\n> TestOpenSSLCipherConfigurationParser with a valid ciphers string that fails\n> when run with the latest OpenSSL dev buld.\n> \n> 2. Test errors. Any test in TestOpenSSLCipherConfigurationParser that passes\n> with the latest OpenSSL dev build but fails with the latest build of one or\n> more older branches.This usually means we haven;t taken full account of a\n> change between OpenSSL versions in the tests.\n\nI will take a look at these with my setup the next couple of weeks.\n\nThank your for your attention here.",
      "(In reply to Michael Osipov from comment #8)\n\n> Just tested. From a documentation PoV, this is fine now, though I wonder how\n> many people will run OpenSSL from main instead of the LTS branch.\n\nI suspect very few, if any. I did consider aligning with the most recent LTS release but concluded it was better to align with main as that reflects the latest thinking regarding how secure a cipher or family of ciphers is. In reality, the differences have been minimal in the last few years. If they become problematic, we can always review which branch we track.",
      "We are also facing this strange log entry since we upgraded Tomcat recently.\nI have read through this issue's description and comments, but the changed text in 8.5.96 alone does not help in my opinion. I really required to debug and read through the respective code sections in order to get an understanding of this log statement. \nNow I understand the reasoning behind it, but I still have a problem with that. Let me explain why.\nWe are configuring our (embedded) Tomcat's SSL since years with the following code:\n\n...\nConnector sslConnector = new Connector(\"org.apache.coyote.http11.Http11Nio2Protocol\");\nsslConnector.setPort(sslPort);\nsslConnector.setSecure(true);\nsslConnector.setScheme(\"https\");\nsslConnector.setProperty(\"ciphers\", \"HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!kRSA:-DH:+ECDH\");\nsslConnector.setProperty(\"sslEnabledProtocols\", \"TLSv1.2\");\nsslConnector.setProperty(\"useServerCipherSuiteOrder\", \"true\");\n...\n\nWe explicitly set the ciphers configuration since the default config which comes with Tomcat still includes the (normal) Diffie-Helman ciphers which are considered to be insecure (but not the ECDH's!). \nThere is still nothing wrong with that config as far as I could understand.\nNevertheless, there is now a warning in the logfile which we CAN'T TURN OFF since we use our custom ciphers configuration, which leds \"warnOnSkip\" being set to true.\nThose skipped ciphers are of no interest for us or our customers since they appear only because Tomcat - as of my understanding - uses the ciphers-set from OpenSSL to build the complete list of theoretically available ciphers. \n\nIt would help us with explaining this to the customers if the log statement would be logged on level \"debug\" rather than as a \"warning\" or if we had a way to turn off logging it.",
      "(In reply to Markus Schlegel from comment #10)\n> We are also facing this strange log entry since we upgraded Tomcat recently.\n> I have read through this issue's description and comments, but the changed\n> text in 8.5.96 alone does not help in my opinion. I really required to debug\n> and read through the respective code sections in order to get an\n> understanding of this log statement. \n> Now I understand the reasoning behind it, but I still have a problem with\n> that. Let me explain why.\n> We are configuring our (embedded) Tomcat's SSL since years with the\n> following code:\n> \n> ...\n> Connector sslConnector = new\n> Connector(\"org.apache.coyote.http11.Http11Nio2Protocol\");\n> sslConnector.setPort(sslPort);\n> sslConnector.setSecure(true);\n> sslConnector.setScheme(\"https\");\n> sslConnector.setProperty(\"ciphers\",\n> \"HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!kRSA:-DH:+ECDH\");\n> sslConnector.setProperty(\"sslEnabledProtocols\", \"TLSv1.2\");\n> sslConnector.setProperty(\"useServerCipherSuiteOrder\", \"true\");\n> ...\n> \n> We explicitly set the ciphers configuration since the default config which\n> comes with Tomcat still includes the (normal) Diffie-Helman ciphers which\n> are considered to be insecure (but not the ECDH's!). \n> There is still nothing wrong with that config as far as I could understand.\n> Nevertheless, there is now a warning in the logfile which we CAN'T TURN OFF\n> since we use our custom ciphers configuration, which leds \"warnOnSkip\" being\n> set to true.\n> Those skipped ciphers are of no interest for us or our customers since they\n> appear only because Tomcat - as of my understanding - uses the ciphers-set\n> from OpenSSL to build the complete list of theoretically available ciphers. \n> \n> It would help us with explaining this to the customers if the log statement\n> would be logged on level \"debug\" rather than as a \"warning\" or if we had a\n> way to turn off logging it.\n\nI have raised more or less the same concern and how it can be solved...",
      "@Markus - suggestions on improving the text of the docs and or the message welcome.\n\nI don't think logging this at debug is an option. That the actual ciphers used change depending on which TLS implementation is used potentially has security implications so I think we have to visibly log something.\n\nWe can log any combination of:\n- the requested configuration\n- the list of ciphers the requested configuration maps to\n- the list of ciphers actually used\n- the list of ciphers requested but not supported\n\nIf you want to silence the warning, then you can explicitly list the ciphers you want to use but that has its own drawbacks.\n\nI haven't run the default Tomcat TLS configuration against the SSL Labs scanner for a while. I'll do that and see if adjustments are required.",
      "> I haven't run the default Tomcat TLS configuration against the SSL Labs scanner\n> for a while. I'll do that and see if adjustments are required.\n\nSSL-Labs still gives rating \"B\" if DH ciphers are enabled.\nFor information about DH ciphers, see https://weakdh.org/",
      "Hmm. I think we need to move the ciphers part of this discussion to the users list.\n\nWith a recent version of OpenSSL, Tomcat's default returns 112 ciphers. Adding \":-DH\" reduces that to 83 and adding \":-DH:+ECDH\" makes no difference compared to just to \":-DH\". Looking at what \"DH\" and \"ECDH\" return on their own, I think you might want to look at your cipher configuration.\n\nI get an SSL Labs rating of \"A\" with Tomcat's default ciphers for Tomcat 11 + Java 21 (OpenSSl and JSSE), Tomcat 8 + Java 11 (OpenSSL and JSSE), Tomcat 8 + Java 8 (JSSE)\n\nLooking at the results from SSL Labs, adding \":-CBC\" looks like something worth considering."
    ],
    "creation_ts": "2023-10-06T16:29:03Z",
    "fixes": [
      67628
    ]
  },
  {
    "id": 65387,
    "summary": "JSP compile error after upgrade 10.0.6 -> 10.0.7",
    "description": "After upgrade tomcat (via docker image: tomcat:10.0.6-jdk16-openjdk-slim-buster / tomcat:10.0.7-jdk16-openjdk-slim-buster) the following error occurs:\n(note: this is javax webapp in webapps-javaee folder).\n\norg.apache.jasper.JasperException: Unable to compile class for JSP: \n\nAn error occurred at line: [509] in the generated java file: [/usr/local/tomcat/work/Catalina/localhost/qeepmaster-new/org/apache/jsp/WEB_002dINF/jsp/LoginForm_jsp.java]\nout cannot be resolved to a variable\n\nAn error occurred at line: [543] in the generated java file: [/usr/local/tomcat/work/Catalina/localhost/qeepmaster-new/org/apache/jsp/WEB_002dINF/jsp/LoginForm_jsp.java]\nout cannot be resolved to a variable\n\nStacktrace:\n\torg.apache.jasper.compiler.DefaultErrorHandler.javacError(DefaultErrorHandler.java:102)\n\torg.apache.jasper.compiler.ErrorDispatcher.javacError(ErrorDispatcher.java:213)\n\torg.apache.jasper.compiler.JDTCompiler.generateClass(JDTCompiler.java:482)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:397)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:367)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:351)\n\torg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:603)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:399)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:380)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:328)\n\tjakarta.servlet.http.HttpServlet.service(HttpServlet.java:774)\n\torg.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n\torg.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:171)\n\torg.springframework.web.servlet.view.AbstractView.render(AbstractView.java:316)\n\torg.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1396)\n\torg.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1141)\n\torg.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\n\torg.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)\n\torg.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\n\torg.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\n\tjakarta.servlet.http.HttpServlet.service(HttpServlet.java:665)\n\torg.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\n\tjakarta.servlet.http.HttpServlet.service(HttpServlet.java:774)\n\torg.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n\torg.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:109)\n\torg.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:204)\n\torg.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)\n\torg.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\n\torg.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)",
    "comments": [
      "Created attachment 37902\nlogin form",
      "Looks like my clean-up of unused code may have been too aggressive despite all the unit tests that were added. Thanks for the example JSP that triggers this. We'll take a look.",
      "The JSP provided to reproduce the issue has a number of included that have not been provided. We can try and work-around this but we can't know if the content that triggers this issue is in the included files or not.\n\nPlease provide a self-contained JSP (it can depend on JSTL if necessary) that demonstrates the issue.",
      "(In reply to Mark Thomas from comment #3)\n> The JSP provided to reproduce the issue has a number of included that have\n> not been provided. We can try and work-around this but we can't know if the\n> content that triggers this issue is in the included files or not.\n> \n> Please provide a self-contained JSP (it can depend on JSTL if necessary)\n> that demonstrates the issue.\n\nI have tried the if.jsp from the examples, and the empty if tag doesn't have the out (this is ok I believe) while the two that are not empty do have it. In the provided example, the if tags are not empty so they should have the out as well.",
      "Created attachment 37903\ninclude header.jsp",
      "Created attachment 37904\ninclude Main_Start.jsp",
      "Created attachment 37905\nnested include HTML_Header.jsp",
      "i don't create that include hell and web developer is on holiday at the moment. I try to add all the missing includes. Hope that helps.",
      "Can you provide the generated java file (LoginForm_jsp.java) ?\n\n/usr/local/tomcat/work/Catalina/localhost/qeepmaster-new/org/apache/jsp/WEB_002dINF/jsp/LoginForm_jsp.java",
      "Those includes have at least one further include. Konstantin's suggestion is a better one. With the broken .java file we can try and reverse engineer a test case.",
      "Created attachment 37906\nLoginForm_jsp.java",
      "(In reply to qeepcologne from comment #11)\n> Created attachment 37906 [details]\n> LoginForm_jsp.java\n\n_jspx_dependants.put(\"/WEB-INF/lib/spring-security-taglibs-5.5.0.jar\"\n_jspx_dependants.put(\"/WEB-INF/lib/spring-webmvc-5.3.8.jar\"\n\nOK, I see what versions of the libs were used.\n\n_jspx_dependants.put(\"/WEB-INF/tld/fn-1.1.1.tld\",\n_jspx_dependants.put(\"/WEB-INF/tld/c-1.1.2.tld\",\n\nI wonder why the app is using JSTL 1.1.x instead of the current version (1.2.\u0445).\nhttps://tomcat.apache.org/download-taglibs.cgi\nhttps://tomcat.apache.org/taglibs.html\n\nI found those TLD files at\nhttps://repo.maven.apache.org/maven2/taglibs/c/1.1.2/c-1.1.2.tld\nhttps://repo.maven.apache.org/maven2/taglibs/fn/1.1.1/fn-1.1.1.tld\n\nThey are the same as c.tld and fn.tld in standard.jar of jakarta-taglibs-standard-1.1.2.zip from http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/\n\n\nWith those libs and files I am able to reproduce the error.\nThe libraries used:\njstl.jar\nspring-beans-5.3.8.jar\nspring-expression-5.3.8.jar\nspring-security-taglibs-5.5.0.jar\nspring-security-web-5.5.0.jar\nspring-webmvc-5.3.8.jar\nstandard.jar",
      "Created attachment 37907\ntest_no-libs.zip\n\nTo reproduce:\n1) Unzip test_no-libs.zip into an empty directory\n2) Download the following libraries and put them into WEB-INF/lib durectory:\n\nhttps://repo.maven.apache.org/maven2/org/springframework/security/spring-security-taglibs/5.5.0/spring-security-taglibs-5.5.0.jar\n\nhttps://repo.maven.apache.org/maven2/org/springframework/security/spring-security-web/5.5.0/spring-security-web-5.5.0.jar\n\nhttps://repo.maven.apache.org/maven2/org/springframework/spring-beans/5.3.8/spring-beans-5.3.8.jar\n\nhttps://repo.maven.apache.org/maven2/org/springframework/spring-expression/5.3.8/spring-expression-5.3.8.jar\n\nhttps://repo.maven.apache.org/maven2/org/springframework/spring-webmvc/5.3.8/spring-webmvc-5.3.8.jar\n\n3) zip or jar it and rename to test.war\n\n4) Put the war file into ${catalina.base}/webapps-javaee\n5) Start Tomcat 10\n6) Open http://localhost:8080/test/LoginForm.jsp\n\nThe errors:\n\n[[[\nAn error occurred at line: [509] in the generated java file: [...\\LoginForm_jsp.java]\nout cannot be resolved to a variable\n\nAn error occurred at line: [543] in the generated java file: [...\\LoginForm_jsp.java]\nout cannot be resolved to a variable\n]]]\n\nThose lines (509, 543) both are:\n\n>           out = _jspx_page_context.popBody();",
      "Thanks for that. I can recreate the issue now.",
      "I have a fix. I just want to pull together a simpler test case for this then I'll commit the test and the fix.",
      "*** Bug 65390 has been marked as a duplicate of this bug. ***",
      "Fixed in:\n- 10.1.x for 10.1.0-M2 onwards\n- 10.0.x for 10.0.8 onwards",
      "Just following up in this as we'd really like to catch regressions like this in the ~3 working day window between the release candidate being available and the release vote concluding.\n\nIt is great that you are using the latest Tomcat release as soon as it as available but what would we, the Tomcat team, need to do for you to be able to test the release candidate as soon as it as available rather than you waiting for the release?",
      "It would be much easier if there is a docker image available for the release candidate (or latest milestone), then we could use it as soon it is available on staging."
    ],
    "creation_ts": "2021-06-17T08:08:48Z",
    "fixes": [
      65387
    ]
  },
  {
    "id": 69135,
    "summary": "Tag files doing relative file include does not works in case tag is in jar",
    "description": "Tag files that are in jar package and using include like:\n<%@ include file=\"/META-INF/include.jspf\"%>\nWorks correctly\n\nBut tag files that are in jar package and using relative path file include like:\n<%@ include file=\"../include.jspf\"%>\nDoesn't works correctly.\n\nJasper compilation complains about file not found.\nAfter some debugging in Jasper, it seem's that the JspUtil.getInputStream is having the logic between in jar/not in jar:\n\n        if (jar != null) {\n            String jarEntryName = fname.substring(1);\n            in = jar.getInputStream(jarEntryName);\n        } else {\n            in = ctxt.getResourceAsStream(fname);\n        }\n\nfname is built previously by ParserController.resolveFileName(String inFileName)\nBut in case of relative inFileName, like: ../include.jspf\nThe output if the ParserController.resolveFileName(String inFileName) will be:\n/META-INF/../include.jspf\n\nIt's a valid path, but when using this path on a Jar/ZipEntry it's not able to find the entry.\n\nMay be the path need to be resolved first before looking for the entry in the jar ? Something like:\nPaths.get(fname).normalize().toString();\n\nI'm sorry I was not able to find a fix in the code, also I did my tests on Tomcat 9, but it look likes the code is similar in more recent versions.\nBut I did implemented unit tests to reproduce easily:\n- one unit test of an absolute file include from a tag in a jar that works\n- one unit test of a relative file include from a tag in a jar that fails\n\nHere is the commit from my fork: https://github.com/jkevan/tomcat/commit/eeda51262c4bbdc9e46b30f52ef7b7862a0e0b84\n(didn't open a Pull request since I don't have a fix)",
    "comments": [
      "Sorry missing providing the StackTrace at least:\n\n13-Jun-2024 11:36:29.253 GRAVE [http-nio-127.0.0.1-auto-1-exec-1] org.apache.catalina.core.StandardWrapperValve.invoke Servlet.service() du Servlet [jsp] dans le contexte au chemin [/test] a retourn\u00e9 une exception [/META-INF/tags/includeTest.tag (ligne : [19], colonne : [1]) Le fichier [../toBeIncluded.jspf] n'a pas \u00e9t\u00e9 trouv\u00e9] avec la cause\n\torg.apache.jasper.JasperException: /META-INF/tags/includeTest.tag (ligne : [19], colonne : [1]) Le fichier [../toBeIncluded.jspf] n'a pas \u00e9t\u00e9 trouv\u00e9\n\t\tat org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:32)\n\t\tat org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:299)\n\t\tat org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:99)\n\t\tat org.apache.jasper.compiler.Parser.processIncludeDirective(Parser.java:349)\n\t\tat org.apache.jasper.compiler.Parser.parseIncludeDirective(Parser.java:384)\n\t\tat org.apache.jasper.compiler.Parser.parseDirective(Parser.java:485)\n\t\tat org.apache.jasper.compiler.Parser.parseFileDirectives(Parser.java:1802)\n\t\tat org.apache.jasper.compiler.Parser.parse(Parser.java:141)\n\t\tat org.apache.jasper.compiler.ParserController.doParse(ParserController.java:245)\n\t\tat org.apache.jasper.compiler.ParserController.parseTagFileDirectives(ParserController.java:173)\n\t\tat org.apache.jasper.compiler.TagFileProcessor.parseTagFileDirectives(TagFileProcessor.java:496)\n\t\tat org.apache.jasper.compiler.TagLibraryInfoImpl.createTagFileInfo(TagLibraryInfoImpl.java:345)\n\t\tat org.apache.jasper.compiler.TagLibraryInfoImpl.<init>(TagLibraryInfoImpl.java:205)\n\t\tat org.apache.jasper.compiler.Parser.parseTaglibDirective(Parser.java:435)\n\t\tat org.apache.jasper.compiler.Parser.parseDirective(Parser.java:493)\n\t\tat org.apache.jasper.compiler.Parser.parseElements(Parser.java:1450)\n\t\tat org.apache.jasper.compiler.Parser.parse(Parser.java:144)\n\t\tat org.apache.jasper.compiler.ParserController.doParse(ParserController.java:245)\n\t\tat org.apache.jasper.compiler.ParserController.parse(ParserController.java:106)\n\t\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:207)\n\t\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:392)\n\t\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:368)\n\t\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:352)\n\t\tat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:603)\n\t\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:399)\n\t\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:376)\n\t\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:324)\n\t\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:623)",
      "My reading of the JSP specification is that both examples are currently not specification compliant.\n\nThe references are a little circular but the key ones seem to be:\n\nhttps://jakarta.ee/specifications/pages/4.0/jakarta-server-pages-spec-4.0#the-include-directive\nhttps://jakarta.ee/specifications/pages/4.0/jakarta-server-pages-spec-4.0#relative-url-specifications\nhttps://jakarta.ee/specifications/pages/4.0/jakarta-server-pages-spec-4.0#including-data-in-jsp-pages\n\nMy reading of the above is that the file attribute of the include directive is either:\n- relative (doesn't start with /) to the current file\n- absolute (does start with /) which is taken from the context root\n\nThat means that the absolute example in your test case that uses \"/META-INF/include.jspf\" shouldn't work.\n\nA related question is can a relative path step out of a JAR file and - if it can - where does it end up. My own view is that this should not be allowed. The JAR should be self-contained.\n\nThis issue might need some clarifications from the Jakarta Pages project but before we start a discussion at Eclipse, lets see if anyone has a different interpretation of the specification. It is always possible I missed some relevant sections in my review of the current spec.",
      "Given there has been no further comment, I intend to proceed and write some test cases and associated fixes based on comment #3",
      "Hello Mark,\n\nThank you very much for looking into this issue.\n\nI agree with you on the following point: A JAR should be self-contained, and URLs should not reference outside the package.\n\nThen what should be considered the root path of the JAR, in case a tag within the jar is doing an absolute file include ? \n\nThe path I used, \"/META-INF/include.jspf\", is actually valid if we consider the JAR as the root when an absolute include is done from a tag within the JAR itself. It's reflect the exact folder structure of the final jar archive.\n\nI'm not sure if I'm being clear, but writing some test cases will definitely help.",
      "Ah. We need to clarify the behaviour for absolute paths in an include directive first then.\n\nMy reading of the specification is as follows (all references to Pages 4.0):\n\n<%@ include file=\"/META-INF/include.jspf\"%>\n\nis an include directive as defined by section 1.10.3. As per 1.10.3, the behaviour of the file attribute is defined by section 1.2.1.\n\n1.2.1 states that paths starting with \"/\" are context relative.\n\n\nFurther, 8.4.1 requires that all tag files packaged in a JAR file are packaged under /META-INF/tags or a sub-directory of /META-INF/tags. While not explicitly stated, it seems reasonable to me that tag file segments should be subject to the same restriction.\n\n\nWhat is your justification, with specification references, for absolute paths used within a tag file or tag fragment in tag package in a JAR to be relative to the JAR root rather than the context root?\n\n\nWhat is your justification, with specification references, for it to be permitted for tag file fragments packaged in a JAR file to be located outside of /META-INF/tags ?",
      "I think you have a better understanding of the specification than I do. There is no problem with applying the fix that you find most logical.\n\nOn our side, we have a somewhat unique situation. In our software, we use Pax-Web and the JSP engine internally. Additionally, our software allows modules to provide JSP tags. Some of our clients have created these kinds of out-of-context includes, and they worked fine until we updated our version of Pax-Web, which now uses the embedded JSP engine from Tomcat. This update impacted one of our clients.\n\nIt's just that we asked our customers to migrate usages that were no longer working for them:\n<%@ include file=\"../include.jspf\"%>\n\nto use a workaround:\n<%@ include file=\"/META-INF/include.jspf\"%>\n\nThis was, to us, the only way to fix the situation currently for our customer. However, if the rules are that JSP fragments should be under /META-INF/tags and relative/absolute include files, then it's fine. But we will have to communicate this again to our customers, who may be impacted by this behavior update in case of a fix.\n\nThe fix and implementation are up to you, and I trust you to implement or correct what seems most logical according to the specification. I mainly wanted to bring this to your attention through this ticket.\n\nIf the specification indicates that the current behavior needs to be revised, I have no issues with that.",
      "Fixed in:\n- 11.0.x for 11.0.0-M22 onwards\n- 10.1.x for 10.1.26 onwards\n-  9.0.x for  9.0.91 onwards"
    ],
    "creation_ts": "2024-06-13T09:32:05Z",
    "fixes": [
      69135
    ]
  },
  {
    "id": 42643,
    "summary": "Duplicate JSP function mapper variables",
    "description": "When we deploy ~20 or so web apps at a time, we invariably end up with an app or\ntwo on each server that has compilation errors due to code generated like this:\n\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_1;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_2;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_3;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_4;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_5;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_6;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_7;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_1;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_2;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_3;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_4;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_5;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_6;\nstatic private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_7;\n\nThis looks like it might be as simple as unsynchronized access to the static\n'currFunc' in ELFunctionMapper, but I'm far from an expert on this code and\nunfortunately lack the time to become one. :)\n\nThis only appears to happen when we mass-deploy apps, and we can resolve it by\ndeleting the generated .java file and manually restarting the affected app.",
    "comments": [
      "Thanks for the report. This has been fixed in svn and will be in 5.5.25 and\n6.0.14 onwards."
    ],
    "creation_ts": "2007-06-12T07:34:16Z",
    "fixes": [
      42643
    ]
  },
  {
    "id": 43470,
    "summary": "ClassCastException at org.apache.catalina.deploy.NamingResources",
    "description": "NamingResources reads\n\n    public void removeLocalEjb(String name) {\n\n        entries.remove(name);\n\n        ContextLocalEjb localEjb = null;\n        synchronized (localEjbs) {\n            localEjb = (ContextLocalEjb) ejbs.remove(name);\n        }\n        if (localEjb != null) {\n            support.firePropertyChange(\"localEjb\", localEjb, null);\n            localEjb.setNamingResources(null);\n        }\n\n    }\n\nif should be \n\n    public void removeLocalEjb(String name) {\n\n        entries.remove(name);\n\n        ContextLocalEjb localEjb = null;\n        synchronized (localEjbs) {\n            localEjb = (ContextLocalEjb) localEjbs.remove(name); // The error\nwas in this line\n        }\n        if (localEjb != null) {\n            support.firePropertyChange(\"localEjb\", localEjb, null);\n            localEjb.setNamingResources(null);\n        }\n\n    }\n\nRegards,\n  lg",
    "comments": [
      "There are some more bug at this same class\nIt reads\n\n    public void addResourceEnvRef(ContextResourceEnvRef resource) {\n\n        if (entries.containsKey(resource.getName())) {\n            return;\n        } else {\n            entries.put(resource.getName(), resource.getType());\n        }\n\n        synchronized (localEjbs) { // This is wrong\n            resource.setNamingResources(this);\n            resourceEnvRefs.put(resource.getName(), resource);\n        }\n        support.firePropertyChange(\"resourceEnvRef\", null, resource);\n\n    }\n\nCorrected version\n\n    public void addResourceEnvRef(ContextResourceEnvRef resource) {\n\n        if (entries.containsKey(resource.getName())) {\n            return;\n        } else {\n            entries.put(resource.getName(), resource.getType());\n        }\n\n        synchronized (resource) { // This is correct\n            resource.setNamingResources(this);\n            resourceEnvRefs.put(resource.getName(), resource);\n        }\n        support.firePropertyChange(\"resourceEnvRef\", null, resource);\n\n    }\n\n\n\nand\n\n    public void removeResourceEnvRef(String name) {\n\n        entries.remove(name);\n\n        String type = null;\n        synchronized (resourceEnvRefs) {\n            type = (String) resourceEnvRefs.remove(name);\n        }\n        if (type != null) {\n            support.firePropertyChange(\"resourceEnvRef\",\n                                       name + \":\" + type, null);\n        }\n\n    }\n\n\nShould be\n\n    public void removeResourceEnvRef(String name) {\n\n        entries.remove(name);\n\n        ContextResourceEnvRef resourceEventRef = null;\n        synchronized (resourceEnvRefs) {\n            resourceEventRef = (ContextResourceEnvRef) resourceEnvRefs.remove(name);\n        }\n        if (resourceEventRef != null) {\n            support.firePropertyChange(\"resourceEnvRef\",\n                                       name + \":\" + resourceEventRef.getType(),\nnull);\n        }\n\n    }\n\n\nRegards,\n  lg",
      "Thanks for all your patches. Could you provide them in diff -u format as they\nare easier to read and apply that way. Cheers.",
      "Thanks for the patch. I had to make a few tweaks. See http://svn.apache.org/viewvc?rev=651675&view=rev\n\nIt has been committed to trunk and proposed for 6.0.x",
      "This patch has been committed to 6.0.x and will be included in 6.0.17"
    ],
    "creation_ts": "2007-09-24T19:41:40Z",
    "fixes": [
      43470
    ]
  },
  {
    "id": 52955,
    "summary": "Add a ThreadFactory implementation to the ExecutorService used to deploy applications",
    "description": "Created attachment 28488\nThreadFactory implementation for ContainerBase ExecutorService\n\nThe current implementation of the ExecutorService (in ContainerBase) uses the default thread factory, producing Threads named \"pool-1-thread-1\".\n\nThread properties can be customised using a thread factory, modifying the naming scheme will help users identify container threads.\n\nPatch attached.",
    "comments": [
      "This feature has been independently implemented by Keiichi Fujino when fixing bug 53342 in r1345026 and will be in 7.0.28.\n\nThe thread names are container.getName() + \"-startStop-\" + number.\nE.g. \"localhost-startStop-1\"."
    ],
    "creation_ts": "2012-03-21T07:55:31Z",
    "fixes": [
      52955
    ]
  },
  {
    "id": 43706,
    "summary": "Fix a litmus warning for WebdavServlet",
    "description": "The litmus WebDAV compliance test suite produces a couple of warnings in its\n'copymove' group of tests. This is the output on tomcat6 trunk:\n\n$ env TESTS=\"copymove\" litmus http://localhost:8080/webdav/ \n-> running `copymove':\n 0. init.................. pass\n 1. begin................. pass\n 2. copy_init............. pass\n 3. copy_simple........... WARNING: COPY to new resource didn't give 201\n    ...................... pass (with 1 warning)\n 4. copy_overwrite........ pass\n 5. copy_cleanup.......... pass\n 6. copy_coll............. pass\n 7. move.................. WARNING: MOVE to new resource didn't give 201\n    ...................... pass (with 1 warning)\n 8. move_coll............. pass\n 9. move_cleanup.......... pass\n10. finish................ pass\n<- summary for `copymove': of 11 tests run: 11 passed, 0 failed. 100.0%\n-> 2 warnings were issued.\n\nWith my patch the warnings are gone:\n\n$ env TESTS=\"copymove\" litmus http://localhost:8080/webdav/ \n-> running `copymove':\n 0. init.................. pass\n 1. begin................. pass\n 2. copy_init............. pass\n 3. copy_simple........... pass\n 4. copy_overwrite........ pass\n 5. copy_cleanup.......... pass\n 6. copy_coll............. pass\n 7. move.................. pass\n 8. move_coll............. pass\n 9. move_cleanup.......... pass\n10. finish................ pass\n<- summary for `copymove': of 11 tests run: 11 passed, 0 failed. 100.0%",
    "comments": [
      "Created attachment 21051\nThe patch that fixes the litmus 'copymove' warnings.\n\nI left in an additional unrelated comment fix for build.xml, in order to avoid\npolluting the bug database.",
      "This is fixed in 6.0.x and will be included in the next release."
    ],
    "creation_ts": "2007-10-26T07:03:28Z",
    "fixes": [
      43706
    ]
  },
  {
    "id": 35410,
    "summary": "NullPointerException when using out scriptlet (<%= obj %>) on object with toString() returning null",
    "description": "Here is a simple test case to reproduce the bug:\n\n\t<%!\n\t class MyTestClass {\n\t   public String toString() {\n\t     return null;\n\t   }\n\t }\n\t%>\n\t<%\n\t  String nullString = null;\n\t  MyTestClass test = new MyTestClass();\n\t%>\n\t<%= (Object) null %><%-- works well --%>\n\t<%= nullString %><%-- works well --%>\n\t<%= test %> <%-- crash --%>\n\nthis leads to:\njava.lang.NullPointerException\n\torg.apache.jasper.runtime.JspWriterImpl.write(JspWriterImpl.java:337)\n\torg.apache.jasper.runtime.JspWriterImpl.print(JspWriterImpl.java:475)\n\torg.apache.jsp.test_jsp._jspService(test_jsp.java:65)\n\nI consider this to be a bug cause nowhere in the behaviour of toString it is\nspecified it should not return null. Therefore, it should not crash like that.",
    "comments": [
      "Patched to prevent NPE in this case.  Thanks.",
      "Reverted in Tomcat 7.0.35 by r1427821\nSee bug 54241 for a discussion."
    ],
    "creation_ts": "2005-06-18T08:33:01Z",
    "fixes": [
      35410
    ]
  },
  {
    "id": 60013,
    "summary": "Non-ASCII characters in querystring get mangled after URL Rewrite using RewriteValve",
    "description": "I have RewriteValve configured for the ROOT context which is the only context in my deployment setup. \n\nI have many RewriteRules like \n\nRewriteRule ^/abc/(.*)$ /xyz.do?param=$1 [L]\n\nwhere a part of the URL gets rewritten as querystring \n\nwhen I access the URL with non-ASCII characters like http://www.example.com/abc/\u5728\u7ebf\u6d4b\u8bd5\n\nThe page does not load. Checking the rewrite and access logs I found \n\nRewrite Log\n\nRewrote /abc/\u5728\u7ebf\u6d4b\u8bd5 as /xyz.do?param=\u5728\u7ebf\u6d4b\u8bd5 with rule pattern ^/abc/(.*)$\n\nAccess log\n\n/xyz.do?param=????\n\nThis issue only happens when a part of the URL gets rewritten as the querystring. Checking the source code of the RewriteValve \n\nchunk.append(URLEncoder.DEFAULT.encode(urlString));\n\nI found the querystring is not encoded. Is this the cause of the problem?",
    "comments": [
      "Using java 1.7.0_76\nRewriteValve is configured at the context level.",
      "I've added a test case and as far as I can tell, Tomcat is doing the right thing here. I need need to be very careful to ensure that everything was configured to use UTF-8. Until I did that, I saw all sorts of test failures.",
      "I configured UTF-8 everywhere as mentioned in https://wiki.apache.org/tomcat/FAQ/CharacterEncoding#Q1 \n\n1. I set URIEncoding=\"UTF-8\" and useBodyEncodingForURI=\"true\" for the connectors in server.xml \n2. configured org.apache.catalina.filters.SetCharacterEncodingFilter at the top in web.xml \n3. Explicitly set strict servlet compliance to false using setenv.sh \n4. Ensured that no other valves like Request Dumper Valve in http://www.mail-archive.com/users@tomcat.apache.org/msg21117.html was configured.\n\nStill the rewritten querystring was getting mangled. \nAlso when there is a redirect like \n\nRewriteRule ^/abc/(.*)$ /xyz/$1 [R]\n\nIn access log\n\"GET /xyz/????.xml HTTP/1.1\"\n\nthe non-ASCII characters in the request URI is also getting mangled like this",
      "I tested by encoding the querystring in the RewriteValve\n\nif (queryString != null) \n{  \n     request.getCoyoteRequest().queryString().setString(null);\n     chunk = request.getCoyoteRequest().queryString().getCharChunk();\n     chunk.recycle();\n     //chunk.append(queryString);\n\n     chunk.append(URLEncoder.DEFAULT.encode(queryString));\n     request.getCoyoteRequest().queryString().toChars();\n}",
      "I tested by encoding the querystring in the RewriteValve\n\nif (queryString != null) \n{  \n     request.getCoyoteRequest().queryString().setString(null);\n     chunk = request.getCoyoteRequest().queryString().getCharChunk();\n     chunk.recycle();\n     //chunk.append(queryString);\n     // encode queryString \n     chunk.append(URLEncoder.DEFAULT.encode(queryString));\n     request.getCoyoteRequest().queryString().toChars();\n}\n\nI found that = and & in the querystring also was getting encoded \nI had to decode the encoded = and & to get it to work as expected.\n     \n     String encQueryString = URLEncoder.DEFAULT.encode(queryString);\n     encQueryString = encQueryString.replaceAll(\"%3D\",\"=\");\n     encQueryString = encQueryString.replaceAll(\"%26\",\"&\");\n     chunk.append(encQueryString);\n\nAfter making these changes the URL rewriting was working fine \n\nAccess log \n\n/xyz.do?param=%E5%9C%A8%E7%BA%BF%E6%B5%8B%E8%AF%95\n\nI wrote a test jsp and request.getParameter was working fine and retrieved the non-ASCII data with both GET and POST methods \n\nBecause the rewritten and done flags are set in case of redirect, the issue still remain when there is a redirect.",
      "Re-opening due to additional information being provided by the reporter.\n\nPreethi, would it be possible for you to write a test case for this? Configuration + sample output, expected output versus actual output?",
      "Unless a test case that demonstrates this issue is forthcoming, this will get resolved as WORKSFORME again.",
      "Created attachment 34176\nTest case for non-ascii characters in querystring and with redirect flag\n\nAdded testcases using TestRewriteValve.java for non-ascii querystring and non-ascii in request uri(for redirect case).",
      "Created attachment 34177\nNon-Ascii QueryString failure trace",
      "Created attachment 34178\nNon-Ascii Redirect failure trace",
      "Added testcase for the mentioned cases",
      "Thanks for the test cases. They really do make bug reports a lot easier to work with. I'll start looking at them today.",
      "Progress is being made.\n\nThe test cases uncovered some inconsistencies in handling of encoded urlPatterns obtained from web.xml. These have been fixed in trunk (r1758423).\n\nI have added the test cases (some clean-up and a few fixes such as setting the response body to UTF-8) and fixed the remaining issues with the rewrite valve in trunk (r1758425).\n\nThere are a few more related edge cases I want to test. Once that is complete I'll look at back-porting these changes to 8.5.x and 8.0.x.",
      "This has been fixed in the following branches:\n- 9.0.x for 9.0.0.M10 onwards\n- 8.5.x for 8.5.5 onwards\n- 8.0.x for 8.0.37 onwards",
      "I am testing the RewriteValve in the trunk after the issue fix. QueryStrings in the case of redirect are still not encoded.",
      "Created attachment 34205\nTestcase for Redirect with QueryStrings\n\nBoth cases testNonAsciiQueryString and testNonAsciiQueryStringAndRedirectPath fail when a redirect flag is added.",
      "Thanks for the additional tests.\n\nThere isn't going to be a perfect fix without some potentially invasive changes to the RedirectValve. The problem is that encoding is not always the inverse of decoding. The Valve would have to be re-factored to work with undecoded URIs.\n\nAn imperfect fix that ignored some edge cases should be fairly simple.",
      "Created attachment 34208\ntestNonAsciiQueryString failure trace",
      "Created attachment 34209\ntestNonAsciiQueryStringAndRedirectPath failure trace",
      "I've done some further digging and adding support for the 'B' flag looks like a better way to solve this since that is more closely aligned with httpd. Need to see if that is possible.",
      "After further investigation, httpd won't handle some of these cases either. Given that the intention is to mimic, as far as possible, httpd functionality then I am currently leaning towards a solution that does that. That does mean some of the current tests cases will need adjustment else they will start failing.\n\nI will take another look at working with the undecoded URI but that presents its own set of problems.",
      "I've reworked this in trunk/9.0.x. Please test and provide feedback. Assuming there are no issues, I'll back-port this for the next set of releases.",
      "Thanks for the update. Testing the changes in trunk I found some failure cases. Attached the testcase",
      "Created attachment 34220\nB flag failure cases",
      "I don't think using B flag for URLs with non-ASCII characters is the right approach. I am using httpd mod_rewrite for URL rewrite now and so far there have been no issues in non-ASCII characters getting rewritten as querystring.\n\nSupporting B flag will not solve the issue in the URLs in the attached testcases as &,= will also get encoded.",
      "Let me do some more investigation.",
      "I think I have a better understanding of what is going on.\n\nBoth Tomcat and httpd decode and normalize the URI before rewriting. The problem occurs later.\n\nConsider the following rule:\n\nRewriteRule /a/(.*) /b?$1\n\nWith httpd the query string is as follows:\n\n/a/id=%61 -> id=a\n/a/id=%3d -> id==\n/a/id=%3f -> id=?\n/b?id=%61 -> id=%61\n/b?id=%3d -> id=%3d\n/b?id=%3f -> id=%3f\n\nNote how the query string varies depending on whether the request goes through the rewrite rule or not. The problem isn't limited to the query string but it does illustrates the problem. Note also that an application isn't going to be able to unambiguously parse some of those re-written query strings and that using the [B] flag won't help in this since it will incorrectly encode the first '='.\n\nIn Tomcat the problem is more immediately apparent because the query string has to be presented in encoded form.\n\nI think we can get closer to the httpd behaviour but there are always going to be edge cases we won't be able to fix.",
      "I think the rewritten URL should be encoded(similar to mod_rewrite approach). In the fix provided in 8.0.37 release, the request-uri and querystring are encoded after rewrite. Handling redirect in a similar fashion will solve this problem. \n\nPlease update any progress in the RewriteValve.",
      "Those most recent tests aren't consistent with httpd's behaviour.\n\nBoth Tomcat and httpd process rewrites in very similar ways (to a point).\n\nThe original query string is retain in encoded form.\nThe path URI is processed in decoded and normalized form.\nAny query string generated by the rewrite is in decoded form (note this differs from the original).\nBefore any rewrite, any decoded elements are encoded.\n\nThe NE flag disables the encoding of decoded elements on rewrite.\n\nThe B flag encodes back references.\n\nIt is therefore possible for unwanted double encoding to occur when B and R are combined.\n\nIt is also possible for UTF-8 bytes to appear directly in the location header when R is combined with NE.\n\nI'm fairly confident of the latest code but I'll leave it a little while before back-porting to give you a chance to test it and provide feedback.",
      "Thanks for the update. The concerns when R flag is used with NE and B flag are valid. At a glance, the current fix seems to be fine. I will test the latest changes and get back to you.",
      "There seems to be a double encoding issue in QSA append. I added a test case with L and QSA flag which failed. \nLooks like the original query string as well as the part of the request URI which got rewritten as querystring are getting encoded. This needs to be handled in the isQsappend code block.",
      "Created attachment 34226\nQueryString Append Failure",
      "It appears that httpd (at least as provided by 2.4.7 in Ubuntu 14.04.5 which I am using to test) sometimes double encodes when QSA is used as well.\n\nI've reworked the QSA handling, added your test case, fixed another test case that was broken by this fix and made sure your name is in the changelog.\n\nThanks for sticking with this. Let us know how you get on. I'd like to get this all sported out in time for the next release scheduled for the end of the month.",
      "Thanks for the update. I am testing the latest changes. So far I found a failure when there is a rule with QSA but no querystring is supplied. It is probably due to the absence of null check in QSA handling code.\n\nI will let you know after testing more thoroughly.",
      "Created attachment 34247\nfailure case for QSA",
      "Any update in QSA issue?",
      "Created attachment 34281\nfix for failure case (QSA)\n\nMark,\n\nthis is a small fix for the test \"failure case for QSA (attachment 34247)\" provided by Santhana Preethi (comment 35)",
      "Comment on attachment 34281\nfix for failure case (QSA)\n\nThanks variation of the patch applied.",
      "Thanks for the fix.",
      "This has been fixed in the following branches:\n- 9.0.x for 9.0.0.M11 onwards\n- 8.5.x for 8.5.6 onwards\n- 8.0.x for 8.0.38 onwards"
    ],
    "creation_ts": "2016-08-18T08:01:05Z",
    "fixes": [
      60013
    ]
  },
  {
    "id": 66382,
    "summary": "org.apache.jk has been deleted by Mark Thomas in 2009/4/9, but the file build.xml still have <include name=\"org/apache/jk/**\" /> at line 757",
    "description": "I don't know if this component has to be include.",
    "comments": [
      "Thank you for the PR, it has been merged."
    ],
    "creation_ts": "2022-12-09T03:58:42Z",
    "fixes": [
      66382
    ]
  },
  {
    "id": 51953,
    "summary": "Proposal: netmask filtering valve and filter [PATCH]",
    "description": "This patch series (three) is a first implementation of a netmask filtering, pretty much as Apache's \"allow from\" and \"deny from\" directives, but with some limitations.\n\nI submit these patches for review only for now. I have tested them with a main() and torturing the NetMask class with various corner cases and it survived all of it.\n\nThe issue I have right now is writing a unit test. I cannot figure out how to do it atm, pointers to example code would be welcome.",
    "comments": [
      "Created attachment 27686\nNetmask class",
      "Created attachment 27687\nNetmask filter",
      "Created attachment 27688\nNetmask valve",
      "Created attachment 27689\nWhole patch (git diff origin/trunk..)",
      "I might make this filter/valve a bit more generic: there's no reason to go through all the trouble of doing an InetAddress lookup, creating a BigInteger, shifting it, and then comparing it if there is no CIDR spec in the IP specified by the configuration.\n\nYou could create a fairly generic IP-matching interface and then two implementations: one simple string-equals one and a more complicated netmask-matching one.",
      "(In reply to comment #5)\n> I might make this filter/valve a bit more generic: there's no reason to go\n> through all the trouble of doing an InetAddress lookup, creating a BigInteger,\n> shifting it, and then comparing it if there is no CIDR spec in the IP specified\n> by the configuration.\n> \n\nWell, the remote host is always an IP address in string form, so there is no lookup performed  at all. When supplied with an IP address in string form, InetAddress.getByName() only validates the validity of the IP address (whether it be IPv4 and IPv6).\n\nAlso, the current implementation also does simple IP matching, since if there is no CIDR the right shift is 0, thus an exact match is required.\n\nMore to the point, I don't see how I could make this generic? It would mean dispatching at some point, but how?",
      "This code is executed unconditionally:\n\n\"\nfinal InetAddress addr = InetAddress.getByName(property);\n\nfor (final NetMask nm: deny)\n     if (nm.matches(addr))\n\"\n\nNetMask.matches does a new BigInteger().shiftRight (though the shift should be 0 bytes, and so should be pretty quick).\n\nRemember that this code may be executed for every request, include, and forward, so you'd better take every opportunity to reduce the amount of time required to run it.\n\nIn terms of making it more generic, what I meant was that you would be able to quickly match exact-matches (using a simple String.equals) and only do the extra work when there was a netmask to actually check.",
      "(In reply to comment #7)\n> This code is executed unconditionally:\n> \n> \"\n> final InetAddress addr = InetAddress.getByName(property);\n> \n> for (final NetMask nm: deny)\n>      if (nm.matches(addr))\n> \"\n> \n> NetMask.matches does a new BigInteger().shiftRight (though the shift should be\n> 0 bytes, and so should be pretty quick).\n> \n> Remember that this code may be executed for every request, include, and\n> forward, so you'd better take every opportunity to reduce the amount of time\n> required to run it.\n> \n\nGood point. I was tempted at first to do a byte[] manipulation but found BigInteger to be very practical, especially since it requires the byte array to be in network order -- which is what I wanted.\n\nI'll have that second implementation working and compare the results in speed.\n\n> In terms of making it more generic, what I meant was that you would be able to\n> quickly match exact-matches (using a simple String.equals) and only do the\n> extra work when there was a netmask to actually check.\n\nThat's true, but consider ::ffff:127.0.0.1: it actually is the same than 127.0.0.1. An .equals() won't work here. OK, that's going far, but still.",
      "Created attachment 27691\nUnified patch for RemoteAddrNetmaskFilter\n\nTake a look at this implementation (Filter only, for now), which I believe is a bit simpler and also allows fast string-matching when there is no \"/\" in the allow/deny spec.",
      "Created attachment 27694\nAlternative netmask class, using byte arrays\n\nHere is another implementation using byte arrays only.\n\nI believe it is even faster than a string compare on exact byte matching, _and_ it doesn't get fooled by ::ffff:* addresses.",
      "This crude test using the following code shows indeed that the byte array based implementation is indeed MUCH faster:\n\n----\n    private static final int COUNT = 50000;\n\n    public static void main(final String[] args) throws UnknownHostException\n    {\n        final NetMask nm = new NetMask(\"22.3.25.8/24\");\n        final NetMask2 nm2 = new NetMask2(\"22.3.25.8/24\");\n\n        final InetAddress in1 = InetAddress.getByName(\"22.3.25.10\"),\n            in2 = InetAddress.getByName(\"cf83::ef:13:1\"),\n            in3 = InetAddress.getByName(\"12.143.110.1\");\n\n        int i;\n        long start, end;\n\n        start = System.currentTimeMillis();\n        for (i = 0; i < COUNT; i++) {\n            nm.matches(in1);\n            nm.matches(in2);\n            nm.matches(in3);\n        }\n        end = System.currentTimeMillis();\n\n        System.out.println(\"impl1: \" + (end - start));\n\n        start = System.currentTimeMillis();\n        for (i = 0; i < COUNT; i++) {\n            nm2.matches(in1);\n            nm2.matches(in2);\n            nm2.matches(in3);\n        }\n        end = System.currentTimeMillis();\n\n        System.out.println(\"impl2: \" + (end - start));\n\n    }\n----\n\nResults:\n\n----\nimpl1: 147\nimpl2: 11\n----\n\nSo, it's definitely the byte-based class. I'll try and throw the string compare into the mix and see how it fares for good measure.",
      "I like this NetMask implementation *much* better. It took me a while to convince myself that it was correct, but it looks good to me, now. :)\n\nThere are only a few nits of coding style that I would change. I'll post an updated patch that includes this implementation.\n\nDid you get a chance to look at my patch?",
      "(In reply to comment #12)\n> I like this NetMask implementation *much* better. It took me a while to\n> convince myself that it was correct, but it looks good to me, now. :)\n> \n> There are only a few nits of coding style that I would change. I'll post an\n> updated patch that includes this implementation.\n> \n> Did you get a chance to look at my patch?\n\nYes I did. But I'm really not convinced that string matching is a good idea. It may be for IPv4, but for IPv6 it will be a mess.\n\nIf you remember, I've had the problem that ::1 wouldn't match because the address reported by request.getRemoteHost() (is it the name?) was actually 0:0:0:0:0:0:0:1, which means you have to write it all. Furthermore, it is quite easy to miss a :0  in the mix...\n\nI'll continue the work when I get time.",
      "(In reply to comment #13)\n> But I'm really not convinced that string matching is a good idea. It\n> may be for IPv4, but for IPv6 it will be a mess.\n\nI think you're right. With your faster implementation of NetMask, it makes this more reasonable.",
      "OK, I need advice.\n\nHow should errors be handled and at which level? What should happen if one specified netmask is invalid? Should the Valve/Filter fail completely? What should be logged and how?",
      "Created attachment 27726\nTests for the NetMask class\n\nHere are the first tests for this class. Only errors at object initialization time for now.\n\nCan I have hints for error handling?",
      "Still waiting for input...",
      "Created attachment 27782\nVersion \"0.1\" of the patch\n\nFull patch over Apache's tomcat70 git repo (therefore over tomcat's trunk if I get it right).\n\nThis patch addresses the following remarks raised on the devel mailing list:\n\n* .get*() now return a suitable input for .set*();\n* as the process of filling lists for deny and allow is the same, for the filter and the valve, factorize it;\n* more comments in NetMask;\n* coding style issues;\n* javadoc;\n* throw IllegalArgumentException from the Valve and Filter if a wrongly formatted NetMask is passed in.\n\nNow, I have a problem which I cannot understand, wrt error handling...\n\nI use the base tar.gz as built by \"ant release\", in output/release/v8.0.0-dev/bin/apache-tomcat-8.0.0-dev.tar.gz. I unarchive in a directory, do startup.sh, it starts.\n\nI then edit the web.xml so as to apply the RemoteCIDRFilter: Tomcat reloads the webapp, the filter applies. Then I edit web.xml so as to apply an ILLEGAL netmask: even though the base NetMask tests work (constructor refuses the input), when reloading the webapp, it seems that nothing is even LOGGED (I do log errors about bad netmasks) and the previous filter stays in place :/\n\nWhat am I doing wrong? I have a list of TODOs but don't even want to mention that list before I understand what the problem is with the filter. Note: I have not debugged yet... I use IDEA, so if someone knows how to debug that I'd be happy.",
      "Well, my filter is not the only one affected.\n\nI also added this to web.xml:\n\n----\n  <filter>\n    <filter-name>host</filter-name>\n    <filter-class>org.apache.catalina.filters.RemoteHostFilter</filter-class>\n    <init-param>\n      <param-name>deny</param-name>\n      <param-value>$127.0.0.1</param-value>\n    </init-param>\n  </filter>\n\n  <filter-mapping>\n    <filter-name>host</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n----\n\nOf course, the regex is invalid. BUT THE CONTEXT RELOADS!!",
      "(In reply to comment #19)\n>       <param-value>$127.0.0.1</param-value>\n> Of course, the regex is invalid. BUT THE CONTEXT RELOADS!!\n\nThe regex is valid. There is nothing syntactically wrong with it. It just does not match anything (because you expect some text after the end of string).\n\n<%= java.util.regex.Pattern.compile(\"$127.0.0.1\") %>\ncompiles successfully without any exceptions.",
      "OK, I don't understand what is happening at all.\n\nThe filter does work, exceptions are thrown, but nothing is logged with the default Tomcat log configuration, and a bad filter doesn't prevent the context from reloading!\n\nIs that expected?",
      "Well, I can now confirm that both the filter and valve work, however the messages I log are NOT shown at all. As to exceptions, when running the valve, they are not raised AT ALL. Error messages are shown, ie:\n\n----\nSEVERE: 1127.0.0.1: invalid address specification\n----\n\nbut only for the Valve :(\n\nIs that the expected behavior? If so, then my patch is basically ready...",
      "Comments?",
      "It has been rather too long since this was last looked at. Apologies for that. I'm looking at this now.\n\nThe good news is that the patch applies cleanly to trunk (9.0.x). There are some compilation issues to take care of (e.g. Comet has been removed) but nothing major.\n\nI'm planning on starting with the NetMask and associated unit tests. I've tidied up some Checkstyle / formatting issues and I'm now looking at refactoring the unit test coverage to a) use a parameterized test and b) expand the test cases. I also want to look at the Exception messages as the current message look slightly odd and I want to switch them over to the StringManager for i18n support.\n\nI'll look at the Valve and Filter once the netmask work is complete.",
      "I've just committed the NetMask class and associated test case.\n\nCan I just say \"Nice code\". An elegant solution and very clearly commented.",
      "Fixed in:\n- trunk for 9.0.9 onwards\n- 8.5.x for 8.5.32 onwards\n- 7.0.x for 7.0.89 onwards"
    ],
    "creation_ts": "2011-10-04T18:05:55Z",
    "fixes": [
      51953
    ]
  },
  {
    "id": 19444,
    "summary": "JNDI Authentication roles must be anonymous accessible",
    "description": "It appears that for the JNDIRealm to be able to locate roles, they must be \nanonymous accessible. I believe that for security purposes this should not be \nnecessary if we are validating the user by binding to the directory. In that \ncase the roles could be accessible to any bound user or that particular user. I \ndiscussed this very briefly on the Tomcat user list. It sounds like this had \nbeen discussed previously and for whatever reason, the idea rejected. Anyhow I \nsubmit that there is a bug, either in the code - which requires the roles to be \nanonymous, or in the documentation which does not make it clear that this is \nthe case (at least in \"Tomcat 4 Servlet/JSP Container - Realm Configuration HOW-\nTO). It seems reasonable to me that if we are binding to the directory to \nauthenticate, we would have that user's access to roles. Perhaps the \ndocumentation should more explicetly state that this is not the case.\n\nIn the hope that it would be accepted as an enhancement, I am going to attempt \nto attach a modified JNDIRealm that uses the authenticated connection to obtain \nthe roles.\n\nThank You,\nArt",
    "comments": [
      "Created attachment 6087\nModified JNDIRealm to use authenticated connection for roles.",
      "Created attachment 6088\nDiff from version 4.1.24.",
      "I forgot to mention that using connectionName and connectionPassword is also \nnot an option for us.\n\nArt",
      "Here is the relevant thread from tomact-user\n\nhttp://marc.theaimsgroup.com/?l=tomcat-user&m=103158720132648&w=2\n\nI am going to mark this as an enhancement request for now.",
      "*** Bug 22948 has been marked as a duplicate of this bug. ***",
      "The code has moved on somewhat since this enhancement request was made so the patch does not apply cleanly.\n\nI have added a new JNDIRealm option in Tomcat 7.0.x to optionally allow role searches as the user being authenticated rather than using using an anonymous user or using connectionName/connectionPassword.\n\nThe new option will be included in 7.0.9 onwards."
    ],
    "creation_ts": "2003-04-29T21:58:13Z",
    "fixes": [
      19444
    ]
  },
  {
    "id": 64474,
    "summary": "Truststore validation is failing to show detailed log messages for out-of-date entries",
    "description": "Truststore validation is failing to show detailed log messages for out-of-date entries. For instance, with 8.5.27, we would get something like this in catalina.log for an outdated entry in the configured truststore:\n\nWARNING [main] org.apache.tomcat.util.net.jsse.JSSEUtil.checkTrustStoreEntries The trusted certificate with alias [somealias] and DN [CN=SomeCN, OU=\"SomeOU\", O=SomeO, C=US] is not valid due to [NotAfter: <SomeDate>]. Certificates signed by this trusted certificate WILL be accepted\n\nNow, we get something like this:\n\nWARNING [main] org.apache.tomcat.util.net.SSLUtilBase.checkTrustStoreEntries jsseUtil.trustedCertNotValid\n\nIt seems that the refactored SSLUtilBase method is unable to obtain the message identified by \"jsseUtil.trustedCertNotValid\":\n\nhttps://github.com/apache/tomcat/blob/8.5.x/java/org/apache/tomcat/util/net/SSLUtilBase.java",
    "comments": [
      "Bad luck, the strings were not moved from package util.net to util when this refactoring was made.",
      "By happy coincidence, I started to work through these strings earlier today. This should get fixed in time for the next release.",
      "Fixed in:\n- master for 10.0.0-M6 onwards\n- 9.0.x for 9.0.36 onwards\n- 8.5.x for 8.5.56 onwards"
    ],
    "creation_ts": "2020-05-27T14:45:31Z",
    "fixes": [
      64474
    ]
  },
  {
    "id": 41722,
    "summary": "role-link tag in web.xml can not  be omitted.",
    "description": "The application with follwing web.xml can not be deployed.\n---\n    <servlet>\n      <servlet-name>sample</servlet-name>\n      <servlet-class>sample.TheServlet</servlet-class>\n      <security-role-ref>\n        <role-name>users</role-name>\n      </security-role-ref>\n    </servlet>\n\n    <servlet-mapping>\n    ....\n    </servlet-mapping>\n\n    <security-role>\n      <role-name>users</role-name>\n     </security-role>\n---\n\"java.lang.IllegalArgumentException: Can't convert argument: null\" occurred.\n\nThe Specification says:\n---\nThe security-role-ref element declares the security role reference in a\ncomponent\u2019s or in a deployment component\u2019s code.\nIt consists of an optional description, the security role name\nused in the code(role-name), and an optional link to a security role(role-link).\n---\n<role-link> is optional.",
    "comments": [
      "This has been fixed in svn and will be included in 5.5.25 and 6.0.14 onwards."
    ],
    "creation_ts": "2007-02-28T01:00:41Z",
    "fixes": [
      41722
    ]
  },
  {
    "id": 33453,
    "summary": "Jasper should recompile JSP files whose datestamps change in either direction (not just newer)",
    "description": "I've noticed that Tomcat won't recompile a JSP file if the date stamp is changed\nto go back in time. This may seem like a strange case, but if you check an older\ncopy of a JSP page out of version control, it's different, and needs to be\nrecompiled. The assumption that all changes to a file involve a newer file\ndatestamp is an invalid one.\n\nI think I found the code that makes this decision, in\norg.apache.jasper.compiler.Compiler, in the isOutDated(boolean) method. The\ncondition is\n        if (targetLastModified < jspRealLastModified)\nbut it should be\n        if (targetLastModified != jspRealLastModified)\nin my opinion.\n\nAfter all, the logic should be that the file has changed, not that it's newer. I\ndon't think it's reasonable to expect that Jasper check the size and do an MD5\nchecksum to *really* see if the file has changed. :)\n\nObviously the workaround is to just to \"touch\" the file but this adds a lot of\noverhead (and one more thing to remember), compared to changing a > to a !=.",
    "comments": [
      "Changes to a file that make the change timestamp older instead of newer seems \nlike a special (if not outright wrong) use-case.  I'm not sure Tomcat should \nworry about this at all.",
      "(In reply to comment #1)\n> Changes to a file that make the change timestamp older instead of newer seems \n> like a special (if not outright wrong) use-case.\n\nI don't agree that using version control is a special or wrong use case. In\nfact, I think the opposite is true.\n\nExample:\n1) Check out a JSP file from VC and deploy it where Tomcat can see it\n2) Access the JSP file via a web browser, so it gets compiled\n3) Change it locally, deploy the changed version (newer timestamp)\n4) Access it via a web browser; Tomcat correctly shows the updated version.\n5) Revert to an older version from VC and deploy that.\n6) Access it via a web browser; Tomcat ignores the changes and shows the output\nof a nonexistent JSP page",
      "This is an enhancement at best. (That I would be -0 to)",
      "Although not allowed to vote I have an opinion: The dynamic update feature for\nJSPs comes from the need to dynamically manage content without a heavy weight\nadministrative action.\n\nBut every now and then one has to roll back a change. With static content you\nwould just put back the original files. It would be very nice, if it would work\nthe same way with JSPs, especially because that's unsually the unplanned case\n(roll back) where you need to have a simple procedure.\n\nI know, you could touch the old file. Myself I always tell Sysadmins to make\nbackup copies and roll back file changes with \"cp -p\", so that the files keep\ntheir original timestamp, which is a nice low-level approximation of checksums.\nAny higher level tool (like CVS) will most liekely also roll back including file\ntimestamps.\n\nThere seems to be very little risk in the change and some not neglectable benefit.",
      "Please test this *really* well. Also, you should test with a similar change made\nto the dependent files near the end of the isOutDated method (otherwise, touch\nwould still be required in some cases).",
      "Thanks for your hint.\n\nI do like the use case, but I should have thought better about the\nimplementation suggestion of Jamie. His idea to just compare for timestamps for\nnot being equal will not work!\n\nIn most cases the timestamps of the class files will of course be younger than\nthe source file (source file has some old installation date but class file is\nonly generated on first access). So this change would make the compiler compile\non every test :(\n\nIt would only work by saving the last JSP timestamp for any JSP and then\ncomparing to the saved value insted of comparing to the timestamp of the\ngenerated files. I leave it up to Jamie to suggest a working patch - I don't knw\nenough about Jasper details.",
      "Fair enough; that's not the place to make that change. The servlet .class or\n.java file will be slightly newer than the JSP file. It's the JSP file's date\nthat should be compared to the cached last-modified time, regardless of how many\nms it took to get around to generating and compiling the actual servlet.",
      "Feel free to reopen this when you have a patch ready for us to evaluate -- \nlooking forward to it.",
      "The .jsp file date stamp doesn't have to go back in time for the isOutDated\ncheck to fail, it can and does fail in a more normal usage pattern.\nHere is a scenario that shows the problem:\n- I deploy version 1, the .jsp has time1\n- I make version 2 of the .jsp at time2\n- Visitor visits the site, and the .jsp is compiled at time3\n- I deploy version2\n- isOutDated returns false as time3 > time2\n\nWould setting the date stamp of the .java and .class files to the date stamp of\nthe .jsp file, and changing the comparison from < to != in the isOutDated check\nfix the problem sufficiently?  Or are there negative side effects I haven't\nthought of?\n\nI am working on patching my Tomcat to do exactly as above, I would be happy to\ngive it to someone for evaluation when its ready.",
      "(In reply to comment #9)\n> The .jsp file date stamp doesn't have to go back in time for the isOutDated\n> check to fail, it can and does fail in a more normal usage pattern.\n> Here is a scenario that shows the problem:\n> - I deploy version 1, the .jsp has time1\n> - I make version 2 of the .jsp at time2\n> - Visitor visits the site, and the .jsp is compiled at time3\n> - I deploy version2\n> - isOutDated returns false as time3 > time2\n> \n> Would setting the date stamp of the .java and .class files to the date stamp of\n> the .jsp file, and changing the comparison from < to != in the isOutDated check\n> fix the problem sufficiently?  Or are there negative side effects I haven't\n> thought of?\n> \n> I am working on patching my Tomcat to do exactly as above, I would be happy to\n> give it to someone for evaluation when its ready.  \n\nAs looked into in comment #6, this is not doable easily, which makes the few use\ncases which could benefit from this not worth it. Please try to read the report\nnext time.",
      "Remy,\nWith all due respect I did read the report fully and I believe the\nrecommendation I made addressed comment #6.  If you feel my recommendation isn't\nsufficient, please state why.\nThe other point in my first comment was that this bug can manifest itself in\nways more common than the original report, in fact that's why my colleague and I\nfound it.  \nI have patched and tested my local Tomcat, and am attaching the two files I\nmodified for review.\n\n(In reply to comment #10)\n> (In reply to comment #9)\n> > The .jsp file date stamp doesn't have to go back in time for the isOutDated\n> > check to fail, it can and does fail in a more normal usage pattern.\n> > Here is a scenario that shows the problem:\n> > - I deploy version 1, the .jsp has time1\n> > - I make version 2 of the .jsp at time2\n> > - Visitor visits the site, and the .jsp is compiled at time3\n> > - I deploy version2\n> > - isOutDated returns false as time3 > time2\n> > \n> > Would setting the date stamp of the .java and .class files to the date stamp of\n> > the .jsp file, and changing the comparison from < to != in the isOutDated check\n> > fix the problem sufficiently?  Or are there negative side effects I haven't\n> > thought of?\n> > \n> > I am working on patching my Tomcat to do exactly as above, I would be happy to\n> > give it to someone for evaluation when its ready.  \n> \n> As looked into in comment #6, this is not doable easily, which makes the few use\n> cases which could benefit from this not worth it. Please try to read the report\n> next time.\n>",
      "Created attachment 16489\nChanges to Compiler.java and JspCompilationContext.java to fix bug 33453\n\nModified Compiler.java isOutDated() method to use != instead of > for datestamp\ncomparison.\nModified JspCompilationContext.java compile() method to set the datestamp of\nthe generated .java and .class files to the datestamp of the source .jsp.",
      "Remy,\nI will keep re-opening this bug until you take the time to explain to me why I\nam wrong.  Which even you can't, because I'm not.",
      "Sorry for letting you down, I was having dinner.",
      "Since when is it a good idea to *close* a bug that you can't think of how to fix\noffhand, and don't feel like fixing yourself?\n\nThis behavior is infantile and is an embarassing contradiction to the spirit of\nthe open source development model. And now you're refusing to look at a patch\njust to save face? This is really sad.\n\nI wonder how many other Tomcat bugs exist but were closed because somebody\ndidn't want to think about them or try to resolve them.\n\nMaybe you ought to use the priority and target milestone features instead of\npretending that Tomcat does the right thing because whatever it currently does\ndefines what \"the right thing\" is.\n\nI'm not going to reopen this because I'm not wasting any more time on this\nlittle power game. There are competitors to Tomcat and this is just another\nreason to use them instead.",
      "Created attachment 16492\nChanges to JspCompilationContext.java\n\nSets the lastModified on the generated .java and .class files to the\nlastModified of the source .jsp",
      "Created attachment 16493\nChange to Compiler.java\n\nChange the < to != in the isOutDated method.",
      "As suggested by Rainer, I have submitted my recommended changes in patch form\nfor easier review.\n\nRemy, I was also at lunch so unfortunately I was delayed in re-opening the bug,\nwhich I likewise apologize for.  I accept your apology. I am considering\ncreating a script to automate my re-opening of the bug.  As a peace offering I\nam willing to automate your part, automatically changing the status to RESOLVED\nWONTFIX, just send me your bugzilla login and password.\n\nBy the way, if you bothered to take the time to think about the problem, you\nwould realize as I have that the current behavior is very broken.  As I have\nstated before, not just for the original use case in the bug report, it affects\nevery .jsp modification, without moving the timestamp backward whatsoever.  This\nbug affects everyone, period.",
      "My instinct is that changing the true timestamp of generated files is going to\ncause other problems. I am very uneasy with a solution that means what a user\nsees (in terms of timestamps) isn't going to be what actually happened.\n\nIt is also worth having a look at bug 23406. In that case timing resolutions to\nthe nearest second were not sufficient to resolve the issue. Any patch for this\nissue should also address the issue in 23406.\n\nMy preference would be for a patch that recorded, for each JSP, somthing that is\nguaranteed to change for all of the related use cases. Timestamp + file size\nshould be OK, MD5 certainly would be.\n\nMy general unease about changing file timestamps hasn't got to the point where I\nwould -1 this patch but I haven't had time to reflect on this yet.\n\nIn summary:\n- I agree this is a problem\n- I agree the right solution isn't going to be easy\n- I think we need a more robust solution that the current patch.",
      "(In reply to comment #19)\n> In summary:\n> - I agree this is a problem\n\nI disagree.\n\n> - I agree the right solution isn't going to be easy\n\nI do not wish to find any solution to this non issue. The only problem is that\npeople will have to use touch or similar in a few very select situations, which\napparently is too difficult.\n\n> - I think we need a more robust solution that the current patch.\n\nYes, -1 for it. Obviously, anyone is free to waste his time on this trying to\nfind an acceptable solution, but the said solution has better be trivial,\notherwise it will get a -1 from me.",
      "Setting timestamp seems not a clean solution to me. API doc says, hat the time\nmight be rounded, so even if we try to set the time to the same timestamp we get\nfrom the JSP, the resulting timestamp might differ and not be equal to the\noriginal time (Consider diffrent file system types etc.).\n\nI would also prefer a solution where information about the JSP is saved and\nlater compared. Would JspServletWrapper be the right place to save the original\nJSP modification time?\n\nMD5 would be nice, but then md5 checksum would need to be recalculated on every\nJSP check with unchanged file time, so unfortunately not a rare case. I guess\nthat's too bad for performance.\n\nMaybe timestamp and size would be enough, because both can be retrieved easy and\nefficiently, and if timestamp did not change, but content did change, it is very\nlikely, that the file was in progress of being written to, so at least size\nshould have changed.\n\nIf we agree, that it's worth trying to make a patch to JspServletWrapper, I'll\ntry to submit one tomorrow (not really for 5.5.12).\n\nOne thing remains though: I'm not sure how to handle the case of included JSPs\n(dependecies). Maybe I'll find a solution by digging deeper into Jasper.\n\nOne last word: I had customers having problems with both scenarios: rolling back\nfile changes, but also distributing content with wrong timestamps (future time)\nand in consequence continuous recompilation for several minutes. Not trying to\nassume a simple time model seems to make jasper more robust.",
      "(In reply to comment #21)\n> I would also prefer a solution where information about the JSP is saved and\n> later compared. Would JspServletWrapper be the right place to save the original\n> JSP modification time?\n\nNope, people can restart the container.\n\n> MD5 would be nice, but then md5 checksum would need to be recalculated on every\n> JSP check with unchanged file time, so unfortunately not a rare case. I guess\n> that's too bad for performance.\n\nArg MD5.\n\n> Maybe timestamp and size would be enough, because both can be retrieved easy and\n> efficiently, and if timestamp did not change, but content did change, it is very\n> likely, that the file was in progress of being written to, so at least size\n> should have changed.\n\nThis is simple, and maybe acceptable, but would make the cost of checking for\nrecompilation (even) more expensive than it is right now.\n\n> One last word: I had customers having problems with both scenarios: rolling back\n> file changes, but also distributing content with wrong timestamps (future time)\n> and in consequence continuous recompilation for several minutes. Not trying to\n> assume a simple time model seems to make jasper more robust.\n\nOn access compilation and its friend the development mode - which you are using\nor you would not have this \"issue\" - should not be used in production (the only\nreason why it is not as bad as it used to be is that I tweaked it do do only one\ncheck at most per page per time interval - obviously if there are 100 pages, my\ntrick will not work that well).",
      "You disagree because you don't fully understand the problem.  If someone first\nvisits your .jsp after your modification, but before redeployment, you will be\nhit by this bug.  You will wonder why your change didn't take effect.  It is not\nnecessary for the timestamp to move backwards.  You don't control when your .jsp\nis accessed.  As your development/test servers will see different access than\nyour production, you will encounter a production bug that you didn't see in your\nother environments.  Or if you are load balanced you will encounter the bug on\none machine but not another.  Good luck debugging that when it happens to you.\n\nUsing touch is not difficult, just add it to the documentation for JBoss and\nevery other web server that to hot deploy, do the following:  hot deploy, find\nthe tmp directory where the war is unpacked, touch every .jsp file that changed.\n   And do that atomically so that noone can visit the .jsp inbetween.\n\nThe jasper code as is fails badly, my fix is trivial, is an improvement, but\nstill not 100% correct and has the side effect of changing a couple timestamps.\n The only place I'm aware of in Jasper that uses those timestamps is the broken\nisOutDated logic.  \n\nMy fix doesn't handle dependencies correctly, and there is still the possibility\nthe .jsp is visited in the same second / minute / whatever the OS granularity is\nas the modification.  Another side effect of my fix is that every .jsp will be\nrecompiled once after the fix is applied.\n\nTimestamp rounding by the filesystem is not an issue, the timestamp of the .jsp\nwill be rounded the same way as the .class and .java files.  Every OS will round\ntimestamps in an internally consistent manner.\n\nIf changing the timestamps of the .java and .class files is still deemed\nverboten, then I suggest copying the .jsp to the same temporary directory that\nthe .java and .class files are generated in, and preserving its timestamp.  Then\n timestamp, filesize, md5, even the exact contents of the file can be compared.\n\nRemy, I am using JBoss4.0.2, how should I be deploying .jsps to production to\navoid this issue?",
      "For what it's worth:\nA few years ago we implemented the timestamp approach to this issue in the\nWebSphere Application Server JSP container at the request of a small number of\ncustomers - for whom it was critical.  A generated classfiles is set to the\ntimestamp of the source JSP file.  The classfile is considered to be outdated\nwhen the two timestamps do not match.  File size is not part of the equation.\nTag files are handled the same way.\nThe timestamp disconnect :) of classfiles vs. their actual compilation time\nrarely causes confusion among customers; it's a non-issue. We write compilation\ntime/date and other information into the generated .java file, in a comment, so\nany confusion that might occur can be easily cleared up.\nThe timestamp != strategy has worked well on Versions 4 through 6, on all\nplatforms. Dependency tracking (static includes, TLDs, tag files) is easily\nmanaged. The race condition described in bug 23406 has never been reported. \nTimestamp rounding has never been an issue.\nGoogle for \"websphere jsp timestamp\" and you'll find some info about the\nimplementation.\nSome things to consider if you all decide it's an appropriate change for Tomcat\n(this stuff is all documented and easily found on the web):\nWhen serving JSP sources from JARs, we use the timestamp of the JAR for the\noutdated check.\nAny expansion of WARs or other compressed artifacts with precompiled JSP classes\nmust maintain timestamps (doh).\nThere *will* be first-time recompilation cost to Tomcat users if this is\nimplemented, as Jonathan mentioned.  Some won't like it.  \nKeeping data only in a runtime artifact like the servletwrapper won't work, as\nRemy stated.",
      "Another thing that currently compunds this issue is the fact that the zip file\nformat used for .war files ignores timezone on datestamps.  \n\nSo for example, my file times are mountain standard and my server is in GMT.  If\nI make a change to the .jsp after it is accessed on the server, unless it is 7\nor 8 hours after, it won't take effect.  And if the time change is in the\nreverse direction, the .jsp will be recompiled continuously for the duration of\nthe difference.",
      "I took my Tomcat out of development mode, and verified this issue exists there\nas well.  development=false uses the same, broken isOutDated check.\n\n> On access compilation and its friend the development mode - which you are using\n> or you would not have this \"issue\" - should not be used in production",
      "> On access compilation and its friend the development mode - which you are using\n> or you would not have this \"issue\" - should not be used in production\n\nBy \"access compilation\" are you referring to the development=\"true\" mode which causes recompilation \non every access?\n\nWe rely on our JSP pages to be compiled when the date changes and the only *reliable* way to do this is \nto touch *all* JSP files whenever we change something.   I suspect it is because of the problem Jonathon \nhas pointed out.  Unfortunately, this means the webapp is very slow after each deployment.  If this \nproblem won't be fixed, what is the recommended way to avoid recompiling all pages in a production \nenvironment?",
      "Created attachment 16599\nrebuilt jasper-compiler.jar\n\nHere is a rebuilt jasper-compiler.jar that incorporates my proposed patch.  For\nanyone who needs a fix and doesn't want to download, patch, and rebuild.",
      "We got bit by this bug again today!   How can I impress on the developers the seriousness of this issue?\n\nWe need to touch every JSP file when we deploy a webapp because we cannot trust that Tomcat will \nrecompile the things that need to be.   This causes large delays to the end users that are unlucky enough \nto hit the website first.\n\nIf you revert your JSP files to an older branch, you also have to remember to touch them (many CM \nsystems revert the dates to the older version which still pass the < comparison).\n\nI think Jonathon's fix will address every realistic scenario.    Please use his patch!",
      "(In reply to comment #28)\n> Created an attachment (id=16599) [edit]\n> rebuilt jasper-compiler.jar\n> \n> Here is a rebuilt jasper-compiler.jar that incorporates my proposed patch.  For\n> anyone who needs a fix and doesn't want to download, patch, and rebuild.\n\nHello Jonathan,\n\ni've tried tu use your jasper-compiler.jar into TC 5.5.12, because we have a\nproblem to make Tomcat reload and compile modified JSPs on fly, but an exception\nis thrown when Jasper try to compile the JSP.\n\ni haven't try to patch an rebuilt yet.\n\nHere is the root cause of the stack trace, it seem like an import from an\nEclipse library :\n\njava.lang.NoSuchMethodError:\norg.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer.<init>(Lorg/eclipse/jdt/internal/compiler/env/IBinaryType;)V\n\torg.apache.jasper.compiler.JDTCompiler$1.findType(JDTCompiler.java:214)\n\torg.apache.jasper.compiler.JDTCompiler$1.findType(JDTCompiler.java:183)\n\torg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:119)\n\torg.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:178)\n\torg.eclipse.jdt.internal.compiler.lookup.Scope.getPackage(Scope.java:2111)\n\torg.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding(QualifiedTypeReference.java:62)\n\torg.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:141)\n\torg.eclipse.jdt.internal.compiler.ast.TypeReference.resolveSuperType(TypeReference.java:104)\n\torg.eclipse.jdt.internal.compiler.lookup.ClassScope.findSupertype(ClassScope.java:1088)\n\torg.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:755)\n\torg.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:927)\n\torg.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:254)\n\torg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:195)\n\torg.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)\n\torg.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)\n\torg.apache.jasper.compiler.JDTCompiler.generateClass(JDTCompiler.java:387)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:288)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:267)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:255)\n\torg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:557)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:293)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:291)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:241)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:802)",
      "Fabien,\n\nThe jasper-compiler.jar I built was against 5.5.9, I think that's the problem. \nIt should work just fine if you patch and rebuild.\n\n-Jonathan\n\n(In reply to comment #30)\n> (In reply to comment #28)\n> > Created an attachment (id=16599) [edit] [edit]\n> > rebuilt jasper-compiler.jar\n> > \n> > Here is a rebuilt jasper-compiler.jar that incorporates my proposed patch.  For\n> > anyone who needs a fix and doesn't want to download, patch, and rebuild.\n> \n> Hello Jonathan,\n> \n> i've tried tu use your jasper-compiler.jar into TC 5.5.12, because we have a\n> problem to make Tomcat reload and compile modified JSPs on fly, but an exception\n> is thrown when Jasper try to compile the JSP.\n> \n> i haven't try to patch an rebuilt yet.\n> \n> Here is the root cause of the stack trace, it seem like an import from an\n> Eclipse library :\n> \n> java.lang.NoSuchMethodError:\n>\norg.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer.<init>(Lorg/eclipse/jdt/internal/compiler/env/IBinaryType;)V\n> \torg.apache.jasper.compiler.JDTCompiler$1.findType(JDTCompiler.java:214)\n> \torg.apache.jasper.compiler.JDTCompiler$1.findType(JDTCompiler.java:183)\n> \norg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:119)\n> \norg.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:178)\n> \torg.eclipse.jdt.internal.compiler.lookup.Scope.getPackage(Scope.java:2111)\n> \norg.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding(QualifiedTypeReference.java:62)\n> \norg.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:141)\n> \norg.eclipse.jdt.internal.compiler.ast.TypeReference.resolveSuperType(TypeReference.java:104)\n> \norg.eclipse.jdt.internal.compiler.lookup.ClassScope.findSupertype(ClassScope.java:1088)\n> \norg.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:755)\n> \norg.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:927)\n> \norg.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:254)\n> \norg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:195)\n> \torg.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)\n> \torg.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)\n> \torg.apache.jasper.compiler.JDTCompiler.generateClass(JDTCompiler.java:387)\n> \torg.apache.jasper.compiler.Compiler.compile(Compiler.java:288)\n> \torg.apache.jasper.compiler.Compiler.compile(Compiler.java:267)\n> \torg.apache.jasper.compiler.Compiler.compile(Compiler.java:255)\n> \torg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:557)\n> \torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:293)\n> \torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:291)\n> \torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:241)\n> \tjavax.servlet.http.HttpServlet.service(HttpServlet.java:802)",
      "I think the patch files are backwards (show how to remove the fix) but that doesn't make this bug less \nimportant.   We just got bit by this thing again... every couple of month at my company.   It's time to bite \nthe bullet and make a one-off version.   Is it ever going to be fixed?",
      "(In reply to comment #32)\nSorry for getting the patch backwards.  Not that it matters, it will probably \nnever be incorporated any way, due to the co-location of a certain person's \nhead with his ass.\nDo the votes matter?  I am the only one voting for this, perhaps if a few more \npeople used their votes it would show up on a list somewhere, causing some \naction to be taken. \nOther than patching Tomcat, here's what I recommend, in order of preference:\n1) Don't use Tomcat.\n2) Don't use JSPs.\n4) Precompile your JSPs as part of your build process.",
      "Jonathoan, I was about to try using your patch and noticed a problem.   You are using the date of the \nJSP file to stamp the class file but the isOutDated() method is also taking into account the times of the \nincluded JSP files.   This can cause a JSP file to be re-compiled on every hit if it includes a file that has a \nlater date. \n\nFor example, if a.jsp is time-stamped 9:00 and it includes b.jsp which stamped 10:00, then isOutDated\n() will always return true because the time of the included file is greater than 9:00.   Then when you \nassign the earlier time to the class file, this check will fail again the next time around.\n\nI think a better solution is to set the time of the class file to the greatest time of the compiled file AND \nALL of it's dependants.   In the above scenario, the class file would get a time stamp of 10:00 instead of \n9:00 and subsequent checks of isOutDated would return false as expected.   The only problem I can \nforsee is if someone updates the included file, THEN rolls back the original file.   That seems like a very \nobscure case and my solution is still better than the current solution which doesn't account for \nrollbacks at all (and also wouldn't handle the obscure case).\n\nI will attempt a solution but will be on vacation soon so it may be a while before I'm able to post any \npatches.",
      "(In reply to comment #34)\nTom,  I see the problem with the dependants;  that is a huge problem with my patch.\n\nI think it is worth solving this problem completely, in a manner similar to the\nway Websphere does (see comment #24 and do the google search).  To do this, it\nis necessary to compare the current and last timestamps of the jsp and all its\ndependants.  Websphere persists this information in the comments of the\ngenerated .java file.\n\nI don't like the idea of putting the timestamps in the comments ala Websphere,\nit will mean making changes in more places, and also I am not a fan of parsing text.\n\nI am thinking along the lines of creating a seperate file which could be as\nsimple as a serialized hashmap containing the URLs as keys and the timestamps as\nvalues.\n\nThoughts?",
      "Jonathan, just to clairfy:  WebSphere doesn't store the timestamp information \nin comments - what is stored in comments is informational data that can be \nused to help debug problems.\nThe timestamps used by the outdated checks are stored in the generated \nclassfile as part of the _jspx_dependants List.  If you were to look at the \ngenerated .java source you would see, for example:\n\n  private static String[] _jspx_dependants;\n  static {\n    _jspx_dependants = new String[2];\n    _jspx_dependants[0] = \"/Banner.jsp^1082410708000^Mon Apr 19 17:38:28 EDT \n2004\";\n    _jspx_dependants[1] = \"/Footer.jsp^1077657462000^Tue Feb 24 16:17:42 EST \n2004\";\n  }\n\nThe timestamp simply follows a dependent's path information.\n\nThe data in comments the I referred to in post #24 is more this sort of thing:\n\ne:/mytempdir/x.ear/y.war/WEB-INF/classes/_ibmjsp/_jsp1.java was generated @ \nThu Mar 16 14:03:16 EST 2006\nIBM WebSphere Application Server - ND, 6.1.0.0\n    Build Number: v0611.54\n    Build Date: 3/16/06\n\n********************************************************\nThe JSP engine configuration parameters were set as follows:\n\nclassDebugInfo =              [false]\ndebugEnabled =                [false]\ndeprecation =                 [false]\ncompileWithAssert =           [false]\netc. etc. etc.\n\nHope this helps.",
      "(In reply to comment #36)\nScott, thanks! That helps a whole lot.  I hadn't considered storing the\nlastModified times of the dependencies as member data of the servlet.  It is the\nideal place.  In fact, Tomcat already stores the dependency list there.\nI am currently testing a fix which stores the dependant lastModified times\nthere, as well as the lastModified time of the .jsp (rather than modify the\ntimestamp of the .class and .java files).  The comparisons made are all !=\ninstead of > .\nI will post a new patch once I've tested my changes more thorougly.",
      "Jonathan, I have one caveat about using the servlet member data for the \nstoring the timestamp of the JSP itself and using it for outdated check \ninstead of using the JSP source and class file timestamps.  The problem is \nthat the servlet class has to be loaded in order to retrieve this data.  \nTherefore, you wouldn't know a servlet class file was outdated until you'd \nalready loaded it once (first request). We decided that this 'lag' was ok for \ndependency checking (which by the way is turned off by default in WebSphere) \nbut did not like this lag for the top-level JSP reloading.  As I said, just a \ncaveat.",
      "(In reply to comment #38)\nScott, I think I understand your point, but not fully.  Is the lag you refer to\nthe lag of loading the class twice vs. once, in the case of the .jsp being\noutdated and its class not already loaded?  \nAs I understand it, if either the .jsp is not outdated, or the class is already\nloaded, there would be no extra lag.  Is that correct?  I think I might be\nmissing something, or perhaps Tomcat works differently from Websphere.  Or are\nthere situations other than an incoming http request that trigger the outdated\ncheck?",
      "(In reply to comment #39)\nWhat you wrote is totally correct.  I don't want to confuse the issue so I'll \nshut up now.  :)",
      "Created attachment 17955\nCompiler.java diff",
      "Created attachment 17956\nGenerator.java diff",
      "Created attachment 17957\nJspSourceDependent.java diff",
      "Created attachment 17958\nJspServletWrapper.java diff",
      "I uploaded the diffs for the 4 changed files.  This fixes the problem completely\nand addresses any and all concerns brought forth in the comments so far.  What\nhappens next?",
      "Anyone?  Bueller?",
      "http://jira.jboss.com/jira/browse/JBAS-3081?page=all\nJBoss was one of the last standouts, it was relying on Jasper to decide to\nrecompile or not.  No more.  Now everything gets recompiled on every redeploy. \nAt least we can count on the correctness of its behavior now.  \n\nToo bad for the performance that according to some comments here was of such\nparamount concern.  \n\nIts also too bad that even with patches charitably submitted, that bugs can't or\nwon't be fixed in Jasper.",
      "(In reply to comment #47)\n> Its also too bad that even with patches charitably submitted, that bugs can't or\n> won't be fixed in Jasper.\n\nAs I said earlier, I don't think fixing the edge cases is worth adding the\nrelated complexity. It's very simple. As for JBoss \"fixing\" it, Tomcat \"fixes\"\nit too: you simply need to undeploy/redeploy webapps, and/or add some listener\nto clean up the work directory, which is trivial to do. If that's all you want\nto achieve, why did you focus on a complex patch to Jasper ?\n\nBTW, feel free to post more useless rants, esp in conjunction with Gili, I enjoy\nthem :)",
      "(In reply to comment #48)\n> As I said earlier, I don't think fixing the edge cases is worth adding the\n> related complexity. It's very simple. As for JBoss \"fixing\" it, Tomcat \"fixes\"\n> it too: you simply need to undeploy/redeploy webapps, and/or add some listener\n> to clean up the work directory, which is trivial to do. If that's all you want\n> to achieve, why did you focus on a complex patch to Jasper ?\n\nThe problem isn't isolated to an \"edge\" case, it affects the standard way apps\nare deployed.  Thus the numerous other people who have encountered it.  As for\nmy patch being \"complex\" that's just not true. I added 2 fields to the generated\nservlet class and updated the isOutDated logic to use them.  It took all of an\nhour to code and test.  I can't believe you're asking me why I wanted to fix\nsomething that is broken rather than bandaid it.",
      "> The problem isn't isolated to an \"edge\" case, it affects the standard way apps\n> are deployed.  Thus the numerous other people who have encountered it. \n\nI certainly agree. I encountered this issue multiple times. I took quite some\ntime and flustration to discover this bug. \nThe workaround I currently use is deploying exploded .war contents and setting\nscp not to preserve timestamps, effectively forcing all copied JSP files to be\nrecompiled.\nI think the bug is obviously serious and is definately not isolated to an \"edge\"\ncase. \nI'm glad someone is trying to fix it.",
      "(In reply to comment #50)\n> > The problem isn't isolated to an \"edge\" case, it affects the standard way apps\n> > are deployed.  Thus the numerous other people who have encountered it. \n> \n> I certainly agree. I encountered this issue multiple times. I took quite some\n> time and flustration to discover this bug. \n> The workaround I currently use is deploying exploded .war contents and setting\n> scp not to preserve timestamps, effectively forcing all copied JSP files to be\n> recompiled.\n> I think the bug is obviously serious and is definately not isolated to an \"edge\"\n> case. \n> I'm glad someone is trying to fix it.\n\nI've fixed it, getting the fix incorporated into the codebase appears to be the\nimpossible part.  Feel free to use the code from my patch and give feedback if\nyou find any problems.",
      "(In reply to comment #51)\n> I've fixed it, getting the fix incorporated into the codebase appears to be the\n> impossible part.  Feel free to use the code from my patch and give feedback if\n> you find any problems.\n\nThanks, but it seems we will be migrating to JBoss 4.0.4 when the GA version\ncomes out and it shouldn't be an issue anymore. I'm fortunate enough I don't\nhave to use Tomcat standalone.",
      "(In reply to comment #51)\n\n> I've fixed it, getting the fix incorporated into the codebase appears to be the\n> impossible part.  Feel free to use the code from my patch and give feedback if\n> you find any problems.\n\nI just wasted a embarrasing amount of time trying to figure out why one of our\ndevelopers was having problems seeing her changes 'live' on the test machine\nafter changing a JSP file.  I'd assumed that since I had Tomcat running in\nDevelopment mode, it was going to recompile the page when it changed.... \n\nI'm glad to see that the seriousness of this bug has been recognized, and a\npatch developed... even if it doesn't seem to have the blessing of some of the\ndevelopers.  The patch certainly saved me a lot of hassle.  Thanks!!",
      "*** Bug 40420 has been marked as a duplicate of this bug. ***",
      "I think this is a significant problem when you really have different\norganizations building and deploying, e.g., for publicly distributed\napplications. A common timeline would be:\nJanuary - release 1.0 of app\nMarch - JSP in app is updated\nApril - release 1.1 of app frozen for QA\nMay - user downloads and installs 1.0 \nJune - user downloads and installs 1.1\n\nIn this case, Jasper will view the compiled date of the 1.0 JSP as May and view\nit as newer than the change date of the 1.1 JSP. I gather that the \"best\npractice\" for building a web app for use with Tomcat would be to touch all the\nJSP's in your web app in your release process so you minimize the risk (although\nif someone downloads 1.0 after you released 1.1 they can expect a lot of 500\nerrors from NoSuchMethodError)\n\nI believe Jasper really should remove cached JSP's from the work directory when\nan app is undeployed (or redeployed). I think this is common, important, and\nquite different than the rather obscure case of rolling back an older version\nfrom version control. This would also avoid a performance hit in checking out of\ndate on JSP's and wouldn't surprise people (I wouldn't expect JSP's to be cached\nafter redeploying an app, indeed I think it's surprising behavior!)\n\nOne of the users of our Web app just hit this issue today:\nhttp://www.glassbox.com/forum/forum/addpost?parent=235 and with a little\ngoogling you can see others e.g.,\nhttp://mail-archives.apache.org/mod_mbox/tomcat-users/200512.mbox/%3C43A0096A.3060200@mkodo.com%3E",
      "For the next release of your software, I would register an error handler that \ncatches this error, and sends an email with the contents to the tomcat-dev \nmailing list.\n\n(In reply to comment #55)\n> if someone downloads 1.0 after you released 1.1 they can expect a lot of 500\n> errors from NoSuchMethodError)",
      "Why not just distribute your app with pre-compilied JSPs and avoid all these\nproblems?",
      "Our app needs to be portable to a variety of Servlet containers (and for\ndifferent versions), so we can't precompile for any one server.",
      "(In reply to comment #55)\n> I believe Jasper really should remove cached JSP's from the work directory when\n> an app is undeployed (or redeployed). I think this is common, important, and\n> quite different than the rather obscure case of rolling back an older version\n> from version control. This would also avoid a performance hit in checking out of\n> date on JSP's and wouldn't surprise people (I wouldn't expect JSP's to be cached\n> after redeploying an app, indeed I think it's surprising behavior!)\n\nThis is a very good point that I would agree with.  It is not upto any external\ntools to effectively manage the \"work/\" directory for Tomcat.  This directory\nshould be self-managing and be implemented on the side of caution, the caching\nof JSP pages is a benifit not a right.\n\nI think the following new rule would work:\n * The work/ directory is only cleaned of unused contexts when a web-app is\nundeployed (while the container is running, aka hot-undeploy) or found to no\nlonger exist after all configuration parsing has been done at container startup.\n\nAlthough it is somewhat difficult to manage web-app upgrades taking place when\nthe container is shutdown.  Which I'd say was a pretty common event.\n\nOne way around that situation would be to detect a web-app update has taken\nplace.  The simplest for TC (and the sys-admin) way I can think of, is for TC to\nremember the exact timestamp on the WEB-INF/web.xml file which the pre-compiled\npages relate to.  Make it create an empty file and touch up the timestamp to\nmatch the real web.xml as work/web.xml.timestamp.\n\nThe sys-admin must then only touch the WEB-INF/web.xml (when he upgrades his\nweb-app while the container is stopped).  When TC boots up again it detects the\ntimestamp is not equal and presumes the web-app was changed also, this causes a\nflush of the work/ for that context.\n\nThe idea being this approach would be a whole lot simpler than re-validating the\nentire work/ cache from the source JSPs during all webapp deployments.\n\n\nIt would be nice to have re-validation maybe that could be implemented using\nmagic .java file comments in the japser output \"// Jasper-JSP-Prerequisite:\nfoobar/test.jsp 72383828372000\" where both the top level source and all included\nfragments are listed with their Epoch millis for timestamp.  Then the process\nwould be to recurse the work/org/apache/ tree, reading all the .java and\nperforming a simple stat() on the source files.  This could be done in the\nbackground with live requests taking priority to be checked on first access\nafter deployment.\n\nWhen work/* file that have been sucessfully revalidated (or deleted/recreated)\nhave their timestamp updated, so that it is possible for any thread to know if a\nre-validation is required on a page, since the timestamp will be older than the\ndeployment time of the web-app context.\n\nThis would have no longterm JVM impact that loading classes might have, we can\nput what we like in the .java file and access it easily.",
      "Daryl,  see comments #35 - #45 and the 4 patch files I posted in the \nAttachment section.  The patch I submitted in March completely fixes this \nproblem in a manner similar to your suggestion.\n\nThe patch works by storing the timestamp of the .jsp and all its \ndependent .jsps as member data in the compiled servlet.  The isOutDated() \nmethod was modified to compare the timestamp of the .jsp against the added \ntimestamps using != instead of >.\n\n(In reply to comment #59)\n> It would be nice to have re-validation maybe that could be implemented using\n> magic .java file comments in the japser output \"// Jasper-JSP-Prerequisite:\n> foobar/test.jsp 72383828372000\" where both the top level source and all \nincluded\n> fragments are listed with their Epoch millis for timestamp.  Then the process\n> would be to recurse the work/org/apache/ tree, reading all the .java and\n> performing a simple stat() on the source files.  This could be done in the\n> background with live requests taking priority to be checked on first access\n> after deployment.",
      "What are the side-effects of revalidating the entire tree ?  Does it cause all\nclass files to be loaded or can the revalidation occur without having any\nlasting overheads (like increased memory consumption and slower revalidation\nprocess due to parsing of more complex .class data).\n\nMy method only seeks to delete stale work/ .java and .class files during web-app\ndeployment.\n\nIt does not seek to recreate and load them, that can be left to moment of first\nuse (although it would natually lead on to facilitating an automatic recreation\n function).\n\nBy opening the .java file and looking for a magic comment and closing the file\nagain, there is no lasting overhead.  Since we never loaded the class.  Which is\njust great for a revalidation pass during deployment.\n\nI'm a believer there should be a configuration mode of TC which is watertight,\nsuch that no amount of abuse will make the things fail in a way that bites you.\n The work/ directory is a nice speedup but the implementation is more a hack\nthan an optimization, since it clearly breaks down in situations you wouldn't\nexpect.\n\nThis bug/problem hits developers a lot more than production upgrades.",
      "My patch doesn't change the overall strategy for invoking the isOutDated() \ncheck, as you are suggesting. The isOutDated() check does load the class, as \nit did prior to my patch. Revalidating the entire tree would cause all the \nclass files to be loaded, which would be bad. However, with the isOutDated() \nmethod fixed, I see no reason to revalidate the entire tree. \n\n(In reply to comment #61)\n> What are the side-effects of revalidating the entire tree ?  Does it cause \nall\n> class files to be loaded or can the revalidation occur without having any\n> lasting overheads (like increased memory consumption and slower revalidation\n> process due to parsing of more complex .class data).\n> My method only seeks to delete stale work/ .java and .class files during web-\napp\n> deployment.\n> It does not seek to recreate and load them, that can be left to moment of \nfirst\n> use (although it would natually lead on to facilitating an automatic \nrecreation\n>  function).\n> By opening the .java file and looking for a magic comment and closing the \nfile\n> again, there is no lasting overhead.  Since we never loaded the class.  \nWhich is\n> just great for a revalidation pass during deployment.\n> I'm a believer there should be a configuration mode of TC which is \nwatertight,\n> such that no amount of abuse will make the things fail in a way that bites \nyou.\n>  The work/ directory is a nice speedup but the implementation is more a hack\n> than an optimization, since it clearly breaks down in situations you wouldn't\n> expect.\n> This bug/problem hits developers a lot more than production upgrades.",
      "(In reply to comment #62)\nDarryl's last comments aside on changing the management of the entire work tree,\nI want to ask Jonathan and anyone who's used his patches: have they been stable\nand OK?  Have there been any modifications needed to them?  If not, i.e. if\nthey've been stable, I'm tempted to add them to the 5.5 tree.",
      "I haven't had to make any additional changes to the code in the patch.  I have \nonly used the patch in conjunction with JBoss 4.0.2.  I have been using the \ncode in development and production since I posted it.\n\n(In reply to comment #63)\n> (In reply to comment #62)\n> Darryl's last comments aside on changing the management of the entire work \ntree,\n> I want to ask Jonathan and anyone who's used his patches: have they been \nstable\n> and OK?  Have there been any modifications needed to them?  If not, i.e. if\n> they've been stable, I'm tempted to add them to the 5.5 tree.",
      "I just got bit by this bug and lost a good part of my day trying to locate it.  I have tomcat on my development machine (winXP) configured to UTC and the machine itself is set for PST. \n\nHere's the procedure\n\n * make a change to my source jsp\n * war it up\n * stop tomcat\n * delete the existing war and webapps folder\n * copy the new war into the webapps dir\n * start tomcat\n\nThe problem:\nTomcat will expand the war however the last modified date on the jsp file will be adjusted (incorrectly?) to 8 hrs earlier.  As the previous change was compiled less than 8hrs ago the jsp is not recompiled and the outdated .java and .class files remain in the work\\Catalina\\localhost directory.  The result is my changes are not reflected.\n\nFor now I will delete the work directory at the same time I delete the old war file.  This way at least, as a developer, I know that what tomcat is serving is my most recent code.",
      "*** Bug 15417 has been marked as a duplicate of this bug. ***",
      "Created attachment 27040\nProposed patch for Tomcat 7\n\nHaving spent a little time on this, I am attaching a proposed patch for Tomcat 7. The patch breaks binary compatibility for compiled JSPs which I am not at all comfortable about. I have some ideas for a solution to that which I will be discussing on the dev list.\n\nIf this issue is addressed in Tomcat 7, I don't see the fix being back-ported to earlier versions.",
      "Feedback on proposed TC7 patch:\nhttp://tomcat.markmail.org/thread/mbjdpr4bvw6gzx62",
      "This has been fixed in 7.0.x and will be included in 7.0.17 onwards.\n\nThe fix was fairly invasive so it will not be back-ported to 6.0.x or 5.5.x."
    ],
    "creation_ts": "2005-02-08T22:50:23Z",
    "fixes": [
      33453
    ]
  },
  {
    "id": 65137,
    "summary": "Invalid chunk encoding in the tomcat answer",
    "description": "Hi,\n\nWhen tomcat is sending a huge answer (which is thus chunk encoded), the answer may become invalid at some point if the client reads this answer slowly.\n\nSTR:\n- create a small jsp that output a lot of data:\n<html><body><%\nStringBuilder s = new StringBuilder();\nfor( int i = 0; i < 6300000; i++ )\n//for( int i = 0; i < 630; i++ )\n{\n  s.append(\"<p>line \");\n  s.append(i);\n  s.append(\"<p>\\n\");\n}\nout.println(s.toString());\n%></body></html>\n- start tomcat (default config)\n- get the answer with a limited bandwith (no issue otherwise): curl --limit-rate 70k http://localhost:8080/test.jsp -o /dev/null\n- after some time (around 2-3min), an error is raised by curl:\ncurl: (56) Malformed encoding found in chunked-encoding\n\nRegarding the network capture for this issue, it seems that tomcat restart the sending of a chunk while the same chunk was being sent (and was nearly finished). The next chunk seems to be sent correctly (but the answer is no longer valid at this point).\n\nI can reproduce on Tomcat 9 too (but not on tomcat 7). I can reproduce on debian 10 (with the default openjdk 11) and debian 9 (with the default openjdk 8).\n\nRegards.",
    "comments": [
      "Can you confirm which HTTP connector you used for this test. I am going to assume NIO (the default) but confirmation would be helpful.",
      "Hi,\n\nThanks for the answer.\n\nI use the Nio connector (and I can reproduce on tomcat 7 with the nio connector too). I can reproduce on tomcat 8.5 with the apr and the nio2 connector too.\n\nI did have time to investigate a little: it seems that the timeout detection in NioBlockingSelector.write() is quite unreliable. MBs of data will be written on the socket initially, after some point, the code may have to wait more than 20s to write 8192 bytes (default chunk size), we will get a timeout even if the socket has still its buffer quite full and data are still be sent\n\nWhat I have tried:\n1 - increase the timeout. It works but the timeout is used for other things and it does not seem a very good idea to change it.\n\n2 - reduce socket.txBufSize to 8191, it forces smaller writes in NioBlockingSelector.write(), time is updated more often, the timeout does not trigger.\n\nIt seems to work correctly on debian 10 (openjdk 11).\n\nHowever:\n- this has no effect on openjdk 8 (debian 9; MBs of data are still accepted by the socket even if the SO_SNDBUF is under 8192bytes).\n- there is performance degradation (around 10% for 100MB reply).\n\n3 - I have tried to tweak the code so that it wait a little more before writing data to the socket:\nkeycount is initially set to 0 (instead of 1)\nI replaced the following code:\nif (cnt > 0) {\n  time = System.currentTimeMillis(); //reset our timeout timer\n  continue; //we successfully wrote, try again without a selector\n}\nby\nif (cnt > 0) {\n  if (!buf.hasRemaining())\n    break;\n  time = System.currentTimeMillis(); //reset our timeout timer\n}\n(the continue has been removed)\n  \nThe behavior is quite the same as 2/: it works on openjdk11 but not on openjdk8. I did not test the perf (I would bet it is less than 10%).\n\nRegards.",
      "Got it. In the case of NIO2, I'm afraid it is expected known behavior however. Increase the timeout or reduce the buffer (which is what you are doing).",
      "The connection is going to get closed due to the write timeout regardless. The best we can do here is avoid the additional corruption at the end of the truncated response.\n\nTomcat is at the mercy of the JVM and the OS here. If the OS/JVM takes longer than a write timeout to allow Tomcat to write a chunk of the output (typically 8k) then the timeout is going to happen.\n\nYou might also want to experiment with setting socket.txBufSizebut do not the warnings in the docs about using too small a value.\n\nFixed in 10.0.x for 10.0.3 onwards where NIO and APR/Native were impacted.\nBack-ports for 9.0.x and 8.5.x to follow.",
      "Fixed in:\n- 9.0.x for 9.0.44 onwards\n- 8.5.x for 8.5.64 onwards"
    ],
    "creation_ts": "2021-02-11T16:18:27Z",
    "fixes": [
      65137
    ]
  },
  {
    "id": 40929,
    "summary": "Misleading comments in StandardClassLoader",
    "description": "Sometime during the Tomcat 5 development, the StandardClassLoader in\norg.apache.catalina.loader package was stripped down, and is now just a\nURLClassLoader.\n\nI work with code that extends the StandardClassLoader (we use the automatic\nreloading of jar files), and during an upgrade from tomcat 4 to tomcat 5.5 found\ndifficultly trying to figure out what had happened to the code.  I ended up\nhaving to install SVN and do a svn log to figure out why the code was removed.\n\nWhen the code was stripped down, the comments in the java file (and therefore in\nthe javadoc api) remained identical, so the javadoc api for the class is very\nmisleading.  For instance, the comments say that the class implements Reloader,\nwhen it in fact does not.\n\nThe class comments should be updated to reflect the state of the code.\n\nI can't see this as being very high priority, but it would likely be an easy to\nfix for people whom are in the code regularly, and it would make the javadoc\nmuch more readable for people that extend the StandardClassLoader for their own\npurposes.",
    "comments": [
      "This has been fixed in SVN and will be in 5.5.21 onwards."
    ],
    "creation_ts": "2006-11-08T14:23:40Z",
    "fixes": [
      40929
    ]
  },
  {
    "id": 49567,
    "summary": "when starting a new thread from a startAsync Runnable, an infinite amount of doPosts is generated",
    "description": "Created attachment 25728\ntestcase demonstrating the bug\n\nwhen starting a new thread from a startAsync Runnable, an infinite amount of doPosts is generated.\n\nAlso, the GET status is: 500 Internal Server Error,\nhowever, there is no exception thrown by tomcat.\n\nThe attached code demonstrates this, by printing \"Start async()\" an infinite amount of times.",
    "comments": [
      "Looks like you attached the wrong test case to this report.",
      "(In reply to comment #1)\n> Looks like you attached the wrong test case to this report.\n\nDear Mark,\n\nwhy do you think this is the wrong test case?\nAre you not able to reproduce the problem with it?\n\nKind regards,\n\nPieter",
      "Because at first glance the test case appears to be identical to the previous bug you reported and there is no reference in it to doPost which you refer to in both the title and the description. On closer inspection I see there are differences but I am still confused about the references to doPost in the title and description.",
      "(In reply to comment #3)\n> Because at first glance the test case appears to be identical to the previous\n> bug you reported and there is no reference in it to doPost which you refer to\n> in both the title and the description. On closer inspection I see there are\n> differences but I am still confused about the references to doPost in the title\n> and description.\n\nI'm sorry for the confusion, please replace doPost by doGet.",
      "I've converted the attached test case to a Tomcat 7 unit test and can reproduce the issue. Looking at it now...",
      "*** Bug 49635 has been marked as a duplicate of this bug. ***",
      "This has been fixed in 7.0.x and will be included in 7.0.1 onwards.",
      "(In reply to comment #7)\n> This has been fixed in 7.0.x and will be included in 7.0.1 onwards.\n\nHi, I built from trunk (http://svn.apache.org/repos/asf/tomcat/trunk/) but continue to have this problem. Is the fix in another part of the svn tree?\nThanks.",
      "Nope. This issue has been fixed in trunk for over a week.",
      "(In reply to comment #9)\n> Nope. This issue has been fixed in trunk for over a week.\n\nOkay, I'm still having the problem with revision 981332:\n\njava.lang.StackOverflowError\n        at org.apache.catalina.connector.RequestFacade.startAsync(RequestFacade.java:963)\n        at org.apache.catalina.connector.RequestFacade.startAsync(RequestFacade.java:963)\n...\n\n# svn info\nPath: .\nURL: http://svn.apache.org/repos/asf/tomcat/trunk\nRepository Root: http://svn.apache.org/repos/asf\nRepository UUID: 13f79535-47bb-0310-9956-ffa450edef68\nRevision: 981332\nNode Kind: directory\nSchedule: normal\nLast Changed Author: markt\nLast Changed Rev: 981318\nLast Changed Date: 2010-08-01 14:04:25 -0700 (Sun, 01 Aug 2010)\n\n# ant\n...\nBUILD SUCCESSFUL\n\n# start tomcat from $TRUNK/output/build/bin/startup\n\nI am using the same test as in Bug 49635. Also, how does one write a Tomcat 7 unit test to make bug reporting easier for the Tomcat developers?",
      "> Okay, I'm still having the problem with revision 981332:\n\nNevermind, it works, sorry.",
      "Hi, although Kevin backed down, I am still having this problem with the current 7.0.2-beta and with a self-compiled trunk. The identical servlet works perfectly with Glassfish v3.0.1.\n\njava.lang.StackOverflowError\n\torg.apache.catalina.connector.RequestFacade.startAsync(RequestFacade.java:1031)\n\torg.apache.catalina.connector.RequestFacade.startAsync(RequestFacade.java:1031)\n\torg.apache.catalina.connector.RequestFacade.startAsync(RequestFacade.java:1031)\n\torg.apache.catalina.connector.RequestFacade.startAsync(RequestFacade.java:1031)\n...\n\nS:\\codebase\\TOMCAT_trunk>svn info\nPath: .\nURL: http://svn.apache.org/repos/asf/tomcat/trunk\nRepository Root: http://svn.apache.org/repos/asf\nRepository UUID: 13f79535-47bb-0310-9956-ffa450edef68\nRevision: 998790\nNode Kind: directory\nSchedule: normal\nLast Changed Author: markt\nLast Changed Rev: 998554\nLast Changed Date: 2010-09-18 23:41:44 +0200 (Sa, 18 Sep 2010)",
      "(In reply to comment #12)\n> Hi, although Kevin backed down, I am still having this problem with the current\n\nJanko, I'm sorry but I'm afraid I can't remember how I resolved the problem, but it ended up being user error. I would suggest checking out a brand new trunk, rebuilding, and starting with the simplest async servlet and seeing if that works."
    ],
    "creation_ts": "2010-07-07T09:22:22Z",
    "fixes": [
      49567
    ]
  },
  {
    "id": 63778,
    "summary": "Jre7Compat cannot find getPseudoColumns with zero parameters",
    "description": "The class org.apache.tomcat.util.compat.Jre7Compat fails to find the method java.sql.DatabaseMetaData.getPseudoColumns() with zero parameters in it's static initializer which leads to the remaining methods like ResultSet.getObject() not being looked up and referenced at all. This causes NullPointerExceptions which are especially hard to diagnose because exceptions in all the JreCompat classes are just thrown into the nether.\nThe method Jre7Compat is trying to find expects 4 String parameters.\nThe actual call to the looked up method in org.apache.tomcat.util.compat.Jre7Compat.getPseudoColumns(...) is done correctly with all 4 String parameters provided.\n\nWhat I feel should be done about this:\n\n1. Replace\nm9 = DatabaseMetaData.class.getMethod(\"getPseudoColumns\");\nwith\nm9 = DatabaseMetaData.class.getMethod(\"getPseudoColumns\",String.class,String.class,String.class,String.class);\n\n2. Never simply ignore and void exceptions! I understand that there should not be tons of error messages every time you start up tomcat with an older version of Java but there has to be another way.\n\nWe noticed this problem with 7.0.94 but the code looks identical in the current git branch.",
    "comments": [
      "Catching the exception without handling them is not a good habit. It could hide some problem such as this bug.\n\nI submit a PR to solve the bug. https://github.com/apache/tomcat/pull/209\nHope it could help.",
      "Thanks for the report.\n\nThe original issue has been fixed in 7.0.x and I have added some logging to the JreCompat classes that should detect if further bugs like this creep in in the future.\n\nThe fix will be in 7.0.97 onwards"
    ],
    "creation_ts": "2019-09-27T19:09:10Z",
    "fixes": [
      63778
    ]
  },
  {
    "id": 64794,
    "summary": "Missing PropertyPermission for \"org.graalvm.nativeimage.imagecode\"",
    "description": "org.apache.jasper.runtime.JspRuntimeLibrary class fails to initialize when Tomcat is running under a Security Manager.\n\nSteps to reproduce:\n1. Set JAVA_HOME to a JDK. I use AdoptOpenJDK 11.0.8, on Windows.\n2. Start \"catalina.bat start -security\"\n3. Access http://localhost:8080/\nThe page fails fatally when it tries to render an EL expression in a JSP page.\n\n[[[\nHTTP Status 500 \u2013 Internal Server Error\n...\n\norg.apache.jasper.JasperException: An exception occurred processing [index.jsp] at line [38]\n\n35:     <body>\n36:         <div id=\"wrapper\">\n37:             <div id=\"navigation\" class=\"curved container\">\n38:                 <span id=\"nav-home\"><a href=\"${tomcatUrl}\">Home</a></span>\n39:                 <span id=\"nav-hosts\"><a href=\"${tomcatDocUrl}\">Documentation</a></span>\n40:                 <span id=\"nav-config\"><a href=\"${tomcatDocUrl}config/\">Configuration</a></span>\n41:                 <span id=\"nav-examples\"><a href=\"${tomcatExamplesUrl}\">Examples</a></span>\n\n\nStacktrace:\n...\n\nRoot Cause:\n\njava.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"org.graalvm.nativeimage.imagecode\" \"read\")\n  java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)\n  java.base/java.security.AccessController.checkPermission(AccessController.java:897)\n  java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:322)\n  java.base/java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1066)\n  java.base/java.lang.System.getProperty(System.java:816)\n  org.apache.jasper.runtime.JspRuntimeLibrary.<clinit>(JspRuntimeLibrary.java:72)\n  org.apache.jasper.el.JasperELResolver.<init>(JasperELResolver.java:70)\n  ...\n]]]\n\nLooking at the code of JspRuntimeLibrary class, reading that property was added by commit 73288c6b3c979777054e4fc5baf0163c84bb2ac9 [1] on 2020-07-24.\n\n[1] https://github.com/apache/tomcat/commit/73288c6b3c979777054e4fc5baf0163c84bb2ac9\n\nNotes:\n\n1. The issue is reproducible for Tomcat 9.0.39 (release candidate) and 9.0.38.\n\nI have not tested 9.0.37 yet, but judging by the date of the commit, I think that version is not affected.\n\n\n2. A workaround is to add a permission to the conf/catalina.policy file. A line to be added to the section of generic permissions (\"grant {\"):\n\n[[[\n    permission java.util.PropertyPermission \"org.graalvm.nativeimage.imagecode\", \"read\";\n]]]\n\n\n3. Looking at the commit [1], the change was added to 3 files.\n\n4. Maybe document this property at\nhttps://tomcat.apache.org/tomcat-9.0-doc/config/systemprops.html",
    "comments": [
      "That's a bit odd since JspRuntimeLibrary is in Jasper's SecurityClassLoad.\n\nAbout 4, the system property is meant to be set automatically by Graal (eventually), and it is used in the Graal/AOT doc page. It has no other use.",
      "This will be in 10.0.0-M10 and 9.0.40."
    ],
    "creation_ts": "2020-10-07T16:40:39Z",
    "fixes": [
      64794
    ]
  },
  {
    "id": 66618,
    "summary": "add longDate attribute to XML in directory listing",
    "description": "In my application I need to list directory unsing descending date. Sorting can easily be done using xslt, but date attribute in XML is a string which is a fll representation of Java Date that starts from Day of the week. If XSLT sorting is applied the files sort order does not make any sense. \n\nTo solve this problem I suggest to introduce a new attribute - longDate - which will be a long value of the Date, i.e. a number whichi will be perfect for sorting using XSLT.",
    "comments": [
      "this JIRA is created to raise a merge request with a patch",
      "https://github.com/apache/tomcat/pull/622 pull request is created",
      "Thanks for the PR.\n\nFixed in:\n- 11.0.x for 11.0.0-M7 onwards\n- 10.1.x for 10.1.10 onwards\n-  9.0.x for  9.0.76 onwards\n-  8.5.x for  8.5.90 onwards"
    ],
    "creation_ts": "2023-05-28T08:04:08Z",
    "fixes": [
      66618
    ]
  },
  {
    "id": 55807,
    "summary": "JSP's always marked as outdated with Jar Scanner Component configured with \u201cscanAllDirectories\u201d and referenced Taglib in WEB-INF/classes/META-INF",
    "description": "consider the following (simplified) eclipse project configuration.\n\nweb_base_jar (shared taglib etc.)\nweb_war (uses web_base_jar)\n\nWhen developing our web project locally we use an exploded war layout. The compile output\nof web_base_jar is directly copied (not as a jar!) to the war\u2019s\nweb_war/WEB-INF/classes directory by our ide\u2019s (eclipse with sysdeo plugin and intellij).\nOur shared taglib ends up here: web_war/WEB-INF/classes/META-INF/myTaglib.tld. The taglib\nis successfully picked up by the Jar Scanner configured with \u201cscanAllDirectories\u201d.\n\nThis leads to the following generated jsp code when myTaglib is used:\n\n  static {\n    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);\n    _jspx_dependants.put(\"file:/somepath/pc_web_war_exploded/WEB-INF/classes/META-INF/ myTaglib.tld\n\", Long.valueOf(-1L));\n  }\n\nThe relevant code for this snippet is in org.apache.jasper.compiler.TagLibraryInfoImpl.<init>(TagLibraryInfoImpl.java:173).\nBecause the Taglib is a file uri (file:/C:/somepath/pc_web_war_exploded/WEB-INF/classes/META-INF/myTaglib.tld)\nit is not found by ApplicationContext#getResource and the method\norg.apache.jasper.JspCompilationContext.getLastModified(JspCompilationContext.java:437) returns\n-1 in this case.\n\nWhen the compiler checks if the current jsp is outdated it checks also all includes/dependants.\nBecause myTaglib is in the dependants  list of our jsps it is also checked. The check tests\nthe lastModified timestamp of the file against -1 and returns always true. See here org.apache.jasper.compiler.Compiler.isOutDated(Compiler.java:519)\nThis means that our jsps are recompiled on every request. We have some workarounds for this but it would be nice if this setup would work out of the box",
    "comments": [
      "Thanks for the report. This has been fixed in trunk and 8.0.0-RC6 onwards and in 7.0.x for 7.0.48 onwards."
    ],
    "creation_ts": "2013-11-21T13:14:21Z",
    "fixes": [
      55807
    ]
  },
  {
    "id": 62830,
    "summary": "Add static methods to load native libraries by the Common ClassLoader",
    "description": "By design, a native library may not be loaded by more than one ClassLoader.  From [1]:\n\n> In the JDK, each class loader manages its own set of native libraries. \n> The same JNI native library cannot be loaded into more than one class loader. \n> Doing so causes UnsatisfiedLinkError to be thrown. For example, \n> System.loadLibrary throws an UnsatisfiedLinkError when used to load a native\n> library into two class loaders.\n\nDue to that restriction, Native Libraries that are loaded by Webapp ClassLoaders may only be loaded in one Webapp.  Subsequent Webapps that attempt to load the same native library fail with an UnsatisfiedLinkError.\n\nA working solution [2] proposes to create a small jar with a method that will load the native libraries, and place it in ${CATALINA_BASE}/lib so that it will be loaded by the Common ClassLoader.\n\nA simpler solution would be to add the static methods `load(filename)` and `loadLibrary(libname)` that will simply call the respective System methods.  That will eliminate the need to create custom jar files and place them in the lib directory.\n\nPatch coming shortly.\n\n[1] https://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/invocation.html#library_version\n\n[2] https://stackoverflow.com/questions/36936948/java-lang-unsatisfiedlinkerror-native-library-xxx-so-already-loaded-in-another",
    "comments": [
      "Commit r1844065",
      "I think it would be worth updating the Javadoc for the new methods to make it clear that System.load[Library]() associates the loaded library not with the current thread context class loader but with the class loader of the class that calls System.load[Library](). Typically, this would be the Common class loader but that may vary depending on configuration and usage.",
      "Yes, if it was using the thread context classloader, like is done nearly 100% of the time elsewhere, it would be useless. Weird stuff there.\n\nPersonally, I think native libraries can use extra care and if you're going to write a bit of Tomcat code, I would recommend writing a bit more and using a Catalina listener to load them (like for tomcat-native, basically).",
      "(In reply to Mark Thomas from comment #2)\n> I think it would be worth updating the Javadoc for the new methods to make\n> it clear that System.load[Library]() associates the loaded library not with\n> the current thread context class loader but with the class loader of the\n> class that calls System.load[Library](). Typically, this would be the Common\n> class loader but that may vary depending on configuration and usage.\n\nPlease check r1844162 for accuracy.  I hope that I understood you correctly.  Text below for convenience:\n\nSystem.loadLibrary() associates the\nloaded library with the class loader of the class that called\nthe System method. A native library may not be loaded by more\nthan one class loader, so calling the System method from a class that\nwas loaded by a Webapp class loader will make it impossible for\nother Webapps to load it.\n\nUsing this method will load the native library via a shared class\nloader (typically the Common class loader, but may vary in some\nconfigurations), so that it can be loaded by multiple Webapps.",
      "(In reply to Remy Maucherat from comment #3)\n> Yes, if it was using the thread context classloader, like is done nearly\n> 100% of the time elsewhere, it would be useless. Weird stuff there.\n> \n> Personally, I think native libraries can use extra care and if you're going\n> to write a bit of Tomcat code, I would recommend writing a bit more and\n> using a Catalina listener to load them (like for tomcat-native, basically).\n\nI like the idea of using a Listener.  I will look into it.",
      "(In reply to Remy Maucherat from comment #3)\n> Personally, I think native libraries can use extra care and if you're going\n> to write a bit of Tomcat code, I would recommend writing a bit more and\n> using a Catalina listener to load them (like for tomcat-native, basically).\n\nSince a Listener can not accept any arguments, the only way I can think of is to use a System property that will specify which native libraries should be loaded, and I know that we usually don't like to rely on those for configurations.\n\nAre there other ideas?",
      "Listeners can use arguments. Look at the existing Tomcat listeners for examples.",
      "(In reply to Mark Thomas from comment #7)\n> Listeners can use arguments. Look at the existing Tomcat listeners for\n> examples.\n\nOf course they can.  Don't know what I was thinking. _facepalm_",
      "Commit r1844531 adds JniLifecycleListener to trunk",
      "Added JniLifecycleListener to tc7.0.x and tc8.5.x as well",
      "JniLifecycleListener, Library.load(), and Library.loadLibrary() available in Tomcat 9.0.13, 8.5.35, and 7.0.92",
      "Sorry... I must be missing something, here.\n\nSystem.loadLibrary isn't ClassLoader-specific... once the library has been loaded, it can't be loaded again at all.\n\nThe code here is all fine, and using a Listener makes a lot of sense. But the documentation suggests that somehow loading a shared lib in a different ClassLoader changes something when it doesn't. Instead, you are asking Tomcat to load it *once* (at the server level) and then not again.\n\nIf you try to use this <Listener> at the <Context> level, it will fail when re-deploying the <Context>, just like if the application had used",
      "(In reply to Christopher Schultz from comment #12)\n> Sorry... I must be missing something, here.\n> \n> System.loadLibrary isn't ClassLoader-specific... once the library has been\n> loaded, it can't be loaded again at all.\n> \n> The code here is all fine, and using a Listener makes a lot of sense. But\n> the documentation suggests that somehow loading a shared lib in a different\n> ClassLoader changes something when it doesn't. Instead, you are asking\n> Tomcat to load it *once* (at the server level) and then not again.\n> \n> If you try to use this <Listener> at the <Context> level, it will fail when\n> re-deploying the <Context>, just like if the application had used\n\nIt's counter-intuitive, I know. Here's what I tested right now, tell me know if covers the scenario you described above:\n\nIn conf/server.xml, I added the following snippet to the Server, Service, and in conf/Catalina/localhost/ROOT.xml, conf/Catalina/localhost/context_1.xml, conf/Catalina/localhost/context_2.xml to the Context element:  \n\n> <Listener className=\"org.apache.catalina.core.JniLifecycleListener\"  libraryName=\"opencv_java343\" />\n\nBelow are the relevant log entries:\n\n> 22-Oct-2018 18:45:04.733 INFO [main] org.apache.catalina.startup.Catalina.load Initialization processed in 412 ms\n> 22-Oct-2018 18:45:04.739 INFO [main] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> 22-Oct-2018 18:45:04.759 INFO [main] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> 22-Oct-2018 18:45:04.759 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]\n> 22-Oct-2018 18:45:04.760 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/9.0.13-dev\n> 22-Oct-2018 18:45:04.766 INFO [main] org.apache.catalina.startup.HostConfig.deployDescriptor Deploying deployment descriptor [/home/user/Workspace/test/JniListener/conf/Catalina/localhost/ROOT.xml]\n> 22-Oct-2018 18:45:04.790 INFO [main] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> <snip/>\n> 22-Oct-2018 18:45:06.277 INFO [main] org.apache.catalina.startup.HostConfig.deployDescriptor Deployment of deployment descriptor [/home/user/Workspace/test/JniListener/conf/Catalina/localhost/ROOT.xml] has finished in [1,510] ms\n> 22-Oct-2018 18:45:06.277 INFO [main] org.apache.catalina.startup.HostConfig.deployDescriptor Deploying deployment descriptor [/home/user/Workspace/test/JniListener/conf/Catalina/localhost/context_2.xml]\n> 22-Oct-2018 18:45:06.279 INFO [main] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> 22-Oct-2018 18:45:06.379 INFO [main] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.\n> 22-Oct-2018 18:45:06.380 INFO [main] org.apache.catalina.startup.HostConfig.deployDescriptor Deployment of deployment descriptor [/home/user/Workspace/test/JniListener/conf/Catalina/localhost/context_2.xml] has finished in [103] ms\n> 22-Oct-2018 18:45:06.381 INFO [main] org.apache.catalina.startup.HostConfig.deployDescriptor Deploying deployment descriptor [/home/user/Workspace/test/JniListener/conf/Catalina/localhost/context_1.xml]\n> 22-Oct-2018 18:45:06.382 INFO [main] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> 22-Oct-2018 18:45:06.473 INFO [main] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.\n> 22-Oct-2018 18:45:06.474 INFO [main] org.apache.catalina.startup.HostConfig.deployDescriptor Deployment of deployment descriptor [/home/user/Workspace/test/JniListener/conf/Catalina/localhost/context_1.xml] has finished in [93] ms\n\nThen I modified ROOT.xml, context_1.xml, and context_2.xml, one at a time:\n\n> 22-Oct-2018 18:45:41.573 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.startup.HostConfig.deployDescriptor Deploying deployment descriptor [/home/user/Workspace/test/JniListener/conf/Catalina/localhost/ROOT.xml]\n> 22-Oct-2018 18:45:41.575 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> 22-Oct-2018 18:45:41.675 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.\n> 22-Oct-2018 18:45:41.677 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.startup.HostConfig.deployDescriptor Deployment of deployment descriptor [/home/user/Workspace/test/JniListener/conf/Catalina/localhost/ROOT.xml] has finished in [104] ms\n> 22-Oct-2018 18:45:51.679 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.startup.HostConfig.undeploy Undeploying context [/context_1]\n> 22-Oct-2018 18:45:51.687 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.startup.HostConfig.deployDescriptor Deploying deployment descriptor [/home/user/Workspace/test/JniListener/conf/Catalina/localhost/context_1.xml]\n> 22-Oct-2018 18:45:51.692 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> 22-Oct-2018 18:45:51.787 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.\n> 22-Oct-2018 18:45:51.788 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.startup.HostConfig.deployDescriptor Deployment of deployment descriptor [/home/user/Workspace/test/JniListener/conf/Catalina/localhost/context_1.xml] has finished in [101] ms\n> 22-Oct-2018 18:46:01.791 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.startup.HostConfig.undeploy Undeploying context [/context_2]\n> 22-Oct-2018 18:46:01.797 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.startup.HostConfig.deployDescriptor Deploying deployment descriptor [/home/user/Workspace/test/JniListener/conf/Catalina/localhost/context_2.xml]\n> 22-Oct-2018 18:46:01.803 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> 22-Oct-2018 18:46:01.896 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.\n> 22-Oct-2018 18:46:01.897 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.startup.HostConfig.deployDescriptor Deployment of deployment descriptor [/home/user/Workspace/test/JniListener/conf/Catalina/localhost/context_2.xml] has finished in [99] ms",
      "I think that this listener must be mentioned on \"security-howto.xml\".\n\nhttp://tomcat.apache.org/tomcat-9.0-doc/security-howto.html#Listeners\n\nIt can be configured in any container (e.g. in context.xml) and it will load an arbitrary DLL, and I think that this will be done with only Tomcat code in the call stack. That means that it will run with Tomcat's \"java.security.AllPermission\" permissions.\n\nThis is not a problem, as server.xml/context.xml are edited by a trusted administrator. But whoever does a security audit of those files should be aware of this effect. Thus I think this listener should be mentioned.",
      "(In reply to Konstantin Kolinko from comment #14)\n> I think that this listener must be mentioned on \"security-howto.xml\".\n> \n> http://tomcat.apache.org/tomcat-9.0-doc/security-howto.html#Listeners\n> \n> It can be configured in any container (e.g. in context.xml) and it will load\n> an arbitrary DLL, and I think that this will be done with only Tomcat code\n> in the call stack. That means that it will run with Tomcat's\n> \"java.security.AllPermission\" permissions.\n\nAdded the following statement in r1844615:\n\nThe JNI Library Loading Listener may be used to load native code. It should \nonly be used to load trusted libraries.",
      "(In reply to Igal Sapir from comment #13)\n> (In reply to Christopher Schultz from comment #12)\n> > Sorry... I must be missing something, here.\n> > \n> > System.loadLibrary isn't ClassLoader-specific... once the library has been\n> > loaded, it can't be loaded again at all.\n> > \n> > The code here is all fine, and using a Listener makes a lot of sense. But\n> > the documentation suggests that somehow loading a shared lib in a different\n> > ClassLoader changes something when it doesn't. Instead, you are asking\n> > Tomcat to load it *once* (at the server level) and then not again.\n> > \n> > If you try to use this <Listener> at the <Context> level, it will fail when\n> > re-deploying the <Context>, just like if the application had used\n> \n> It's counter-intuitive, I know. Here's what I tested right now, tell me know\n> if covers the scenario you described above:\n> \n> In conf/server.xml, I added the following snippet to the Server, Service,\n> and in conf/Catalina/localhost/ROOT.xml,\n> conf/Catalina/localhost/context_1.xml, conf/Catalina/localhost/context_2.xml\n> to the Context element:  \n> \n> > <Listener className=\"org.apache.catalina.core.JniLifecycleListener\"  libraryName=\"opencv_java343\" />\n> \n> Below are the relevant log entries:\n> \n> > 22-Oct-2018 18:45:04.739 INFO [main] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> > 22-Oct-2018 18:45:04.759 INFO [main] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n\nOkay.\n\n\n> Then I modified ROOT.xml, context_1.xml, and context_2.xml, one at a time:\n> \n> > 22-Oct-2018 18:45:51.692 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> > [...]\n> > 22-Oct-2018 18:46:01.803 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n\nInteresting. I didn't realize that the JVM binds the native library to a specific ClassLoader and, does one of two things if the library has alreayd been loaded:\n\n1. Ignores the call (if in the same ClassLoader; says so in javadoc for Runtime.loadLibrary)\n2. Throws an UnsatisfiedLinkError complaining that the library is already loaded from a different ClassLoader.\n\nThe Java spec[1] has something odd to say about native lirbaries and ClassLoaders, though it's still a little unclear:\n\n\"\nThe programmer may use a single library to store all the native methods needed by any number of classes, as long as these classes are to be loaded with the same class loader. The VM internally maintains a list of loaded native libraries for each class loader.\n\"\n\nI guess \"same class loader\" can also mean \"or a child class loader\" since it's evidently working for you.\n\nBut the point is that you need to consistently (re)load the native library into the same classloader if you don't want to throw any errors.\n\n[1] https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#jni_interface_functions_and_pointers",
      "(In reply to Christopher Schultz from comment #16)\n> (In reply to Igal Sapir from comment #13)\n> > (In reply to Christopher Schultz from comment #12)\n> > <snip/>\n> > \n> > Below are the relevant log entries:\n> > \n> > > 22-Oct-2018 18:45:04.739 INFO [main] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> > > 22-Oct-2018 18:45:04.759 INFO [main] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> \n> Okay.\n> \n> \n> > Then I modified ROOT.xml, context_1.xml, and context_2.xml, one at a time:\n> > \n> > > 22-Oct-2018 18:45:51.692 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> > > [...]\n> > > 22-Oct-2018 18:46:01.803 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.core.JniLifecycleListener.lifecycleEvent Loaded native library opencv_java343\n> \n> Interesting. I didn't realize that the JVM binds the native library to a\n> specific ClassLoader and, does one of two things if the library has alreayd\n> been loaded:\n> \n> 1. Ignores the call (if in the same ClassLoader; says so in javadoc for\n> Runtime.loadLibrary)\n> 2. Throws an UnsatisfiedLinkError complaining that the library is already\n> loaded from a different ClassLoader.\n> \n> The Java spec[1] has something odd to say about native lirbaries and\n> ClassLoaders, though it's still a little unclear:\n\nOh, that is a much newer version of the link that I posted in the OP.  I'll give it a read.\n\n> \"The programmer may use a single library to store all the native methods\n> needed by any number of classes, as long as these classes are to be loaded\n> with the same class loader. The VM internally maintains a list of loaded\n> native libraries for each class loader.\"\n> \n> I guess \"same class loader\" can also mean \"or a child class loader\" since\n> it's evidently working for you.\n\nI believe that this is due to the delegation model [2] of class loaders (or else that would have really been useless as Remy pointed out above):\n\n\"\nWhen requested to find a class or resource, a ClassLoader instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself.\n\"\n\nThere is some variation in the Servlet spec for the order IIRC, but there is still delegation. \n\n> But the point is that you need to consistently (re)load the native library\n> into the same classloader if you don't want to throw any errors.\n\nIt's not actually re-loading.  As you cited above, subsequent calls are ignored, but yes, they must be done in the same class loader or its lineage.  \n\nThat's the reason for adding the static methods to Library and adding the Listener.  Because these classes are in $CATALINA_HOME/lib, the native library to be loaded by a shared class loader which is in the lineage.\n\n> [1]\n> https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.\n> html#jni_interface_functions_and_pointers\n\n[2] https://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html"
    ],
    "creation_ts": "2018-10-17T05:35:55Z",
    "fixes": [
      62830
    ]
  },
  {
    "id": 50459,
    "summary": "StandardContext.bindThread() and unbindThread() are not symmetrical and not limited to current thread",
    "description": "As a side effect of my commit, I think I found a bug in StandardContext.bindThread() and unbindThread() methods in both tomcat 6 and 7 :\n\n- the methods should be symmetrical : unbindThread should restore the Thread CCL after calling DirContextURLStreamHandler.unbind() and ContextBindings.unbindThread()\n- StandardContext.bindThread() should call DirContextURLStreamHandler.bindThread() instead of DirContextURLStreamHandler.bind()\n- StandardContext.unbindThread() should call DirContextURLStreamHandler.unbindThread() instead of DirContextURLStreamHandler.unbind()",
    "comments": [
      "oops, forgot the link to my initial commit that revealed the bug : http://svn.apache.org/viewvc?rev=1044145&view=rev",
      "fix committed on trunk : http://svn.apache.org/viewvc?rev=1044746&view=rev",
      "Moving to 6 now it is fixed in 7.",
      "patch proposed for tomcat 6",
      "Looking at r1044746 and the patch proposed for TC6,\nI think that that replacement of\n s/DirContextURLStreamHandler.bind(/DirContextURLStreamHandler.bindThread(/\n s/DirContextURLStreamHandler.unbind(/DirContextURLStreamHandler.unbindThread(/\nis wrong.\n\nSee DirContextURLStreamHandler#get().\n\nThe difference is when a web application starts a child thread. That thread inherits TCCL from its parent and thus DirContextURLStreamHandler will recognize it when using CL-binding, but will not if thread-binding is used.",
      "Actually the TCCL is properly bound in DirContextURLStreamHandler#clBindings when the application is started : DirContextURLStreamHandler.bind(ClassLoader, DirContext) is called from WebappLoader.startInternal() which itself is called during StandardContext.startInternal() (StandardContext.java rev 1044747 line 4863)\n\nBefore my fix, it was \"pure luck\" that the TCCL was still bound after StandardContext.startInternal() : it only worked because the TCCL was reverted _after_ calling DirContextURLStreamHandler.unbind() so that the latter tried to remove a classloader that had not been bound previously, thus leaving the webapp classloader properly bound.",
      "(In reply to comment #6)\nOK, I understand it now. WebappLoader indeed manages that binding.",
      "Fixed in 6.0.x and will be included in 6.0.30 onwards."
    ],
    "creation_ts": "2010-12-11T19:06:16Z",
    "fixes": [
      50459
    ]
  },
  {
    "id": 69320,
    "summary": "ERR_HTTP2_PROTOCOL_ERROR",
    "description": "10.1.29 has a regression causing ERR_HTTP2_PROTOCOL_ERROR\n\nnothing in the logs",
    "comments": [
      "Without some useful supporting information, this will be closed as WORKSFORME.",
      "I sent an email to users@infra.apache.org because commenting on this bug is producing a bug (Too many connections at /usr/lib/x86_64-linux-gnu/perl5/5.34/DBI.pm line 691.)",
      "Please let me know what \"supporting information\" I can share. This regression is not happening in any other 10.x build.\n\nThe last log line is just\n\n12-Sep-2024 08:46:35.076 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in [12546] milliseconds\n\nHttp11NioProtocol and Http2Protocol are in use.",
      "I'll note that bugs that get reported during the release vote nearly always result in the vote being cancelled, the bug being fixed and a new release vote. To put it another way, test the release candidate during the vote and bugs get fixed a lot sooner than if you only test once the release is announced. Typically days rather than ~1 month.\n\nThe steps to recreate the issue are just make an h2 request for the Tomcat home page.",
      "(In reply to Mark Thomas from comment #4)\n> I'll note that bugs that get reported during the release vote nearly always\n> result in the vote being cancelled, the bug being fixed and a new release\n> vote. To put it another way, test the release candidate during the vote and\n> bugs get fixed a lot sooner than if you only test once the release is\n> announced.\n\nWhere can the RCs be found?\n\n> Typically days rather than ~1 month.\n\nIn my experience, from the 1 person projects to the Linux kernel, bugs in a supported branch get fixed ASAP. Why have no good version for a whole month? (assuming the last release has a blocking bug and the 2nd last release has publicly known security issues)\n \n> The steps to recreate the issue are just make an h2 request for the Tomcat\n> home page.\n\ncurl example?",
      "Release votes are announced on the dev list.\n\nIt appears that this bug is harder to reproduce that it first appeared. I've seen in - or something that might be it - with 10.1.x and 11.0.x but not 9.0.x and I cannot reproduce it reliably. Or at all at the moment.\n\nIf you have steps that reliably recreate the issue please share them here.",
      "Created attachment 39865\nCatalina log file",
      "I am experiencing an error I believe is related on 9.0.94. After reverting to 9.0.93 the error went away. I am not sure how to reproduce the error, but was seeing errors written to the catalina log file. Attached is a stack trace of one of what I believe to be related.",
      "The errors I am seeing on the rare occasions I am able to reproduce what I think is this new error suggest an issue with header processing.\n\nThe stack trace in the attachment looks like the result of the client resetting the stream.\n\nIt isn't clear if the two are related or not. The client reset may follow the server side error.",
      "(In reply to Mark Thomas from comment #6)\n> Release votes are announced on the dev list.\n\nI'm not seeing anything relevant:\n\nhttps://lists.apache.org/list?dev@tomcat.apache.org:release%20candidate:\n\nPlease be more specific.\n\n\n> It appears that this bug is harder to reproduce that it first appeared. I've\n> seen in - or something that might be it - with 10.1.x and 11.0.x but not\n> 9.0.x and I cannot reproduce it reliably. Or at all at the moment.\n\n\nI can reproduce it reliably, but only on non-trivial tests.\nonce it's broken further trivial tests do reproduce the issue.\nI can break it with Firefox, Chromium, and curl.\n \n> If you have steps that reliably recreate the issue please share them here.\n\ncurl -v --http2 --compressed --parallel $URLS3 > o.txt 2> e.txt ; echo $?",
      "Created attachment 39866\ncurl log",
      "I can trigger this issue just by reloading a page with ~40 assets.\nI can not trigger it on a page with 5 assets.\n\nOnce the issue is triggered it manifests on pages with 5 assets (2 to 4 of 5 will fail).\n\nWeb browsers only do about 17 concurrent requests which may be related.\n\nThe issue is more noticeable in Chromium due to the nice red errors in the net tab of dev tools, Firefox only shows 0B which does not stand out.\n\nIt does seem related to terminated connections and maybe concurrency related.",
      "I'm seeing something similar. Running the h2spec test suite seems to trigger the bad state reliably. Next step is to use git bisect to figure out where the problem was introduced. Once we know which commit introduced the issue, we will hopefully have a better chance of identifying the root cause.",
      "(In reply to elatllat from comment #10)\n> (In reply to Mark Thomas from comment #6)\n> > Release votes are announced on the dev list.\n> \n> I'm not seeing anything relevant:\n> \n> https://lists.apache.org/list?dev@tomcat.apache.org:release%20candidate:\n> \n> Please be more specific.\n\nSearch for \"[VOTE]\"\n\nhttps://lists.apache.org/list?dev@tomcat.apache.org:lte=1y:vote",
      "This is the commit that introduced the issue:\nhttps://github.com/apache/tomcat/commit/3bea357476a103c2fcbc83c00f3a53cc11ea846a\n\nI'm currently working on figuring out what is going wrong so I design a fix.",
      "You can work around the issue by setting:\n\ndiscardRequestsAndResponses=\"true\"\n\non the UpgradeProtocol element for HTTP/2.",
      "I understand what is going wrong and I have a potential fix that addresses the issue. The unit tests pass with the fix applied. Before I commit the fix I want to make sure that there are any other, related failure modes.\n\nGiven how badly this breaks HTTP/2 (even through it can be worked around), we expect to provide new releases early next week.",
      "I believe I have a fix for this. It works on my dev machine (Linux). I'm just running the tests on the usual set of platforms before tagging the release.",
      "(In reply to Mark Thomas from comment #17)\n> ... we expect to provide new releases early next week.\n\nThanks, will h2spec be added to automated tests to catch related future regressions?\n\n\n\nAs a minor aside, it would be nice if lists.apache.org could support partial matches (like \"10.1.\"), and if it supported negation in the subject (like when \"RELEASE\" is in the body). I worked around those limitations but they may cause irritation for other use cases.",
      "more aside:\n\nWhat will dissuade me from testing RCs is when 4/5 links in the RC email are 404.\n\nPlease fix that.\n\nhttps://lists.apache.org/list?dev@tomcat.apache.org:lte=1M:[VOTE]%20Release%20Apache%20Tomcat%2010.1.29",
      "No, h2psec won't be added to the tests. It isn't easily incorporated into the test suite and it is out of date (it tests h2 priorities that Tomcat no longer supports). What is more likely is that we'll add code to Tomcat to detect the error condition that triggered the issue and throw an error if it occurs.\n\nSuggestions for improvements to lists.a.o should be directed to the upstream project: https://ponymail.apache.org/\n\nThe links in old VOTE mails are 404s because the VOTE has completed. They were valid during the VOTE.\n\nFixed in:\n- 11.0.x for 11.0.0-M26 onwards\n- 10.1.x for 10.1.30 onwards\n-  9.0.x for  9.0.95 onwards",
      "(In reply to elatllat from comment #20)\n> more aside:\n> \n> What will dissuade me from testing RCs is when 4/5 links in the RC email are\n> 404.\n> \n> Please fix that.\n> \n> https://lists.apache.org/list?dev@tomcat.apache.org:lte=1M:\n> [VOTE]%20Release%20Apache%20Tomcat%2010.1.29\n\nThis doesn't 404 for me, it works fine. Maybe your email reader and/or browser aren't handling the URL properly? For more complaints/suggestions/praise regarding lists.apache.org or anything else off-topic for this bug report, please post to the users mailing list.",
      "(In reply to elatllat from comment #20)\n> What will dissuade me from testing RCs is when 4/5 links in the RC email are\n> 404.\n> \n> Please fix that.\n\nThose links are valid during voting. After the vote, the -dev release candidate is MOVED to the release area, and the Maven staging repository is released and removed. The git stuff remains. So, after the vote, 3/5 of the links in the RC email will continue to work, while two temporary links will have moved.",
      "(In reply to Mark Thomas from comment #21)\n    > No, h2psec won't be added to the tests....\n\n    a very simple bash script can be used to trigger and test:\n\n    URL=\"$1\"\n    LOAD=9\n    for N in $(seq 1 $LOAD) ; do\n    \t(curl -s \"$URL#$N\" \\\n    \t\t> /dev/null \\\n    \t\t|| echo \"Fail at $N\" >&2 ) &\n    done\n    wait\n\n    The LOAD value required to trigger related issues is likely larger as I'm using the smallest/slowest instance available for testing.\n\n\n\n\n\n\n    Aside continued:\n\n    > ... The links in old VOTE mails are 404s because the VOTE has completed. They\n    > were valid during the VOTE.\n\n    With free services like GitHub there is literally zero cost to keeping references in git, or gz patches, and the cost of removing them is that automated RC testing can only be worked on during a limited time frame. Additionally RCs can't be compared to releases. Please let me know if this decision ever gets revised, if so I'll look into RC testing again."
    ],
    "creation_ts": "2024-09-12T12:49:00Z",
    "fixes": [
      69320
    ]
  },
  {
    "id": 56223,
    "summary": "ServletContext#setInitParameter(..) does not throw IllegalStateException after it's been initialized",
    "description": "Created attachment 31369\n.war with single Servlet\n\nThe Java EE javadoc for ServletContext#setInitParameter(String, String), here: http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html#setInitParameter(java.lang.String, java.lang.String), states that the method should throw an IllegalStateException if the ServletContext has already been initialized.\n\nOnce a Servlet is ready to handle requests, the ServletContext must have been initialized. However, no exception is thrown if you try to invoke the method in an HttpServlet's doGet(..).\n\nSteps to reproduce:\n\n1) Add an HttpServlet that invokes the method in its doGet(..) method\n\n@WebServlet(urlPatterns = \"/init\")\npublic class InitParameterServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tServletContext context = getServletContext();\n\t\tcontext.setInitParameter(\"init-param\", \"value\");\n\n\t}\n}\n\n2) Send an HTTP GET request to (the appropriate) 'http://localhost:8080/context/init`.\n\nActual results: No exception is thrown. Server sends back 200 OK.\n\nExpected results: An exception should have been thrown. Server should have sent back 500 status code.\n\nTomcat 8.0.3 (and 7.0.42) and Windows 7\n\nAdditional information: You can also try calling, for example, the addFilter(..) method which will fail stating that the ServletContext is already initialized.",
    "comments": [
      "Thanks for the report.\n\nThis has been fixed in 7.0.x for 7.0.53 onwards and in 8.0.x for 8.0.4 onwards."
    ],
    "creation_ts": "2014-03-06T02:15:48Z",
    "fixes": [
      56223
    ]
  },
  {
    "id": 63909,
    "summary": "ExpiresFilter not account for 304 when content-type is null",
    "description": "Firstly, I apologize as I am quite new to contributing so I hope I am pursuing the correct path.  I have struggled mightily recently trying to track down why our caching configuration was not really working with tomcat 8.5.x and we finally found the nugget in the ExpiresFilter.  Here is our ExpiresFilter configuration snippet.\n\n<filter>\n  <filter-name>ExpiresFilter</filter-name>\n  <filter-class>org.apache.catalina.filters.ExpiresFilter</filter-class>\n  <init-param>\n    <param-name>ExpiresByType image/gif</param-name>\n    <param-value>access plus 6 hours</param-value>\n  </init-param>\n  <init-param>\n    <param-name>ExpiresByType text/css</param-name>\n    <param-value>access plus 6 hours</param-value>\n  </init-param>\n  <init-param>\n    <param-name>ExpiresByType application/javascript</param-name>\n    <param-value>access plus 6 hours</param-value>\n  </init-param>\n  <init-param>\n    <param-name>ExpiresExcludedResponseStatusCodes</param-name>\n    <param-value>302, 500, 503</param-value>\n  </init-param>\n</filter>\n\n<filter-mapping>\n  <filter-name>CustomExpiresFilter</filter-name>\n  <url-pattern>/*</url-pattern>\n  <dispatcher>REQUEST</dispatcher>\n</filter-mapping>\n\nThe ExpiresFilter according to the documentation can be configured to expire content by type or with a default or with both.  However, there is a hole in the current logic of the getExpirationDate(XHttpServletResponse response) method if the filter is not configured with a default.  When the response status is 304 (which in our case not excluded - see config above) the content-type is null in the first lines of the getExpirationDate method. The ExpiresFilter is unable to set the appropriate cache-control and expires headers because the content-type is not present.\n\nThe net effect is that once the content has expired with the ExpiresFilter configuration settings above, the cache-control and expires headers cannot be set by the ExpiresFilter and a slew of incoming browser requests for the same static content are met with repeated 304s.  Essentially, using only ExpiresByType in ExpiresFilter results in successful caching, but only until the content expires, at which point, the wave of 304s begin.  I don't think this was the intended effect.\n\nOne could argue that, even when a 304 is returned, one can still set the cache-control and expires headers appropriately and extend the cache lifetime thus reducing load as intended.  One way to do this is to add logic to the ExpiresFilter to use the request URI and request file metadata to determine what the content type would have been in this scenario - another might be an in memory collection of URIs to content type for lookup.  I am sure there are others but not knowing the source code surrounding this in depth, I cannot say what would be best.\n\nIn our research several people have solved this issue by changing or entirely removing other headers like the ETag header and the Last-Modified and that does not seem correct.  I think it is perfectly valid to have ETag with a 304 and cache-control and expires headers and maybe even more elegant and appropriate?",
    "comments": [
      "\u201cCustomExpiresFilter\u201d should be \u201cExpiresFilter\u201d in original config example in description.",
      "From RFC 7232, section 4.1:\n\n<quote>\nThe server generating a 304 response MUST generate any of the\nfollowing header fields that would have been sent in a 200 (OK)\nresponse to the same request: Cache-Control, Content-Location, Date,\nETag, Expires, and Vary.\n</quote>\n\nI'm currently looking at ways to fix this.\n\nI'm not sure a complete solution is practical. A solution that addresses static resources and Servlets that override HttpServlet.getLastmodified() looks more likely.",
      "The Servlet API does not expose the information required to fix this for Servlets that override getLastModified().\n\nThat could be overcome by reflection but then the code would have to assume that the Content-Type for a given Servlet was constant. That may be true in most cases but it isn't guaranteed to true and I don't like building solutions based on assumptions I know to be false.\n\nThe Default Servlet case can be fixed generically, and entirely in the ExpiresFilter but only by using Servlet 4.0 API. Therefore I have fixed this in 9.0.x using the Servlet 4.0 API and in 8.5.x using the Servlet 4 preview package. I don't see an easy way to fix this in 7.0.x.\n\nFixed in:\n- master for 9.0.28 onwards\n- 8.5.x for 8.5.48 onwards"
    ],
    "creation_ts": "2019-11-08T22:12:39Z",
    "fixes": [
      63909
    ]
  },
  {
    "id": 66822,
    "summary": "\"BindException: Address already in use\" - pls say which ip/port is causing the problem",
    "description": "if the mnemonic DNS name is know best mention that one too\n\nCaused by: java.net.BindException: Address already in use\n\t\tat java.base/sun.nio.ch.Net.bind0(Native Method)\n\t\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\t\tat java.base/sun.nio.ch.ServerSocketChannelImpl.netBind(ServerSocketChannelImpl.java:337)\n\t\tat java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:294)\n\t\tat org.apache.tomcat.util.net.NioEndpoint.initServerSocket(NioEndpoint.java:277)\n\n\nsimilar to bug 47499 , Bug 44558",
    "comments": [
      "The IP/port information is already in the log file. The log line before the quoted  exception provides the protocol (AJP, HTTP, etc) , Connector (NIO, NIO2, etc), Address (if any) and port.",
      "+1 to fixing the error message.\n\nThere is no obvious link between log lines on different lines, just because a port appears on previous line, it means nothing.\n\nPlease fix this.",
      "Similar undescriptive error case in the same class:\n\n31-Jul-2023 13:38:12.493 SEVERE [main] org.apache.catalina.util.LifecycleBase.handleSubClassException Failed to initialize component [Connector[HTTP/1.1-8443]]\n\torg.apache.catalina.LifecycleException: Protocol handler initialization failed\n\t\tat org.apache.catalina.connector.Connector.initInternal(Connector.java:1049)\n\t\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:136)\n\t\tat org.apache.catalina.core.StandardService.initInternal(StandardService.java:558)\n\t\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:136)\n\t\tat org.apache.catalina.core.StandardServer.initInternal(StandardServer.java:1045)\n\t\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:136)\n\t\tat org.apache.catalina.startup.Catalina.load(Catalina.java:724)\n\t\tat org.apache.catalina.startup.Catalina.load(Catalina.java:746)\n\t\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\t\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\t\tat org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:302)\n\t\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:472)\n\tCaused by: java.net.BindException: Cannot assign requested address\n\t\tat java.base/sun.nio.ch.Net.bind0(Native Method)\n\t\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\t\tat java.base/sun.nio.ch.ServerSocketChannelImpl.netBind(ServerSocketChannelImpl.java:337)\n\t\tat java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:294)\n\t\tat org.apache.tomcat.util.net.NioEndpoint.initServerSocket(NioEndpoint.java:277)\n\t\tat org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:241)\n\t\tat org.apache.tomcat.util.net.AbstractEndpoint.bindWithCleanup(AbstractEndpoint.java:1193)\n\t\tat org.apache.tomcat.util.net.AbstractEndpoint.init(AbstractEndpoint.java:1206)\n\t\tat org.apache.coyote.AbstractProtocol.init(AbstractProtocol.java:597)\n\t\tat org.apache.coyote.http11.AbstractHttp11Protocol.init(AbstractHttp11Protocol.java:80)\n\t\tat org.apache.catalina.connector.Connector.initInternal(Connector.java:1046)\n\t\t... 13 more",
      "We have multiple connectors listening on port 8443 in our server.xml, each of them with a different \"address\" field.\n\nAs Ralf Hauser suggested, it would be beneficial to cite this address verbatimely, the corresponding IP address.\nIn case the address field is an IP address to begin with, the reverse DNS lookup  would be very helpful.\nIf this all could be cited in \"[Connector[HTTP/1.1-8443]]\" (and in the exception message as soon as \"NioEndpoint\" gets hold of it (java.net.BindException: Address already in use).",
      "also, it would be useful to be clearer on the protocol:\n\nThe current error message says \"HTTP/1.1\".\n\nIn reality it is most likely \"https\" as the connector has the attributes\n\nscheme=\"https\"\nsecure=\"true\" \nSSLEnabled=\"true\"\n...\nkeystoreFile=\"/usr/share/tomcat9/conf/sec/.keystore\"\nkeystorePass=\"*****\"\ncertificateKeystoreType=\"PKCS12\"\n...\nsslProtocol=\"TLSv1.2\"\nsslEnabledProtocols=\"TLSv1.2+TLSv1.3\"\nuseServerCipherSuitesOrder=\"true\"\nciphers=\"TLS_AE...",
      "Connector log messages now use the same name format as the protocol handler (e.g. \"http-nio-127.0.0.1-8080\") to reference the Connector.\n\nFixed in:\n- 11.0.x for 11.0.0-10 onwards\n- 10.1.x for 10.1.12 onwards\n-  9.0.x for  9.0.79 onwards\n-  8.5.x for  8.5.92 onwards"
    ],
    "creation_ts": "2023-07-31T10:08:19Z",
    "fixes": [
      66822
    ]
  },
  {
    "id": 57136,
    "summary": "EL Parser escaping dollar sign not ${ or ${...}",
    "description": "In the EL 3.0 spec it says...\n    Alternatively, the escape characters \\$ and \\# can be used to escape what would\notherwise be treated as an eval-expression. Given the literal-expressions:\n        \\${exprA}\n        \\#{exprB}\n    The resulting values would again be the strings ${exprA} and #{exprB}.\n\nI believe that means it should not escape lets say \"Price: \\\\$500.00\" it should instead output \"Price: \\$500.00\"(it currently would output \"Price: $500.00\") but should instead escape \"Price: \\\\${500.00}\" and the output of that would be \"Price: ${500.00}\".\n\nNormally this wouldn't be run into, but I happened to run into this issue passing javascript code through the EL processor, that happens to have some escaped dollar signs inside some regex strings.\n\nIt maybe a little more acceptable to use \\${ and \\#{ as the escapes, as that is a better indication that there is about to be an expression",
    "comments": [
      "1. Sample code to reproduce the issue = ?\n(Are you using the API directly, a JSP page, or what?)\n\n2. Is it observable with the current 8.0.14? What is your version of Tomcat?",
      "The spec says that \\$ is the escape, not \\${.\n\nThere are multiple sets of escaping rules at play in a JSP page and things can get complex quickly.\n\nIf you have a test case that demonstrates non-compliance with the spec then please feel free to re-open this issue with that test case attached and we'll take a look.",
      "Here is an example, and yes the current version of tomcat 8 trunk (downloaded after 8.0.14)\n\n    public static void main(String[] args) {\n\n        ELProcessor elp = new ELProcessor();\n        ELContext elContext = elp.getELManager().getELContext();\n        ValueExpression ve = ELManager.getExpressionFactory().createValueExpression(elContext, \"Pri\\\\ce: \\\\$500.00 \\\\${true ? 'test':''} ${true ? 'test2':''}\", String.class);\n        Object ret = ve.getValue(elContext);\n        System.out.println(ret);\n    }\n\nI use the code similar to this. If you guys deem this in-fact a bug then it would be in generated parser definition",
      "Mark,\nThe language in the spec is confusing at best, as I read it as saying the escape characters \\$ would be used if it was otherwise to be an expression, $500 would not be an expression, but ${...} would. \n\nI do agree though this is a trivial matter, I just wanted to post it in case. I had already provided a workaround by automating my input translation adding an extra \\\\ before an escaped $ or # when { does not follow. The specific method I'm running into this is not using JSP, its direct similar to the example provided",
      "Test cases that avoid JSPs and go directly to the ELProcessor are good since they avoid a lot of the complexities. The only catch is that you still have to use Java escaping for the String (which you have in your example above).\n\nI've re-read that section of the EL spec and I see what you mean. That language actually seems pretty clear although it would be better if it said the escape was \"\\$}\" or \"\\#{\". In this type of case, I usually look at section 1.24 for clarity/confirmation. Unfortunately that doesn't help. It is clear that \"\\$500\" is a literal expression but it offers to guidance as to whether it evaluates to \"$500\" or \"\\$500\".\n\nI took a look at the previous EL spec and there is some helpful language there.\n\n<quote>\nLiteralExpression::= (LiteralComponent)* ([$#])?\n\ni.e. a string of any characters that doesn't include ${ or #{ unless escaped by \\${ or \\#{\n</quote>\n\nThe 2.2 spec also include the language about using \\$ or \\# as the escape.\n\nGiven all of this, I think you are right and \"\\$500\" should be evaluated as \"\\$500\" not \"$500\".\n\nI've converted your example to a test case and I'll tae a look at a fix.",
      "Sounds good! Thanks for taking the extra time to investigate further",
      "Yuk. That wasn't fun. We really need some API changes in the EL spec to allow us to reduce the number of times we have to parse EL expressions.\n\nThis is fixed in 8.0.x and will be included in 8.0.15 onwards.\n\nAssuming there are no regressions reported, I'll back port this to 7.0.x as well.",
      "Mark, I happened to check the svn source to see what changed and I noticed it said you modified AstLiteralExpression.java on Mon Apr 28 23:08:14 2014 UTC, both 8.0.x and 7.0.x, changing \\${ escape to \\$, I'm not sure what prompted that original change, but just wanted to remind you in case there was something being overlooked here.",
      "(In reply to Arthur Fiedler from comment #8)\n> Mark, I happened to check the svn source to see what changed and I noticed\n> it said you modified AstLiteralExpression.java on Mon Apr 28 23:08:14 2014\n> UTC, both 8.0.x and 7.0.x, changing \\${ escape to \\$, I'm not sure what\n> prompted that original change, but just wanted to remind you in case there\n> was something being overlooked here.\n\nThe driver for that change was consistency between the various bits of code that parse EL while I was working on another EL issue.",
      "No reports of regressions. Fixed in 7.0.x for 7.0.60 onwards.",
      "Hi,\n\nI think we are experiencing a regression on this.\n\nWe are using regular expression pattern with angularJs in our JSPs.\nAs doc says:\n\"Only when the EL is enabled for a page (see Section JSP.3.3.2, \u201cDeactivating\nEL Evaluation\u201d), a literal $ can be quoted by \\$, and a literal # can be quoted\nby \\#. This is not required but is useful for quoting EL expressions.\n\nSo we are using following source code:\nng-pattern=\"/^([1-9]+)\\$/\"\n\nthis should be replaced by JSP parser with:\nng-pattern=\"/^([1-9]+)$/\"\n\nBut, this your fix, the code stay as this client side:\nng-pattern=\"/^([1-9]+)\\$/\"\n\nSo, according to spec, this seems to be a regression.",
      "The problem here is that both the EL and the JSP specs apply and they say different things.\n\nThe JSP specs says (assuming EL is enabled) '\\$' is an escape for a literal '$'.\nThe EL spec says '\\${' is an escape for a literal '${'.\n\nThe JSP spec has been in maintenance mode for 2.2 onwards whereas the EL spec has been in active development - hence why more wieght was given the EL view rather than the JSP one.\n\nHaving re-read both specs again, I'm no clearer in my own mind what the right behaviour is. Either the JSP style escaping or the EL style could be viewed as correct. It may even be possible (I need to think it through some more) to have EL use '\\${' as an escape for '${' while JSP uses '\\$' as an escape for '$'.\n\nI'm reluctant to change this again without clarification from the JSP maintenance lead and the EL spec expert group. I'll leave this open in the NEEDINFO state and raised a bug over in the EL EG.",
      "https://java.net/jira/browse/UEL-42",
      "I've been mulling this over some more and I think - regardless of the feedback from the EG - we are going to have to make the escaping for JSP configurable. The EG feedback is just going to determine what the default is.\n\nI'm concerned about the complexity making this configurable will create but the more I think about this the more I think we need to simply so we don't inconvenience one group of users over another.",
      "I've been thinking about this also, and me personally I think the JSP spec should be corrected to use escape \\${ as the standard, this does not effect me but I keep thinking about javascript like jquery being output via jsp (not the best place but maybe its a dynamic library) and every time the user would need to double escape a $ in a regex expression, or \\$(...) jquery... \n\nSeems like a lot of work to make it configurable and then users that need to be aware of that configuration may or may not even find it. It's a tough call",
      "Every time I research this bug some more I seem to be changing my position slightly. I'm currently leaning towards the view that there was a regression in this fix and that '\\$' should have remained an escape for '$\" within a JSP page. Only when processing standalone EL is '\\${' an escape for '${'. Note that this means that within an EL expression in a JSP apge '\\$' would be treated as a literal \\$.\n\nA careful reading of the JSP spec makes clear that the JSP spec is responsible for parsing the outer '${' and '}' of an EL expression within a JSP page and the EL spec is responsible for parsing what appears between them. (See the production for ELExpressionBody).\n\nI plan to look at a patch for trunk to address this. Once I have that we'll see what the dev list thinks of it and back-porting it.",
      "I think I have found another, related, problem in attribute values.\n\nThe problem I described in comment #16 (where I was thinking about template text) also applies to attribute values. Specifically, consider the following:\n<tags:echo echo=\"16-${'\\\\$'}\" />\n\nCurrently, Tomcat applied attribute value escaping to the whole value. This is not correct. The production in the JSP spec for QuotedChar (which is used in attribute values) means that attribute escaping only applies outside the EL. Inside the EL is handled by ELEXpressionBody which delegates to the EL spec.\n\nI am currently extending the EL test cases to take all of this into account before looking at what fixes are required.",
      "I've committed a fix for this to trunk. I'll give it a few days for folks to review it before back-porting.",
      "Fix for the regression applied to 8.0.x for 8.0.27 onwards.",
      "Back-ported the fix to 7.0.x for 7.0.65 onwards.\n\nI've also back-ported a fix to EL parsing to 8.0.x and 7.0.x.",
      "Reviewing r1704572 and r1704576 (the fix for 7.0.x)\n\n(In reply to Mark Thomas from comment #17)\n> I think I have found another, related, problem in attribute values.\n> \n> The problem I described in comment #16 (where I was thinking about template\n> text) also applies to attribute values. Specifically, consider the following:\n> <tags:echo echo=\"16-${'\\\\$'}\" />\n> \n> Currently, Tomcat applied attribute value escaping to the whole value. This\n> is not correct. The production in the JSP spec for QuotedChar (which is used\n> in attribute values) means that attribute escaping only applies outside the\n> EL. Inside the EL is handled by ELEXpressionBody which delegates to the EL\n> spec.\n> \n\nI agree with this assessment. I was reading the current as well as older versions of JSP and EL specifications - back to JSP 2.0/Tomcat 5.5.\n\nThe chapter \"JSP.1.6 Quoting and Escape Conventions\" has explicit section on \"Quoting in EL Expressions\" and it does not say that any additional quoting rules from surrounding context are applied to it. So I agree that when parsing an attribute, \"Quoting in Attributes\" rules are applied until a ${, then \"Quoting in EL Expressions\" rules are applied until a } is read.\n\nHistorically, EL expressions were introduced in JSTL 1.0 (JSR-052). At that time the expressions were evaluated by tags themselves. So an attribute of JSP tag was escaped as a whole, and unescaping it gives an EL expression.\n\nEffectively if EL expression uses quoting (e.g. ${'\\\\'}) including it as attribute value requires double quoting <c10:out value=\"${'\\\\\\\\'}\" />  This works when using JSTL 1.0 (xmlns:c10=\"http://java.sun.com/jstl/core\") and EL evaluation in JSPs is disabled. So the EL is evaluated by the tag library.\n\nIf using JSTL 1.1 (xmlns:c=\"http://java.sun.com/jsp/jstl/core\") and EL is enabled, it becomes <c:out value=\"${'\\\\'}\" />\n\nI see no mention of quoting changes, but for backwards compatibility there is an explicit option, <%@page isELIgnored=\"true\">.\n\n\n\nMy concern is that the behaviour where double escaping in attributes was required has been there for many years.\nE.g. Eclipse IDE cannot parse /tomcat-7.0.x/test/webapp-3.0/el-method.jsp file and flags errors on the following line,\n\n    <tags:echo echo=\"00-${testBeanA[\"bean\"].sayHello('JUnit')}\" />\n\nI think there would better be a flag in Jasper to enable old behaviour of attribute parsing. In the old behaviour mode the attribute will be parsed and unescaped as a whole.\n\nI think related change in r1704572 is in o.a.jasper.compiler.AttributeParser.\n\nI am REOPENING to discuss introduction of such configuration option. (Though may be better to reorganize into a separate BZ issue).",
      "*** Bug 58567 has been marked as a duplicate of this bug. ***",
      "*** Bug 58567 has been marked as a duplicate of this bug. ***",
      "Hello,\nI opened bug 58567, and Mark resolved it as a duplicate of this bug.\nI'd like to add to this discussion that I am suffering from the regression introduced in 8.0.27 and I didn't even try to escape the $ sign. I have quotes in the expression, something like this:\n\n<c:if test=\"${(myAccountEmail != null) && (myAccountEmail != \\\"\\\")}\">\n\nI think that considering this issue as minor and just waiting for an enhancement is a bit weak, and will hurt users.\nThanks,\nYoni",
      "Also see this thread on the dev list:\nhttp://tomcat.markmail.org/thread/uzo65gf572s636ly",
      "A configuration option has been added to the JSP Servlet.",
      "Thank you for providing a configuration option for this. Any chance to elaborate what the option name is, and where (and if) it will be documented?\nI apologize if these are trivial questions, I am not sure where to find this information.\nThanks,\nYoni",
      "(In reply to Yoni Amir from comment #27)\n> Thank you for providing a configuration option for this. Any chance to\n> elaborate what the option name is, and where (and if) it will be documented?\n> I apologize if these are trivial questions, I am not sure where to find this\n> information.\n> Thanks,\n> Yoni\n\nHere it is\nhttps://ci.apache.org/projects/tomcat/tomcat9/docs/jasper-howto.html\nstrictQuoteEscaping",
      "That isn't the option you want. You want this one:\nquoteAttributeEL\n\nThanks for the reminder, I'd forgotten to document it.",
      "Hi,\nDo you know if this configuration option, quoteAttributeEL, will be available only in tomcat 8.0.29, or also in Tomcat 7.0.66 (or maybe a later 7.0.xx)?\nThanks,\nYoni",
      "Created attachment 33282\ntest.war - Sample web application demonstrating two variants of EL escaping in attributes of custom tags\n\nSample web application to demonstrate two variants of EL escaping in attributes of a custom tag.\n\nOne of them is expected to work, other is expected to fail (with a compilation failure). This is used to test what is the actual behaviour.\n\nIt uses EL expression from Comment 24.",
      "(In reply to Mark Thomas from comment #25)\n> Also see this thread on the dev list:\n> http://tomcat.markmail.org/thread/uzo65gf572s636ly\n> (\"On escaping of EL in attributes (BZ 57136)\" thread on dev@)\n\nAs result of the above,\n\n1. The quoteAttributeEL option has been backported to Tomcat 7 as well\n2. Its default value was changed to be \"true\", restoring old behaviour.\n\nThis will be in Tomcat 7.0.66, 8.0.30, 9.0.0.M2 onwards.",
      "*** Bug 58706 has been marked as a duplicate of this bug. ***",
      "*** Bug 58706 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2014-10-24T05:16:19Z",
    "fixes": [
      57136
    ]
  },
  {
    "id": 55233,
    "summary": "[websocket] Problem reading many subsequent binary messages",
    "description": "I have a test client that receives many binary messages. The server sends thousands of binary messages with size 1024 with no delay between them. At some point of time, the client fails to read the message and the connection is closed. See some close reasons below.\n\nI am wondering whether there is some issue with the read buffers being modified from other threads. \nSeeing all close reasons below, there are two issues here:\n- why there is buffer overflow when there is plenty of space to store the incoming data (e.g. \"unwrapping [1,130] bytes into a [8,192]\")\n- why there are attempts to unwrap bigger buffer into smaller one. I thought this should not be possible (e.g. \"unwrapping [12,466] bytes into a [8,192]\")\n\n\nHere are some close reasons occurred during the test:\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [6,466] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [1,130] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [2,240] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [12,466] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [2,071] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [12,466] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [4,356] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [14,059] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [4,707] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [10,041] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [2,478] bytes into a [8,192] byte buffer that already contained [0] bytes.",
    "comments": [
      "I've improved the error message so it now reports exactly how many bytes the SSLEngine needs to write. The fix I suspect will be required looks like it will need some fairly major surgery to the current code so I'd like to be sure of what is going on before I start down that route. If you could update your build to the latest trunk code, re-run you test and report the error messages that would be extremely helpful.",
      "With the updated code the error messages are always the same:\n\nConnection closed: Buffer overflow. [16,916] bytes to write into a [8,192] byte buffer that already contained [0] bytes.\nConnection closed: Buffer overflow. [16,916] bytes to write into a [8,192] byte buffer that already contained [0] bytes.\nConnection closed: Buffer overflow. [16,916] bytes to write into a [8,192] byte buffer that already contained [0] bytes.\nConnection closed: Buffer overflow. [16,916] bytes to write into a [8,192] byte buffer that already contained [0] bytes.\n...",
      "Many thanks for the testing and the feedback. I've been able to fix this without the major surgery I feared. The fix is available in trunk for you to test.\n\nI have also been able to create a testcase that reproduces the issue. The test case has also uncovered a handful of other bugs that I am currently working thorugh. Once all the bugs are fixed, I'll be adding the test case to trunk as well.\n\nThanks again for your testing and feedback. It is greatly appreciated.",
      "I have rerun the tests. Everything is working fine now.\n\nMark, thanks a lot for your prompt reaction and fixes!"
    ],
    "creation_ts": "2013-07-10T14:31:48Z",
    "fixes": [
      55233
    ]
  },
  {
    "id": 42444,
    "summary": "Potential NullPointerException in org.apache.catalina.valves.AccessLogValve",
    "description": "In the class AccessLogValve.RequestElement in the method addElement there is an\naccess of the form: request.getProtocol(), even though the variable request is\nknown to be 'null' which will cause a NullPointerException.\n\nPatch below:\n---\n\nIndex:\nF:/Workspace/Apache2/tomcat6/java/org/apache/catalina/valves/AccessLogValve.java\n===================================================================\n---\nF:/Workspace/Apache2/tomcat6/java/org/apache/catalina/valves/AccessLogValve.java\t(revision\n538877)\n+++\nF:/Workspace/Apache2/tomcat6/java/org/apache/catalina/valves/AccessLogValve.java\t(working\ncopy)\n@@ -1035,7 +1035,7 @@\n                 buf.append(request.getProtocol());\n             } else {\n                 buf.append(\"- - \");\n-                buf.append(request.getProtocol());\n+                // buf.append(request.getProtocol());\n             }\n         }\n     }",
    "comments": [
      "Committed in revision 539787.\n\nthanks!"
    ],
    "creation_ts": "2007-05-17T08:15:53Z",
    "fixes": [
      42444
    ]
  },
  {
    "id": 66370,
    "summary": "AccessControlException and default behavior change with org.apache.el.GET_CLASSLOADER_USE_PRIVILEGED",
    "description": "Hey there,\n\nRunning tomcat el 10.1.2 with java 2 security enabled, we discovered an issue with an AccessControlException due to Boolean.getBoolean(). It seems this was introduced in this commit https://github.com/apache/tomcat/commit/28ea2b9b2e781d20e0651cb5e0b65bacd464150c#diff-b5962d24af20591547a4804838aa91c84b0151645b2121ac4f244a1b9c1213e8R46-R47 with the addition of the new property org.apache.el.GET_CLASSLOADER_USE_PRIVILEGED. See exception below\n\njava.security.AccessControlException: Access denied (\"java.util.PropertyPermission\" \"org.apache.el.GET_CLASSLOADER_USE_PRIVILEGED\" \"read\")\n        at java.base/java.security.AccessController.throwACE(AccessController.java:176)\n        at java.base/java.security.AccessController.checkPermissionHelper(AccessController.java:238)\n        at java.base/java.security.AccessController.checkPermission(AccessController.java:385)\n        at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:322)\n        at com.ibm.ws.kernel.launch.internal.MissingDoPrivDetectionSecurityManager.checkPermission(MissingDoPrivDetectionSecurityManager.java:45)\n        at java.base/java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1066)\n        at java.base/java.lang.System.getProperty(System.java:581)\n        at java.base/java.lang.System.getProperty(System.java:564)\n        at java.base/java.lang.Boolean.getBoolean(Boolean.java:265)\n        at jakarta.el.Util.<clinit>(Util.java:47)\n        at jakarta.el.ExpressionFactory.newInstance(ExpressionFactory.java:92)\n        at jakarta.el.ExpressionFactory.newInstance(ExpressionFactory.java:79)\n        at org.apache.jasper.runtime.JspApplicationContextImpl.<clinit>(JspApplicationContextImpl.java:59)\n        at org.apache.jasper.runtime.JspFactoryImpl.getJspApplicationContext(JspFactoryImpl.java:265)\n        at com.ibm._jsp._login._jspInit(_login.java:66)\n        at com.ibm.ws.jsp.runtime.HttpJspBase.init(HttpJspBase.java:77)\n        at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:299)\n\n\n\nWorked locally on a fix for this and discovered that with the addition of this new property, a behavior change was introduced which obligates us to set the property if we don't want to hit another AccessControlException as seen below. I understand why the change was introduced with this new property but I would expect that it would not affect the expected behavior by default. I would expect to see a change only if it was set by the user. Any input as to why this was done the way it was? Any way we can change this to keep the expected behavior by default and change it if set?\n\njava.security.AccessControlException: Access denied (\"java.lang.RuntimePermission\" \"getClassLoader\")\n        at java.base/java.security.AccessController.throwACE(AccessController.java:176)\n        at java.base/java.security.AccessController.checkPermissionHelper(AccessController.java:238)\n        at java.base/java.security.AccessController.checkPermission(AccessController.java:385)\n        at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:322)\n        at com.ibm.ws.kernel.launch.internal.MissingDoPrivDetectionSecurityManager.checkPermission(MissingDoPrivDetectionSecurityManager.java:45)\n        at java.base/java.lang.Thread.getContextClassLoader(Thread.java:578)\n        at jakarta.el.Util.getContextClassLoader(Util.java:665)\n        at jakarta.el.ExpressionFactory.newInstance(ExpressionFactory.java:92)\n        at jakarta.el.ExpressionFactory.newInstance(ExpressionFactory.java:79)\n        at org.apache.jasper.runtime.JspApplicationContextImpl.<clinit>(JspApplicationContextImpl.java:59)\n        at org.apache.jasper.runtime.JspFactoryImpl.getJspApplicationContext(JspFactoryImpl.java:265)\n        at com.ibm._jsp._login._jspInit(_login.java:72)\n        at com.ibm.ws.jsp.runtime.HttpJspBase.init(HttpJspBase.java:77)\n        at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:299)",
    "comments": [
      "Proposed fix for the Boolean.getBoolean java 2 security issue https://github.com/apache/tomcat/pull/572 doesn't address the behavior difference with the new property",
      "Updated the PR with a proposed change to restore default behavior and keep a property to control when to use the security manager.",
      "You should read both https://lists.apache.org/thread/66djc4j4ybz45ponly0x5g94oyt844cm and https://lists.apache.org/thread/7w4x90zwp3qhn9qopbhmg5wponcc468n in their entirety to see the thought-process(es) here.",
      "The default for the property is unlikely to change but if there is a code path in standard Tomcat usage that reaches that point without entering a doPrivileged() block then we can look at that as it likely needs fixing anyway.",
      "Hi,\n\nWe use the Tomcat ExpressionLanguage within Open Liberty. We hit this issue after updating to the 10.1.2 (from 10.1.1) version of the Expression Language. I've read through the following thread: https://lists.apache.org/thread/7w4x90zwp3qhn9qopbhmg5wponcc468n\n\nAlthough the SecurityManager is deprecated and may go away in Jakarta EE11 it is still used heavily in Jakarta EE10.\n\nThe problem is two fold:\n\n1) When a SecurityManager is being used the following Exception occurs when looking up the value of the new system property:\n\njava.security.AccessControlException: Access denied (\"java.util.PropertyPermission\" \"org.apache.el.GET_CLASSLOADER_USE_PRIVILEGED\" \"read\")\n        at java.base/java.security.AccessController.throwACE(AccessController.java:176)\n        at java.base/java.security.AccessController.checkPermissionHelper(AccessController.java:238)\n        at java.base/java.security.AccessController.checkPermission(AccessController.java:385)\n        at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:322)\n        at com.ibm.ws.kernel.launch.internal.MissingDoPrivDetectionSecurityManager.checkPermission(MissingDoPrivDetectionSecurityManager.java:45)\n        at java.base/java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1066)\n        at java.base/java.lang.System.getProperty(System.java:581)\n        at java.base/java.lang.System.getProperty(System.java:564)\n        at java.base/java.lang.Boolean.getBoolean(Boolean.java:265)\n        at jakarta.el.Util.<clinit>(Util.java:47)\n\nsee: https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html#getBoolean-java.lang.String-\n\n2) Anyone who is using a SecurityManager and wants the protection offered by it will now need to enable the new system property as well. As stated in the thread I referenced earlier this is a backward incompatible change going from 10.1.1  to 10.1.2. Even the thread referenced says this was likely a theoretical issue. \n\nGiven the above I would argue a few things:\n\nA) The default should be opt out so by default using the Security Manager gives you the expected behavior without having to set a system property.\n\nB) If in Jakarta EE11 the use of the SecurityManager is removed or made optional then this property could then potentially be removed or opt-int.\n\nC) At the very least when using Boolean.getBoolean the AccessControlException needs to be avoided.\n\nIf changing the default of the property isn't a possibility and won't be accepted by the community, can we agree to at least fix C?",
      "Looking at comment 0, this line appears in the stack trace:\n\norg.apache.jasper.runtime.JspFactoryImpl.getJspApplicationContext(JspFactoryImpl.java:265)\n\nI can't match that to any current or historical Tomcat version. It also appears to be missing a privileged block (which Tomcat versions all have) which would avoid the problem.\n\nAre you using a modified JspFactoryImpl? If so, this is an issue that needs to be addressed in that modified JspFactoryImpl.\n\n\nLooking at comment 4, I'd like to see the full stack trace to see what is calling jakarta.el.Util since that is a package private class.\n\n\n \nLooking at the history here:\n\nBug 62080\nSome non-Tomcat users of the EL API Jar provided by Tomcat stated a need for additional privileged blocks. While they are known not to be required by Tomcat, they were added.\n\nBug 66294\nTomcat users report that the additional privilege blocks causes performance issues. The solution was to make the use of the additional privilege blocks optional. This was controlled by a system property. The complication is that this also must be called from within a privileged block. Again, this is not an issue for Tomcat.\n\nThis bug\nAt least one non-Tomcat user of the EL API JAR doesn't use privileged blocks where Tomcat does.\n\n\nThings are not helped by the limited information provided in bug 62080 that started all of this.\n\n\nAt this point I see three possible ways forward:\n\n1. Users of the Tomcat provided EL (Open Liberty and others) use privilege blocks for the same calls Tomcat uses them for.\n\n2. The changes for bug 66294 and bug 62080 are reverted.\n\n3. Users stop using the SecurityManager as it is going to go away eventually and this is an opportunity to find an alternative solution to whatever problem using a security manager is currently solving for them.\n\n\nOption 3 seems highly unlikely.\n\nSome variation of option 1 might well turn out to the fix for the problem described in bug 62080 but given the lack of information in that bug it is hard to tell.\n\nI'm currently leaning towards 2 and if bug 62080 is re-opened, we can dig into exactly why it is happening.",
      "Following the discussion on comment 6, I\u2019ve tried a couple of things for this in Open Liberty. I worked on wrapping up some of the function calls that call out to Expression Language. That required a couple of changes and did fix some of the issues but I realized that other open source we use specifically the hibernate-validator also have calls to EL specifically here https://github.com/hibernate/hibernate-validator/blob/8ed05f71e569b2a9d2fefcaf2c14187443f55be8/engine/src/main/java/org/hibernate/validator/messageinterpolation/ResourceBundleMessageInterpolator.java#L174 which reaches here https://github.com/apache/tomcat/blob/8e2aa5e45ce13388da62386e3cb1dbfa3b242b4b/java/jakarta/el/ELManager.java#L30 in Tomcat EL calling the Util class and hitting the issue. This is just one I\u2019ve found but there could be many other examples of other open source out there which use Tomcat\u2019s EL and run into the same issue using the security manager. In my opinion, the source of the issue is in EL itself and instead of fixing or wrapping the calls to EL in other open sources with privilege blocks, it would be best to fix it in the source of the issue itself.\n\nFYI This is the Open Liberty issue following the changes https://github.com/OpenLiberty/open-liberty/issues/23543",
      "That is a fair point that the necessary privilege blocks should be in place inside the EL.\n\nIf the default for the GET_CLASSLOADER_USE_PRIVILEGED system property was changed, and the code that obtained the value for that system property was obtained inside a privilege block, would that address the issues Open Liberty is seeing? I ask as I might have a (less ugly than my previous ideas) way to have a different default depending on whether or not the code is running on Tomcat which would also address the performance concerns.",
      "Yes, if the default is changed and the property lookup is wrapped in a privilege block it should fix at least the issues seen in Open Liberty. I've tested with the changes in the proposed PR https://github.com/apache/tomcat/pull/572 (not exactly changing the default but in essence reverting to the default behavior) and have seen the issues fixed.",
      "Fixed in:\n- 11.0.x for 11.0.0-M2 onwards\n- 10.1.x for 10.1.5 onwards\n-  9.0.x for  9.0.71 onwards\n-  8.5.x for  8.5.85 onwards",
      "Verified the updates worked locally by building the jar and testing with it. Thanks for making the changes!"
    ],
    "creation_ts": "2022-12-01T16:32:43Z",
    "fixes": [
      66370
    ]
  },
  {
    "id": 43236,
    "summary": "Response.setCharacterEncoding() fails after Response.getWriter() and Response.reset()",
    "description": "The class org.apache.catalina.connector.Response\n\nresets the internal hold coyoteResponse and outputBuffer during reset():\n\n    public void reset() {\n        if (included)\n            return;     // Ignore any call from an included servlet\n        coyoteResponse.reset();\n        outputBuffer.reset();\n    }\n\nbut if anyone has already set the characterEncoding (e.g. to UTF-8) and already\ngot the writer, than all following invocations of request.setCharacterEncoding()\nwill do nothing, because the internal save flag for usingWriter is not reseted.\nThis is very annoying, because the coyoteResponse.reset(), resets the\ncharacterEncoding to iso8859-1. So I have no change to change/reset the\ncharaterEncoding to UTF-8.\nI'll think if you reset the response, you should also reset the usingWriter flag\nor add another special flag, that works with this circumstances.",
    "comments": [
      "This has been fixed in trunk and proposed for back port to 5.5.x and 6.0.x",
      "*** Bug 37072 has been marked as a duplicate of this bug. ***",
      "Fixed in 6.0.x",
      "Fixed in 5.5.x and will be included in 5.5.26 onwards."
    ],
    "creation_ts": "2007-08-29T03:56:43Z",
    "fixes": [
      43236
    ]
  },
  {
    "id": 64006,
    "summary": "MemoryUserDatabase in >=9.0.14 insists on statically set ConfigFileLoader ConfigurationSource",
    "description": "In Tomcat 9.0.13 and earlier, the following code:\n\npackage tomcat.embedded.test;\n\nimport org.apache.catalina.users.MemoryUserDatabase;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tMemoryUserDatabase database = new MemoryUserDatabase(\"foo\");\n\t\tdatabase.setPathname(\"file:///tmp/users.xml\");\n\t\tdatabase.open();\n\t\tSystem.out.println(database.findUser(\"both\"));\n\t\tdatabase.close();\n\t}\n\n}\n\n... with a standard/valid users.xml, runs without error, producing:\n\n$ ./gradlew build run\n\n> Task :run\nUser username=\"both\", roles=\"tomcat,role1\"\nDec. 16, 2019 10:14:01 PM org.apache.catalina.users.MemoryUserDatabase save\nSEVERE: User database has been configured to be read only. Changes cannot be saved\n\nBUILD SUCCESSFUL in 852ms\n\nIn the next version 9.0.14, the new ConfigFileLoader API is introduced.  In many parts of Tomcat this seems to be optional, but for the MemoryUserDatabase loaded from file, it is insisted-on ... failing to statically set first, the above code yields:\n\n$ ./gradlew build run\n\n> Task :run FAILED\nException in thread \"main\" java.lang.IllegalStateException: No configuration source has been set using ConfigFileLoader.setSource.\n        at org.apache.tomcat.util.file.ConfigFileLoader.getSource(ConfigFileLoader.java:40)\n        at org.apache.catalina.users.MemoryUserDatabase.open(MemoryUserDatabase.java:426)\n        at tomcat.embedded.test.Main.main(Main.java:10)\n\nFAILURE: Build failed with an exception.\n\nThe above code is the minimal, trivial example to demonstrate the change, but similar code will run e.g. when a MemoryUserDatabase is loaded with naming enabled, from a resources file.\n\nThis seems like a regression, since code working in 9.0.13 no longer works in 9.0.14.  Was it intentional to make the ConfigFileLoader static set mandatory for some parts of Tomcat, or is this a bug?\n\nThis was found when revving Tomcat test version in Gretty https://github.com/gretty-gradle-plugin/gretty - an integration test starts failing due to the above problem.  In Gretty we need to decide whether we will have for forcibly adopt ConfigFileLoader for latest Tomcat (only, no good prior to 9.0.13), or whether this can be fixed in Tomcat.\n\nRelated commit https://github.com/apache/tomcat/commit/4a86837bcb25b3c3812577c63213b12209a96e1a",
    "comments": [
      "The individual components of Tomcat are usually not tested at all out of Tomcat standalone or embedded, except when marked otherwise. However, the idea was not to break existing code with the introduction of ConfigurationSource. Aa a result, a default source will now be used in Tomcat 9.0.31+.\n\nThis will likely be revisited in Tomcat 10, and the code will likely either break as it does in 9.0.30, or cause a very visible log message.",
      "Thanks Remy.  So will the default config source in 9.0.31+ wrap any provided non-API file config ... so the above test would pass, finding the configured Users file to load?  If so that would be a good solution restoring compat with manual file configs.",
      "Yes, your code posted above will work again."
    ],
    "creation_ts": "2019-12-16T11:27:16Z",
    "fixes": [
      64006
    ]
  },
  {
    "id": 66627,
    "summary": "Regression due to MessageBytes refactoring",
    "description": "This commit, https://github.com/apache/tomcat/commit/10a1a6d46d952bab4dfde44c3c0de12b0330da79, that appeared in 9.0.71 made changes to MessageBytes.toString() that cause a serious regression under some circumstances. This is preventing us from upgrading to later Tomcat releases to pick up security fixes.\n\nIf the MessageByte object is of type T_BYTES or T_CHARS, it gets converted to type T_STR. Although there is nothing in the general contract of toString() that prohibits modifying the object, it's an unexpected side-effect. The JavaDoc for MessageBytes.getType() explicitly says it returns \"the type of the original content\", so the change breaks that contract.\n\nBut it's more serious than a mere disagreement with documentation. Some colleagues of mine were a few days ahead of me in investigating this problem (they were working with tomcat-embed-core and I was working woth Tomcat standalone). Most of this explanation is due to their research.\n\nIf something calls MessageBytes.toString(), fragile assumptions elsewhere can fall apart. For example, if you use a Java agent like OpenTelemetry, it intercepts every request in order to obtain the URL path for logging. CoyoteAdapter.postParseRequest() then makes a mistake because the MessageBytes object changed from type T_BYTES to type T_STR, and this assumption is no longer true:\n\n/*\n * The URI is chars or String, and has been sent using an in-memory protocol handler. The following\n * assumptions are made: - req.requestURI() has been set to the 'original' non-decoded, non-normalized\n * URI - req.decodedURI() has been set to the decoded, normalized form of req.requestURI()\n */\n\nThe downstream result of that is a 404 response for every URL path.\n\nExperimentally, I found that simply removing the type reassignment, as seen here, was enough to resolve the immediate issue. State tracking in the MessageBytes class is a bit complicated, and I have not looked carefully to see if this proposed fix has any undesired consequences.\n\n    /**\n     * Compute the string value.\n     * @return the string\n     */\n    @Override\n    public String toString() {\n        switch (type) {\n            case T_NULL:\n            case T_STR:\n                // No conversion required\n                break;\n            case T_BYTES:\n                //type = T_STR;\n                strValue = byteC.toString();\n                break;\n            case T_CHARS:\n                //type = T_STR;\n                strValue = charC.toString();\n                break;\n        }\n\n        return strValue;\n    }",
    "comments": [
      "The assumption in CoyoteAdater is still valid - assuming no-one is calling Tomcat internals. As soon as components start accessing Tomcat internals then all sorts of things can go wrong unless those components do so very carefully.\n\nOpen Telemetry fixed this 9 months ago:\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e526338fc3e0a172b74f0ced5b76cc47947bea88\n\nIt is a fair point about the change in behaviour of getType().\n\nNot changing the type on a conversion shouldn't have any functional impact but that needs checking and it might have performance impacts.",
      "I agree in general with the point about calling internals, but it is, after all, a documented API.\n\nThanks for the pointer about OpenTelemetry's fix. We'll pursue that.",
      "The API is also documented not to be stable. See the section on API stability in the RELEASE-NOTES.txt file that should be at the root of every Tomcat 9 distribution.\n\nThat said, I do plan to look at the feasibility of restoring the behaviour described in the getType() Javadoc.",
      "Fixed in:\n- 11.0.x for 11.0.0-M8 onwards\n- 10.1.x for 10.1.11 onwards\n-  9.0.x for  9.0.77 onwards\n-  8.5.x for  8.5.91 onwards",
      "Thanks for the quick turnaround, Mark!"
    ],
    "creation_ts": "2023-06-07T04:06:55Z",
    "fixes": [
      66627
    ]
  },
  {
    "id": 44494,
    "summary": "Requests greater than 8k being truncated.",
    "description": "After updating to Tomcat 5.5.26 from Tomcat 5.5.23 we appear to be having trouble with requests, that are greater than 8k, being truncated with the CoyoteRequest.getReader() method.\n\nThe following steps caused this issue to appear:\n1. I constructed a post request from a jsp page which exceeded 8k in size.\n2. In the corresponding servlet I call request.getReader() and pipe the returned BufferedReader into a string.\n3. Inspection of the string reveals that the content is  being truncated after 8k.\n4. If I replace the request.getReader() method call with request.getInputStream() no truncation occurs. Also, after reverting back to Tomcat 5.5.23 and using the request.getReader() method no truncation occurs.",
    "comments": [
      "Bug Confirmed - regression in 6.0.x as well.\n\nSEVERE: Servlet.service() for servlet jsp threw exception\njava.lang.ArrayIndexOutOfBoundsException: 8192\n\tat org.apache.tomcat.util.buf.CharChunk.substract(CharChunk.java:388)\n\tat org.apache.catalina.connector.InputBuffer.read(InputBuffer.java:368)\n\tat org.apache.catalina.connector.CoyoteReader.read(CoyoteReader.java:93)\n\tat org.apache.jsp.upload_jsp._jspService(upload_jsp.java:83)\n\tat org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:337)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)\n\tat org.apache.coyote.http11.Http11NioProcessor.process(Http11NioProcessor.java:879)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:719)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:2080)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)\n\tat java.lang.Thread.run(Thread.java:595)",
      "This has been fixed in the trunk, proposals to fix it in 6.0.x and 5.5.x have been added.",
      "URL to fix\nhttp://svn.apache.org/viewvc?view=rev&revision=631700",
      "In some cases, the Fix r631700 seems O.K.\nBut there are still some troubles. \n\n1. The truncation still occurs,\n   in the case of non default maxHttpHeaderSize values like \"49152\"\n2. The data is broken after BufferedReader's mark(large readAheadLimit) method\n   and reset() method are called, though the size is O.K.\n3. Garbage remains in the buffer of ReadConvertor that extends InputStreamReader,\n   when the broken data was POSTed or the application does not\n   read the data completely, especially with the multibyte characters. \n   The data of the next request will be broken.\n\nI applied r631700 to Tomcat6.0.16 and Tomcat5.5.26, and detected them. \n\nI attach patches.",
      "Created attachment 21683\npatch for trunk repository\n\nthis patch may fix some buffering bugs.\npatch for trunk repos. http://svn.apache.org/repos/asf/tomcat/trunk",
      "Created attachment 21684\npatch for tomcat6.x repository\n\nthis patch may fix some buffering bugs.\npatch for Tomcat6.x repos. http://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk",
      "Created attachment 21685\npatch for tomcat5.5\n\nthis patch may fix some buffering bugs.\npatch for Tomcat5.5 connector repos. http://svn.apache.org/repos/asf/tomcat/connectors/trunk",
      "Created attachment 21686\npatch for tomcat5.5\n\nthis patch may fix some buffering bugs.\npatch for Tomcat5.5 container repos. http://svn.apache.org/repos/asf/tomcat/container/tc5.5.x",
      "Although they may be not perfect possibly,\nI tested these patches on some patterns that includes above-mentioned.",
      "Not bad, but I have some problem believing that no longer using bb.getLength() as the value for limit (or not using IntermediateInputStream.available() inside convert, which is the same) doesn't cause any problems.",
      "I tested the patch on 5.5 and it didn't work, I will look deeper into it",
      "I also tested the trunk patch, and couldn't get it to work properly",
      "Just use the 6.0 branch for testing, no need to test all branches, the code is identical in all of them. The key difference I see is that the limit used in the loop is not the same, and you should probably be testing that.",
      "(In reply to comment #13)\n> Just use the 6.0 branch for testing, no need to test all branches, the code is\n> identical in all of them. The key difference I see is that the limit used in\n> the loop is not the same, and you should probably be testing that.\n> \n\ntrue, there is a question here, that could/would solve the problem\nwhy is Reader.markSupported() return true, isn't this misleading.\nif we are streaming a few megabytes of data, tomcat would have to cache all that data in order to support mark properly.\n\nmarkSupported()==false, would mean we don't need to support mark() and reset(), and IMHO corresponds more to the streaming implementation we have",
      "Remy and Filip, thank you for immediate checks. \n\nYes, the logic is same in all of them.\n\n(In reply to comment #11, #12)\n> I tested the patch on 5.5 and it didn't work, I will look deeper into it\n> I also tested the trunk patch, and couldn't get it to work properly\n\nI'm sorry, I might have made a mistake in something.\nI will check them more.\n\n(In reply to comment #14)\n> if we are streaming a few megabytes of data, tomcat would have to cache all\n> that data in order to support mark properly.\n\nIf it says more in detail,\nTomcat would have to cache data only after the mark() method calling, and\nTomcat would have to cache characters up to only the size\nthat the application specified with the method.\n\nOf course, we can choose to support these methods or not to support.\nI think it's wonderful if Tomcat can support that.\nAnd I'm believing that the implementation of Tomcat has enough possibility.",
      "(In reply to comment #10)\n\n> Not bad, but I have some problem believing that no longer using bb.getLength()\n> as the value for limit (or not using IntermediateInputStream.available() inside\n> convert, which is the same) doesn't cause any problems.\n\nIs your problem solved by followings?\n\nbc.getLength() is called // bc in IntermediateInputStream means bb.\nat IntermediateInputStream.available()\nat StreamDecoder$CharsetSD.inReady()\nat StreamDecoder$CharsetSD.implRead(char[], int, int)\nat StreamDecoder$CharsetSD(StreamDecoder).read(char[], int, int)\nat ReadConvertor(InputStreamReader).read(char[], int, int)\nat ReadConvertor.read(char[], int, int)\nat B2CConverter.convert(CharChunk, int)\nat B2CConverter.convert(ByteChunk, CharChunk, int)\nat B2CConverter.convert(ByteChunk, CharChunk, int)\nat InputBuffer.realReadChars(char[], int, int)\nat CharChunk.substract(char[], int, int)\nat InputBuffer.read(char[], int, int)\nat CoyoteReader.read\n\nI saw that with debugger.\n\nAnd, IntermediateInputStream.read ( means bb.subStruct() )\nwill return -1 if the requested byte stream is in the end.\n\nAs one of the possibilities that the problem occurs,\nthe ReadConvertor object that extends InputStreamReader\nis recycled and reused after the underlying input stream returns -1,\nthough it works with no trouble in my environment.\n\nIf it is not guaranteed, we might have to create a new ReadConvertor object\nat each request without recycling used object.",
      "(In reply to comment #15)\n> Remy and Filip, thank you for immediate checks. \n> \n> Yes, the logic is same in all of them.\n> \n> (In reply to comment #11, #12)\n> > I tested the patch on 5.5 and it didn't work, I will look deeper into it\n> > I also tested the trunk patch, and couldn't get it to work properly\n> \n> I'm sorry, I might have made a mistake in something.\n> I will check them more.\n> \n> (In reply to comment #14)\n> > if we are streaming a few megabytes of data, tomcat would have to cache all\n> > that data in order to support mark properly.\n> \n> If it says more in detail,\n> Tomcat would have to cache data only after the mark() method calling, and\n> Tomcat would have to cache characters up to only the size\n> that the application specified with the method.\nyes, only after mark has been called, but if you set a readAheadLimit of 10MB, one has to cache that.\n> \n> Of course, we can choose to support these methods or not to support.\n> I think it's wonderful if Tomcat can support that.\n\nyes, it's not a question about supporting or not supporting, it's where in the code you support that. with the bytechunk/charchunk the byte arrays referenced left and right, it makes it so much harder. I'll create a little POC to show how simpl it it is\n> And I'm believing that the implementation of Tomcat has enough possibility.\n> \n\ngoes against the KISS principle :)",
      "I posted to the dev lists about this, basically, one can just take advantage of java.io.BufferedReader to do the caching\n\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletRequest req = (HttpServletRequest)request;\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(req) {\n            BufferedReader reader = null;\n            public BufferedReader getReader() throws IOException {\n                if (reader==null) {\n                    BufferedReader bf = super.getReader();\n                    reader = new BufferedReader(bf);\n                }\n                return reader;\n            }\n        };\n        chain.doFilter(req, response);\n    }",
      "Did you really need to get three emails posted on the mailing list to express this idea ?\n\nPersonally, I would be interested to know exactly which cases are not working at the moment after applying:\n  Index: java/org/apache/catalina/connector/InputBuffer.java\n===================================================================\n--- java/org/apache/catalina/connector/InputBuffer.java\t(revision 633279)\n+++ java/org/apache/catalina/connector/InputBuffer.java\t(working copy)\n@@ -355,7 +355,7 @@\n         }\n \n         state = CHAR_STATE;\n-        conv.convert(bb, cb, len);\n+        conv.convert(bb, cb, bb.getLength());\n         bb.setOffset(bb.getEnd());\n \n         return cb.getLength();\n\nThis includes no mark usage and with marks (which can probably be tested using readLine).Could I get some test cases ?",
      "Created attachment 21700\ntest case for Reader buffering\n\nwar for the test",
      "(In reply to comment #16)\n\nI tested some cases with http://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk\nat r639909 (that includes 639891) of course without my patch.\n\nI attached a WAR,\nthat is not a practicable application, but for test.\n\nIt includes multibyte UTF-8 characters,\nI'm worry about it might not work correctly in your environment.\n\n/index.jsp : using 3 bytes characters\n\n\nThe results I tested:\n read(): expected 24587\n    Sometimes, more/less length occurs.\n read(char[1]): expected 8203\n    Sometimes, more/less length occurs.\n readLine(): expected 8203\n    Sometimes, more/less length occurs,\n    or sometimes following exception occurs.\n\n java.io.IOException\n  at org.apache.catalina.connector.InputBuffer.reset(InputBuffer.java:456)\n  at org.apache.catalina.connector.CoyoteReader.reset(CoyoteReader.java:134)\n  at org.apache.catalina.connector.CoyoteReader.readLine(CoyoteReader.java:191)\n  at org.apache.jsp.readLine_jsp._jspService(readLine_jsp.java:60)\n ...\n\nThat's very rare when the browser is on the same machine with tomcat.\nBut if the browser is on another machine that occurs more easily. \n\nI just guess those behavior may depend on the internal buffer state\nand the buffer of SocketInputStream might be related.\n(the next data arrived or not?)\n\n\nThese tests are passed with my patch in my environment.\nDoes the attached patch (at least for tomcat6.x) not work?\n\n\n(In reply to comment #18)\nI have not tried yet. \nI think it is needed at least that the read(char[], int, int) method of\nunderlying-wrapped BufferedReader work correctly.\nWhich revision is suitable for the Filter?\n\nAll of Tomcat6.0.16, Tomcat6.0.16+r631700(see Comment #4 1.),\nand r639891(above-mentioned) seems working incorrectly.\nAre they problems of my environment?",
      "Created attachment 21705\nNew test application that can check the contents of requested body\n\nThe attached WAR on Comment #20 works only with current IE.\nThis new one works with IE7, FireFox, and Netscape7.1\nand this one can check whether the contents of the requested body are appropriate or not, too.",
      "Ok, first of all thanks a lot for the test case (I wouldn't be able to write a good multibyte test to save my life).\n\nAs with the original bug, the problem is with the limit being incorrect (reading too much causes causes the ByteBuffer to refill itself magically, while the calling code still hasn't seen anything back). In the loop, the limit int represents bytes, but is decremented with the amount of chars read (which works with single byte charsets, obviously ...).\n\nThe new loop would be (replacing the old convert method):\n\n    public void convert(ByteChunk bb, CharChunk cb, int limit)\n    throws IOException {\n        iis.setByteChunk(bb);\n        try {\n            // read from the reader\n            int l = 0;\n            while( limit > 0 ) { // conv.ready() ) {\n                int size = limit < BUFFER_SIZE ? limit : BUFFER_SIZE;\n                l = bb.getLength();\n                int cnt=conv.read( result, 0, size );\n                if( cnt <= 0 ) {\n                    // End of stream ! - we may be in a bad state\n                    if( debug>0)\n                        log( \"EOF\" );\n                    //\t\t    reset();\n                    return;\n                }\n                if( debug > 1 )\n                    log(\"Converted: \" + new String( result, 0, cnt ));\n\n                cb.setLimit(cb.getStart() + cnt);\n                cb.append( result, 0, cnt );\n                limit = limit - (l - bb.getLength());\n            }\n        } catch( IOException ex) {\n            if( debug>0)\n                log( \"Reseting the converter \" + ex.toString() );\n            reset();\n            throw ex;\n        }\n    }",
      "when I ran the test:\n\nit fails consistently with tomcat/6.0.x/trunk\n\nafter updating tomcat/trunk to the latest(same fix as in 6.0.x)it also fails consistently.\n\nIf I revert to revision 640451 in tomcat/trunk, the test seems to work fine\n\n\nHow do I make this error happen and how do I spot the error?\nDo I need to configure any buffer sizes?\n\nFilip",
      "The first step is to reproduce the problem (which is easy for me with TC 6.0 trunk and the latest version of the test case). After fixing the update of the limit (because substracting cnt is obviously wrong if limit is inited to bb.length()), then my traces in no longer misbehave and I haven't been able to reproduce any problem. This makes perfect sense to me since with 1 byte charsets (such as regular ascii) cnt is equal to the amount of bytes consumed, and character input was working fine for me after applying my one line fix.",
      "(In reply to comment #23)\n\n> cb.setLimit(cb.getStart() + cnt);\n> cb.append( result, 0, cnt );\n\ncb.append() doesn't modify cb.start\nand cb.start is set zero by InputBuffer#realReadChars if markPos == -1.\nSo \"cb.getStart() + cnt\" is same to or less than bb.length(),\nand it will be bb.length()/3 if all characters are 3 bytes.\n(the surplus bytes may exist in the buffer of ReadConvertor)\n\nThis will break the buffer of CharChunk.\n\nIf \"cb.getEnd() + cnt\" is used as alternative,\nit will overwrite the limit that is set by CoyoteReader#mark method.\nI guess that may cause another problem.\n(though mark/reset methods have not worked correctly before that)\n\nYuichiro",
      "Created attachment 21717\nWAR includes other test cases\n\nAll of the test cases described in comment #4 is covered, if no bugs are in this WAR. \nFor the case 1, define maxHttpHeaderSize=\"xxxxx\" as the attribute of Connector tag in server.xml",
      "(In reply to comment #26)\n> > cb.setLimit(cb.getStart() + cnt);\n> > cb.append( result, 0, cnt );\n> \n> cb.append() doesn't modify cb.start\n> and cb.start is set zero by InputBuffer#realReadChars if markPos == -1.\n> So \"cb.getStart() + cnt\" is same to or less than bb.length(),\n> and it will be bb.length()/3 if all characters are 3 bytes.\n> (the surplus bytes may exist in the buffer of ReadConvertor)\n\nThat's not the fix, that's something bad that I left in (the purpose was to make sure that cnt could be appended, so it should be getEnd + cnt, if getEnd + cnt > getLimit). I do not see why changing the limit to something greater could cause problems with marking.\n\nAs far as I am concerned, this bug is fixed. If you think it's not, feel free to spend time on it and propose alternate fixes.",
      "I have tested Remy's patch (less the one bad line) and it does fix the various multi-byte read test cases.\n\nThe patch has been applied to trunk and proposed for 6.0.x and 5.5.x.\n\nmark/reset is still broken.",
      "The multi-byte read patch has been applied to 6.0.x and will be in the next release.",
      "I found a problem with the buffer resizing in conjunction with mark/reset.\n\nIndex: java/org/apache/tomcat/util/buf/CharChunk.java\n===================================================================\n--- java/org/apache/tomcat/util/buf/CharChunk.java\t(revision 645466)\n+++ java/org/apache/tomcat/util/buf/CharChunk.java\t(working copy)\n@@ -480,7 +480,7 @@\n \t    tmp=new char[newSize];\n \t}\n \t\n-\tSystem.arraycopy(buff, start, tmp, start, end-start);\n+\tSystem.arraycopy(buff, 0, tmp, 0, end);\n \tbuff = tmp;\n \ttmp = null;\n     }\n\nAlternately, a buffered reader could be used (since the decoding code is now fixed, there should be no problem).",
      "The mark/reset test case still fails. I'm looking into it but it is taking me time to figure out exactly where the error is.",
      "I have a fix for this now. Thsi fix and Remy's fix above have been proposed for 6.0.x and 5.5.x",
      "I tested recent trunk and also 6.x with the latest STATUS file patches for this issue applied.\n\nWhen we change maxHttpHeaderSize from the default to something bigger, we still have a problem with POST bodies bigger than 8K. Using smaller maxHttpHedaerSize than the default 8KB seems to be no problem, bigger sizes like 16KB or 48KB show the problem.\n\nWe simply use a text file of some size between 16KB and 64KB, send it via POST using e.g. \"curl --data-binary @FILE\" or \"ab -p FILE\" and try to read via a simple JSP:\n\n<html>\nSize: <%= request.getContentLength() %><br>\n<%\nout.println(\"Start reading<br>\");\ntry {\n    String line = null;\n    int n = 0;\n    int m = 0;\n    java.io.BufferedReader br = request.getReader();\n    while ((line = br.readLine()) != null) {\n        n=n+1;\n        m=m+line.length()+1;\n        out.println(line);\n    }\n    out.println(\"Nothing more available, lines=\" + n + \", bytes=\" + m);\n} catch(Exception ex) {\n    out.println(ex);ex.printStackTrace();\n}\nout.println(\"<br>Done\");\n%>\n</html>\n\nIt's primitive and the byte count shown below is wrong if the file has DOS line endings, but the failure is shown clearly, because when truncation appears, you'll be shown less than 8KB of data.",
      "You've got to be able to reproduce this using the test webapp provided in this report (the line length is configurable, and there's a readLine test). I don't like a test using ab.",
      "I'll try that.\n\nFor the sake of completeness, here's the exception stack:\n\njava.io.IOException\n        at org.apache.catalina.connector.InputBuffer.reset(InputBuffer.java:475)\n        at org.apache.catalina.connector.CoyoteReader.reset(CoyoteReader.java:134)\n        at org.apache.catalina.connector.CoyoteReader.readLine(CoyoteReader.java:191)\n        at org.apache.jsp.maxpost_jsp._jspService(maxpost_jsp.java:65)\n        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:369)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:337)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:568)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)\n        at java.lang.Thread.run(Thread.java:595)\n\nThe same test (curl/ab) works for 6.0.14 and for default maxHttpHeaderSize. Will report about the war soon.",
      "Using the war and maxHttpHeaderSize=\"16384\" I did the following test case:\n\n   Characters size: 17000_______________\n   Use MultiByte Character: ( ) yes (*) no\n     _____________________________________________________________________________________________________________\n\n   [test case:]\n   (*) only read [readLine()/read()/read(char[1])]\n   ( ) garbage in buffer\n     * real read size: 4096________________\n\n   ( ) mark/reset\n     * read size before mark(): 0___________________\n     * readAheadLimit size: 8192________________\n     * read size after mark()/before reset(): 8192________________\n     _____________________________________________________________________________________________________________\n\n   submit\n     _____________________________________________________________________________________________________________\n\n\nAnd on the next page I choose the first send (#readLine test):\n\n   request#getReader()#readLine test\n   abcdefghijklmnopqrst send\n   request#getReader()#read() test\n   abcdefghijklmnopqrst send\n   request#getReader()#read(char[1]) test\n   abcdefghijklmnopqrst send\n\nThe result is:\n\nrequest#getReader test.\n\n   readLine.jsp is called.\n     _____________________________________________________________________________________________________________\n\n   Content-Type:multipart/form-data; boundary=xnyLAaB03X\n   Character Encoding:UTF-8\n   Content-Length:17115\n   expected:17076\n   real read:4827\n   isSame:false",
      "Since most people are deeper in the code than I, here's what i get if I instrument o.a.c.connector.InputBuffer with a couple of log statements and post the file with increased maxHttpHeaderSize. So markPos get set to -1 in realWriteChars:\n\n10.04.2008 20:25:17 org.apache.catalina.connector.InputBuffer mark\nINFO: Set markPos in mark from -1 to 0\n10.04.2008 20:25:17 org.apache.catalina.connector.InputBuffer realReadChars\nINFO: Found markPos in realReadChars 0\n10.04.2008 20:25:17 org.apache.catalina.connector.InputBuffer realWriteChars\nINFO: Reset markPos in realWriteChars from 0 to -1\n10.04.2008 20:25:17 org.apache.catalina.connector.InputBuffer reset\nINFO: Found =-1 in reset for CHAR_STATE\n10.04.2008 20:25:17 org.apache.catalina.connector.InputBuffer reset\nINFO: Reset markPos in reset/CHAR_STATE to -1\njava.io.IOException: markPos=-1",
      "And the stack in realWriteChars is:\n\n        at org.apache.catalina.connector.InputBuffer.realWriteChars(InputBuffer.\njava:335)\n        at org.apache.tomcat.util.buf.CharChunk.flushBuffer(CharChunk.java:440)\n        at org.apache.tomcat.util.buf.CharChunk.append(CharChunk.java:295)\n        at org.apache.tomcat.util.buf.B2CConverter.convert(B2CConverter.java:100\n)\n        at org.apache.catalina.connector.InputBuffer.realReadChars(InputBuffer.j\nava:371)\n        at org.apache.tomcat.util.buf.CharChunk.substract(CharChunk.java:416)\n        at org.apache.catalina.connector.InputBuffer.read(InputBuffer.java:405)\n        at org.apache.catalina.connector.CoyoteReader.read(CoyoteReader.java:105\n)\n        at org.apache.catalina.connector.CoyoteReader.readLine(CoyoteReader.java\n:154)\n        at org.apache.jsp.maxpost_jsp._jspService(maxpost_jsp.java:64)\n        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper\n.java:369)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:3\n37)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(Appl\nicationFilterChain.java:290)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationF\nilterChain.java:206)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperV\nalve.java:233)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextV\nalve.java:175)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.j\nava:128)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.j\nava:102)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineVal\nve.java:109)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.jav\na:286)\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java\n:844)\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.proce\nss(Http11Protocol.java:583)\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:44\n7)\n        at java.lang.Thread.run(Thread.java:595)",
      "I think I might have found the problem,\n\nI've been unable to reproduce the error using the NIO/APR (APR below) connector with setting\n    <Connector port=\"8080\" \n               protocol=\"org.apache.coyote.http11.Http11NioProtocol\" \n               connectionTimeout=\"20000\" \n               redirectPort=\"8443\" \n               maxHttpHeaderSize=\"16384\" \n               maxKeepAliveRequests=\"100\"/>\n\n\nI reproduce the error everytime using the regular connector\n    <Connector port=\"8081\" \n               protocol=\"org.apache.coyote.http11.Http11Protocol\" \n               connectionTimeout=\"20000\" \n               redirectPort=\"8443\" \n               maxHttpHeaderSize=\"16384\" \n               maxKeepAliveRequests=\"100\"/>\n\nand I am unable to reproduce it using the APR connector\n    <Connector port=\"8082\" \n               protocol=\"org.apache.coyote.http11.Http11AprProtocol\" \n               connectionTimeout=\"20000\" \n               redirectPort=\"8443\" \n               maxHttpHeaderSize=\"16384\" \n               maxKeepAliveRequests=\"100\"/>\n\nso I started debugging it, \nThe problem is in org.apache.tomcat.util.CharChunk\nin two subsequent reads, where the inputbuffer is 16384, it tries to use the CharChunk to store all the data. The reason it works with the APR/NIO connector is cause those connectors never pull out more than 8192 bytes from the socket buffer. \n\nhowever, the regular BIO connector will read as much as it can, and then the B2CConverter tries to append the character array to the CharChunk,\nbut the CharChunk refuses to grow beyond the limit.\n\nThe fix is simple\nIndex: java/org/apache/tomcat/util/buf/CharChunk.java\n===================================================================\n--- java/org/apache/tomcat/util/buf/CharChunk.java      (revision 646950)\n+++ java/org/apache/tomcat/util/buf/CharChunk.java      (working copy)\n@@ -454,7 +454,8 @@\n        // Can't grow above the limit\n        if( limit > 0 &&\n            desiredSize > limit) {\n-           desiredSize=limit;\n+           limit = desiredSize;\n+           //desiredSize=limit;\n        }\n\n        if( buff==null ) {\n\nhowever, we could probably shrink the CharChunk back on a recycle, but it wont grow beyond maxHttpHeaderSize, so I am not sure we need to",
      "Hi Filip,\n\nI didn't yet read your comment, because we both worked in parallel (mid-air collission). I'm posting my finding nevertheless, so we can look for the best solution.\n\nThis gets funny: while looking at the code I realized, that the 5.5.x/6.0.x patch that introduced the problem (r569969 resp. r572498) actually removed 3 lines of code, that I added in r371804 (resp. Bill added my patch).\n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=38346\n\nIf I add those lines back, then I can not reproduce the problem with or without maxHttpHeaderSize. I tried my POST test and also tried some fo the numerous possibilities with the test war. So I think the following patch for trunk is worth some tests:\n\nhttp://people.apache.org/~rjung/patches/maxhttpheadersize.patch",
      "If we don't want the simple fix of growing the CharChunk, (since CharChunk will always be <=maxHttpHeaderSize, a character is at least one byte)\n\nthen the code would have to back out during the conversion, but I think it's not worth the time, this code is fragile, and has proven to break easily during larger fixes and refactoring of APIs.",
      "hi Rainer, both patches do the exact same thing, one explicit one implicit, I'd vote +1 for either or\n\nFilip",
      "Next mid-air, BZ is obviously not IM :)\n\nWhen I use the test war, the garbage test still seems to fail, even with\ndefault maxHttpHeaderSize. The behaviour is the same with my patch, with\nFilip's, with both of them applied and with unchanged trunk.\n\nIt might be, that I don't understand how to use this test case. I choose the\ngarbage radio button with default values, submit and the choose send. The\nresulting page says \"correct:true\", but then asks me to Retry the request. If I\ndo that, I get a correct:false.",
      "Hi,\n\nThe behavior of the test case with default values is as follows. \n\n1. It posts 8192 multibytes characters.\n2. The posted data is read up to 4096 characters.\n   (And other information like the multipart-boundary characters\n    and the Content-Disposition is read, too)\n3. It checks whether the read data is correct or not.\n4. They are repeated by retrying.\n\nIf \"correct:false\" is output by retrying,\nperhaps there were garbage bytes of the multibyte character\nin the buffer of the ReadConvertor object, after the previous request.\n\nWhen the end of the read byte sequence is not complete\nas the multibyte character, InputStreamReader seems to keep imperfect byte\nsequence internally until the under-lying stream returns -1. \n\nAnd the imperfect byte sequence will be used as the start bytes\nof the next request.\n\nPlease see the recycle method part of the attached patch.\n\nYuichiro",
      "OK. That light up ahead might actually be the end of the tunnel rather than yet another train.\n\nI believe that all necessary patches to fix all issues identified by the test case have been:\n- applied to trunk\n- proposed for 6.0.x\n- proposed for 5.5.x\n\nPlease comment here if you think something has been missed.\n\nMany thanks to Suzuki Yuichiro whose test case has proved invaluable in fixing this issue.",
      "I tried current 6.0.x. It looks working fine at all test cases.\nThank you very much for the fix.\n\nBut there is a few comments.\n1. readAheadLimit value that specified by the mark method has no meanings.\n   After the mark method is called once, tomcat seems to buffer all of the body.\n   The JavaDoc of BufferedReader allows tomcat to use arbitrary size\n   (over readAheadLimit) buffer, but that may cause OutOfMemory\n   however the application developer specified a moderate size for readAheadLimit.\n\n2. At the recycle phase, ReadConverter convert all byte sequence\n   that was not read by application,  but the converted character sequence\n   is not used.\n   In recycling, it's more efficient that the under-lying input stream\n   returns -1 immediately. (Though it might not be the most efficient solution.)\n\nThey may be not bugs, but improvement level.\n\nBest Regards.",
      "Created attachment 21832\npatch that make readAheadLimit value effective\n\npatch for tomcat6.0.x\n\nThis will make the readAheadLimit value effective.",
      "Oops, I forgot to reset InputBuffer.readAheadLimit in the recycle method\nof the patch, though the result may be O.K. with or without it.\nIf you use the patch, please add it for the better code.",
      "Created attachment 21872\nPatch for TC 5.5 Part 1 - connectors (CharChunk, B2CConverter)\n\nBackport of patches applied to TC 6.0 for fixing BZ 44494.",
      "Created attachment 21873\n Patch for TC 5.5 Part 2 - container (InputBuffer)   \n\nBackport of patches applied to TC 6.0 for fixing BZ 44494.",
      "I ported the patches for 44494 applied until now to TC 6.0 back to TC 5.5.\n\nI reviewed all differences for the classes in o.a.tomcat.util.buf and o.a.c.connector for any side effects, since the classes drifted further apart between TC 5.5 and TC 6.0 than necessary. Some cleanups have been done in the older branch 5.5 and not in the newer ones.\n\nThe patch looks good to me (w.r.t. the test war attached here).\n\nAs soon as svn will be back to read/write, I'll add the patches to the TC 5.5 STATUS file.\n\nFurther tests and comments welcome. The patched classes are compatible with 5.5 trunk and 5.5.26.",
      "Since this bug effectively means tomcat 6.0.16 is unable to reliably handle requests, perhaps it should be publicised more widely, and the 6.0.16 release pulled (or replaced with 6.0.16.1)?",
      "I hate to make a post like this but as it has not been decided, is there a plan for releasing this as it has caught a number of teams off guard? I agree with the poster from 53 that this is a major issue as requests can't be trusted. Please update the homepage with this issue and pull 6.0.16 and 5.5.26 from public release at the very least.\n\nThanks for the fix and I look forward to the changed release.\n\n(In reply to comment #53)\n> Since this bug effectively means tomcat 6.0.16 is unable to reliably handle\n> requests, perhaps it should be publicised more widely, and the 6.0.16 release\n> pulled (or replaced with 6.0.16.1)?\n>",
      "*** Bug 45350 has been marked as a duplicate of this bug. ***",
      "*** Bug 45349 has been marked as a duplicate of this bug. ***",
      "This has now been fixed in 5.5.x and will be included in 5.5.27 onwards.",
      "Just for the record, the 5.5.x fixes to the connector module were sufficient to fix this issue for 4.1.x as well.",
      "*** Bug 45215 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2008-02-26T19:47:31Z",
    "fixes": [
      44494
    ]
  },
  {
    "id": 69690,
    "summary": "allowsto plug in some ProgressListener on multipart file upload processing",
    "description": "On \n\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=69689\n\nWas stated that current implementation of multipart processing is correct and matching specification. I still do not see how other frameworks could in a bullets prof way get access to the getInputStream before anyone else calls getParameter.\n\nI also see that FileUpload class allows to plug some ProgressListener... But there is no way to plug such a listener in requests.",
    "comments": [
      "See\n\nhttps://github.com/apache/tomcat/pull/856",
      "Fixed in:\n- 11.0.x for 11.0.8 onwards",
      "Hi\n\nHow was this fixed?",
      "Ok. I saw commit... Many thanks!"
    ],
    "creation_ts": "2025-05-14T18:42:37Z",
    "fixes": [
      69690
    ]
  },
  {
    "id": 43839,
    "summary": "I think the implement is difference with the document in function CoyoteAdapter.postParseRequest",
    "description": "Hello,\nI think the document for context\n\"http://tomcat.apache.org/tomcat-6.0-doc/config/context.html\" describe\nthe configuration item \"cookies\" difference the implement.\nPlease think this case.\n1. In the same computer I start two tomcat, one is linsten 80, other\nlinsten 8080.\n2. The tomcat bind at 80, it set the cookies to true.\n3. The tomcat bind at 8080, it set the cookies to false. It will use the\nURL rewrite to post the jsessionid.\n4. First time I access the 80, it will return the JSESSIONID in cookie.\n5. Don't close the IE, the access with the 8080 without URL rewrite.\nWhat will happen. The tomcat linsten 8080 will use the jsession id of\n80. It very strange.\nSo I modify the source code for file.\n\"apache-tomcat-6.0.14-src\\java\\org\\apache\\catalina\\connector\\CoyoteAdapter.java\".\nChange the code at line 472 from\nparseSessionCookiesId(req, request);\nto\nif (((Context)request.getMappingData().context).getCookies())\nparseSessionCookiesId(req, request);\n\nIf I modify it in wrong way, I want to know how to resoluate the case\nthat I list previous. Please tell me why the praseSessionCookiesId don't\ncare about the configuration item \"cookies\" in \"Context\".\nThanks.\nMars Engle\n\n\n\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage org.apache.catalina.connector;\n\nimport java.io.IOException;\n\nimport org.apache.catalina.CometEvent;\nimport org.apache.catalina.Context;\nimport org.apache.catalina.Globals;\nimport org.apache.catalina.Wrapper;\nimport org.apache.catalina.util.StringManager;\nimport org.apache.coyote.ActionCode;\nimport org.apache.coyote.Adapter;\nimport org.apache.juli.logging.Log;\nimport org.apache.juli.logging.LogFactory;\nimport org.apache.tomcat.util.buf.B2CConverter;\nimport org.apache.tomcat.util.buf.ByteChunk;\nimport org.apache.tomcat.util.buf.CharChunk;\nimport org.apache.tomcat.util.buf.MessageBytes;\nimport org.apache.tomcat.util.http.Cookies;\nimport org.apache.tomcat.util.http.ServerCookie;\nimport org.apache.tomcat.util.net.SocketStatus;\n\n/**\n * Implementation of a request processor which delegates the processing to a\n * Coyote processor.\n *\n * @author Craig R. McClanahan\n * @author Remy Maucherat\n * @version $Revision: 555304 $ $Date: 2007-07-11 17:28:52 +0200 (mer., 11 juil.\n2007) $\n */\n\npublic class CoyoteAdapter\n    implements Adapter \n {\n    private static Log log = LogFactory.getLog(CoyoteAdapter.class);\n\n    // -------------------------------------------------------------- Constants\n\n\n    public static final int ADAPTER_NOTES = 1;\n\n\n    protected static final boolean ALLOW_BACKSLASH = \n       \nBoolean.valueOf(System.getProperty(\"org.apache.catalina.connector.CoyoteAdapter.ALLOW_BACKSLASH\",\n\"false\")).booleanValue();\n\n\n    // ----------------------------------------------------------- Constructors\n\n\n    /**\n     * Construct a new CoyoteProcessor associated with the specified connector.\n     *\n     * @param connector CoyoteConnector that owns this processor\n     */\n    public CoyoteAdapter(Connector connector) {\n\n        super();\n        this.connector = connector;\n\n    }\n\n\n    // ----------------------------------------------------- Instance Variables\n\n\n    /**\n     * The CoyoteConnector with which this processor is associated.\n     */\n    private Connector connector = null;\n\n\n    /**\n     * The match string for identifying a session ID parameter.\n     */\n    private static final String match =\n        \";\" + Globals.SESSION_PARAMETER_NAME + \"=\";\n\n\n    /**\n     * The string manager for this package.\n     */\n    protected StringManager sm =\n        StringManager.getManager(Constants.Package);\n\n\n    // -------------------------------------------------------- Adapter Methods\n\n    \n    /**\n     * Event method.\n     * \n     * @return false to indicate an error, expected or not\n     */\n    public boolean event(org.apache.coyote.Request req, \n            org.apache.coyote.Response res, SocketStatus status) {\n\n        Request request = (Request) req.getNote(ADAPTER_NOTES);\n        Response response = (Response) res.getNote(ADAPTER_NOTES);\n\n        if (request.getWrapper() != null) {\n            \n            boolean error = false;\n            boolean read = false;\n            try {\n                if (status == SocketStatus.OPEN) {\n                    if (response.isClosed()) {\n                        // The event has been closed asynchronously, so call end\ninstead of\n                        // read to cleanup the pipeline\n                        request.getEvent().setEventType(CometEvent.EventType.END);\n                        request.getEvent().setEventSubType(null);\n                    } else {\n                        try {\n                            // Fill the read buffer of the servlet layer\n                            if (request.read()) {\n                                read = true;\n                            }\n                        } catch (IOException e) {\n                            error = true;\n                        }\n                        if (read) {\n                           \nrequest.getEvent().setEventType(CometEvent.EventType.READ);\n                            request.getEvent().setEventSubType(null);\n                        } else if (error) {\n                           \nrequest.getEvent().setEventType(CometEvent.EventType.ERROR);\n                           \nrequest.getEvent().setEventSubType(CometEvent.EventSubType.CLIENT_DISCONNECT);\n                        } else {\n                           \nrequest.getEvent().setEventType(CometEvent.EventType.END);\n                            request.getEvent().setEventSubType(null);\n                        }\n                    }\n                } else if (status == SocketStatus.DISCONNECT) {\n                    request.getEvent().setEventType(CometEvent.EventType.ERROR);\n                   \nrequest.getEvent().setEventSubType(CometEvent.EventSubType.CLIENT_DISCONNECT);\n                    error = true;\n                } else if (status == SocketStatus.ERROR) {\n                    request.getEvent().setEventType(CometEvent.EventType.ERROR);\n                   \nrequest.getEvent().setEventSubType(CometEvent.EventSubType.IOEXCEPTION);\n                    error = true;\n                } else if (status == SocketStatus.STOP) {\n                    request.getEvent().setEventType(CometEvent.EventType.END);\n                   \nrequest.getEvent().setEventSubType(CometEvent.EventSubType.SERVER_SHUTDOWN);\n                } else if (status == SocketStatus.TIMEOUT) {\n                    if (response.isClosed()) {\n                        // The event has been closed asynchronously, so call end\ninstead of\n                        // read to cleanup the pipeline\n                        request.getEvent().setEventType(CometEvent.EventType.END);\n                        request.getEvent().setEventSubType(null);\n                    } else {\n                        request.getEvent().setEventType(CometEvent.EventType.ERROR);\n                       \nrequest.getEvent().setEventSubType(CometEvent.EventSubType.TIMEOUT);\n                    }\n                }\n\n               \nreq.getRequestProcessor().setWorkerThreadName(Thread.currentThread().getName());\n                \n                // Calling the container\n                connector.getContainer().getPipeline().getFirst().event(request,\nresponse, request.getEvent());\n\n                if (!error && !response.isClosed() &&\n(request.getAttribute(Globals.EXCEPTION_ATTR) != null)) {\n                    // An unexpected exception occurred while processing the\nevent, so\n                    // error should be called\n                    request.getEvent().setEventType(CometEvent.EventType.ERROR);\n                    request.getEvent().setEventSubType(null);\n                    error = true;\n                   \nconnector.getContainer().getPipeline().getFirst().event(request, response,\nrequest.getEvent());\n                }\n                if (response.isClosed() || !request.isComet()) {\n                    res.action(ActionCode.ACTION_COMET_END, null);\n                } else if (!error && read && request.getAvailable()) {\n                    // If this was a read and not all bytes have been read, or\nif no data\n                    // was read from the connector, then it is an error\n                    request.getEvent().setEventType(CometEvent.EventType.ERROR);\n                   \nrequest.getEvent().setEventSubType(CometEvent.EventSubType.IOEXCEPTION);\n                    error = true;\n                   \nconnector.getContainer().getPipeline().getFirst().event(request, response,\nrequest.getEvent());\n                }\n                return (!error);\n            } catch (Throwable t) {\n                if (!(t instanceof IOException)) {\n                    log.error(sm.getString(\"coyoteAdapter.service\"), t);\n                }\n                error = true;\n                return false;\n            } finally {\n                req.getRequestProcessor().setWorkerThreadName(null);\n                // Recycle the wrapper request and response\n                if (error || response.isClosed() || !request.isComet()) {\n                    request.recycle();\n                    request.setFilterChain(null);\n                    response.recycle();\n                }\n            }\n            \n        } else {\n            return false;\n        }\n    }\n    \n\n    /**\n     * Service method.\n     */\n    public void service(org.apache.coyote.Request req, \n    \t                org.apache.coyote.Response res)\n        throws Exception {\n\n        Request request = (Request) req.getNote(ADAPTER_NOTES);\n        Response response = (Response) res.getNote(ADAPTER_NOTES);\n\n        if (request == null) {\n\n            // Create objects\n            request = (Request) connector.createRequest();\n            request.setCoyoteRequest(req);\n            response = (Response) connector.createResponse();\n            response.setCoyoteResponse(res);\n\n            // Link objects\n            request.setResponse(response);\n            response.setRequest(request);\n\n            // Set as notes\n            req.setNote(ADAPTER_NOTES, request);\n            res.setNote(ADAPTER_NOTES, response);\n\n            // Set query string encoding\n            req.getParameters().setQueryStringEncoding\n                (connector.getURIEncoding());\n\n        }\n\n        if (connector.getXpoweredBy()) {\n            response.addHeader(\"X-Powered-By\", \"Servlet/2.5\");\n        }\n\n        boolean comet = false;\n        \n        try {\n\n            // Parse and set Catalina and configuration specific \n            // request parameters\n           \nreq.getRequestProcessor().setWorkerThreadName(Thread.currentThread().getName());\n            if (postParseRequest(req, request, res, response)) {\n                // Calling the container\n               \nconnector.getContainer().getPipeline().getFirst().invoke(request, response);\n\n                if (request.isComet()) {\n                    if (!response.isClosed() && !response.isError()) {\n                        if (request.getAvailable()) {\n                            // Invoke a read event right away if there are\navailable bytes\n                            if (event(req, res, SocketStatus.OPEN)) {\n                                comet = true;\n                                res.action(ActionCode.ACTION_COMET_BEGIN, null);\n                            }\n                        } else {\n                            comet = true;\n                            res.action(ActionCode.ACTION_COMET_BEGIN, null);\n                        }\n                    } else {\n                        // Clear the filter chain, as otherwise it will not be\nreset elsewhere\n                        // since this is a Comet request\n                        request.setFilterChain(null);\n                    }\n                }\n\n            }\n\n            if (!comet) {\n                response.finishResponse();\n                req.action(ActionCode.ACTION_POST_REQUEST , null);\n            }\n\n        } catch (IOException e) {\n            ;\n        } catch (Throwable t) {\n            log.error(sm.getString(\"coyoteAdapter.service\"), t);\n        } finally {\n            req.getRequestProcessor().setWorkerThreadName(null);\n            // Recycle the wrapper request and response\n            if (!comet) {\n                request.recycle();\n                response.recycle();\n            } else {\n                // Clear converters so that the minimum amount of memory \n                // is used by this processor\n                request.clearEncoders();\n                response.clearEncoders();\n            }\n        }\n\n    }\n\n\n    // ------------------------------------------------------ Protected Methods\n\n\n    /**\n     * Parse additional request parameters.\n     */\n    protected boolean postParseRequest(org.apache.coyote.Request req, \n                                       Request request,\n    \t\t                       org.apache.coyote.Response res, \n                                       Response response)\n            throws Exception {\n\n        // XXX the processor needs to set a correct scheme and port prior to\nthis point, \n        // in ajp13 protocols dont make sense to get the port from the connector..\n        // XXX the processor may have set a correct scheme and port prior to\nthis point, \n        // in ajp13 protocols dont make sense to get the port from the connector...\n        // otherwise, use connector configuration\n        if (! req.scheme().isNull()) {\n            // use processor specified scheme to determine secure state\n            request.setSecure(req.scheme().equals(\"https\"));\n        } else {\n            // use connector scheme and secure configuration, (defaults to\n            // \"http\" and false respectively)\n            req.scheme().setString(connector.getScheme());\n            request.setSecure(connector.getSecure());\n        }\n\n        // FIXME: the code below doesnt belongs to here, \n        // this is only have sense \n        // in Http11, not in ajp13..\n        // At this point the Host header has been processed.\n        // Override if the proxyPort/proxyHost are set \n        String proxyName = connector.getProxyName();\n        int proxyPort = connector.getProxyPort();\n        if (proxyPort != 0) {\n            req.setServerPort(proxyPort);\n        }\n        if (proxyName != null) {\n            req.serverName().setString(proxyName);\n        }\n\n        // Parse session Id\n        parseSessionId(req, request);\n\n        // URI decoding\n        MessageBytes decodedURI = req.decodedURI();\n        decodedURI.duplicate(req.requestURI());\n\n        if (decodedURI.getType() == MessageBytes.T_BYTES) {\n            // Remove any path parameters\n            ByteChunk uriBB = decodedURI.getByteChunk();\n            int semicolon = uriBB.indexOf(';', 0);\n            if (semicolon > 0) {\n                decodedURI.setBytes\n                    (uriBB.getBuffer(), uriBB.getStart(), semicolon);\n            }\n            // %xx decoding of the URL\n            try {\n                req.getURLDecoder().convert(decodedURI, false);\n            } catch (IOException ioe) {\n                res.setStatus(400);\n                res.setMessage(\"Invalid URI: \" + ioe.getMessage());\n                return false;\n            }\n            // Normalization\n            if (!normalize(req.decodedURI())) {\n                res.setStatus(400);\n                res.setMessage(\"Invalid URI\");\n                return false;\n            }\n            // Character decoding\n            convertURI(decodedURI, request);\n        } else {\n            // The URL is chars or String, and has been sent using an in-memory\n            // protocol handler, we have to assume the URL has been properly\n            // decoded already\n            decodedURI.toChars();\n            // Remove any path parameters\n            CharChunk uriCC = decodedURI.getCharChunk();\n            int semicolon = uriCC.indexOf(';');\n            if (semicolon > 0) {\n                decodedURI.setChars\n                    (uriCC.getBuffer(), uriCC.getStart(), semicolon);\n            }\n        }\n\n        // Set the remote principal\n        String principal = req.getRemoteUser().toString();\n        if (principal != null) {\n            request.setUserPrincipal(new CoyotePrincipal(principal));\n        }\n\n        // Set the authorization type\n        String authtype = req.getAuthType().toString();\n        if (authtype != null) {\n            request.setAuthType(authtype);\n        }\n\n        // Request mapping.\n        MessageBytes serverName;\n        if (connector.getUseIPVHosts()) {\n            serverName = req.localName();\n            if (serverName.isNull()) {\n                // well, they did ask for it\n                res.action(ActionCode.ACTION_REQ_LOCAL_NAME_ATTRIBUTE, null);\n            }\n        } else {\n            serverName = req.serverName();\n        }\n        connector.getMapper().map(serverName, decodedURI, \n                                  request.getMappingData());\n        request.setContext((Context) request.getMappingData().context);\n        request.setWrapper((Wrapper) request.getMappingData().wrapper);\n\n        // Filter trace method\n        if (!connector.getAllowTrace() \n                && req.method().equalsIgnoreCase(\"TRACE\")) {\n            Wrapper wrapper = request.getWrapper();\n            String header = null;\n            if (wrapper != null) {\n                String[] methods = wrapper.getServletMethods();\n                if (methods != null) {\n                    for (int i=0; i<methods.length; i++) {\n                        if (\"TRACE\".equals(methods[i])) {\n                            continue;\n                        }\n                        if (header == null) {\n                            header = methods[i];\n                        } else {\n                            header += \", \" + methods[i];\n                        }\n                    }\n                }\n            }                               \n            res.setStatus(405);\n            res.addHeader(\"Allow\", header);\n            res.setMessage(\"TRACE method is not allowed\");\n            return false;\n        }\n\n        // Possible redirect\n        MessageBytes redirectPathMB = request.getMappingData().redirectPath;\n        if (!redirectPathMB.isNull()) {\n            String redirectPath = redirectPathMB.toString();\n            String query = request.getQueryString();\n            if (request.isRequestedSessionIdFromURL()) {\n                // This is not optimal, but as this is not very common, it\n                // shouldn't matter\n                redirectPath = redirectPath + \";\" +\nGlobals.SESSION_PARAMETER_NAME + \"=\" \n                    + request.getRequestedSessionId();\n            }\n            if (query != null) {\n                // This is not optimal, but as this is not very common, it\n                // shouldn't matter\n                redirectPath = redirectPath + \"?\" + query;\n            }\n            response.sendRedirect(redirectPath);\n            return false;\n        }\n\n        // Parse session Id\n        if (((Context)request.getMappingData().context).getCookies())\n       \t    parseSessionCookiesId(req, request);\n\n        return true;\n    }\n\n\n    /**\n     * Parse session id in URL.\n     */\n    protected void parseSessionId(org.apache.coyote.Request req, Request request) {\n\n        ByteChunk uriBC = req.requestURI().getByteChunk();\n        int semicolon = uriBC.indexOf(match, 0, match.length(), 0);\n\n        if (semicolon > 0) {\n\n            // Parse session ID, and extract it from the decoded request URI\n            int start = uriBC.getStart();\n            int end = uriBC.getEnd();\n\n            int sessionIdStart = semicolon + match.length();\n            int semicolon2 = uriBC.indexOf(';', sessionIdStart);\n            if (semicolon2 >= 0) {\n                request.setRequestedSessionId\n                    (new String(uriBC.getBuffer(), start + sessionIdStart, \n                            semicolon2 - sessionIdStart));\n                // Extract session ID from request URI\n                byte[] buf = uriBC.getBuffer();\n                for (int i = 0; i < end - start - semicolon2; i++) {\n                    buf[start + semicolon + i] \n                        = buf[start + i + semicolon2];\n                }\n                uriBC.setBytes(buf, start, end - start - semicolon2 + semicolon);\n            } else {\n                request.setRequestedSessionId\n                    (new String(uriBC.getBuffer(), start + sessionIdStart, \n                            (end - start) - sessionIdStart));\n                uriBC.setEnd(start + semicolon);\n            }\n            request.setRequestedSessionURL(true);\n\n        } else {\n            request.setRequestedSessionId(null);\n            request.setRequestedSessionURL(false);\n        }\n\n    }\n\n\n    /**\n     * Parse session id in URL.\n     */\n    protected void parseSessionCookiesId(org.apache.coyote.Request req, Request\nrequest) {\n\n        // Parse session id from cookies\n        Cookies serverCookies = req.getCookies();\n        int count = serverCookies.getCookieCount();\n        if (count <= 0)\n            return;\n\n        for (int i = 0; i < count; i++) {\n            ServerCookie scookie = serverCookies.getCookie(i);\n            if (scookie.getName().equals(Globals.SESSION_COOKIE_NAME)) {\n                // Override anything requested in the URL\n                if (!request.isRequestedSessionIdFromCookie()) {\n                    // Accept only the first session id cookie\n                    convertMB(scookie.getValue());\n                    request.setRequestedSessionId\n                        (scookie.getValue().toString());\n                    request.setRequestedSessionCookie(true);\n                    request.setRequestedSessionURL(false);\n                    if (log.isDebugEnabled())\n                        log.debug(\" Requested cookie session id is \" +\n                            request.getRequestedSessionId());\n                } else {\n                    if (!request.isRequestedSessionIdValid()) {\n                        // Replace the session id until one is valid\n                        convertMB(scookie.getValue());\n                        request.setRequestedSessionId\n                            (scookie.getValue().toString());\n                    }\n                }\n            }\n        }\n\n    }\n\n\n    /**\n     * Character conversion of the URI.\n     */\n    protected void convertURI(MessageBytes uri, Request request) \n        throws Exception {\n\n        ByteChunk bc = uri.getByteChunk();\n        int length = bc.getLength();\n        CharChunk cc = uri.getCharChunk();\n        cc.allocate(length, -1);\n\n        String enc = connector.getURIEncoding();\n        if (enc != null) {\n            B2CConverter conv = request.getURIConverter();\n            try {\n                if (conv == null) {\n                    conv = new B2CConverter(enc);\n                    request.setURIConverter(conv);\n                } else {\n                    conv.recycle();\n                }\n            } catch (IOException e) {\n                // Ignore\n                log.error(\"Invalid URI encoding; using HTTP default\");\n                connector.setURIEncoding(null);\n            }\n            if (conv != null) {\n                try {\n                    conv.convert(bc, cc);\n                    uri.setChars(cc.getBuffer(), cc.getStart(), \n                                 cc.getLength());\n                    return;\n                } catch (IOException e) {\n                    log.error(\"Invalid URI character encoding; trying ascii\");\n                    cc.recycle();\n                }\n            }\n        }\n\n        // Default encoding: fast conversion\n        byte[] bbuf = bc.getBuffer();\n        char[] cbuf = cc.getBuffer();\n        int start = bc.getStart();\n        for (int i = 0; i < length; i++) {\n            cbuf[i] = (char) (bbuf[i + start] & 0xff);\n        }\n        uri.setChars(cbuf, 0, length);\n\n    }\n\n\n    /**\n     * Character conversion of the a US-ASCII MessageBytes.\n     */\n    protected void convertMB(MessageBytes mb) {\n\n        // This is of course only meaningful for bytes\n        if (mb.getType() != MessageBytes.T_BYTES)\n            return;\n        \n        ByteChunk bc = mb.getByteChunk();\n        CharChunk cc = mb.getCharChunk();\n        int length = bc.getLength();\n        cc.allocate(length, -1);\n\n        // Default encoding: fast conversion\n        byte[] bbuf = bc.getBuffer();\n        char[] cbuf = cc.getBuffer();\n        int start = bc.getStart();\n        for (int i = 0; i < length; i++) {\n            cbuf[i] = (char) (bbuf[i + start] & 0xff);\n        }\n        mb.setChars(cbuf, 0, length);\n\n    }\n\n\n    /**\n     * Normalize URI.\n     * <p>\n     * This method normalizes \"\\\", \"//\", \"/./\" and \"/../\". This method will\n     * return false when trying to go above the root, or if the URI contains\n     * a null byte.\n     * \n     * @param uriMB URI to be normalized\n     */\n    public static boolean normalize(MessageBytes uriMB) {\n\n        ByteChunk uriBC = uriMB.getByteChunk();\n        byte[] b = uriBC.getBytes();\n        int start = uriBC.getStart();\n        int end = uriBC.getEnd();\n\n        // URL * is acceptable\n        if ((end - start == 1) && b[start] == (byte) '*')\n          return true;\n\n        int pos = 0;\n        int index = 0;\n\n        // Replace '\\' with '/'\n        // Check for null byte\n        for (pos = start; pos < end; pos++) {\n            if (b[pos] == (byte) '\\\\') {\n                if (ALLOW_BACKSLASH) {\n                    b[pos] = (byte) '/';\n                } else {\n                    return false;\n                }\n            }\n            if (b[pos] == (byte) 0) {\n                return false;\n            }\n        }\n\n        // The URL must start with '/'\n        if (b[start] != (byte) '/') {\n            return false;\n        }\n\n        // Replace \"//\" with \"/\"\n        for (pos = start; pos < (end - 1); pos++) {\n            if (b[pos] == (byte) '/') {\n                while ((pos + 1 < end) && (b[pos + 1] == (byte) '/')) {\n                    copyBytes(b, pos, pos + 1, end - pos - 1);\n                    end--;\n                }\n            }\n        }\n\n        // If the URI ends with \"/.\" or \"/..\", then we append an extra \"/\"\n        // Note: It is possible to extend the URI by 1 without any side effect\n        // as the next character is a non-significant WS.\n        if (((end - start) >= 2) && (b[end - 1] == (byte) '.')) {\n            if ((b[end - 2] == (byte) '/') \n                || ((b[end - 2] == (byte) '.') \n                    && (b[end - 3] == (byte) '/'))) {\n                b[end] = (byte) '/';\n                end++;\n            }\n        }\n\n        uriBC.setEnd(end);\n\n        index = 0;\n\n        // Resolve occurrences of \"/./\" in the normalized path\n        while (true) {\n            index = uriBC.indexOf(\"/./\", 0, 3, index);\n            if (index < 0)\n                break;\n            copyBytes(b, start + index, start + index + 2, \n                      end - start - index - 2);\n            end = end - 2;\n            uriBC.setEnd(end);\n        }\n\n        index = 0;\n\n        // Resolve occurrences of \"/../\" in the normalized path\n        while (true) {\n            index = uriBC.indexOf(\"/../\", 0, 4, index);\n            if (index < 0)\n                break;\n            // Prevent from going outside our context\n            if (index == 0)\n                return false;\n            int index2 = -1;\n            for (pos = start + index - 1; (pos >= 0) && (index2 < 0); pos --) {\n                if (b[pos] == (byte) '/') {\n                    index2 = pos;\n                }\n            }\n            copyBytes(b, start + index2, start + index + 3,\n                      end - start - index - 3);\n            end = end + index2 - index - 3;\n            uriBC.setEnd(end);\n            index = index2;\n        }\n\n        uriBC.setBytes(b, start, end);\n\n        return true;\n\n    }\n\n\n    // ------------------------------------------------------ Protected Methods\n\n\n    /**\n     * Copy an array of bytes to a different position. Used during \n     * normalization.\n     */\n    protected static void copyBytes(byte[] b, int dest, int src, int len) {\n        for (int pos = 0; pos < len; pos++) {\n            b[pos + dest] = b[pos + src];\n        }\n    }\n\n\n}",
    "comments": [
      "Whit v.5.5.x the issue takes place also. Surprisingly long-standing game :-)\nWill somebody from development team be so kind to rise the issue severity? Thanks!",
      "Yes, this is a bug. Looking for the cookie when cookies are disabled means that\nthe session ID from the cookie is taken as the requested session ID rather than\nthe ID in the URL.\n\nYour proposed patch looks to be heading in the right direction. I'll do some\ntesting and commit a fix.\n\nAs an aside, patches in diff -u format are a lot easier to manage. Anything more\nthan a few lines is best provided as an attachment rather then in-line.",
      "A modified patch has been applied to trunk and proposed for 6.0.x and 5.5.x",
      "This has been fixed in svn for 6.0.x and will be included in 6.0.16 onwards.",
      "(In reply to comment #4)\n> This has been fixed in svn for 6.0.x and will be included in 6.0.16 onwards.\n\nThanks, it's great! Can 6.0.16 release date be estimated?",
      "Created attachment 21341\nPatch for java.org.apache.catalina.connector.CoyoteAdapter\n\nThe change of parseSessionCookiesId has problem. If access a invalid web\napplication path it will throw NullPointerException. This is unexpect. The\nnormal is return 404. The follow is the steps.\n1. Deploy a web application that is name 'CookiesBug' in webapps. \n2. Start tomcat.\n3. Access /cookiesBug. Notice the characters are all in lower.\n4. Will show NullPointerExecption at line 554 of class\njava.org.apache.catalina.connector.CoyoteAdapter.\n\n   The reason is the access URL is invalid and tomcat can't find the context\nelement for it. So it will throw NullPointerExecption. From\n'http://tomcat.apache.org/tomcat-6.0-doc/config/context.html', I think if can't\nfind the context, tomcat should trate it as default value, the 'cookies' is\ntrue. So we should get session tracing from cookies.",
      "The patch is for tomcat6.0.x",
      "The NPE only occurs if the ROOT web app is not present. I have fixed the coed in\nsvn and proposed the improved fix for 6.0.x and 5.5.x",
      "Fixed in 5.5.x and will be included in 5.5.26 onwards.",
      "Updating version",
      "There is same problem in function parseSessionId() at line 505. If user declear\nuse cookie to store the session id, why need parse the session id from encode URI?",
      "Please think about the test case. User declear use cookie to store the session\nand user rewrite the URI. For some reason the cookie is lost, in current code,\nwhat will happen. Tomcat will use the URI session, right? So, it the implement\nstill has problem. So I suggestion add the follow code at the parseSessionId.\n        Context context = (Context) request.getMappingData().context;\n        if (context == null || context.getCookies())\n            return;",
      "The NPE has been fixed for 6.0.x and will be included in 6.0.16.\n\nI don't think you have a valid use case for the reverse case. Please discuss on\nthe dev list if you disagree."
    ],
    "creation_ts": "2007-11-11T19:35:39Z",
    "fixes": [
      43839
    ]
  },
  {
    "id": 52970,
    "summary": "MethodNotFoundException when using enum as one of method arguments",
    "description": "Consider this JSF view snippet:\n\n----------------------------------------------------------------------\n<h:form>\n    <h:commandButton value=\"submit\" action=\"#{bean.submit('FOO')}\" />\n</h:form>\n----------------------------------------------------------------------\n\nAnd this JSF bean snippet:\n\n----------------------------------------------------------------------\n@ManagedBean\n@RequestScoped\npublic class Bean {\n    public enum Type { FOO, BAR }\n\n    public void submit(Type type) {\n        System.out.println(type);\n    }\n}\n----------------------------------------------------------------------\n\nThis results in a javax.el.MethodNotFoundException. It works in Glassfish 3. EL 2.2 spec 1.18.6 tells that a string must be coerced to enum of type T.",
    "comments": [
      "What stacktrace is there in MethodNotFoundException?",
      "Here it is:\n\njavax.faces.el.MethodNotFoundException: javax.el.MethodNotFoundException: /index.xhtml @15,58 action=\"#{bean.submit('FOO')}\": Method not found: com.example.Bean@385c1187.submit(java.lang.String)\n\tat javax.faces.component.MethodBindingMethodExpressionAdapter.invoke(MethodBindingMethodExpressionAdapter.java:92)\n\tat com.sun.faces.application.ActionListenerImpl.processAction(ActionListenerImpl.java:102)\n\tat javax.faces.component.UICommand.broadcast(UICommand.java:315)\n\tat javax.faces.component.UIViewRoot.broadcastEvents(UIViewRoot.java:794)\n\tat javax.faces.component.UIViewRoot.processApplication(UIViewRoot.java:1259)\n\tat com.sun.faces.lifecycle.InvokeApplicationPhase.execute(InvokeApplicationPhase.java:81)\n\tat com.sun.faces.lifecycle.Phase.doPhase(Phase.java:101)\n\tat com.sun.faces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:118)\n\tat javax.faces.webapp.FacesServlet.service(FacesServlet.java:593)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:927)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579)\n\tat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:309)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n\tat java.lang.Thread.run(Thread.java:722)\nCaused by: javax.el.MethodNotFoundException: /index.xhtml @15,58 action=\"#{bean.submit('FOO')}\": Method not found: com.example.Bean@385c1187.submit(java.lang.String)\n\tat com.sun.faces.facelets.el.TagMethodExpression.invoke(TagMethodExpression.java:109)\n\tat javax.faces.component.MethodBindingMethodExpressionAdapter.invoke(MethodBindingMethodExpressionAdapter.java:88)\n\t... 24 more",
      "There is nothing in your stacktrace that comes from Tomcat EL implementation. There should be other \"Caused by\" somewhere further.\n\n\nLooking at method selection code in\njavax.el.BeanELResolver#invoke(..)\n\n- The \"paramTypes\" argument there is usually null.\n\nIn that case the method is identified by the count of parameters, not by their types.\n\nIf that were the case, type coercion will happen later and would not result in MethodNotFoundException. So where is it thrown from?\n\n- If the \"paramTypes\" argument is not-null then it will be used to select exact method.  Is it your case?\n\nThe requirements for BeanELResolver#invoke() API are set in EL 2.2 specification (see 2.2.9, page 38). I see no provision to respect EL coercion rules when paramTypes != null.",
      "It's indeed been swallowed/wrapped by Facelets. Here's the stacktrace as it is coming from `invoke()`:\n\njavax.el.MethodNotFoundException: Method not found: com.example.Bean@66a01572.submit(java.lang.String)\n\tat org.apache.el.util.ReflectionUtil.getMethod(ReflectionUtil.java:225)\n\tat org.apache.el.parser.AstValue.invoke(AstValue.java:251)\n\tat org.apache.el.MethodExpressionImpl.invoke(MethodExpressionImpl.java:278)\n\tat com.sun.faces.facelets.el.TagMethodExpression.invoke(TagMethodExpression.java:111)\n\tat javax.faces.component.MethodBindingMethodExpressionAdapter.invoke(MethodBindingMethodExpressionAdapter.java:88)\n\tat com.sun.faces.application.ActionListenerImpl.processAction(ActionListenerImpl.java:102)\n\tat javax.faces.component.UICommand.broadcast(UICommand.java:315)\n\tat javax.faces.component.UIViewRoot.broadcastEvents(UIViewRoot.java:794)\n\tat javax.faces.component.UIViewRoot.processApplication(UIViewRoot.java:1259)\n\tat com.sun.faces.lifecycle.InvokeApplicationPhase.execute(InvokeApplicationPhase.java:81)\n\tat com.sun.faces.lifecycle.Phase.doPhase(Phase.java:101)\n\tat com.sun.faces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:118)\n\tat javax.faces.webapp.FacesServlet.service(FacesServlet.java:593)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:927)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579)\n\tat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:309)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n\tat java.lang.Thread.run(Thread.java:722)",
      "Indeed, the params being passed is null in Tomcat 7.0.26 while it contains the right values in Glassfish 3.x.",
      "This has been fixed in trunk and 7.0.x and will be included in 7.0.27 onwards."
    ],
    "creation_ts": "2012-03-22T12:28:52Z",
    "fixes": [
      52970
    ]
  },
  {
    "id": 52259,
    "summary": "synchonization issues and dead lock if no realm is presented in configuration",
    "description": "Problem:\n\nTomcat 7.0.23 startup freezes at \"INFO: Deploying web application directory ...\"\n\nNuances:\n- no errors are displayed in logs\n- tomcat process can't be shutted down with shutdown.sh script\n- http request on 80 port wait forever\n- it's a multi host configuration\n- the same setup works well on all previous build, including 7.0.22\n- when lib/*.jar files of tomcat-7.0.23 are replaced with lib/*.jar files of tomcat-7.0.23 - everything works just fine\n\nfix it asap!\nthank you!\n\nfill free to contact for details: a19596@mail.ru",
    "comments": [
      "Bugzilla is not a support forum. Please use the users mailing list.",
      "it's not a support issue, it's a bug that somebody of programmers have made developing from 7.0.22 to 7.0.23. fix it asap. thanks.",
      "the correct webapp works on <=7.0.22 and doesn't work on 7.0.23. IS IT A SUPPORT ISSUE? i guess not. fix it.",
      "This works for everyone else including the ASF Jira instance and the full TCK suite. You have misconfigured your server. That is not a bug. Further support is available from the users mailing list.\n\nPlease stop re-opening this issue.",
      "details to reproduce:\nhttp://www.mail-archive.com/users@tomcat.apache.org/msg94585.html",
      "Good to see that the users mailing list has done its job and we now have a valid bug report. Thanks are due to Michael Zampani who took the time to do some investigation and provided the necessary steps to reproduce the issue as well as a potential work-around.\n\nThis appears to be a regression caused by the new threaded deployment (bug 46264).\n\nThe syncs in ContainerBase all need to be reviewed as there may be other potential deadlock triggers.",
      "Fixed in trunk and 7.0.x and will be included in 7.0.24 onwards.",
      "Good to see you have finally fixed the bug :)",
      "*** Bug 52276 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2011-11-28T19:32:12Z",
    "fixes": [
      52259
    ]
  },
  {
    "id": 44223,
    "summary": "Tomcat ignores the \"javax.net.ssl.trustStoreType\" system property",
    "description": "Set up a SSL Connector with a keystore in JKS format:\n\n<Connector ... SSLEnabled=\"true\"\nkeystoreFile=\"tomcat.keystore\" keystoreType=\"JKS\">\n\nLet's say you need a custom truststore (e.g. for authenticating self-signed \nclient certificates), and that this truststore is also needed by some of your \nwebapps, not only Tomcat. The natural thing to do then is to configure this \ntruststore globally for the whole JVM, not in server.xml.\n\nLet's also assume this truststore is in a different format (e.g. PKCS#12). So \nbefore starting Tomcat, you do this:\n\nexport JAVA_OPTS=\"-Djavax.net.ssl.trustStore=trusted.keystore -\nDjavax.net.ssl.trustStoreType=PKCS12\"\n\nWell, it doesn't work. If you look at tomcat/logs/catalina.out, you will see a \nkeystore-related exception. Upon further debugging, you will discover the \nproblem is that Tomcat is trying to open the truststore as if it were in JKS \nformat, even though it is clearly specified as type PKCS12 in JAVA_OPTS above.",
    "comments": [
      "Created attachment 21383\nsimple fix",
      "Tomcat ignores any of the SSL configuration system properties.\n\nI was going to say it has always been this way, I didn't know why and if you\nprovided a patch that addressed all of them it would be considered.\n\nHowever, my brain is now in gear and the problem seems obvious. When using\nsystem properties for configuration then everything is fine until two components\nrequire conflicting settings. In a container environment this pretty much a\ngiven. We had a similar issue with logging which is why Remy wrote JULI.\n\nTherefore, I am marking this as a WONTFIX on the grounds I see it causing more\nproblems than it solves.",
      "(In reply to comment #2)\n> Tomcat ignores any of the SSL configuration system properties.\n\nBut this statement is not true. Tomcat already consults the \n\"javax.net.ssl.trustStore\" and \"javax.net.ssl.trustStorePassword\" properties, \nonly it was ignoring the third one, \"javax.net.ssl.trustStoreType\". I am not \nasking for a new feature here, this bug is about the inconsistent \nimplementation of an existing feature. Look at the \nJSSESocketFactory.getTrustStore() method to see what's going on.\n\n> I was going to say it has always been this way, I didn't know why and if you\n> provided a patch that addressed all of them it would be considered.\n\nWell this patch completes the addressing of all of them. Only 2 out of 3 trust \nstore related properties are being taken into account at the moment, and this \npatch adds support for the 3rd one. Either this inconsistency should be fixed, \nor else remove support for ALL trust store properties. The current situation is \ninconsistent and leads to maddening configuration issues (i.e. any reasonable \nperson would assume that since 2 trust store properties appear supported the \nthird one would be also, and then scratch their head when a non-descriptive \nJSSE exception hits them).\n\n> However, my brain is now in gear and the problem seems obvious. When using\n> system properties for configuration then everything is fine until two \ncomponents\n> require conflicting settings. In a container environment this pretty much a\n> given. We had a similar issue with logging which is why Remy wrote JULI.\n> \n> Therefore, I am marking this as a WONTFIX on the grounds I see it causing more\n> problems than it solves.\n\nWhile I agree with your reasoning about container environments, I disagree with \nthe WONTFIX assessment. Currently you have partial support for an arbitrary \nsubset of trust store properties, which is the worst of both worlds.  Either \nsupport all of them or none of them.",
      "Fair point. I didn't realise we were using the others. Still don't like it but\nthat is an issue for another time.\n\nPatch applied to trunk and proposed for 6.0.x.\n\nMany thanks.",
      "This has been fixed in svn and will be included in 6.0.16 onwards."
    ],
    "creation_ts": "2008-01-14T04:24:16Z",
    "fixes": [
      44223
    ]
  },
  {
    "id": 46985,
    "summary": "Impossible condition in coyote.http11.Http11Processor.process(Socket socket)",
    "description": "coyote.http11.Http11Processor.process(Socket socket)\n...\n\n        int soTimeout = socket.getSoTimeout();\n        int oldSoTimeout = soTimeout;\n\n        int threadRatio = (endpoint.getCurrentThreadsBusy() * 100)\n                / endpoint.getMaxThreads();\n        if (threadRatio > 75) {\n            keepAliveLeft = 1;\n        }\n        \n        if (soTimeout != oldSoTimeout) {\n\nThe above condition will never be true. It looks like the code is trying to reset the timeout if it has not changed, but it will never do so.\n\nBoth the method and the class have a variable called \"socket\" which may be part of the problem - is the method trying to set the instance socket to have the same timeout as the parameter socket, or vice versa?\n\nThe socket parameter should be renamed.\n\nNote that the Javadoc appears to be completely wrong as well.",
    "comments": [
      "Thanks for the reminder. Cleaning up this was on my todo list post fixing bug 46666.\n\nI have fixed trunk and proposed the fix for 6.0.x",
      "For reference: Mark's fix in trunk is r763262\n\n(In reply to comment #0)\n> coyote.http11.Http11Processor.process(Socket socket)\n> ...\n> \n>         int soTimeout = socket.getSoTimeout();\n>         int oldSoTimeout = soTimeout;\n> \n>         int threadRatio = (endpoint.getCurrentThreadsBusy() * 100)\n>                 / endpoint.getMaxThreads();\n>         if (threadRatio > 75) {\n>             keepAliveLeft = 1;\n>         }\n> \n>         if (soTimeout != oldSoTimeout) {\n> \n> The above condition will never be true. It looks like the code is trying to\n> reset the timeout if it has not changed, but it will never do so.\n> \n\nThat \"if (soTimeout != oldSoTimeout) { .. }\" works in TC 5.5, because of some block of code that precedes it, but is dead in TC 6.0 because that preceding block is removed. \n\nYou can look at TC 5.5 sources, but as I was studying it through svn log, I will give a reference to annotated source of it at revision 398045:\n\nhttp://svn.apache.org/viewvc/tomcat/tc6.0.x/trunk/java/org/apache/coyote/http11/Http11Processor.java?annotate=398045&limit_changes=0&pathrev=423920\n\nThe code was the following:\n\n751 : \t  \t  \t int soTimeout = socket.getSoTimeout(); \n752 : \t  \t  \t int oldSoTimeout = soTimeout;\n753 : \t  \t  \t\n754 : \tremm \t396579 \tint threadRatio = (endpoint.getCurrentThreadsBusy() * 100)\n755 : \tremm \t389146 \t/ endpoint.getMaxThreads();\n756 : \t  \t  \tif ((threadRatio > 33) && (threadRatio <= 66)) {\n757 : \t  \t  \tsoTimeout = soTimeout / 2;\n758 : \t  \t  \t} else if ((threadRatio > 66) && (threadRatio <= 90)) {\n759 : \t  \t  \tsoTimeout = soTimeout / 3;\n760 : \t  \t  \tkeepAliveLeft = 1;\n761 : \t  \t  \t} else if (threadRatio > 90) {\n762 : \t  \t  \tsoTimeout = soTimeout / 20;\n763 : \t  \t  \tkeepAliveLeft = 1;\n764 : \t  \t  \t}\n765 : \t  \t  \t\n766 : \t  \t  \tif (soTimeout != oldSoTimeout) {\n\nI will propose removal of the dead code in TC 6.0.\n\n> Both the method and the class have a variable called \"socket\" which may be part\n> of the problem - is the method trying to set the instance socket to have the\n> same timeout as the parameter socket, or vice versa?\n> \n> The socket parameter should be renamed.\n> \n\nNo error there, no need to rename.\n\nBoth are pointing to the same object. Also, you may note, that\nthis.socket is set back to null at the end of the method.\n\n> Note that the Javadoc appears to be completely wrong as well.\n\nOh, it says about input and output streams. Those are provided by the socket.",
      "Created attachment 23684\nPatch to correct Javadoc and remove dead code. It is for tc6.0.x.\n\nI will propose the patch for TC 6.0.\nFor record: this issue does not exist in 5.5.",
      "(In reply to comment #2)\n> That \"if (soTimeout != oldSoTimeout) { .. }\" works in TC 5.5, because of some\n> block of code that precedes it, but is dead in TC 6.0 because that preceding\n> block is removed. \n\nOK, I see - the condition did once mean something.\n \n> > Both the method and the class have a variable called \"socket\" which may be part\n> > of the problem - is the method trying to set the instance socket to have the\n> > same timeout as the parameter socket, or vice versa?\n> > \n> > The socket parameter should be renamed.\n> > \n> \n> No error there, no need to rename.\n\nNot an error, but it's very confusing to use the same name for a parameter and an instance variable.\n\nUsing the same name is just about OK in short ctors or one-line set() methods, but elsewhere it's not helpful.\n\n> Both are pointing to the same object. Also, you may note, that\n> this.socket is set back to null at the end of the method.\n\nHuh? The socket parameter may or may not be the same as the instance variable.\n\nI don't see either being set to null.\n\n> \n> > Note that the Javadoc appears to be completely wrong as well.\n> \n> Oh, it says about input and output streams. Those are provided by the socket.\n\nIndeed",
      "(In reply to comment #4)\n> \n> I don't see either being set to null.\n> \n\n    public void process(Socket socket)\n        throws IOException {\n(..)\n        // Setting up the I/O\n        this.socket = socket;\n        inputBuffer.setInputStream(socket.getInputStream());\n        outputBuffer.setOutputStream(socket.getOutputStream());\n\n(.....)\n\n        // Recycle\n        inputBuffer.recycle();\n        outputBuffer.recycle();\n        this.socket = null;\n        // Recycle ssl info\n        sslSupport = null;\n    }\n\nI slightly wonder why there is no try/finally...",
      "This is fixed in 6.0.x and will be included in 6.0.21 onwards."
    ],
    "creation_ts": "2009-04-07T16:36:50Z",
    "fixes": [
      46985
    ]
  },
  {
    "id": 52015,
    "summary": "JdbcInterceptor passes wrong argument to getNext().invoke",
    "description": "The default implementation of JdbcInterceptor.invoke passes itself as the proxy argument to the next interceptor in the chain.  I'm thinking this should really pass the 'proxy' argument.\n\nThis means that interceptors cannot cast the 'proxy' argument to a java.sql.Connection.\n\nJdbcInterceptor line 94 should look like this:\n\nif (getNext()!=null) return getNext().invoke(proxy,method,args);\n\ninstead of this:\n\nif (getNext()!=null) return getNext().invoke(this,method,args);",
    "comments": [
      "Thanks for report.\nThis is  fixed in r1186681 and  will be in 7.0.23 onwards."
    ],
    "creation_ts": "2011-10-12T18:09:24Z",
    "fixes": [
      52015
    ]
  },
  {
    "id": 39875,
    "summary": "RealmBase#init() needs cleanup",
    "description": "In RealmBase#init():\n\n<quote>\n    public void init() {\n        this.containerLog = container.getLogger();\n        if( initialized && container != null ) return;\n        \n        initialized=true;\n        if( container== null ) {\n</quote>\n\nIf the container is null, then a NPE will occurs.\nThe container is not null, then the if block is no longer needed.\n\nThe first line is changed at revision r372854.\nhttp://svn.apache.org/viewvc/tomcat/container/tc5.5.x/catalina/src/share/org/apache/catalina/realm/RealmBase.java?r1=371686&r2=372854",
    "comments": [
      "Thank you for reporting this.  I've fixed it in SVN, and the fix should be\navailable in the 5.5.24 release.",
      "*** Bug 42470 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2006-06-23T11:15:08Z",
    "fixes": [
      39875
    ]
  },
  {
    "id": 65368,
    "summary": "enhance error message \"Unable to unwrap data, invalid status [CLOSED]\"",
    "description": "on a form post, I am seeing \n\nCaused by: java.io.IOException: Unable to unwrap data, invalid status [CLOSED]\n\tat org.apache.tomcat.util.net.SecureNioChannel.read(SecureNioChannel.java:657)\n\tat org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.fillReadBuffer(NioEndpoint.java:1231)\n\tat org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.read(NioEndpoint.java:1158)\n\tat org.apache.coyote.http11.Http11InputBuffer.fill(Http11InputBuffer.java:736)\n\tat org.apache.coyote.http11.Http11InputBuffer.access$300(Http11InputBuffer.java:42)\n\tat org.apache.coyote.http11.Http11InputBuffer$SocketInputBuffer.doRead(Http11InputBuffer.java:1099)\n\tat org.apache.coyote.http11.filters.IdentityInputFilter.doRead(IdentityInputFilter.java:102)\n\tat org.apache.coyote.http11.Http11InputBuffer.doRead(Http11InputBuffer.java:247)\n\tat org.apache.coyote.Request.doRead(Request.java:551)\n\tat org.apache.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:336)\n\n\nIt turns out that post body was empty, i.e. of 0 bytes length.\nSo it is probably not really a decryption problem, but simply no data received.\n\nPlease add the number of bytes \"read\" (0 in my case) and \"netread\" (53 in my case) to the error message on line 657 to ease the search of the cause (which in my case was rather on the client side)",
    "comments": [
      "Reading a zero length POST shouldn't trigger an exception. I'll see if I can re-create this. Was this with OpenSSL or JSSE?",
      "I'm unable to repeat this with a simple test servlet and zero length POST. I'm using openssl s_client.\n\nThe stack trace suggests the connection has been closed so this may not be (directly) related to the length of the POST.\n\nCan you provide a simple test case to reproduce this please.",
      "Thanks for the additional information provided off-line.\n\nI used chrome with SSLKEYLOGFILE and Wireshark to look at a test request to the server you provided details of.\n\nThe Wireshark trace shows the client submitting the POST request and then immediately closing the TCP connection. This is consistent with what is reported in the stack trace - that the connection has been closed.\n\nThis looks like a broken client to me.\n\nGenerally, clients closing the connection should be silently ignored by Tomcat. We typically log such events as debug level for instances such as this where there is a client error that needs to be debugged.\n\nI do want to see if I can recreate this locally with a simple test case as we may need to adjust the logging in this scenario.",
      "I can recreate this. It is caused when the client closes the connection cleanly when Tomcat expects the connection to remain open. Tomcat reads the TLS close message which gets handled in the \"Something else went wrong block\".\n\nThe current message doesn't really reflect what is going on. I think returning -1 which will trigger an EOFException in the caller is a better, more consistent way to handle this. It also clearly signals what went wrong - Tomcat found a closed connection when it tried to do a read.",
      "After further review fixed slightly differently to allow for TLS 1.3 half-close.\n\nFixed in:\n- 10.1.x for 10.1.0-M2 onwards\n- 10.0.x for 10.0.8 onwards\n- 9.0.x for 9.0.49 onwards\n- 8.5.x for 8.5.69 onwards",
      "Does this also need to be fixed for sending response?\n\nI am seeing org.apache.catalina.connector.ClientAbortException: java.io.IOException: Unable to wrap data, invalid status [CLOSED] when the client has closed the connection before the server is able to respond back.\n\nAlso for some reason this doesn't show up in 9.0.48"
    ],
    "creation_ts": "2021-06-09T08:23:06Z",
    "fixes": [
      65368
    ]
  },
  {
    "id": 69285,
    "summary": "Performance improvement to ApplicationHttpRequest.parseParameters()",
    "description": "Created attachment 39847\nReproducer & speed test\n\nApplicationHttpRequest.parseParameters() is called whenever a JSP EL expression references a param, and the cached parameters are outdated. The runtime scales by (among other things) the number of parameters copied.  JSPs that use <jsp:param> cause headaches because they force re-parsing of the parameters, and the number of parameters increase.\n\nThis method is a bottleneck in a high-traffic, latency-critical application, estimated at around 0.3%.  The impact is focused on a section of the application that nests many JSP calls, each with a <jsp:param>.  In addition to application modifications (to use request attributes instead of parameters), it's possible to accelerate Tomcat's implementation.\n\nSpecifically, in 9.x, parseParameters() includes these two lines:\n\nparameters = new ParameterMap<>();\nparameters.putAll(getRequest().getParameterMap());\n\nUnder-the-covers the call to parameters.putAll() reads the java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet associated with the ParameterMap's field unmodifiableDelegatedMap.  putAll() iterates across that entrySet() and in so doing triggers extra instructions, possibly vtable/itable lookups (depending on context), and extra reads as an additional pointer must be chased.  It's intuitive to think that the JVM can optimize this away, but in practice HashMap.putAll() encounters too many distinct implementations of Map.entrySet() to remove the virtual method lookups.\n\nSolution: create a new constructor for ParameterMap that receives a ParameterMap and reads from the unlocked (modifiable) map, thus bypassing all code related to CollectionsRUnmodifiableMap.  Safety is not compromised since the modifiable field remains private, and we clearly are not modifying it here.\n\nExample:\n    public ParameterMap(ParameterMap<K,V> map) {\n        delegatedMap = new LinkedHashMap<>(map.delegatedMap);\n        unmodifiableDelegatedMap = Collections.unmodifiableMap(delegatedMap);\n    }\n\nNote that this is nearly identical to the existing Map-based constructor:\n    public ParameterMap(Map<K,V> map) {\n        delegatedMap = new LinkedHashMap<>(map);\n        unmodifiableDelegatedMap = Collections.unmodifiableMap(delegatedMap);\n    }\n\nA performance test is attached; my Graviton-based computer demonstrates a 20-25% time reduction, near-constant across the number of parameters.",
    "comments": [
      "FWIW the impact difference seems larger on AArch64 than x64.",
      "Paticular difference is LinkedHashMap#afterNodeInsertion(boolean evict).",
      "Thanks for the report, analysis and the test case. As always, much appreciated.\n\nFixed in:\n- 11.0.x for 11.0.0-M25 onwards\n- 10.1.x for 10.1.29 onwards\n-  9.0.x for  9.0.94 onwards",
      "Thank you!  :)",
      "This code reached production and was ineffective; investigation shows that the caller (ApplicationHttpRequest.parseParameters) is still calling the old constructor, based on Map rather than ParameterMap.  Specifically:\n\nparameters = new ParameterMap<>(getRequest().getParameterMap());\n\nAt compile time, this resolves to calling ParameterMap.<init>(Map).  The new constructor must be accessed by casting the parameter, such as this:\n\nparameters = new ParameterMap<>((ParameterMap)(getRequest().getParameterMap()));\n\nSorry, my development environment contained this change as well as the code I included previously, and I lost track of it.\n\nCurious what you think about whether we need to typecheck this before casting; it appears that all calls to getRequest().getParameterMap() will return a ParameterMap, but with some effort an application could override that.",
      "I've add the cast and the type check in case the request has been wrapped.\n\nFixed in:\n- 11.0.x for 11.0.3 onwards\n- 10.1.x for 10.1.35 onwards\n-  9.0.x for  9.0.99 onwards"
    ],
    "creation_ts": "2024-08-23T20:21:17Z",
    "fixes": [
      69285
    ]
  },
  {
    "id": 55534,
    "summary": "Tomcat 7 and 8 missing javax.annotation classes added in Java EE 6, 7 respectively",
    "description": "JSR 250 (\"Common Annotations 1.0\") specified a set of common annotations for application development. Some of them were included in Java SE 6 and later, but many of them are Java EE-specific and were added in Java EE 5. Tomcat 6 included these annotations since Tomcat supported some of them. The annotations included in Tomcat 6 are:\n\njavax.annotation.Generated\njavax.annotation.PostConstruct\njavax.annotation.PreDestroy\njavax.annotation.Resource\njavax.annotation.Resources\njavax.annotation.security.DeclareRoles\njavax.annotation.security.DenyAll\njavax.annotation.security.PermitAll\njavax.annotation.security.RolesAllowed\njavax.annotation.security.RunAs\n\nThis was fine in Java EE 5 / Tomcat 6. However, Java EE 6 (\"Common Annotations 1.1\") added the following annotations that Tomcat 7 never included:\n\njavax.annotation.ManagedBean\njavax.annotation.sql.DataSourceDefinition\njavax.annotation.sql.DataSourceDefinitions\n\nFurthermore, Java EE 7 (\"Common Annotations 1.2\") added the following annotation that Tomcat 8 has not yet included:\n\njavax.annotation.Priority\n\nTomcat should included these annotations in its \"annotations-api.jar\". Other frameworks (like Spring Framework and JPA providers) make use of these new annotations. Since Tomcat does not include them, the /correct/ thing for an application that needs them to do is include the official javax.annotation-api.jar artifact in their application. However, this JAR redefines annotations already supplied by Tomcat, which could lead to hard-to-diagnose errors (similar to why an application should never include the servlet-api artifact in their application). Adding these missing annotations would remove the requirement for applications to include the problem JAR in their application.\n\nTomcat 7 should ship @ManagedBean, @DataSourceDefinition, and @DataSourceDefinitions. Tomcat 8 should ship with @Priority.",
    "comments": [
      "A review also spotted some errors in the existing common annotations 1.0 implementation.\n\nNote that some of the official Java EE 5 Javadoc for common annotations is not correct.\n\nEverything has been fixed for 8.0.x and 7.0.x and will be included in 8.0.0-RC2 and 7.0.43.\n\nThe CA 1.0 fixes have been proposed for 6.0.x.",
      "Excellent. Good news! Thanks for attacking this so quickly."
    ],
    "creation_ts": "2013-09-07T23:00:47Z",
    "fixes": [
      55534
    ]
  },
  {
    "id": 43622,
    "summary": "compression / minCompressionSize attribute not properly implemented",
    "description": "2 of the compression related attributes for the http connector are:\n\ncompression = on | off | force | <integer val>\nThe documentation states that integer val will be implemented as:\ncompression=\"on\" and minCompressionSize = <integer val>\n\nminCompressionSize = <integer val>\n(The documentation for 5.5.12 doesnt mention this at all, but read this in the\nserver.xml)\n\nThe problem is that the documenation gives the impression that only setting\ncompression=\"some integer val\" is sufficient, however the way the code is\nwritten, the value of \"minCompressionSize\" always overrides the value specified\nin the \"compression\" field. Even if minCompressionSize isnt set, it will still\nget the default value of 2048 and override whatever value was there in the\n\"compression\" field.\n\nI looked at the implementation of the http11 connector and found the following\ncode that might be the culprit:\n\nIn org.apache.coyote.http11.Http11BaseProtocol.Http11ConnectionHandler.init\n    processor.setCompression( proto.compression );\n    processor.setCompressionMinSize( proto.compressionMinSize);\n\nsince the \"setCompressionMinSize\" is called after compressionMinSize, its value\nwill override the value read from compression atttribute.\n\n\nI have looked at the code for Tomcat 6.0 also, and the problems appears to still\nbe present.",
    "comments": [
      "Created attachment 20977\nTest cases with different connector settings\n\nThese test cases can prove that either the documentation or the code needs to\nbe changed regarding the compression size settings",
      "There is a mistake with the attribute name, it is compressionMinSize, not\nminCompressionSize\n\n(In reply to comment #0)\n> 2 of the compression related attributes for the http connector are:\n> \n> compression = on | off | force | <integer val>\n> The documentation states that integer val will be implemented as:\n> compression=\"on\" and minCompressionSize = <integer val>\n> \n> minCompressionSize = <integer val>\n> (The documentation for 5.5.12 doesnt mention this at all, but read this in the\n> server.xml)\n> \n> The problem is that the documenation gives the impression that only setting\n> compression=\"some integer val\" is sufficient, however the way the code is\n> written, the value of \"minCompressionSize\" always overrides the value specified\n> in the \"compression\" field. Even if minCompressionSize isnt set, it will still\n> get the default value of 2048 and override whatever value was there in the\n> \"compression\" field.\n> \n> I looked at the implementation of the http11 connector and found the following\n> code that might be the culprit:\n> \n> In org.apache.coyote.http11.Http11BaseProtocol.Http11ConnectionHandler.init\n>     processor.setCompression( proto.compression );\n>     processor.setCompressionMinSize( proto.compressionMinSize);\n> \n> since the \"setCompressionMinSize\" is called after compressionMinSize, its value\n> will override the value read from compression atttribute.\n> \n> \n> I have looked at the code for Tomcat 6.0 also, and the problems appears to still\n> be present.",
      "Thanks for the report. This is fixed in trunk and proposed for 6.0.x and 5.5.x",
      "Fixed in 5.5.x and will be included in 5.5.26 onwards."
    ],
    "creation_ts": "2007-10-15T03:51:24Z",
    "fixes": [
      43622
    ]
  },
  {
    "id": 65179,
    "summary": "HTTP2:WINDOW_UPDATE not sent when receiving http2 requests over unknown url",
    "description": "Created attachment 37767\nPCAP for case where WINDOW_UPDATE is not sent\n\nWe are using embedded tomcat version 9.0.43 in our application to transport http/2 packets between 2 systems (h2c connection). All parameters used are the tomcat defaults.\n\nWe are facing the below issue :\n1.\tTomcat is not sending WINDOW_UPDATE when a request(payload > 65K) is landed on an Unknown URL(which is not deployed as a servlet and not having  a servlet mapping). The same is working when request landed on an known URL(which is deployed as a servlet and has an servlet mapping). \n2.\tTomcat is listening on 1080 port, client is sending packet size of > 65KB, but here tomcat receives only 65KB  and not receiving full DATA, later tomcat sends RST_STREAM, further no WINDOW_UPDATE, after that client is not able to send DATA frames as there is no WINDOW_UPDATE from tomcat.\n\nWorking case :\nClient sends request to a correct URL of size/payload > 65KB. Tomcat is sending WINDOW_UPDATE. 200OK from application, which is working as expected. Later client is able to send requests along with DATA also, and tomcat is receiving those .\n\nPlease find attached the PCAPs for the Not Working Case (unknown url).\n\nPlease help resolve this issue.\n\nThanks in advance !!",
    "comments": [
      "Fixed in:\n- 10.0.x for 10.0.5 onwards\n- 9.0.x for 9.0.45 onwards\n- 8.5.x for 8.5.65 onwards",
      "Hi Mark,\n\nRegarding this fix, we still see an error code 8 and not the expected 404. Is the error code 8 a separate bug? If so, is it logged somewhere I am not finding? We have a jmx file we have been using for testing. I can upload the jmx file either here or to a separate bug as necessary. Is there anything useful that we can provide to help with this?\n\nThanks!",
      "Yes, you will see a RST frame for the stream with error code 8 (cancel) to tell the client no to bother sending (any more of) the requets body.\n\nThe 404 response is sent before the RST frame.",
      "*** Bug 65773 has been marked as a duplicate of this bug. ***",
      "*** Bug 65773 has been marked as a duplicate of this bug. ***"
    ],
    "creation_ts": "2021-03-11T14:56:46Z",
    "fixes": [
      65179
    ]
  },
  {
    "id": 40771,
    "summary": "Can't read POST data from within a filter or valve",
    "description": "I was attempting to create a Filter or Valve that could be placed in front of an\nAxis web service that would handle security according to the WS-Security\nspecification. That turned out to be a rabbit trail, but I did find and fix a\nbug that I discovered along the way. \n\nI ran into problems reading POST data (the web service request) from the\norg.apache.catalina.connector.Request object exposed in the Filter/Valve\ninterfaces. This is a chunk of code in a prototype Valve that didn't work:\n\nprivate ByteChunk getPOSTBody(Request request)\n      throws IOException\n  {\n    ByteChunk retval = new ByteChunk(request.getContentLength());\n    ByteChunk body = new ByteChunk(request.getContentLength());\n\n    int bytesRead;\n    do\n    {\n      bytesRead = request.getCoyoteRequest().doRead(body);\n      retval.append(body);\n    }\n    while (bytesRead >= 0) ;\n\n    //puts the data back into the pipe.\n    request.getCoyoteRequest().action\n        (ActionCode.ACTION_REQ_SET_BODY_REPLAY, retval);\n\n    return retval;\n  }\n\nThis code works as designed, however the problem occurs later on when Axis\nattempted to parse the web service request. I don't remember the exact Axis\nerror, but I was able to track the problem down to a bug in the\norg.apache.coyote.http11.filters.SavedRequestInputFilter class. The doRead\nmethod was not properly implemented to return a -1 when appropriate.\n\nHere is my modified version of the doRead method:\n\npublic int doRead(ByteChunk chunk, org.apache.coyote.Request request)\n            throws IOException {\n        int writeLength = 0;\n        \n        if (chunk.getLimit() > 0 && chunk.getLimit() < input.getLength()) {\n            writeLength = chunk.getLimit();\n        } else {\n        \twriteLength = input.getLength();\n        }\n        if(input.getOffset()>= input.getEnd())\n            return -1;\n\n        input.substract(chunk.getBuffer(), 0, writeLength);\n        chunk.setOffset(0);\n        chunk.setEnd(writeLength);\n        \n        return writeLength;    \n    }\n\n\nThis bug won't show up unless someone tries to use a filter/valve to do\nsomething with web services. That's not too likely because that's what we have\nSOAPHandlers for.",
    "comments": [
      "Fixed in SVN. Will be included in 5.5.21 onwards.\n\nMany thanks for the patch."
    ],
    "creation_ts": "2006-10-16T16:08:36Z",
    "fixes": [
      40771
    ]
  },
  {
    "id": 42547,
    "summary": "Same env-entry (web.xml) and ResourceLink (context) names causes NPE",
    "description": "Having the following in web.xml:\n\n  <env-entry>\n    <env-entry-name>testIt</env-entry-name>\n    <env-entry-type>java.lang.String</env-entry-type>\n    <env-entry-value>test</env-entry-value>\n  </env-entry>\n\nand the following in your context descriptor:\n\n  <ResourceLink name=\"testIt\"\n                global=\"testIt\"\n                type=\"java.lang.String\"/>\n\ncauses an NPE on context load.\n\njava.lang.NullPointerException\n\tat\norg.apache.catalina.deploy.NamingResources.addEnvironment(NamingResources.java:188)\n\t\nThis assumes you have an entry for 'testIt' in the <GlobalNamingResources>\nsection of server.xml to link to.\n\nThis worked in 5.5.20. No longer works in 5.5.23.",
    "comments": [
      "More info on having duplicate names in the following scenarios\n\nweb.xml           context descriptor       winner\n------------      --------------------     ------------\nno entry          <Environment>            <Environment>\n<env-entry>       <Environment>            <env-entry>\n<env-entry>       no entry                 <env-entry>\nno entry          <ResourceLink>           <ResourceLink>\n<env-entry>       <ResourceLink>           blows up",
      "Created attachment 20291\nDemonstrates the issue\n\nZip contains war and an external context descriptor. The configuration as it is\nwill genreate the issue. Assumes:\n\n- war is exploded to c:/dev/sandbox/tomcat_bug_test/exploded\n- The following is in <GlobalNamingResources> in conf/server.xml   \n<Environment name=\"testIt\"\n\t     value=\"GlobalNamingResources\"\n\t     type=\"java.lang.String\"/>\n\nThe war has only a web.xml and a jsp with a scriptlet to do a lookup on\njava:comp/env/testIt.",
      "(In reply to comment #1)\n> More info on having duplicate names in the following scenarios\n> \n> web.xml           context descriptor       winner\n> ------------      --------------------     ------------\n> no entry          <Environment>            <Environment>\n> <env-entry>       <Environment>            <env-entry>\n> <env-entry>       no entry                 <env-entry>\n> no entry          <ResourceLink>           <ResourceLink>\n> <env-entry>       <ResourceLink>           blows up\n\nThis needs to be updated slightly to take into account the override property of\nthe <Enviroment> tag in the context descriptor. \n\nweb.xml           context descriptor            winner\n------------      --------------------          ------------\nno entry          <Environment>                  <Environment>\n<env-entry>       <Environment>                  <env-entry>     \n<env-entry>       <Environment override=\"true\">  <env-entry>   (same as previous)\n<env-entry>       <Environment override=\"false\"> <Environment>\n<env-entry>       no entry                       <env-entry>\nno entry          <ResourceLink>                 <ResourceLink>\n<env-entry>       <ResourceLink>                 blows up",
      "This is related to a change made to fix the following bug:\n\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=29727\n\nFirst, it appears that contrary to the documentation (located at\nhttp://tomcat.apache.org/tomcat-5.5-doc/config/globalresources.html#Enviroment%20Entries),\nsetting the 'override' attribute of a <Enviroment> tag inside\n<GlobalNameingResources> to 'true' will never be (and perhaps never was) obeyed. \n\nAllowing <env-entry> overrides of global <Enviroment> entries (through\n<ResourceLinks> in the context descriptor) may, it could be argued, be illegal\n(not the mention confusing). The current behavior, with the NPE, makes it\nillegal (intentional or not).\n\nHowever, it could also be argued that, with an external context descriptor, you\nshould be able to override anything set via <env-entry> in web.xml if you wanted\nto (and this is what the documentation seems to indicate). \n\nFinally, there's restoring the previous behavior, which never allows any\noverriding and always (silently) takes the global value, regardless of any\ncorresponding <env-entry>s or any reloading.\n\nEssentially, you can a) make it work as described by the documentation, b) blow\nup, or c) silently take the global values on load (or reload) always. \n\nIf b, I recommend blowing up with something more descriptive than the NPE we\nhave now and changing the doco.\n\nIf c, you could just check if (in\norg.apache.catalina.deploy.NamingResources.java, line 188), findEnviroment()\nretuns null. If it does, log a warning and return. If not, do the getOverride()\nif. You should also update the doco in this case too.\n\n    if (entries.containsKey(environment.getName())) {\n\tContextEnvironment ce = findEnvironment(environment.getName());\n\tif (ce == null) {\n\t    // Log a warning: \n\t    return;\n\t}\n        if (findEnvironment(environment.getName()).getOverride()) {\n            removeEnvironment(environment.getName());\n        } else {\n            return;\n        }\n    }",
      "Thanks for the report. This has been fixed so functionality agrees with the\ncurrent documentation (a).\n\nThe fix is in svn and will be included in 5.5.25 and 6.0.14."
    ],
    "creation_ts": "2007-05-30T11:29:37Z",
    "fixes": [
      42547
    ]
  },
  {
    "id": 39769,
    "summary": "Wrong class loader when the myServlet.destroy() called if myServlet is in the T5 shared directory",
    "description": "Hi all,\n\n  My web app needs to have Thread.currentThread().getContextClassLoader() always\nright.  When the application is unload it seem not be the case. \n\nMy classes are under the T5's shared directory (so all my\nservlet.getClass().getClassLoader() == the shared classloader i.e.:\nStandardCalssLoader.\n\nMy understanding is that when executing the code in my web app\nThread.currentThread().getContextClassLoader() should always give the\nWebappLoader used in the StandardContext.\n\nThe problem occurs in StandardWrapper.unload()  before calling the\nservlet.destroy() method\n\n....\n        ClassLoader oldCtxClassLoader =\n            Thread.currentThread().getContextClassLoader();\n        ClassLoader classLoader = instance.getClass().getClassLoader();\n\n        PrintStream out = System.out;\n        if (swallowOutput) {\n            SystemLogHandler.startCapture();\n        }\n\n        // Call the servlet destroy() method\n        try {\n            instanceSupport.fireInstanceEvent\n              (InstanceEvent.BEFORE_DESTROY_EVENT, instance);\n\n            Thread.currentThread().setContextClassLoader(classLoader);\n            if( System.getSecurityManager() != null) {\n                SecurityUtil.doAsPrivilege(\"destroy\",\n                                           instance);\n                SecurityUtil.remove(instance);                          \n            } else {\n                instance.destroy();\n            }\n\n....\n\nIn the code, the INSTANCE variable is my servlet and it have been loaded by the\nSHARED classloader.  So the classloader set in the thread is not the right one.\n It Should be the classloader related to StandardContext.getLoader()\n\nThis problem occurs when I try to close my T5 dos windows and I suppose will\noccurs when I will uninstall any webApp from my T5.\n\nI notice the problem in T5 5.5.16 but I verified and it's the same code in\n5.5.17.  So probably the problem is still there\n\n\nBest Regards\n/David Gagnon",
    "comments": [
      "Created attachment 18442\nI patch the unload method the same way the load method is done\n\n  //I checked the load method and they don't care about setting the classloader\n\n  // So I removed the class loader setting in this method.\n  // I debugged the load() method an see that the WebClassLoader is used (Wich\nis good!)\n  // I debugged the unload() method and see that the current classloader when\nentering the method is the right one\n  // the method just replace it with the wrong one",
      "Thanks for the patch. This is now fixed in 4.1.x, 5.5.x and 6.x",
      "Why is this reopened?",
      "Sorry .. my mistake wrong bug :-)"
    ],
    "creation_ts": "2006-06-09T20:09:27Z",
    "fixes": [
      39769
    ]
  },
  {
    "id": 64871,
    "summary": "warn \"SEVERE\" if /WEB-INF/web.xml not found",
    "description": "org.apache.catalina.startup.ContextConfig.getContextWebXmlSource() normally doesn't follow symlinks.\nSo, if the Constants.ApplicationWebXml i.e. \"/WEB-INF/web.xml\" due to this cannot be read, \n1) mention the full path where you were looking in an error message\n2) put this as \"SEVERE\" in the catalina out log\n\n\nOtherwise, you can waste hours with \n\n<<HTTP Status 404 \u2013 Not Found\n\nType Status Report\n\nMessage /index_en.jsp;jsessionid=A3944DE3830D9AF59D3970DDBA\n\nDescription The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.>>",
    "comments": [
      "the root cause probably was that in server.xml, the path to \n\n<Context path=\"\"\ndocBase=\"/home/me/dir/app/\" reloadable=\"true\"\nworkDir=...\n\nwas after change pointing to a symLink.\n\n(using tomcat inside the IDE)",
      "The previous issue hadn't been forgotten. I'll mark it as a duplicate of this one shortly.\n\nSince the original issue was raised, the resource handling has been significantly refactored. It looks like it will be possible to catch files being ignored because of symlinks in a single place.\n\nIt seems unlikely to me that users would want a symlink to be ignored otherwise why create the symlink in the fist place? I am therefore experimenting with logging an error message whenever a file is ignored due to it being accessed via a symlink.\n\nI do think SEVERE is too excessive for the general case. It is probably appropriate for some files (like web.xml) but I don't want to start down the path of checking for files names before deciding on the log level. WARN seems reasonable.",
      "*** Bug 57892 has been marked as a duplicate of this bug. ***",
      "Thanks - I agree that a \"SEVERE\" for every symlink file is too much.\n\nBut if it is for the Context's \"docBase\" and \"workDir\" which essentially means that an entire web app will not start, it really should be SEVERE !\n\nEspecially because the error message visible is really not helpful to find the cause",
      "What I am trying to avoid is an every increasing list of \"critical\" file names. Logging at error (SEVERE) if the path starts with /WEB-INF or /META-INF should catch all the important config files.",
      "Fixed in:\n- 10.0.x for 10.0.0-M10 onwards\n- 9.0.x for 9.0.40 onwards\n- 8.5.x for 8.5.60 onwards\n- 7.0.x for 7.0.107 onwards"
    ],
    "creation_ts": "2020-11-04T14:37:42Z",
    "fixes": [
      64871
    ]
  },
  {
    "id": 58230,
    "summary": "Incorrect input from ServletInputStream in ReadListener",
    "description": "I have a reproducible case where the bytes read with ServletInputStream via a javax.servlet.ReadListener are incorrect.\n\nThe code is an experiment with layering Reactive Streams over Servlet 3.1 non-blocking I/O. I apologize for not being able to create a more focused isolated example (I did try). That said it is a very basic example that hopefully with some debugging you can zero in on the issue.\n\nTo observe the failure, clone https://github.com/spring-projects/spring-reactive, then change the following read buffer size to 4096 https://github.com/spring-projects/spring-reactive/blob/master/src/main/java/org/springframework/reactive/web/servlet/HttpHandlerServlet.java#L37, then run the test https://github.com/spring-projects/spring-reactive/blob/master/src/test/java/org/springframework/reactive/web/servlet/HttpHandlerServletTomcatIntegrationTests.java.\n\nThe test sends an HTTP request with a body of 3 * 4096 bytes. The server echoes that back. However the returned body doesn't match starting at index 4096, which happens to be the start of the second chunk.\n\nOn the server requests are delegated to an HttpHandler which accepts a (Reactive Streams) Publisher for the input and returns a Publisher for the output. In the test the HttpHandler is EchoHandler which returns the input Publisher as the response Publisher effectively piping input directly to output. Underlying that are RequestBodyPublisher and ResponseBodySubscriber which adapt the Read/WriteListener to Reactive Streams.\n\nIncreasing the size of the array into which chunks are read to 4293 makes the tests pass.",
    "comments": [
      "As the referenced project will continue to change, I've created a fork where the code will remain stable until this issue is looked at. In the original instructions simply replace \"spring-projects\" with \"rstoyanchev\" in all links.",
      "Thanks for the test case. I've got things to the point where I can run the test case in the IDE and I can see the failure. I'll start looking into what the root cause is.",
      "Great, note the code is far from perfect with the EchoHandler essentially recursing (potentially endlessly) between reading and writing. I could be wrong but to my knowledge at least it's not doing anything not allowed in the Servlet API.",
      "Fixed in trunk and 8.0.x for 8.0.25 onwards.\n\nThanks again for the test case.",
      "That was actually caused by what broke the NIO2 connector in bug 57799, available() had a side effect that it would cause an IO read.\n\nThe fix was to remove the available() call, but is it certain this won't cause useless Servlet invocation (like maybe call onDataAvailable but then available would still be false ? If unsure, it is now possible to call available(false) instead without causing concurrency related corruption."
    ],
    "creation_ts": "2015-08-10T16:06:43Z",
    "fixes": [
      58230
    ]
  },
  {
    "id": 69234,
    "summary": "Parallel deployment not working with tomcat 11",
    "description": "Created attachment 39830\nthe sample war used\n\nThis is pretty much the same as https://bz.apache.org/bugzilla/show_bug.cgi?id=50679 but is happening also in non clustered environment.\n\nI we deploy an app sample.war all is working fine. But i try to deploy the same app with version number as sample##003.war the deploy fails giving this error:\n\njava.io.FileNotFoundException: /opt/tomcat/apache-tomcat-11.0.0-M22/webapps/sample%23%23003.war\n\nas you can see, the \"##\" are being encoded as uri components and thus is causing the file not found exception\n\nhere's the complete stack trace\n\n30-Jul-2024 22:19:13.975 INFO [Catalina-utility-2] org.apache.catalina.startup.HostConfig.deployWAR Deploying web application archive [/opt/tomcat/apache-tomcat-11.0.0-M22/webapps/sample##003.war]\n30-Jul-2024 22:19:13.983 SEVERE [Catalina-utility-2] org.apache.catalina.startup.ContextConfig.beforeStart Exception fixing docBase for context [/sample##003]\n\tjava.io.FileNotFoundException: /opt/tomcat/apache-tomcat-11.0.0-M22/webapps/sample%23%23003.war (No such file or directory)\n\t\tat java.base/java.io.FileInputStream.open0(Native Method)\n\t\tat java.base/java.io.FileInputStream.open(FileInputStream.java:213)\n\t\tat java.base/java.io.FileInputStream.<init>(FileInputStream.java:152)\n\t\tat java.base/java.io.FileInputStream.<init>(FileInputStream.java:106)\n\t\tat java.base/sun.net.www.protocol.file.FileURLConnection.connect(FileURLConnection.java:84)\n\t\tat java.base/sun.net.www.protocol.file.FileURLConnection.getInputStream(FileURLConnection.java:180)\n\t\tat org.apache.catalina.startup.ExpandWar.expand(ExpandWar.java:86)\n\t\tat org.apache.catalina.startup.ContextConfig.fixDocBase(ContextConfig.java:801)\n\t\tat org.apache.catalina.startup.ContextConfig.beforeStart(ContextConfig.java:937)\n\t\tat org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:292)\n\t\tat org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:109)\n\t\tat org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:385)\n\t\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:163)\n\t\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:566)\n\t\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:653)\n\t\tat org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:933)\n\t\tat org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1875)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)\n\t\tat org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n\t\tat java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:123)\n\t\tat org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:735)\n\t\tat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:387)\n\t\tat org.apache.catalina.startup.HostConfig.check(HostConfig.java:1642)\n\t\tat org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:263)\n\t\tat org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:109)\n\t\tat org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:940)\n\t\tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1139)\n\t\tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1143)\n\t\tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1121)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\n\t\tat java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:358)\n\t\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)\n\t\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)\n\t\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)\n\t\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\n\t\tat java.base/java.lang.Thread.run(Thread.java:1583)\n30-Jul-2024 22:19:14.027 INFO [Catalina-utility-2] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.\n30-Jul-2024 22:19:14.031 INFO [Catalina-utility-2] org.apache.catalina.startup.HostConfig.deployWAR Deployment of web application archive [/opt/tomcat/apache-tomcat-11.0.0-M22/webapps/sample##003.war] has finished in [57] ms\n\n\n\n\n\n\nActual Results: The war deploy fails\n\n\nExpected Results: the war newer version is deployed\n\nDoesn't occurs on apache-tomcat-9.0.91",
    "comments": [
      "Comnfirmed. As a work-around if you manually unpack the WAR that should work.",
      "(In reply to Mark Thomas from comment #1)\n> Comnfirmed. As a work-around if you manually unpack the WAR that should work.\n\nyou mean by disabling autodeploy ?",
      "The simplest approach is to unpack the WAR (any unzip tool should work) somewhere and then copy the unpacked directory structure to $CATALINA_BASE/webapps rather than copying the WAR to $CATALINA_BASE/webapps",
      "Found the root cause.\n\nThis refactoring:\nhttps://github.com/apache/tomcat/commit/e9d1404b2d8c7713847592023771d58e032423c5\n\nis causing double encoding. Working on a fix now.",
      "Only 11.0.x is affected.\n\nThis has been fixed in 11.0.x for 11.0.0-M24 onwards.\n\nMark"
    ],
    "creation_ts": "2024-07-30T20:43:11Z",
    "fixes": [
      69234
    ]
  },
  {
    "id": 55176,
    "summary": "SSI regular expressions parsing fails",
    "description": "Created attachment 30513\ntest cases 1, 2 and 3\n\nRegular Expressions in SSI fail to parse.\n\nThis uses SSI in 7.0.39 using SSIFilter.  The file is parsed, in principle, but whenever an IF expression with a certain regular expression is encountered, Tomcat seems to either show an exception (test case 2) stop processing the file and will not return any contents after that (for test case 3).\n\nCertain very simple regular expressions such as /a/ do not show an error (test case 1).\n\n\nExample:\n\nMy request is:\n\nhttp://...:8080/tomcat7_ssi_bug/foo.html?year=234234\n\nThe relevant portion of the file is (test case 3):\n\n<!--#if expr=\"${QUERY_STRING} = /year=(.*)/\" -->\n   \nI have tried a number of variants, including $QUERY_STRING instead of ${...}.\nI find no error about this in the logs.\n\nI tried simpler regular expressions.  The following\n\n<!--#if expr=\"${QUERY_STRING} = /year=/\" -->\n\nLeads to the error below:\n\njava.lang.ClassCastException: org.apache.catalina.ssi.ExpressionParseTree$EqualNode cannot be cast to org.apache.catalina.ssi.ExpressionParseTree$StringNode\n\torg.apache.catalina.ssi.ExpressionParseTree$CompareNode.compareBranches(ExpressionParseTree.java:353)\n\torg.apache.catalina.ssi.ExpressionParseTree$EqualNode.evaluate(ExpressionParseTree.java:381)\n\torg.apache.catalina.ssi.ExpressionParseTree.evaluateTree(ExpressionParseTree.java:67)\n\torg.apache.catalina.ssi.SSIConditional.evaluateArguments(SSIConditional.java:124)\n\torg.apache.catalina.ssi.SSIConditional.process(SSIConditional.java:50)\n\torg.apache.catalina.ssi.SSIProcessor.process(SSIProcessor.java:160)\n\torg.apache.catalina.ssi.SSIFilter.doFilter(SSIFilter.java:144)\n\n\nThis occurs whenever the regular expression does not contain any parenthesis.  \n\nAttached war file contains foo.html, showing test cases 1 and 2, and bar.html, showing test case 1 and 3.\n\nBy the way, these regular expressions work as intended in Apache (httpd) 2.\n\nSee also feature request #53387.  (The back reference in this example is not what causes the exception.)",
    "comments": [
      "Couple of issues here.\n\n1. '=~' is perl RE syntax. That isn't what httpd uses in this case and Tomcat is aiming to emulate httpd. The expected syntax is '='\n\n2. You'll need the enhancement from bug 53387 to be implemented before your test will work.\n\nI'm therefore going to resolve this as a duplicate of 53387.\n\n*** This bug has been marked as a duplicate of bug 53387 ***",
      "Created attachment 30515\nAnother variant without =~ and without $1",
      "Point 1: =~ is used in only one place in the test cases, and it is not what is causing this.  See text of my bug report. Attaching foo2.html to demonstrate.\n\nPoint 2: $1 is not what is causing this.  See text of my bug report.  Attaching foo2.html to demonstrate.\n\nfoo2.html brings up the same two errors without use of =~ or $1.\n\nSorry if my earlier test case contained these extra features.",
      "Re-opening to look at the new test cases.",
      "Found the root cause. '=' inside a regular expression was not handled correctly. There are also a bunch of other characters that would have triggered similar failures.\n\nThis has been fixed in trunk and 7.0.x and will be included in 7.0.42 onwards.\n\nThanks for the test cases. I used a simplified version to create a couple of unit tests.",
      "Nice, thank you.  That was certainly quick."
    ],
    "creation_ts": "2013-07-01T17:08:30Z",
    "fixes": [
      55176
    ]
  },
  {
    "id": 49779,
    "summary": "501 Method not implemented with successive POST requests",
    "description": "Created attachment 25911\nclient wire/context log, client code, webapp code\n\nAn unexpected HTTP 501 occurs if using HttpComponents with successive POST requests against a simple Tomcat 7 servlet (Form-based POST Authentication is enabled). After a sucessfull authentication, the client requests the same protected resource a few times in a row, but the second request always returns a \"501 Method not implemented\" status. All other requests succeed.\n\nThe following communication takes place:\n1. Client requests a protected resource; Tomcat returns the login page (HTTP200)\n2. Client provides the user credentials and calls the login resource; Tomcat returns a redirect (HTTP302)\n3. Client sets the location from the redirect for the next request(identical to URI from #1) and requests it; Tomcat returns the page (HTTP200)\n4. Client requests the same resource again; Tomcat returns a HTTP501 - Method not implemented\n5. Client requests the same resource again; Tomcat returns the page (HTTP200)\n6. Client requests the same resource again; Tomcat returns the page (HTTP200)\n7. Client requests the same resource again; Tomcat returns the page (HTTP200)\n\nThe access log message regarding the 501 says:\n'\"testName=testValuePOST /test/secure/ HTTP/1.1\" 501 1278', which may indicate that the entity data and the HTTP-method name somehow got mixed up!? Strangely the HTTP501 does not appear in case of a JSP for the requested resource, only if facing a form-based POST authentication Servlet. The servlet does only implement post and get(which calls the doPost) and returns just a string. The client code should be fine since I already posted this issue on the HTTPComponents mailing list and the data sent over the wire seems to be right. \n\nI attached the source/bin of the testclient and webapp and also the wire/context log of the client.\n\nHow can I provide further helpfull information?",
    "comments": [
      "also tested against Tomcat v6.0.29 with the same result and against Tomcat v5.5 (I think) which returns the correct return code HTTP 200, but threw internal exceptions.",
      "Thanks for the test case. As always, a simple ready to run test case makes diagnosis a lot easier.\n\nThe root cause is a difference between what the HTTP specs say and what user agents actually implemented with respect to handling 302 responses to POST requests. RFC2616 tried to deal with this by adding the 303 response. Your test case responds to the 302 with a POST (arguably in breach of the HTTP spec but it does depend how you read it) which Tomcat isn't expecting so due to request pipe-lining the POST data gets handled as part of the next request.\n\nTomcat's FORM authentication currently uses a 302 response for the redirect stage. A 303 would make the expected client behaviour clearer but that would only work for HTTP 1.1 clients. HTTP 1.0 clients would still be broken.\n\nI therefore took the approach for Tomcat 7 of swallowing any request body sent in response to the redirect since Tomcat will restore the original request (the one made prior to the login form being received) including any request body provided at that time.\n\nI am leaning towards not back-porting this change to Tomcat 5/6 since the implementation is consistent with the user agent behaviour.",
      "One side-effect of consuming the Request's body is that consumers of the restored request are forced into using request.getInputStream() i.e. you cannot attempt to obtain a reader via request.getReader().",
      "(In reply to comment #3)\n> One side-effect of consuming the Request's body is that consumers of the\n> restored request are forced into using request.getInputStream() i.e. you cannot\n> attempt to obtain a reader via request.getReader().\n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=51940#c9\n\nShould be fixed in 7.0.23 with r1186383 , but please check it.\n\nComments in FIXED bugs are usually lost. It is always better to REOPEN it if there are problems and the fix was done recently, or file a NEW bug if time has passed. As usual you'd better provide a scenario / sample webapp to reproduce it."
    ],
    "creation_ts": "2010-08-19T05:47:51Z",
    "fixes": [
      49779
    ]
  },
  {
    "id": 59001,
    "summary": "Unable to load jar files when they have exclamation in the path",
    "description": "My workspace contains an exclamation in the path, unfortunately when Tomcat tries to load the jar files, entire path is broken into pieces when the second exclamation mark is encountered.\n\nLet me know if you need more information.\n\nThis is the stacktrace -\n\nFeb 12, 2016 11:45:27 PM org.apache.catalina.startup.TldConfig tldScanJar\nWARNING: Failed to process JAR [jar:file:/G:/TEST!Maven!/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/test/WEB-INF/lib/asm-3.3.1.jar!/] for TLD files\njava.io.FileNotFoundException: G:\\TEST!Maven (The system cannot find the file specified)\n\tat java.util.zip.ZipFile.open(Native Method)\n\tat java.util.zip.ZipFile.<init>(ZipFile.java:219)\n\tat java.util.zip.ZipFile.<init>(ZipFile.java:149)\n\tat java.util.jar.JarFile.<init>(JarFile.java:166)\n\tat java.util.jar.JarFile.<init>(JarFile.java:103)\n\tat sun.net.www.protocol.jar.URLJarFile.<init>(URLJarFile.java:93)\n\tat sun.net.www.protocol.jar.URLJarFile.getJarFile(URLJarFile.java:69)\n\tat sun.net.www.protocol.jar.JarFileFactory.get(JarFileFactory.java:109)\n\tat sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:122)\n\tat sun.net.www.protocol.jar.JarURLConnection.getJarFile(JarURLConnection.java:89)\n\tat org.apache.tomcat.util.scan.FileUrlJar.<init>(FileUrlJar.java:41)\n\tat org.apache.tomcat.util.scan.JarFactory.newInstance(JarFactory.java:34)\n\tat org.apache.catalina.startup.TldConfig.tldScanJar(TldConfig.java:489)\n\tat org.apache.catalina.startup.TldConfig.access$100(TldConfig.java:59)\n\tat org.apache.catalina.startup.TldConfig$TldJarScannerCallback.scan(TldConfig.java:305)\n\tat org.apache.tomcat.util.scan.StandardJarScanner.process(StandardJarScanner.java:259)\n\t at org.apache.tomcat.util.scan.StandardJarScanner.scan(StandardJarScanner.java:178)\n\tat org.apache.catalina.startup.TldConfig.execute(TldConfig.java:278)\n\tat org.apache.catalina.startup.TldConfig.lifecycleEvent(TldConfig.java:569)\n\tat org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n\tat org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5322)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n\tat org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)\n\tat org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\nFeb 12, 2016 11:45:27 PM org.apache.catalina.core.StandardContext startInternal\nSEVERE: Error getConfigured\nFeb 12, 2016 11:45:27 PM org.apache.catalina.core.StandardContext startInternal\nSEVERE: Context [/test] startup failed due to previous errors",
    "comments": [
      "Typically, the ! character means that the sought resource is actually inside of a JAR file. The URL you have has a ! after an on-disk path, but not one that (looks like it) is a JAR file (G:\\TEST).\n\nThat looks like an invalid JAR URL to me.\n\nOr has Tomcat built a bad URL out of some other path?\n\nOr, are you saying that your on-disk path is actually \"G:\\TEST!Maven!\"?\n\nThis may be a pathological use case, but neither NTFS nor any of the *NIX filesystems I checked have any prohibition against ! characters, which are special for JAR URLs. (None of those filesystems prohibit # marks, either, which could potentially be a problem.)",
      "My disk path is \"G:\\TEST!Maven!\\...\"\n\nIndeed, it is a corner use case. \nIs there any reason why tomcat is solely relying on \"!\" to identify end of the string? When we know that is the path to find specified resource, why \"!\" in the end?",
      "Honestly, I'm surprised that it's failing where it is: I would have expected it to fail saying that \"G:\\TEST\" didn't exist.\n\nThis isn't Tomcat doing this; it's the combination of a large number of components all of which are using URLs for certain purposes. There are many many corner cases where the JRE itself will fall-over even if Tomcat wasn't involved.\n\nI don't believe Tomcat massages any of the URLs it's processing, so there may be an opportunity for Tomcat to escape the ! characters in an on-disk filename (i.e. \"!\" -> \"%21\"). But like I said, there's always more and more edge-cases and encoding once means possibly encoding multiple times (and sometimes having to decode a few times, too). It's just a giant mess.",
      "JarURLConnection is responsible for the mishap. As per java doc \"!/\" is a terminator for the jar file. That's the reason why it is failing at G:/TEST!Maven not G:/TEST\n\nAnd whatever comes after the \"!/\" becomes the context within the jar.\n\nJava doc link - https://docs.oracle.com/javase/7/docs/api/java/net/JarURLConnection.html\n\nSorry for the confusion.\n\n-Jay",
      "No problem. The only question is whether or not Tomcat knows at the time that the URL it's building is a physical on-disk resource. If Tomcat does know this, it can escape special characters like \"!\".",
      "I really wanted to fix this but I'm not sure that supporting this use case is worth the cost.\n\nThere are two places I have found (so far) where changes would be required. The first is during start-up to ensure that the paths used to construct the URLs for the class loaders escape \"!/\" to \"%21/\".\n\nThe second is in the web resources implementation where FileResource.getURL() needs to escape \"!/\" to \"%21/\".\n\nThe problem stems from the fact that the only way to do this escaping (that I have been able to find) is URL -> toString() -> replaceAll() -> new URL(). And that is relatively expensive.\n\nI'm not concerned about startup. That is a one-off cost. What concerns me is the performance impact of adding this to FileResource.getURL(). That gets called a lot. I'm concerned that the impact of adding this escaping is going to be measurable for end users.\n\nThe other option is to take the position that anytime code constructs a jar URL, that code is responsible for ensuring that any !/ sequences in the path it uses to construct that URL are escaped. While we could do this in Tomcat (there are ~20 places we'd need to fix this), I suspect a whole bunch of third-party code won't handle this correctly. And this is before we get into the mess that is JARs in WARs.\n\nGiven that most users don't need this (I don't recall seeing this issue reported previously and that's going back to Tomcat 4.1.x) I'm leaning heavily towards WONTFIX. There is going to need to be a really good reason to fix this to change my mind.",
      "I'm having similar problem but with + sign. Our build system (gradle) creates executable war with Mercurial revision hash. Sometimes this hash can contain \"+\" as a last character ala \"kalkulaator-f83780e3571e+.war\"\n\n\nnow when we try to run this war (embedded tomcat 8.0.30) jps will not work. If I rename war to \"kalkulaator-f83780e3571e.war\" everything is ok.\n\n\"java -jar build\\libs\\kalkulaator-f83780e3571e+.war\"\n\n...\n\n\"\n...\n2016-02-23 18:00:00,466 WARN  UUID [o.a.t.u.s.StandardJarScanner] - Failed to scan JAR [jar:file:/C:/Users/desin/code/kalk/build/libs/kalkulaator-f83780e3571e+.war!/WEB-INF/lib/jstl-1.2.jar] from /WEB-INF/lib\njava.io.FileNotFoundException: JAR entry WEB-INF/lib-provided/tomcat-embed-core-8.0.30.jar!/javax/servlet/resources/web-jsptaglibrary_1_2.dtd not found in C:\\Users\\desin\\code\\kalk\\build\\libs\\kalkulaator-f83780e3571e+.war\n        at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:142) ~[na:1.8.0_73]\n        at sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.java:150) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.setupCurrentEntity(XMLEntityManager.java:623) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.startEntity(XMLEntityManager.java:1305) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.startDTDEntity(XMLEntityManager.java:1271) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.impl.XMLDTDScannerImpl.setInputSource(XMLDTDScannerImpl.java:263) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.dispatch(XMLDocumentScannerImpl.java:1167) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.next(XMLDocumentScannerImpl.java:1050) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:964) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:606) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:118) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:510) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:848) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:777) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1213) ~[na:1.8.0_73]\n        at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:643) ~[na:1.8.0_73]\n        at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1451) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]\n        at org.apache.tomcat.util.descriptor.tld.TldParser.parse(TldParser.java:76) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]\n        at org.apache.jasper.servlet.TldScanner.parseTld(TldScanner.java:279) [tomcat-embed-jasper-8.0.30.jar!/:8.0.30]\n        at org.apache.jasper.servlet.TldScanner$TldScannerCallback.scan(TldScanner.java:315) ~[tomcat-embed-jasper-8.0.30.jar!/:8.0.30]\n        at org.apache.tomcat.util.scan.StandardJarScanner.process(StandardJarScanner.java:306) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]\n        at org.apache.tomcat.util.scan.StandardJarScanner.scan(StandardJarScanner.java:162) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]\n        at org.apache.jasper.servlet.TldScanner.scanJars(TldScanner.java:262) [tomcat-embed-jasper-8.0.30.jar!/:8.0.30]\n        at org.apache.jasper.servlet.TldScanner.scan(TldScanner.java:106) [tomcat-embed-jasper-8.0.30.jar!/:8.0.30]\n        at org.apache.jasper.servlet.JasperInitializer.onStartup(JasperInitializer.java:103) [tomcat-embed-jasper-8.0.30.jar!/:8.0.30]\n        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5244) [tomcat-embed-core-8.0.30.jar!/:8.0.30]\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [tomcat-embed-core-8.0.30.jar!/:8.0.30]\n        at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1408) [tomcat-embed-core-8.0.30.jar!/:8.0.30]\n        at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1398) [tomcat-embed-core-8.0.30.jar!/:8.0.30]\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_73]\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]\n        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]\n\"",
      "(In reply to Mark Thomas from comment #6)\n> I really wanted to fix this but I'm not sure that supporting this use case\n> is worth the cost.\n> \n> There are two places I have found (so far) where changes would be required.\n> The first is during start-up to ensure that the paths used to construct the\n> URLs for the class loaders escape \"!/\" to \"%21/\".\n> \n> The second is in the web resources implementation where\n> FileResource.getURL() needs to escape \"!/\" to \"%21/\".\n> \n> The problem stems from the fact that the only way to do this escaping (that\n> I have been able to find) is URL -> toString() -> replaceAll() -> new URL().\n> And that is relatively expensive.\n> \n> I'm not concerned about startup. That is a one-off cost. What concerns me is\n> the performance impact of adding this to FileResource.getURL(). That gets\n> called a lot. I'm concerned that the impact of adding this escaping is going\n> to be measurable for end users.\n\nWhat about mutating the \"classpath\" used by a ClassLoader when it's constructed? That way, we could take the hit of URL -> String -> URL maybe one time for a context. I don't understand the implications of the way the ClassLoader works, so I may be making an insane proposal ;)\n\n> The other option is to take the position that anytime code constructs a jar\n> URL, that code is responsible for ensuring that any !/ sequences in the path\n> it uses to construct that URL are escaped. While we could do this in Tomcat\n> (there are ~20 places we'd need to fix this), I suspect a whole bunch of\n> third-party code won't handle this correctly. And this is before we get into\n> the mess that is JARs in WARs.\n> \n> Given that most users don't need this (I don't recall seeing this issue\n> reported previously and that's going back to Tomcat 4.1.x) I'm leaning\n> heavily towards WONTFIX. There is going to need to be a really good reason\n> to fix this to change my mind.\n\nIf we expect external code to do its own URL-escaping, it doesn't really change the current behavior. I don't think that would be a horrible change, since it would make common cases work (where only Tomcat is involved), and it wouldn't break any of the other cases because they would already be broken (right?).",
      "(In reply to Christopher Schultz from comment #8)\n> (In reply to Mark Thomas from comment #6)\n\n> > I'm not concerned about startup. That is a one-off cost. What concerns me is\n> > the performance impact of adding this to FileResource.getURL(). That gets\n> > called a lot. I'm concerned that the impact of adding this escaping is going\n> > to be measurable for end users.\n> \n> What about mutating the \"classpath\" used by a ClassLoader when it's\n> constructed? That way, we could take the hit of URL -> String -> URL maybe\n> one time for a context. I don't understand the implications of the way the\n> ClassLoader works, so I may be making an insane proposal ;)\n\nThat is exactly what I am proposing for start-up. It is a one-off cost so no big deal.\n\n> > The other option is to take the position that anytime code constructs a jar\n> > URL, that code is responsible for ensuring that any !/ sequences in the path\n> > it uses to construct that URL are escaped. While we could do this in Tomcat\n> > (there are ~20 places we'd need to fix this), I suspect a whole bunch of\n> > third-party code won't handle this correctly. And this is before we get into\n> > the mess that is JARs in WARs.\n> > \n> > Given that most users don't need this (I don't recall seeing this issue\n> > reported previously and that's going back to Tomcat 4.1.x) I'm leaning\n> > heavily towards WONTFIX. There is going to need to be a really good reason\n> > to fix this to change my mind.\n> \n> If we expect external code to do its own URL-escaping, it doesn't really\n> change the current behavior. I don't think that would be a horrible change,\n> since it would make common cases work (where only Tomcat is involved), and\n> it wouldn't break any of the other cases because they would already be\n> broken (right?).\n\nI'm still on the fence about this (and that is without looking at the JAR in WAR issue).\n\nI've thought of a few ways we could make FileResource.getURL() handle this without being horribly slow unless you have a path that includes a !/ sequence (in which case being slow is the price you pay for it working) but I'm becoming less convinced that this is the way to go.\n\nThe more I think about it, the more I am leaning towards the view that if you take a string and use it to construct a JAR URL then you are responsible for making sure any \"!/\" sequences are escaped. Before heading down that route I'd want to check how often the ~20 places we'd need to do this are called.",
      "Either it get's fixed in the next releases or not, I strongly feel there has to be some exception handling which doesn't trick developers to invest more energy on debugging possible root cause within their application.",
      "Having looked at where we construct Jar URLs (and URLs that may be used to later build Jar URLs) there were a handful of places where we needed to add appropriate escaping. I've implemented the escaping for 9.0.x (it will be in 9.0.0.M4 onwards) and I'm looking at back-porting it. Given the various refactorings I'm not sure how far back this fix will be back-ported.\n\nRegarding the use of '+' in file names (comment #7) that looks like a separate issue. Please open a separate BZ issue for that and provide s set of steps to reproduce the issue.",
      "The fix has been back-ported to 8.0.x for 8.0.33 onwards and to 7.0.x for 7.0.69 onwards."
    ],
    "creation_ts": "2016-02-13T20:00:05Z",
    "fixes": [
      59001
    ]
  },
  {
    "id": 62175,
    "summary": "Infinite recursive session PersistentManager.swapIn loop with OOM",
    "description": "Environment:\nWindows 8 NTFS\nOracle JDK 1.8.0_152\nApache Tomcat 9.0.6\nApache OpenWebBeans 2.0.4 (OWB)\nSession ID ABCDE in filesystem storage and containing an expired session.\n\nTL;DR: Expired session is deserialized over and over again because OWB calls Request.getSession(false) in sessionDestroyed and ContainerBackgroundProcessor is unable to delete the session file while it is deserialized.\n\n\nWhile Tomcat is starting up, I direct the Browser to request my application with session ABCDE which had been swapped out but is already expired.\nTomcat calls \nStandardSession.isValid() \n-> StandardSession.expire()\n-> each registered HttpSessionListener.destroy()\n\nNow OWB having a HttpSessionListener registered is calling RequestFacade.getSession(false) which expands to\n-> PersistentManager.findSession()\n-> PersistentManager.swapIn()\n-> StandardSession.isValid()\n... repeat until OutOfMemory\n\nAn important side condition is that FileStore.remove() fails for unknown reason. File.delete just returns false which is not very expressive. Maybe the session file is beeing read / locked accidentally the same time while the ContainerBackgroundProcessor tries to delete it. This could be caused by the session beeing read over and over again by that recursive loop where the most expansive operation is deserialization of the session, giving close to zero time for a successful delete.\n\n[This is one reason why I better like Linux: deleting a file while it is read simply deletes the file.]\n\nBTW: When the HTTP-Thread is blocked by a breakpoint, ContainerBackgroundProcessor succeeds in deleting the file and stops the recursion.\n\n\nHere are the stacktraces of HTTP thread and ContainerBackgroundProcessor:\n\n\"http-nio-8080-exec-2\" #66 daemon prio=5 os_prio=0 tid=0x0000000021e9b000 nid=0xf94 at breakpoint[0x000000002c40a000]\n   java.lang.Thread.State: RUNNABLE\n        at my.web.common.application.listener.ApplicationListener.sessionDestroyed(ApplicationListener.java:112)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000d709d800> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2374)\n        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)\n        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)\n        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)\n        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000d61c8d48> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2374)\n        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)\n        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)\n        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)\n        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000fbb10008> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2374)\n        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)\n        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)\n        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)\n        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000fbb100d8> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2374)\n        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)\n        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)\n        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)\n        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000fbb10150> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2374)\n        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)\n        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)\n        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)\n        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000fbb101c8> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2374)\n        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)\n        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)\n        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)\n        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000fbb10240> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2374)\n        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)\n        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)\n        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)\n        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000fbb102b8> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2374)\n        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)\n        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)\n        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)\n        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000fbb10330> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2374)\n        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)\n        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)\n        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)\n        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000fbb103a8> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2374)\n        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)\n        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)\n        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)\n        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000fbb10420> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2374)\n        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)\n        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)\n        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)\n        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000fbb10498> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSession(Request.java:2374)\n        at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)\n        at org.apache.webbeans.web.context.WebContextsService.destroySessionContext(WebContextsService.java:553)\n        at org.apache.webbeans.web.context.WebContextsService.endContext(WebContextsService.java:228)\n        at org.apache.webbeans.servlet.WebBeansConfigurationListener.sessionDestroyed(WebBeansConfigurationListener.java:197)\n        at org.apache.catalina.session.StandardSession.expire(StandardSession.java:801)\n        - locked <0x00000000fbb10510> (a org.apache.catalina.session.StandardSession)\n        at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)\n        at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:736)\n        - locked <0x00000000fa5be668> (a java.lang.Object)\n        at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:488)\n        at org.apache.catalina.connector.Request.doGetSession(Request.java:2909)\n        at org.apache.catalina.connector.Request.getSessionInternal(Request.java:2635)\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:464)\n        at org.apache.catalina.valves.rewrite.RewriteValve.invoke(RewriteValve.java:540)\n        at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:651)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n        at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:651)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:407)\n        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:754)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1376)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n        - locked <0x00000000f898c128> (a org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:748)\n\n\t\t\n\n\n\n\n\n\njava.io.IOException: Unable to delete file [....ABCDE.session] which is no longer required\n\tat org.apache.catalina.session.FileStore.remove(FileStore.java:269)\n\tat org.apache.catalina.session.StoreBase.processExpires(StoreBase.java:189)\n\tat org.apache.catalina.session.PersistentManagerBase.processExpires(PersistentManagerBase.java:433)\n\tat org.apache.catalina.session.ManagerBase.backgroundProcess(ManagerBase.java:558)\n\tat org.apache.catalina.core.StandardContext.backgroundProcess(StandardContext.java:5406)\n\tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1396)\n\tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1400)\n\tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1400)\n\tat org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1368)\n\tat java.lang.Thread.run(Thread.java:748)",
    "comments": [
      "Although it would likely solve this issue, I think it would not be desirable to synchronize the org.apache.catalina.session.FileStore.load(String)/.remove(String) methods.\n\nInstead it would be better to prevent loading a session twice in a single thread.",
      "Created attachment 35763\nTest case that shows infinite recursion on session loading\n\nThe attached test case shows the described infinite recursion. It has to jump through a lot of hoops to accomplish this.",
      "Created attachment 35764\nRefactor part one to make fix more readable\n\nExtract loading from store into private method",
      "Created attachment 35765\nRefactor part two to make fix more readable\n\nFurther extraction of functionality in private method to load sessions from store",
      "Created attachment 35766\nRefactoring part three to make fix more readable\n\nExtract reactivation of sessions into private method",
      "Created attachment 35767\nStore currently loaded session in thread local storage to load it only once\n\nLoad sessions only once from store.",
      "Shouldn't the ThreadLocal cleanup sessionToSwapIn.remove(); be in a finally{..} block? (just in case)\n\nA ThreadLocale stuck session would prevent garbage collection of webAppClassLoader if the app get's unloaded.",
      "Created attachment 35768\nStore currently loaded session in thread local storage to load it only once\n\nStore currently loaded session in thread local storage to load it only once (guard thread local with a try catch block)",
      "Thanks for the detailed report and feedback, it would be great, if you could check, whether this really fixes your problem.\n\nFixed in:\n- trunk for 9.0.7 onwards\n- 8.5.x for 8.5.30 onwards\n- 8.0.x for 8.0.51 onwards\n- 7.0.x for 7.0.86 onwards",
      "My problem is fixed, instead of endless \"Session destroyed\" and \"IOException\" log entry loops I now get a single such log entry only combined with a single IOException:\n\n16.03.2018 08:43:31.540 [http-nio-8080-exec-1] DEBUG d.b.w.c.application.listener.ApplicationListener - Session destroyed: BB45287...; creationTime: 2018/03/16 08:13:45:201 MEZ; lastAccessTime: 2018/03/16 08:13:52:843 MEZ; usageTime: 7642 ms;\nM\u00e4r 16, 2018 8:43:31 AM org.apache.catalina.session.PersistentManagerBase swapIn\nSCHWERWIEGEND: Swapped session [BB45287089392C6B6B13AD5B51FD051A] is invalid\nM\u00e4r 16, 2018 8:43:31 AM org.apache.catalina.session.PersistentManagerBase removeSession\nSCHWERWIEGEND: Exception removing session  Unable to delete file [...BB45287089392C6B6B13AD5B51FD051A.session] which is no longer required\njava.io.IOException: Unable to delete file [...\\BB45287089392C6B6B13AD5B51FD051A.session] which is no longer required\n\tat org.apache.catalina.session.FileStore.remove(FileStore.java:269)\n\tat org.apache.catalina.session.PersistentManagerBase.removeSession(PersistentManagerBase.java:598)\n\tat org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:725)\n\tat org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:494)\n\n\n\nAfter that, the user gets a new session and can continute to work, without killing the JVM via OutOfMemoryError.\n\nThanks for the quick fix."
    ],
    "creation_ts": "2018-03-13T10:59:48Z",
    "fixes": [
      62175
    ]
  },
  {
    "id": 66842,
    "summary": "Http2AsyncUpgradeHandler does not update overhead count based on sent frames",
    "description": "Encountered while testing configurations for https://bz.apache.org/bugzilla/show_bug.cgi?id=66841\n\n<Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11Nio2Protocol\"\n               connectionTimeout=\"20000\" maxThreads=\"150\"\n               SSLEnabled=\"true\" scheme=\"https\" secure=\"true\" useAsyncIO=\"true\" >\n        <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n        <SSLHostConfig>\n\t\t\t<Certificate certificateKeystoreFile=\"conf/certs/devkeystore\"\n\t\t\t\t\t\t type=\"RSA\"/>\n        </SSLHostConfig>\n    </Connector>\n\nGiven an application using Spring server sent event emitters to send notifications to logged in users and the application sends heartbeat messages through those SSE emitters to test they are still active. If using a connector config similar to above (HTTP 2 upgrade and useAsyncIO true) then the data frames of the heartbeat message will not reduce the overhead count but the WINDOW_UPDATE frames received in acknowledgement will increase the overhead count. This causes the overhead count to be exceeded within just a few heartbeat cycles.\n\nTo reproduce:\n1. Use NIO2 protocol with Http2Protocol upgrade and useAsyncIO true\n2. deploy application with endpoint to create event stream that the application sends messages on continuously from separate thread\n3. Access endpoint from browser (I used chrome but assume it occurs with other browsers)\n4. wait\n\nAfter each message sent on the event stream a WINDOW_UPDATE frame will be received which increases the overhead count. Without the data frames of the sent messages lowering the overhead count the connection will quickly be closed due to overhead count exceeded.",
    "comments": [
      "Fixed in:\n- 11.0.x for 11.0.0-M10 onwards\n- 10.1.x for 10.1.12 onwards\n-  9.0.x for  9.0.79 onwards\n\n8.5.x was unaffected."
    ],
    "creation_ts": "2023-08-03T17:51:44Z",
    "fixes": [
      66842
    ]
  },
  {
    "id": 11117,
    "summary": "Coyote connector does not correctly deal with large PUT when using chunked transfer encoding",
    "description": "I've built a small test servlet (included below) that shows this behaviour.\n\nIf I upload data to tomcat (configured to use the HTTP/1.1 Coyote connector)\nusing a chunked transfer-encoding on a PUT, then the result (i.e. what I read\nusing the servlet's request.getInputStream() is corrupted.\n\nThis _only_ happens on large PUTs (it happens every time I tried it (about 10)\non a large PUT - I was testing with something around 700 kB, and another thing\nof about 1 MB, but does NOT always corrupt it in the same way. I did not see any\ncorruption on small files (~50 kB and smaller), though I didn't test this\nextensively.\n\nThe total length of the data read is exactly correct (712080 bytes in my first\ntest). At the first point of corruption in the file, a chunk header appears in\nthe output (\"\\r\\n1000\\r\\n\") followed by correct data from about 700 bytes later\non, then a second copy (in the correct place, I think) of the corrupt data (i.e.\ncorrect data, followed by the chunk header, followed by some data repeated, the\nsecond instance of which is in the correct place - so the first instance is\nbeing produced _instead_ of the correct data for that point in the input).\n\nTest servlet follows:\n\nimport java.io.*;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\n\npublic class Test extends HttpServlet\n{\n\n    public void doPut(HttpServletRequest req, HttpServletResponse res)\n                throws ServletException, IOException\n    {\n        FileOutputStream fos = new FileOutputStream(\"/tmp/servlet-out\");\n\n        InputStream is = req.getInputStream();\n\n        byte buf[] = new byte[2000];\n        int ret;\n\n        while((ret = is.read(buf)) > 0) {\n            fos.write(buf, 0, ret);\n        }\n\n        fos.close();\n        is.close();\n\n        PrintWriter pw = res.getWriter();\n        pw.println(\"Done\");\n        pw.flush();\n        pw.close();\n    }\n}",
    "comments": [
      "Assuming that there's indeed a bug, this will be triggered by how the client\ngenerates the chunks (I can translate by: thanks for attaching a test servlet,\nbut what I actually need is the client).",
      "Ok.\nI originally found this bug when using a program based on slide's webdav client\nlibraries. It does not appear to be specific to this, though (i.e. I had no\ndifficulty triggering it in other ways). \nFollowing is a (very) minimal test program that seems to trigger this, at least\nin combination with the test servlet I gave previously (i.e. the output file\nfrom the servlet is NOT the same as the input file for the program here):\n\nimport java.net.*;\nimport java.io.*;\n\npublic class TestChunkedPut\n{\n    private static final String HOST = \"localhost\";\n    private static final int PORT = 8080;\n    private static final String PATH = \"/testcontext/test\";\n    private static final String FILE = \"/tmp/testfile\";\n\n    public static void main(String[] args) {\n        try {\n            Socket sock = new Socket(HOST, PORT);\n\n            OutputStream os = sock.getOutputStream();\n\n            os.write((\"PUT \"+PATH+\" HTTP/1.1\\r\\n\").getBytes());\n            os.write((\"Host: \"+HOST+\":\"+PORT+\"\\r\\n\").getBytes());\n            os.write(\"Transfer-Encoding: chunked\\r\\n\".getBytes());\n            os.write(\"\\r\\n\".getBytes());\n\n            InputStream is = new FileInputStream(FILE);\n\n            byte buf[] = new byte[4096];\n            int bytes;\n\n            while((bytes = is.read(buf)) > 0) {\n                os.write((Integer.toString(bytes, 16) + \"\\r\\n\").getBytes());\n                os.write(buf, 0, bytes);\n                os.write(\"\\r\\n\".getBytes());\n            }\n\n            os.write(\"0\\r\\n\\r\\n\".getBytes());\n\n            os.close();\n            sock.close();\n            is.close();\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"Done\\n\");\n    }\n}",
      "Problem diagnosed, patch attached.\nThe detailed cause:\n\nThis code sets a particular buffer in a ByteChunk, and sets a specific start/end\nto this buffer. This allows sharing of the buffers, rather than copying them\naround.\n\nIn this code, the buffer was set (in chunk - the output ByteChunk) as pointing\nto some part of the buffer in readChunk (the input ByteChunk), which is fine.\nHowever, in one particular code path, this was immediately followed by a call to\nparseCRLF() - which simply swallows a CRLF pair. In the very unfortunate event\n(which happened on sufficiently large inputs with some regularity) of this CRLF\nbeing over the end of the buffer, more content would need to be read in order to\ndo this. This refilled readChunk, but because this was shared with the (output)\nchunk, the output buffer was _also_ overwritten. Output is then corrupted.\n\nThis is fixed here by deferring the parseCRLF() until later (the next call to\ndoRead())\n\nThis fix is critical for PUT (and presumably things like POST, or anything else\nwith a request-body) to work reliably with chunked transfer-encoding. \n\nIndex: filters/ChunkedInputFilter.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-connectors/http11/src/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java,v\nretrieving revision 1.5\ndiff -u -r1.5 ChunkedInputFilter.java\n--- filters/ChunkedInputFilter.java     20 Jun 2002 11:14:30 -0000      1.5\n+++ filters/ChunkedInputFilter.java     1 Aug 2002 07:13:44 -0000\n@@ -136,6 +136,12 @@\n      */\n     protected boolean endChunk = false;\n \n+    /**\n+     * Flag set to true if the next call to doRead() must parse a CRLF pair\n+     * before doing anything else.\n+     */\n+    protected boolean needCRLFParse = false;\n+\n \n     // ------------------------------------------------------------- Properties\n \n@@ -158,6 +164,11 @@\n         if (endChunk)\n             return -1;\n \n+        if(needCRLFParse) {\n+            needCRLFParse = false;\n+            parseCRLF();\n+        }\n+\n         if (remaining <= 0) {\n             if (!parseChunkHeader()) {\n                 throw new IOException(\"Invalid chunk\");\n@@ -184,7 +195,7 @@\n             chunk.setBytes(buf, pos, remaining);\n             pos = pos + remaining;\n             remaining = 0;\n-            parseCRLF();\n+            needCRLFParse = true;\n         }\n \n         return result;",
      "Any chance of getting this fix committed? This is the only thing holding us from\nmoving to using 4.1.x (which we want to do for all the other nice things it\nadds), and this patch is straightforward and well tested.",
      "Your patch has been applied.\n\nThanks much!",
      "Oh dear. Turns out there's another very closely related case which can be\ntriggered (but on my development machine, it never is - others have reported\nthis to me) in very rare circumstances. I changed the logic to compute the\nlength of the chunk as we read the chunk header, rather than first determining\nthe chunk header length, then computing it after the entire header has been\nread. This is neccesary because it's possible (if unlikely - so it gets\ntriggered rarely) for the buffer to be re-filled (with new data) in between\nthis, so the length computation fails.\n\nHere's the patch:\n\nIndex: src/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-connectors/http11/src/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java,v\nretrieving revision 1.6\ndiff -u -r1.6 ChunkedInputFilter.java\n--- src/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java   8 Aug\n2002 02:55:35 -0000       1.6\n+++ src/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java   12 Aug\n2002 03:12:24 -0000\n@@ -283,8 +283,6 @@\n \n         int result = 0;\n         boolean eol = false;\n-        int begin = pos;\n-        int end = begin;\n         boolean readDigit = false;\n \n         while (!eol) {\n@@ -299,11 +297,9 @@\n                 eol = true;\n             } else {\n                 if (HexUtils.DEC[buf[pos]] != -1) {\n-                    if (!readDigit) {\n-                        readDigit = true;\n-                        begin = pos;\n-                    }\n-                    end = pos;\n+                    readDigit = true;\n+                    result *=16;\n+                    result += HexUtils.DEC[buf[pos]];\n                 }\n             }\n \n@@ -313,15 +309,6 @@\n \n         if (!readDigit)\n             return false;\n-\n-        int offset = 1;\n-        for (int i = end; i >= begin; i--) {\n-            int val = HexUtils.DEC[buf[i]];\n-            if (val == -1)\n-                return false;\n-            result = result + val * offset;\n-            offset = offset * 16;\n-        }\n \n         if (result == 0)\n             endChunk = true;",
      "I don't see any reason not to compute the chunk length on the fly, and that \nmakes the algorithm simpler. Sorry for not doing that in the first place ... \nBill, can you apply the patch if it looks good to you ? (I would only be able \nto commit it tomorrow)",
      "It seems that Remy found time to commit your patch before I got to it.  It's \nnow in the CVS HEAD.\n\nThanks again!"
    ],
    "creation_ts": "2002-07-24T07:44:57Z",
    "fixes": [
      11117
    ]
  },
  {
    "id": 65443,
    "summary": "Allow subclassing CorsFilter",
    "description": "I would like to subclass the the CorsFilter to be able to provide a custom list of allowed origins, instead of configure them from the init parameters.\nUnfortunately the method isOriginAllowed uses the instance variable allowedOrigns directly. This makes it impossible to override the available function: getAllowedOrigins and isAnyOriginAllowed.\n\nSo i would propose the change the isOriginAllowed function from the CorsFilter class as follows:\n\n    /**\n     * Checks if the Origin is allowed to make a CORS request.\n     *\n     * @param origin\n     *            The Origin.\n     * @return <code>true</code> if origin is allowed; <code>false</code>\n     *         otherwise.\n     */\n    private boolean isOriginAllowed(final String origin) {\n        if (isAnyOriginAllowed()) {\n            return true;\n        }\n\n        // If 'Origin' header is a case-sensitive match of any of allowed\n        // origins, then return true, else return false.\n        return getAllowedOrigins().contains(origin);\n    }",
    "comments": [
      "Sounds like a perfect opportunity for you to supply a patch (attached here) or a pull-request via GitHub. I would support its inclusion into Tomcat.",
      "Just created a pull request: https://github.com/apache/tomcat/pull/432",
      "(In reply to ekkelenkamp from comment #2)\n> Just created a pull request: https://github.com/apache/tomcat/pull/432\n\nI am -0.\n\nWouldn't it be better to provide configuration methods for those settings (e.g. setAllowedOrigins(boolean, Collection<String>) instead of overriding getter methods?\n\nBTW, the map returned by `getAllowedOrigins()` is mutable, though its mutations are not thread-safe.",
      "Indeed I would prefer if there is a configuration method available for those settings. I just assumed the state was immutable.\nThe setAllowedOrigins would have to set the anyOriginAllowed variable as well.\n\nChanging the mutable Map that currently is returned from the getAllowedOrigins will not do, since the anyOriginAllowed variable needs to be updated as well in case a wildcard domain is set.",
      "The initial implementation was clearly on the basis that the state was set during init() and then never changed but if you have a requirement to change it then I don't see a good reason not to refactor the code and provide setters.\n\nI'll note that other built-in filters have getters and setters.",
      "Thanks for the feedback. \nThe requirement is indeed to be able to configure the allowed origins at runtime. \n\nShould I provide a pull request for this enhancement or is this kind of refactoring done by the core developers?",
      "Just to let you know, I found a convenient way to get the job done without changing the code.\nSimply extending the getInitParameter method, does the job. As a reference, this is the pseudo setup of my code:\n\n/**\n * extended to allow configuration at runtime.\n */\npublic final class MyCorsFilter extends CorsFilter {\n\n    private static String getCorsAllowedOrigins() {\n        return config.getCorsAllowedOrigins(); // get config from database \n    }\n\n    @Override\n    public String getInitParameter(String name) {\n        if (name.equals(\"cors.allowed.origins\")) {\n            return getCorsAllowedOrigins();\n        }\n        return super.getInitParameter(name);\n    }\n}",
      "This violates the servlet spec, but hey if you want to do that in your code, it's fine.\n\nHonestly, I was hoping you'd end up writing a proper patch because I think this is a good idea to have in the base class.",
      "I've made the CorsFilter class sufficiently extensible to meet this requirement. I opted not to provide setters as that opens up additional concurrency issues.\n\nFixed in:\n- 10.1.x for 10.1.0-M3 onwards\n- 10.0.x for 10.0.9 onwards\n- 9.0.x for 9.0.51 onwards\n- 8.5.x for 8.5.70 onwards",
      "Thanks for providing the change. I'll use it in my code once available in the new releases."
    ],
    "creation_ts": "2021-07-09T18:08:08Z",
    "fixes": [
      65443
    ]
  },
  {
    "id": 69614,
    "summary": "Ill formatted priority header results in frozen HTTP/2 connection",
    "description": "Created attachment 40007\nSimple java reproducer\n\nWe recently began to receive ill-formatted priority HTTP headers with a colon instead of an equal and it broke our production environment.\n\nThe bug can be reproduced systematically following these steps:\n- start any tomcat configured with TLS (required for HTTP/2) and HTTP/2\n- open an HTTP/2 connection using a valid request\n- send a second request (on the same HTTP/2 connection) with an ill formatted `priority` header set to \"u=1:i\" (note the `:` instead of the `,`)\n\nFrom that point, all requests using the same HTTP/2 connection will time out, wether they are valid or not.\n\nNote that sending directly an invalid request will NOT end in the same behaviour, an exception will be thrown and the HTTP/2 connection will be discarded.\n\nOur workaround was to filter those ill formatted request before the hit tomcat.\n\nThe expected behaviour would be to receive a 400 http status code without affecting the other streams of the HTTP/2 connection.\n\nYou will find attached a simple java reproducer.",
    "comments": [
      "ERRATUM\n\n> We recently began to receive ill-formatted priority HTTP headers with a\n> colon instead of a *comma* and it broke our production environment.\n...\n> The expected behaviour would be to receive a 400 http status code without\n> affecting the other streams of the HTTP/2 connection.",
      "Fixed in:\n- 11.0.x for 11.0.6 onwards\n- 10.1.x for 10.1.40 onwards\n-  9.0.x for  9.0.103 onwards"
    ],
    "creation_ts": "2025-03-18T09:20:52Z",
    "fixes": [
      69614
    ]
  },
  {
    "id": 65448,
    "summary": "Download of file via Servlet OutputStream blocks when using SSL",
    "description": "Created attachment 37950\nA ZIP file containing curl outputs, threaddumps and system information\n\nWe have a very simple Servlet implementation that lets clients download a file.\n\nHere's the code:\n\ntry (InputStream in = new BufferedInputStream(new FileInputStream(resourceFile), IOTools.SIZE_64K)) {\n  IOTools.pump(in, response.getOutputStream());\n}\n\nThe pump method copies the bytes from the InputStream to the OutputStream (in blocks of 64K) and flushes the OutputStream after that.\n\nThe problem:\nWhen downloading a file with cURL command:\n\ncurl -v --insecure \"https://btdevapp01:8443/tribefire-services/res/adx/fonts/exactly130703.txt\"  --output test.txt\n\nit will block halfway through the response and will wait 1 min until the download resumes and finishes successfully.\n\nHere are some observations:\n\n* When the downloaded file is below the size of 130.703 Bytes, the download works all the time. Only when the file is greater or equal to 130.073 Bytes, the download might fail.\n\n* The 1 min waiting period is related to the configured \"connectionTimeout\" in the server.xml. When we increase that config to - say - 120.000, we have to wait 2 minutes until the download finishes.\n\n* This problem only occurs when using HTTPS. When using the equivalent HTTP address, it works all the time for all file sizes.\n\n* This is not just a problem with cURL. We were able to reproduce problems with Chrome 91 and Firefox 90.\n\n* With the help of JMX, we can read out that the Maximum Request Time of the HTTPS Connectors is 3487 ms. Hence, it does not register that the user has to wait over a minute to get the full result.\n\n\nWe were not able to reproduce the problem on our local environments, but this might also be because we're using mostly Macs and the target platform where we encounter the problem is Windows Server 2019.\n\nI am attaching the following:\n\n* cURL output of downloading the same file twice, one time it is ok (curl-working.txt) and one time when it fails (curl-failing.txt)\n\n* Threaddumps of the server, one while it is idle (threaddump-idle.txt), one when it is blocking (threaddump-blocking.txt) (where I cannot find anything suspicious).\n\n* Information about the server (Tomcat and Host) in server-info.txt\n\n* A video showing how downloading the same file works 7 times, then fails, and after that works again.... (edit: this exceeds the limit of the ticketing system but can be provided on request)\n\nI understand that this is very little to work with but this is all the information that we could compile.",
    "comments": [
      "Important thing that I forgot: when downloading files directly via Tomcat, it also works all the time. \nOnly the combination of the Servlet with HTTPS causes issues. We have no problem when using HTTP.",
      "If the DefaultServlet is working via HTTPS then the error is in your code. Did you check that?",
      "Yes, absolutely. We even pulled the code out to a separate app to check it individually.\n\nMy main point is that it works when using HTTP. And it is really a small code and I would consider it to be ok.",
      "One other thing: how would the code be influenced by the connection timeout of the server?\nIt's not that the client opens a new connection or something... it's just that the server pauses sending the response. I would not know how to even write the code on purpose so that it is related to the connection timeout.",
      "A few questions (there will be more depending on the answers to these):\n\n1. Does this happen with Tomcat 9.0.48?\n\n2. How often does the problem occur? 1 request in 5? 1 in 10? 1 in 20?\n\n3. Does the problem still occur if you disable the Tomcat Native library (your connector should appear as \"https-nio-jsse\" rather than \"https-nio-openssl\" in the logs and thread dumps)?\n\n4. Does the problem occur if you switch to NIO2 and OpenSSL (connector will appear as \"https-nio2-openssl\" in the logs)?\n\n5. Does the problem occur if you switch to NIO2 without OpenSSL (connector will appear as \"https-nio2-jsse\" in the logs)?\n\n6. Are you able to provide the simplest servlet that reproduces this issue?\n\n7. If we provide custom Tomcat builds (based on a specific commit, possibly with additional debug logging), are you able to test with that version to see if the problem still exists? (If the problem appeared recently, there are a couple of changes that might be responsible. Testing with custom builds will let us test this theory.)",
      "I will hopefully be able to answer your questions later today. This is happening on a customer site and working remotely is quite...painful.\n\nWhat I can answer at the moment:\n\n1, 3, 4, 5. Will have to check later.\n\n2. The problem occurs with no obvious pattern.\nYesterday, I was able to reproduce it almost always. Today, when I retried, it took 5-10 tries to reproduce it. The Windows env was not rebooted, but I restarted Tomcat to add some debug information myself.\n\n6. Yes, this is the main essence of the code (I stripped away all things not related to the actual problem):\n\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class ServletForAsf extends HttpServlet {\n\n\tprivate static final long serialVersionUID = 3266630280219605924L;\n\n\t@Override\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tString resourcePath = request.getPathInfo();\n\t\tFile resourceFile = new File(resourcePath);\n\n\t\tServletOutputStream outputStream = response.getOutputStream();\n\n\t\tint bufferSize = 1 << 16;\n\t\ttry (InputStream in = new BufferedInputStream(new FileInputStream(resourceFile), bufferSize)) {\n\t\t\tfinal byte[] buffer = new byte[bufferSize];\n\n\t\t\tint count;\n\t\t\tlong totalCount = 0;\n\n\t\t\twhile ((count = in.read(buffer)) != -1) {\n\t\t\t\ttry {\n\t\t\t\t\toutputStream.write(buffer, 0, count);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new IOException(\"Error while transfering data. Data transferred so far: \" + totalCount + \". Current buffer size: \" + count, e);\n\t\t\t\t}\n\t\t\t\ttotalCount += count;\n\t\t\t}\n\t\t\toutputStream.flush();\n\t\t}\n\t}\n}\n\n7. Yes, testing a custom Tomcat would be possible. Fortunately, the environment where this is happening is a test env and the customer is rather friendly.\n\n\nIn the meantime, the comment about the DefaultServlet made me think (and debug).\nIt seems that the DefaultServlet does not take the same route as our Servlet does.\n\nWhen the DefaultServlet serves a file, it is not done within the Servlet directly (as far as I can tell) but rather in\n\nHttp11Processor.processSendfile(SocketWrapperBase<?>) line: 1359\n\nThe main thing is that this eventually calls \nsd.fchannel.close();\n\nWhen I follow the path of our servlet, I was not able to actually find an actual flush() call on the underlying socket.\n\nSo, my current thinking is that the data is not flushed to the client successfully and that is why it needs to wait for the connection timeout.",
      "Update on question 1:\nYes, I can reproduce the problem with Tomcat 9.0.48.\n\nTo downgrade the server, I replaced\n\n* lib/*\n* bin/bootstrap.jar\n* bin/commons-daemon.jar\n* bin/tomcat9*.exe\n* bin/tcnative-1.dll",
      "And here are the answers for the other questions:\n\n3. APR disabled (org.apache.catalina.core.AprLifecycleListener commented out)\nThreads: https-jsse-nio-8443-exec-*\nNot reproducible\n\n4. APR enabled, NIO2 (replaced org.apache.coyote.http11.Http11NioProtocol by org.apache.coyote.http11.Http11Nio2Protocol)\nThreads: https-openssl-nio2-8443-exec-*\nNot reproducible\n\n5. APR disabled, NIO2 (org.apache.catalina.core.AprLifecycleListener commented out, replaced org.apache.coyote.http11.Http11NioProtocol by org.apache.coyote.http11.Http11Nio2Protocol)\nThreads: https-jsse-nio2-8443-exec-*\nNot reproducible\n\n\nSo, that basically means that this only happens with NIO and APR.",
      "Thanks for all the information. \n\nThat you still see the issue with 9.0.48 means that the response buffer flushing changes in 9.0.49 are not the root cause of this issue.\n\nThat the observation of the issue is limited to NIO+OpenSSL and not (NIO+JSSE, NIO2+OpenSSL or NIO2+JSSE) suggests where the root cause may lie but it is possible that NIO+OpenSSL just happens to have the right timing to trigger an issue that could affect other combinations.\n\nSimilarly, that using sendfile appears to avoids the issue suggests where the root cause may lie.\n\nI will set up a Windows 2019 VM to see if I can reproduce this.\n\nMeanwhile, could you test with 9.0.46? There were some NIO changes between 9.0.46 and 9.0.48 it would be helpful to rule in/out.\n\nAnd another question. Can you recreate this with debug logging enabled? Specifically with the following in logging.properties:\norg.apache.coyote.level = FINE\norg.apache.tomcat.util.net.level = FINE\nIf yes, please provide a copy of the debug logs for when the issue occurred.",
      "I tested with 9.0.46 and was not able to reproduce the problem.\n(Thread names: http-nio-8080-exec-*, APR on, NIO)\n\nI will attach the log file containing the requested FINE output. The file only contains log lines that have not been produced by our software. If you need the full log, please let me know.\n\nTo reproduce the problem, I have to constantly run the cURL command. So there might be remanants from the previous run in the log, but the last entries are the ones that were written when the download was blocked.\n\nThe system that I am testing on *might* be used by the customer, so there is a slight chance that there is traffic in the log that is not related to my download, but I hope this was not case here.",
      "Created attachment 37953\nTomcat FINE log while the downloading was blocked",
      "For the latest tests, I have reduced the connection timeout to 30s (which might be good to know when reading the log file).",
      "(In reply to Roman from comment #10)\n> I tested with 9.0.46 and was not able to reproduce the problem.\n> (Thread names: http-nio-8080-exec-*, APR on, NIO)\n\nThat is an HTTP connector. ARe you sure you tested with HTTPS?\n\n> I will attach the log file containing the requested FINE output. The file\n> only contains log lines that have not been produced by our software. If you\n> need the full log, please let me know.\n> \n> To reproduce the problem, I have to constantly run the cURL command. So\n> there might be remanants from the previous run in the log, but the last\n> entries are the ones that were written when the download was blocked.\n> \n> The system that I am testing on *might* be used by the customer, so there is\n> a slight chance that there is traffic in the log that is not related to my\n> download, but I hope this was not case here.\n\nThanks. Still Getting my test system set up. I'll look at the logs after that.",
      "> That is an HTTP connector. ARe you sure you tested with HTTPS?\n\nYes, I just took the first exec thread name that I found in the threaddump. Sorry for the confusion.",
      "Debug log aren't very helpful. If I am unable to recreate this, we may need to start down the custom Tomcat build route.\n\nWhich version of Java are you using?",
      "I haven't been able to recreate this issue locally. Also, the debug logs didn't have much information on writes - which is where the problem appears to be.\n\nTherefore, I think it is time to move to the custom Tomcat build.\n\nThe source code for the first build (and any future builds) can be found at:\nhttps://github.com/markt-asf/tomcat/tree/bz-65448\n\nThe binaries can be found at:\nhttps://people.apache.org/~markt/dev/\n\nPlease can you retest with v9.0.51-bz-65448-v1 and post the resulting logs. The new logs are INFO level logs. Please aim to retain these log messages in their entirety. The timestamps, thread names and messages are equally important.\n\nv1 adds INFO level logging at the point where plaintext data is encrypted and written to the network. Depending on what the logs look like, v2 will add additional logging either further up or lower down the call stack to track down the root cause.",
      "Ok, I will do this tomorrow.\nThanks for your help!\n\nIn the meantime, this is the Java version we use:\n\nSpecification: Java Virtual Machine Specification 11 (Oracle Corporation)\nVirtual Machine: OpenJDK 64-Bit Server VM 11.0.9.1+1 (AdoptOpenJDK)\nJava Vendor: AdoptOpenJDK\nJava Version: 11.0.9.1",
      "One more thing: I did a threaddump of the server while the download was blocking and did not see any Thread that was out of the ordinary. So, I would assume that the writing to the socket may have already finished, but not yet committed (i.e., flushed). Hence maybe the waiting time for the socket timeout when suddenly the client receives the remainder of the response. \nThis is also fit with the statistics that show that the maximum request processing time was just a few seconds, in contrast to the actual waiting time of 30 seconds (or more, depending on the timeout config).",
      "Created attachment 37955\nLogs of v1, with screenshot of cURL/Log-Tail when it blocked",
      "I have attached the full logs of the test run with v1.\nIt took quite some tries to actually reproduce it, but I made a screenshot at the time it happened so that you can correlate the blocking with timestamps in the log.",
      "Thanks for running the test. It is likely that the issue was harder to reproduce due to the additional logging.\n\nYou appear to be using a non-default log format. It would be helpful if the Thread name could be restored  but I can work without it if that makes the issue harder to reproduce.\n\nReviewing the logs has identified something I want to look at a little more closely. I've reworked the log messages to try and reduce the impact of the logging.\n\nPlease can you retest with v9.0.51-bz-65448-v2 and post the resulting logs.",
      "I have been able to recreate something locally that may well be the same issue you are seeing. The v2 logs should confirm it. I'm working on a fix.",
      "Created attachment 37956\nLogs of v2, with screenshot of cURL/Log-Tail when it blocked",
      "Sounds great!\nI have attached of the second run. This time, it blocked the very first time.\nThe second time, it worked normally.\nUnfortunatelly, we are using our own log manager and thus I am not sure whether we can include the thread names.",
      "I think this is fixed. Please test v9.0.51-171a2cd and report back. Debug logging has been removed. You can removed any additional debug log settings from logging.properties.",
      "With v9.0.51-171a2cd, I can no longer reproduce the problem (with NIO+APR).\nVery well done, thank you!\nOut of curiosity, what was the fix? Is there a git commit that would show the necessary changes?\nAgain, thank you for your quick help and support!",
      "It would also be interesting what makes this environment so special that the issue is so hard to reproduce.",
      "I was waiting for your test results before pushing the fix. This is the 9.0.x fix:\nhttps://github.com/apache/tomcat/commit/171a2cdc\n\nThe reason it is hard to reproduce is that it requires a specific set of circumstances that are affected by timing.\n\nThe NIO connector uses a Poller when it needs to simulate blocking. If a write can't complete immediately, the socket is added to the Poller and the write continues when the Poller signals that the socket is ready for write.\n\nThe problem was the way Tomcat handled TLS writes. If the final non-encrypted write for a response was fully encrypted but the encrypted data could not be fully written, the socket was not added to the Poller. The final block of encrypted data sat in the buffers until the connection timed out - at which point it was flushed.\n\nI was able to simulate this by configuring a VM with a slow connection (128kbps) and then writing an ~80k file. By carefully adjusting the length of the file, I was able to trigger this every time.\n\nIn a real system, triggering the issue would depend on how busy the network stack was, how quickly the client read, the exact size of the response (including headers) etc. The odds of hitting the exact combination are slim.\n\nFixed in:\n- 10.1.x for 10.1.0-M3 onwards\n- 10.0.x for 10.0.9 onwards\n- 9.0.x for 9.0.51 onwards",
      "Thanks for the explanation and the fix!",
      "Restore correct version and OS info. This should not be edited."
    ],
    "creation_ts": "2021-07-13T19:12:43Z",
    "fixes": [
      65448
    ]
  },
  {
    "id": 64560,
    "summary": "DeltaSession discards pending deltas when changeSessionId() is called",
    "description": "I had a problem in an application using Spring Security and using clustering with DeltaManager where some attributes would be replicated while others would not during login.\n\nBasically what I was seeing was:\n\n- First request to tomcat A\n- Session attributes on both tomcats afterwards:\nA=1\nB=2\n\n- Second request to tomcat A\n- Session attributes on tomcat A afterwards:\nC=1\nB=3\n- Session attributes on tomcat B afterwards:\nA=1\nB=3\n\nThus resulting in an invalid application state.\n\nUsing a debugger the calls on the session for the second request were:\n\nremoveAttribute(\"C\");\nsetAttribute(\"C\",1);\nchangeSessionId();\nsetAttribute(\"B\",3);\n\nSo it looks like all attribute changes made before changeSessionId got lost in replication.\n\nAfter looking at the tomcat code I think this is an issue with tomcat, because the changeSessionId calls DeltaSession#setId which in turn calls DeltaSession#resetDeltaRequest() which then discards the buffered AttributeInfo, so by the time the ReplicationValve is executed, only the last setAttribute call is seen as a delta.",
    "comments": [
      "Sorry, typo. \nIt should have said\n\nremoveAttribute(\"A\");\n\nabove (not C).",
      "Thanks for the report and for tracking down what was going on.\n\nI agree with your assessment.\n\nI have refactored the setId() methods.\n\nFixed in:\n- master for 10.0.0-M7 onwards\n- 9.0.x for 9.0.37 onwards\n- 8.5.x for 8.5.57 onwards\n- 7.0.x for 7.0.105 onwards"
    ],
    "creation_ts": "2020-06-25T09:36:15Z",
    "fixes": [
      64560
    ]
  },
  {
    "id": 41008,
    "summary": "POST request ignores command line parameters",
    "description": "example:\n<form method=\"POST\" action=\"test.exe?test1\"><input type=\"hidden\"\nvalue=\"test2\"><input type=\"submit\"></form>\n\nthis code does invoke the test.exe without passing the test1 command line parameter\n\nthe example works in apache httpd and ms iis\n\nfix:\n\nCGIServlet.java\n\n           if (!\"GET\".equals(req.getMethod()) && !\"POST\".equals(req.getMethod()) &&\n                    !\"HEAD\".equals(req.getMethod()))\n                return;",
    "comments": [
      "Created attachment 19164\nPatch to include POST query method when determining if the query string should be converted to CGI command line params\n\nAttached patch updates CGIServlet so that POSTs will be included when\ndetermining whether the query string should be converted to CGI command line\narguments.  It also cleans up the logic a bit.\tThis behavior mirrors the\nbehavior of the Apache httpd.",
      "(In reply to comment #1)\n> Created an attachment (id=19164) [edit]\n> Patch to include POST query method when determining if the query string should\n> be converted to CGI command line params\n> \n> Attached patch updates CGIServlet so that POSTs will be included when\n> determining whether the query string should be converted to CGI command line\n> arguments.  It also cleans up the logic a bit.\tThis behavior mirrors the\n> behavior of the Apache httpd.\n\nPatch works fine, thank you!",
      "Thanks for the patch. It has been applied to SVN and will be in 5.5.21 and 6.0.3\nonwards."
    ],
    "creation_ts": "2006-11-21T09:20:32Z",
    "fixes": [
      41008
    ]
  },
  {
    "id": 52830,
    "summary": "DataSource JNDI lookup with javax.naming.Name failed",
    "description": "I try to use tomcat 7 with hibernate 4.x I got an Naming exception on getting dataSource with javax.naming.Name.\n\nWorks when search with string. But hibernate migrate to Name in their code.\n\nSee:\nhttps://hibernate.onjira.com/browse/HHH-7012",
    "comments": [
      "Doesn't work with a javax.naming.Name create with key \"java:comp/env/jdbc/mydb\"\nIf you look at http://svn.apache.org/viewvc/tomcat/trunk/java/org/apache/naming/SelectorContext.java?revision=1225625&view=markup\n\nYou could see that prefix is only \"java:\" and  protected Name parseName(Name name) return name.getSuffix(1)",
      "Fixed in trunk and 7.0.x and will be included in 7.0.27 onwards.\n\nThanks for the report.",
      "The same bug happen on Tomcat 6.",
      "Re-opening to fix in Tomcat 6.",
      "Fix proposed for 6.0.x.",
      "Regarding the patch - r1298635 - I see one minor (theoretical?) issue.\n\nIt calls\nName result = new CompositeName();\n..\nresult.addAll(name.getSuffix(1));\n\n\nLooking at CompositeName#addAll(Name) in Java 6u31 I see that it expects that (Name instanceof CompositeName) and throws InvalidNameException if it is not. With a generic Name.getSuffix(int) that is not true.\n\nThough I do not see how other name implementations could be used here.\n\nHere is alternative implementation of the fix:\nTestNamingContext passes with it as well.\n[[[\n                Name result = name.getSuffix(1);\n                result.add(0, name.get(0).substring(prefixLength));\n                return result;\n]]]",
      "(In reply to comment #6)\nI've applied this alternative implementation in r1304468 (trunk), r1304471 (TC7)",
      "Fixed in 6.0.x and will be included in 6.0.36 onwards.",
      "on tomcat 7.0.29, with hibernate 4.1.5 final, i get the same error when defining my jdbc/mbsousdb in web.xml and context.xml then using\n\n        <non-jta-data-source>java:/comp/env/jdbc/mbsousdb</non-jta-data-source>  \n\nin persistence.xml.\nI tried jdbc/mbsousdb, java:comp/env/jdbc/mbsousdb an java:/comp//env/jdbc/mbsousdb, without success.",
      "Bugzilla is not a support forum and there is insufficient information in comment #9 to determine if there is a bug or if it is just a configuration error. Please follow-up on the users mailing list and only re-open this issue if it is determined there is still a bug to fix. If you do re-open this issue, you'll need to provide a test case (ideally the simplest web application possible - i.e. without hibernate) that demonstrates the issue. The simpler the tets case, the easier it will be for the developers to investigate,"
    ],
    "creation_ts": "2012-03-05T15:25:49Z",
    "fixes": [
      52830
    ]
  },
  {
    "id": 65460,
    "summary": "http2 request hang on request read",
    "description": "Question:\nWhen we are using http2 and upgrading tomcat`s version from 9.0.45 to 9.0.50. We find when server first startup evernthing goes fine, but after a while we see may request timeout from client side.\n\nBy seeing the pinpoint trace, we find request is blocking at StandardHostValve#invoke. Then caller get timeout, and disconnect. Then some how the server side finish its blocking and try to read/write some to the socket, then got exception like:\n\"IOException: stream reset\"\nor\n\"CloseNowException: This stream is not writeable\"\n\nAnd in changelog, since 9.0.49 we see some new changes in http2 overheadprotect, we think maybe these changes cause the problem. So we did some tests blow:\n1. http1 + tomcat9.0.50  fine\n2. http2 + tomcat9.0.50  hang\n3. http2 + tomcat9.0.45  fine\n4. http2 + tomcat9.0.50 + disable overheadprotect  fine",
    "comments": [
      "A stack trace when blocking happens:\n\nvoid java.lang.Object.wait(long) 272 97.1 %\nint org.apache.coyote.http2.Stream$StreamInputBuffer.doRead(ApplicationBufferHandler) 272 97.1 %\nint org.apache.coyote.Request.doRead(ApplicationBufferHandler) 272 97.1 %\nint org.apache.catalina.connector.InputBuffer.realReadBytes() 272 97.1 %\nboolean org.apache.catalina.connector.InputBuffer.checkByteBufferEof() 272 97.1 %\nint org.apache.catalina.connector.InputBuffer.read(byte[], int, int) 272 97.1 %\nint org.apache.catalina.connector.CoyoteInputStream.read(byte[], int, int) 272 97.1 %\nint org.apache.catalina.connector.CoyoteInputStream.read(byte[]) 272 97.1 %\nlong org.apache.commons.io.IOUtils.copyLarge(InputStream, OutputStream, byte[]) 272 97.1 %\nlong org.apache.commons.io.IOUtils.copy(InputStream, OutputStream, int) 272 97.1 %\nlong org.apache.commons.io.IOUtils.copyLarge(InputStream, OutputStream) 272 97.1 %\nint org.apache.commons.io.IOUtils.copy(InputStream, OutputStream) 272 97.1 %\nbyte[] org.apache.commons.io.IOUtils.toByteArray(InputStream) 272 97.1 %\nvoid com.OURCODEBASE.platform.openfeign.body.CustomBodyServletRequestWrapper.<init>(HttpServletRequest) 272 97.1 %\nvoid com.OURCODEBASE.platform.openfeign.body.RequestBodyCacheFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain) 272 97.1 %\nvoid org.springframework.web.filter.OncePerRequestFilter.doFilter(ServletRequest, ServletResponse, FilterChain) 272 97.1 %\nvoid org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) 272 97.1 %\nvoid org.apache.catalina.core.ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) 272 97.1 %\nvoid org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain) 272 97.1 %\nvoid org.springframework.web.filter.OncePerRequestFilter.doFilter(ServletRequest, ServletResponse, FilterChain) 272 97.1 %\nvoid org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) 272 97.1 %\nvoid org.apache.catalina.core.ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) 272 97.1 %\nvoid com.OURCODEBASE.platform.monitor.logging.tracing.TracingOncePerRequestFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain) 272 97.1 %\nvoid org.springframework.web.filter.OncePerRequestFilter.doFilter(ServletRequest, ServletResponse, FilterChain) 272 97.1 %\nvoid org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) 272 97.1 %\nvoid org.apache.catalina.core.ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) 272 97.1 %\nvoid org.apache.catalina.core.StandardWrapperValve.invoke(Request, Response) 272 97.1 %\nvoid org.apache.catalina.core.StandardContextValve.invoke(Request, Response) 272 97.1 %\nvoid org.apache.catalina.authenticator.AuthenticatorBase.invoke(Request, Response) 272 97.1 %\nvoid org.apache.catalina.core.StandardHostValve.invoke(Request, Response) 272 97.1 %\nvoid org.apache.catalina.valves.ErrorReportValve.invoke(Request, Response) 272 97.1 %\nvoid org.apache.catalina.core.StandardEngineValve.invoke(Request, Response) 272 97.1 %\nvoid org.apache.catalina.connector.CoyoteAdapter.service(Request, Response) 272 97.1 %\nAbstractEndpoint$Handler$SocketState org.apache.coyote.http2.StreamProcessor.service(SocketWrapperBase) 272 97.1 %\nAbstractEndpoint$Handler$SocketState org.apache.coyote.AbstractProcessorLight.process(SocketWrapperBase, SocketEvent) 272 97.1 %\nvoid org.apache.coyote.http2.StreamProcessor.process(SocketEvent) 272 97.1 %\nvoid org.apache.coyote.http2.StreamRunnable.run() 272 97.1 %\nvoid java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) 272 97.1 %\nvoid java.util.concurrent.ThreadPoolExecutor$Worker.run() 272 97.1 %\nvoid org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run() 272 97.1 %\nvoid java.lang.Thread.run() 272 97.1 %",
      "Complete Connector configuration please for both the hanging and working cases.",
      "all the test cases except case.4 are using the default settings. \ncase.4 just add follow settings to disable overhead protection:\noverheadCountFactor=\"0\"\noverheadDataThreshold=\"0\"\noverheadWindowUpdateThreshold=\"0\"",
      "HTTP/2 is not enabled by default so you can't possibly be using default settings. I specifically asked for the full Connector configurations for that reason. Please provide the complete Connector configuration please for both the hanging and working cases as requested.",
      "we are using embed tomcat together with spring boot.Here`s what we added:\nserver.http2.enable=true\n\nuse 'TomcatServletWebServerFactory' to customize connection by adding:\nhttp2Protocol.setMaxConcurrentStreams(100);\nhttp2Protocol.setMaxConcurrentStreamExecution(20);\nhttp2Protocol.setKeepAliveTimeout(60_000);\nconnector.addUpgradeProtocol(http2Protocol);\n\nand with case.4 additional settings are:\nhttp2Protocol.setOverheadCountFactor(0);\nhttp2Protocol.setOverheadDataThreshold(0);\nhttp2Protocol.setOverheadWindowUpdateThreshold(0);",
      "we run several more times with case.2 and find:\nwhen overhead count disconut to around -10640 to -10660, next request will hang till timeout and any requests after this will also hang till timeout. \n\n\nwe see these in log:\nConnection [35], Stream [0], Frame type [DATA] resulted in new overhead count of [-10,680]\nConnection [35], Stream [0], Frame type [HEADERS] resulted in new overhead count of [-10,660]\nConnection [35], Stream [0], Frame type [HEADERS] resulted in new overhead count of [-10,620]\nConnection [35], Stream [0], Frame type [DATA] resulted in new overhead count of [-10,640]\nConnection [35], Stream [0], Frame type [HEADERS] resulted in new overhead count of [-10,580]",
      "sorry I think the overhead cout is fine, we try another api and got a different overhead count when issue happens.\n\nbesides, we find some wired cases, pls see the reference:\nhttps://www.notion.so/dpy1123/tomcat9-0-50-hang-01a1f5527c944f919a700fc39fd9d58d",
      "That reference requires registration/authentication. Please ensure any links you provide are public.\n\nA thread dump when the hang occurs would be helpful.\n\nEnabling HTTP/2 debug logging may also be informative (see $CATALINA_BASE/logging.properties)",
      "Created attachment 37965\nsome wired cases",
      "add a pdf version through attachment, pls take a look.",
      "Created attachment 37966\ntxt version",
      "Created attachment 37967\nthread dump when hang\n\nadd thread dump",
      "I'm as sure as I can be this isn't overhead protection related.\n\nThe HTTP/2 streams are blocked, waiting to receive data. If the overhead protection had been triggered, these streams would have been closed. The exceptions in the logs are also consistent with request reads timing out.\n\nWhat isn't yet clear is the root cause. Possibilities are:\n1. The client isn't sending data. Unlikely given the issue started after the move from 9.0.45 to 9.0.50.\n2. The data is being received but the stream isn't being notified. Unlikely as there have been no changes in this specific area.\n3. Window updates are not being sent correctly. Seems the most likely candidate at this point as there are changes for this in 9.0.49.\n\nI was about to suggest a couple of things to try to collect more data. As part of that I was checking exactly what debug logging is provided for Window updates and I managed to recreate the issue.\n\nI'm investigating now but setting overheadWindowUpdateThreshold=\"0\" seems to work around the issue.",
      "Found it. There is a regression in the previous release.\n\nIf using async IO (available and default in 9.x and 10.x) small updates to the connection flow control window were dropped. The window slowly reduced in size until no more data could be read.\n\nIf not using async IO, small updates to the connection flow control window are written but not flushed so at worst, you'll see a small delay.\n\nSetting overheadWindowUpdateThreshold=\"0\" avoids the issue with or without async IO.\n\nFixed in:\n- 10.1.x for 10.1.0-M3 onwards\n- 10.0.x for 10.0.9 onwards\n- 9.0.x for 9.0.51 onwards\n- 8.5.x for 8.5.70 onwards",
      "c(In reply to Mark Thomas from comment #14)\n> Found it. There is a regression in the previous release.\n> \n> If using async IO (available and default in 9.x and 10.x) small updates to\n> the connection flow control window were dropped. The window slowly reduced\n> in size until no more data could be read.\n> \n> If not using async IO, small updates to the connection flow control window\n> are written but not flushed so at worst, you'll see a small delay.\n> \n> Setting overheadWindowUpdateThreshold=\"0\" avoids the issue with or without\n> async IO.\n> \n> Fixed in:\n> - 10.1.x for 10.1.0-M3 onwards\n> - 10.0.x for 10.0.9 onwards\n> - 9.0.x for 9.0.51 onwards\n> - 8.5.x for 8.5.70 onwards\n\ncool~ looking forward to next release.\nThx for helping~"
    ],
    "creation_ts": "2021-07-21T12:02:41Z",
    "fixes": [
      65460
    ]
  },
  {
    "id": 54585,
    "summary": "WebappLoader doesn't honor delegate attr while constructing jsp_classpath",
    "description": "If custom WebappClassLoader is created with delegate=true then parent-first classloading model is used. Everything works here as expected. However jsp_classpath is always constructed in the following manner:\ncustomWebappClassLoader.urls;parent.urls;parent...parent.urls\nWhereas it is expected to me that if delegate=true then parent's urls should come first.",
    "comments": [
      "Thanks for the report. This has been fixed in trunk and 7.0.x and will be included in 7.0.38 onwards."
    ],
    "creation_ts": "2013-02-19T20:50:13Z",
    "fixes": [
      54585
    ]
  },
  {
    "id": 43216,
    "summary": "ACTIVITY_CHECK does not work correctly when Tomcat is restarted",
    "description": "Hi,\n\nI noticed that org.apache.catalina.session.StandardSession.ACTIVITY_CHECK does\nnot work correctly because the StandardSession#accessCount will be set as -1\nwhen Tomcat is restarted and session is loaded from the SESSION.ser file.\n\nStandardManager#doLoad() calls session.endAccess() and this method execute 2 things.\n * set isNew = false\n * decrement accessCount\n\nI think isNew attribute is already set by session.readObjectData(ois) in\nStandardManager#doLoad(),\nand accessCount is already set as 0.\n\nIMHO, it is not necessary calling session.endAccess() in the doLoad().\n\nHere is a patch.\n\nIndex: /tc6.0.x/trunk/java/org/apache/catalina/session/StandardManager.java\n===================================================================\n--- /tc6.0.x/trunk/java/org/apache/catalina/session/StandardManager.java\n(revision 569774)\n+++ /tc6.0.x/trunk/java/org/apache/catalina/session/StandardManager.java\n(working copy)\n@@ -395,7 +395,6 @@\n                     session.setManager(this);\n                     sessions.put(session.getIdInternal(), session);\n                     session.activate();\n-                    session.endAccess();\n                 }\n             } catch (ClassNotFoundException e) {\n               log.error(sm.getString(\"standardManager.loading.cnfe\", e), e);",
    "comments": [
      "Please, check trunk I have checkin your fix. \nThanks\nPeter"
    ],
    "creation_ts": "2007-08-26T09:28:12Z",
    "fixes": [
      43216
    ]
  },
  {
    "id": 66541,
    "summary": "CachedResource for OSGi URL resources changes URL hashing behavior & exacerbates DNS issues",
    "description": "We run Tomcat with resources mounted from OSGi bundles. The OSGi URLs are of the form 'bundleentry://203.fwk668849042/META-INF/output.tld' and have a custom 'handler' assigned to handle them.\n\nIn Tomcat 8.5.48, changes were made to CachedResource (to fix \"Intermittent JSP Caching/Compiling Issue while under load\", 2b0aaedd76d8) which introduce CachedResourceURLStreamHandler & bypass the OSGi-supplied hashCode() behavior of the OSGi URLs.\n\nSeveral of our end-users have now reported large delays (up to 40 minutes) in Tomcat startup. The problem is:\n* TldScanner hashing URLs of TLDs -- about 150 of these -- to build its tldResourcePathTaglibXmlMap.\n* The OSGi URLs are now having java.net.URLStreamHandler hash them & this attempts to resolve their Hostnames, where the OSGi (Equinox) handler did not.\n* In the case of DNS misconfiguration on some platforms, which seems to be not uncommon amongst our end-users, Tomcat thus has to wait for 150 failed lookups (of OSGi bundle names) at 15 seconds each before starting.\n\nProposed solution approach: \n* Consider making CachedResourceURLStreamHandler delegate 'hashCode()' and 'equals()' to the underlying 'resourceURL'.\n* This will preserve handler behaviors from the underlying URL and avoid introducing spurious DNS lookups for OSGi-loaded resources.",
    "comments": [
      "To clarify:  \n* The OSGi URLs are now having CachedResourceURLStreamHandler (which inherits from java.net.URLStreamHandler) hash them; this attempts to resolve their Hostnames, where the OSGi (Equinox) handler did not.",
      "Thanks for the detailed explanation. That makes sense. I've applied a fix that should address the performance issue.\n\nFixed in:\n- 11.0.x for 11.0.0-M5 onwards\n- 10.1.x for 10.1.8 onwards\n-  9.0.x for  9.0.74 onwards\n-  8.5.x for  8.5.88 onwards\n\nIf you want to test the fix and provide feedback before the next release, I have provided a dev build here:\n\nhttps://people.apache.org/~markt/dev/v8.5.88-dev/\n\nUsual caveats apply for a dev build: It isn't an official release so use it at your own risk.",
      "Hi, thanks very much for the quick response. Just checking up on the proposed fix -- looks like a small issue with the delegation logic, confirmed in debugger.\n\nThe CachedResourceURLStreamHandler is created for the wrapped URL ('associatedURL') and should delegate for this. It isn't the handler for the 'resourceURL' so won't be called for that.\n\nI had already noticed the logic here was a bit subtle & easy to mislay -- I propose clarifying it by renaming 'associatedURL' to 'wrappedURL' which makes things easier to understand. \n\n\"The Wrapped URL delegates to the Cache and the underlying Resource URL.\"\n\nPatch attached.",
      "Created attachment 38528\npatch for CachedResource/ CachedResourceURLStreamHandler",
      "Thanks for the review. I agree the wording is misleading. I'm not sure wrappedURL is the best terminology either since it is the original resource URL that is wrapped. I think maybe one of wrapperURL, wrappingURL, outerURL os something along those lines would be even better.\n\nI'm currently leaning towards wrapperURL but plan to look at this in more detail tomorrow.",
      "Thanks. The \"wrapped one\" is the outer one; I use wrapped & underlying as a frequent terminology, it works well & is clear semantically.\n\n> I'm not sure wrappedURL is the best terminology either since it is the original\n> resource URL that is wrapped.\n\n* I think this objection is not logically correct, it's confusing the subject with the verb/ transformation. \n\n* The fact that you apply an operation (wrapping) to an input to produce a result, does not mean that you should describe or identify the input with the operation (wrapping). \n\n* Using a verb to select inputs is misusing a linguistic shortcut from selectivity; used where there is no ambiguity about which is input & output but where there is a need to select which of many inputs is used. \n\n* Here however, there is only one input, there is ambiguity between inputs and outputs, and the question of selectivity (which URL is the handler being called with?) applies only in the domain of outputs.\n\n* The 'wrappedURL' is wrapped with the new URLStreamHandler. The underlying 'resourceURL' is not itself wrapped. It is prima facie confusing to refer the resourceURL as itself being wrapped, since it itself is not.\n\nBetter might be to say \"We wrap the underlying Resource URL with a Cache-aware  URL Handler, to produce the Wrapped URL\". This clearly distinguishes the input (the Resource URL), the operation (wrapping) and the result (the Wrapped URL).\n\nLanguage can sometimes be tricky. I think it's worth clearly distinguishing between _descriptive terminology_, which should be preferred, and _implicit selection_ which is sometimes useful but can -- as in this case -- also lead to unnecessary confusion.\n\nThanks Mark. I hope this helps!",
      "(In reply to Tom Whitmore from comment #6)\n> Thanks. The \"wrapped one\" is the outer one; I use wrapped & underlying as a\n> frequent terminology, it works well & is clear semantically.\n\nOn that we are going to have to agree to disagree.\n\nThe cache URL handler has references to both the original resource URL and that cache URL. I can see how either of those could be viewed as wrapped. That you and I seem to view this differently - and both us of seem fairly sure we are right - tells me any variation on the theme of \"wrap\" is not the right one.\n\nReplacing \"associatedURL\" with \"cacheURL\" is an alternative possibility.\n\nThe first step is to fix the bug - which I'll do shortly.\n\nThe second step is to take another look at the logic. I'm not sure the \"... == u1\" tests are required at all. I think those methods are only going to be called from the URL instance that was created with the handler instance so they are always going to be true. If that is the case, I'll simplify (remove) the logic.\n\nFinally there is the rename to make things clearer. Current front-runner is cacheURL, with the caveat a reason not to use it / a better idea may occur to me while working on this issue.",
      "Fixed.\n\nBug fixed and field renamed. The logic needed to stay and I added a comment to remind the next person looking at the code why this is.",
      "Great, thanks Mark. \n* I think 'cacheURL' and 'resourceURL' sound reasonably clearly distinct. \n* I agree the 'url == cacheURL' logic is necessary; relative resource URL objects can be created inheriting their parent handlers.\n* I personally wasn't certain the null-check on openConnection() was necessary unless that can somehow be called with a null. (But that's pre-existing to this issue.)\n\nDo you have a build I can review?",
      "I have updated https://people.apache.org/~markt/dev/v8.5.88-dev/ with a new test / dev build. Same caveats apply."
    ],
    "creation_ts": "2023-03-23T04:00:05Z",
    "fixes": [
      66541
    ]
  },
  {
    "id": 34399,
    "summary": "Undeploying fails when context defined in server.xml & server fails to stop",
    "description": "Steps to reproduce: \n \n1. autodeploy a web application by defining its context in server.xml \n2. start the Tomcat server \n3. use the Tomcat Manager to undeploy the application \n \nYou will get the \"OK - Undeployed application at context path /WebApplication\" \nmessage, but the application will NOT be undeployed, it will be only stopped. \n \nIf you try to stop the server after that, it will fail! \n \nI have used the shared installation (CATALINA_BASE dir), but I guess this \nwon't work for standalone Tomcat isntallation either.",
    "comments": [
      "One more thing, this works for Tomcat 5.0.x.",
      "In 5.5, the manager will only handle contexts deployed by the autodeployer.\nPlease don't insist for it to behave in a different way, it will not happen. The\nother part of the bug has been fixed already.",
      "So you claim that it is 'as designed' to restrict undeploy by manager of\nautodeployed applications? (I'm OK with that)\nBut why the report is: \"OK - Undeployed\", if it is not true! I'd expect\ndifferent result message at least (it could be probably downgraded).",
      "Hacking in contexts using server.xml is not recommended. I do not see any reason\nto address this non issue.",
      "I'm OK with not recommend using server.xml, but it is still part of product,\ntherefore valid issue, although with lower priority.",
      "I do not insist on this being considered as a serious issue, especially if the  \nstopping has been fixed. However, I do not agree it is a \"non issue\". Defining  \ncontext in the server.xml is a valid usecase, although not recommended and  \nugly, but it is still valid.  \n  \nI would expect the Tomcat Manager to behave reasonably which is returning  \nsomething like \"FAIL - Application cannot be undeployed...\" and not claiming  \nit was undeployed successfully, if it was not.  \n  \nRemy, please note that I've filed this issue in attempt to improve the Tomcat  \nuser experience. This usecase is not what I would personally do. However,  \nusers who are upgrading from erlier versions (3.x.x or 4.x.x) are often used  \nto it and they would surely consider this as an issue. \n \nBtw, if this issue should be closed, it should be cloased as WONTFIX and not \nas INVALID. \n \nAnyway, thanks Remy for fixing the other issue!",
      "I have fixed this by disabling undeploy for contexts defined in server.xml\n\nThis fix will be in 5.5.20 onwards"
    ],
    "creation_ts": "2005-04-11T16:32:42Z",
    "fixes": [
      34399
    ]
  },
  {
    "id": 64021,
    "summary": "SCI ordering prevents a web application SCI from using a service bootstrapped by a container-provided SCI",
    "description": "This issue relates to a Spring Framework issue [1] that describes a problem where Spring Framework's ServletContainerInitializer is unable to find Tomcat's WebSocket support as the latter is initialised by Tomcat's WsSci which runs after any application SCIs.\n\nFrom a comment by Mark Thomas on the Spring Framework issue:\n\n> I've been reading through 8.2.4 again and I think there is some room for\n> manoeuvre here. The delegation order matters when both the web application\n> and the container specify the same SCI. It must be the one from the web \n> application that is used. However, when we are looking at different SCIs I\n> think there is scope to load the container provided SCIs first. I don't\n> think  the spec language precludes that. The more I think about it, the\n> more that makes sense. If the web app depends on the container services\n> (like Spring does) then the container services need to be loaded first. If \n> the web app doesn't depend on them the order doesn't matter (so it is OK \n> for container services to be first).\n\n> If you open a Tomcat bug on this I should be able to take a look -\n> probably in January now.\n\n[1] https://github.com/spring-projects/spring-framework/issues/22131",
    "comments": [
      "Fixed in:\n- master for 10.0.0.0-M1 onwards\n- 9.0.x for 9.0.31 onwards\n- 8.5.x for 8.5.51 onwards\n- 7.0.x for 7.0.100 onwards",
      "Thanks very much, Mark.",
      "Webapp can not be loaded by tomcat-7.0.100, the reason can refer to the comment of this commit\n'https://github.com/apache/tomcat/commit/fe905a43bf935cb293db462915a17ad87c303438?diff=split'. please check it, thanks.",
      "There is a known problem with SCI in 7.0.100\n7.0.103 is being voted at the moment. You could test it from https://dist.apache.org/repos/dist/dev/tomcat/tomcat-7/v7.0.103/bin/",
      "(In reply to mgrigorov from comment #4)\n> There is a known problem with SCI in 7.0.100\n> 7.0.103 is being voted at the moment. You could test it from\n> https://dist.apache.org/repos/dist/dev/tomcat/tomcat-7/v7.0.103/bin/\n\nThanks, 7.0.103 is ok now.",
      "Please do not reopen this BZ."
    ],
    "creation_ts": "2019-12-19T14:59:51Z",
    "fixes": [
      64021
    ]
  },
  {
    "id": 53843,
    "summary": "isAsyncStarted may return false in thread that started async processing",
    "description": "After async processing starts in some container thread A, subsequent calls to request.isAsyncStarted() return true as expected.\n\nHowever as soon as an application thread B calls asyncContext.dispatch(), isAsyncStarted() begins to return false even if the actual dispatch has not yet occurred. For this case the spec says: \"the dispatch operation will be delayed until after the container-initiated dispatch has returned to the container.\"\n\nFor the brief period after dispatch() is called but before the actual dispatch begins (and DispatcherType becomes ASYNC), isAsyncStarted should return true. Without that, the return value of isAsyncStarted() may suddenly change while thread A is still exiting causing it to not recognize that async processing started and that it needs to exit as quickly as possible.",
    "comments": [
      "Thanks for the report. The same holds for complete() as well as dispatch(). This has been fixed in trunk and 7.0.x and will be included in 7.0.31 onwards.",
      "Actually, complete() is different (the TCK fails if we treat it the same way). As soon as complete() is called , isAsyncStarted() must return false."
    ],
    "creation_ts": "2012-09-08T00:42:57Z",
    "fixes": [
      53843
    ]
  },
  {
    "id": 43846,
    "summary": "Race condition with NIO connector parsing chunked response",
    "description": "The problem seems to relate to parsing the body content when the **Transfer-\nEncoding: chunked** header is present.  It appears that the chunk length gets\ncorrupted under load and the client is unable to parse the chunk out of the \nresponse body.\n\nWhen the NIO connector parameter **socket.appWriteBufSize** is set to a value \nlarger than the total response body, the error condition does not occur.\n\nOne might succesfully argue that this is proper performance tuning.  The Tomcat \ndocuments point out that to scale a large number of long held connections, the \nbuffer sizes may need to be less than the response body (the memory footprint \nwould be quite large otherwise).\n\nCould there be a race condition involving the response buffering code?  \n\nI have confirmed this behavior on both JDKs 1.5 and 1.6 on both Windows 2003 \nand Linux.\n\nApache Bench does not appear to fully parse the response so it will not be \nhelpful in reproducing the issue.   The Grinder framework does.  I am including \nthe Grinder scripts so that the issue may be reproduced.",
    "creation_ts": "2007-11-12T09:08:54Z",
    "fixes": [
      43846
    ],
    "comments": [
      "Created attachment 21114\nJython/Grinder script\n\nJython script referenced from grinder properties file.\t This script does most\nof the interaction with the Tomcat server.  It is configured via a grinder\nproperties file.",
      "Created attachment 21115\nGrinder properties file\n\nUse this file as a starting point for your Grinder setup.  This defines the\nnumber of threads, etc. to configure the test client.",
      "Created attachment 21116\nReponse generator servlet\n\nThis is a very simple Java servlet.  It generates a reponse body >8K.  This\nsomewhat larger response seems to render with Transfer-Encoding: chunked rather\nthan a Content-Length header.  This is what we want because the smaller\nresponse bodies seem to work OK.  In the real world responses larger than 8K\nare the norm.",
      "Thank you, I will take a look.\nFilip",
      "I'm unable to get your grinder scripts to work.\nThere are several errors that happen, for one, random is not available on a\nclean download of grinder.\n\nwhat would be helpful, is if you could create a test case, that I can run\nwithout trying to figure out grinder (sorry I'm a newbie to this) for most of a day.\n\nthanks\nFilip",
      "Created attachment 21123\nUse this Jython script instead\n\nUse this script instead of the first one attached.   Sorry for the trouble\nFilip.",
      "My apolgies Filip.   I've attached an updated Jython script.  This one does not \ndepend on random.",
      "I'm able to reproduce the problem in the connector using a JMeter script.\nThe error doesn't exist in the previous trunk connector, now in sandbox\nhttp://svn.apache.org/viewvc/tomcat/sandbox/gdev6x/\n\nThere are features in that branch not present in current release. I will look\ninto the option of porting the NIO enhancements from that branch to 6.0.x\n\nFilip",
      "I've created a patch for 6.0.x branch (a port from the sandbox)\nhttp://people.apache.org/~fhanik/patches/apache-tomcat-6.0.x-niofix.zip\n\nfeel free to try it out, and let me know the feedback\n\nFilip",
      "I've run a series of tests of various kinds and it appears that this issue is \nfixed in the patched version.   Would this fix going into a 6.0.15 release?",
      "Patch has been added to 6.0.x and will go out with 6.0.16 next release.\nThanks for the feedback."
    ]
  },
  {
    "id": 58373,
    "summary": "Data race on field org.apache.catalina.core.StandardContext.applicationEventListenersObjects",
    "description": "Reported by RV-Predict (a dynamic race detector) when running the test suite:\nData race on field org.apache.catalina.core.StandardContext.applicationEventListenersObjects: {{{\n    Concurrent read in thread T204 (locks held: {Monitor@424a8381})\n ---->  at org.apache.catalina.core.StandardContext.getApplicationEventListeners(StandardContext.java:1155)\n        at org.apache.catalina.core.StandardContext.fireRequestDestroyEvent(StandardContext.java:5920)\n        at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:282)\n        at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1709)\n        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:651)\n        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:277)\n        - locked Monitor@424a8381 at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:259) \n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    T204 is created by T202\n        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:1010)\n\n    Concurrent write in thread T200 (locks held: {Monitor@42766493})\n ---->  at org.apache.catalina.core.StandardContext.setApplicationEventListeners(StandardContext.java:1161)\n        at org.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:4825)\n        at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5390)\n        at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)\n        - locked Monitor@42766493 at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:n/a) \n        at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1424)\n    T200 is created by T199\n        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:1010)\n}}}",
    "creation_ts": "2015-09-12T01:30:39Z",
    "fixes": [
      58373
    ],
    "comments": [
      "Fixed in trunk and 8.0.x for 8.0.27 onwards."
    ]
  },
  {
    "id": 65106,
    "summary": "ConfigFileLoader cannot properly handle file url running with SecurityManager on openjdk 1.8",
    "description": "Created attachment 37718\nzip file with screens\n\nspring-boot 1.5.22 creates instance of Http11NioProtocol with certificate keystore file defined with file url. Images set-url.png, set-url2.png.\n\nWhen it reaches ConfigFileLoader, location is not absolute so it puts catalina_base before file url creating \"c:/tmp/catalina/file:/c:/tmp/my.jks\". Check if it is file throws AccessControlException (access denied (\"java.io.FilePermission\" \"C:\\tmp\\120\\a\\catalina\\file:\\C:\\tmp\\120\\key.jks\" \"read\")\n). And it is impossible to create such a policy for SecurityManager.\n- ConfigFileLoader.png\n- ConfigFileLoader.png\n- exception.png\n\ngetInputStream method can handle file url but when using SecurityManager under zulu, correto.\n\nOracle java 1.8 works correctly. SecurityManager has no complains about such weird path. Just openjdks have problem.\n\nFails on\n- zulu openjdk newer - zulu8.42.0.23-ca-jdk8.0.232-win_x64\n- correto 1.8.0_282\n\n\n```\n   public static InputStream getInputStream(String location) throws IOException {\n        File f = new File(location);\n        if (!f.isAbsolute()) {\n            f = new File(CATALINA_BASE_FILE, location);\n        }\n\n        if (f.isFile()) {\n            return new FileInputStream(f);\n        } else {\n            URI uri = getURI(location);\n\n            try {\n                URL url = uri.toURL();\n                return url.openConnection().getInputStream();\n            } catch (IllegalArgumentException var4) {\n                throw new IOException(sm.getString(\"configFileLoader.cannotObtainURL\", new Object[]{location}), var4);\n            }\n        }\n    }\n```",
    "creation_ts": "2021-01-26T12:56:58Z",
    "fixes": [
      65106
    ],
    "comments": [
      "Ok, after checking the javadoc, I can see that isAbsolute is a safe call (no security check) but isFile is not. Wrapping with a try/catch could be reasonable, however it would also hide the exception when it is legitimate and useful to have.",
      "I understand but the current state is that tomcat won't start.",
      "I am inching towards a WONTFIX, since the only real solution is to use URLs only. It would mean absolute file paths won't work, I believe, and this is not possible. The rest would be fine.\n\nI don't understand why \"And it is impossible to create such a policy for SecurityManager\", can you explain a bit more ?",
      "Caused by: java.io.IOException: Failed to load keystore type [JKS] with path [file:/C:/tmp/120/key.jks] due to [access denied (\"java.io.FilePermission\" \"C:\\tmp\\120\\a\\catalina\\file:\\C:\\tmp\\120\\key.jks\" \"read\")]\n\tat org.apache.tomcat.util.net.SSLUtilBase.getStore(SSLUtilBase.java:227)\n\n\nI have not found any way how to write such path to policy file so SecurityManager can accept it.\n\n    permission java.io.FilePermission \"file:${catalina.base}\", \"read\";\n    permission java.io.FilePermission \"${catalina.base}\", \"read\";\n    permission java.io.FilePermission \"file:${catalina.base}/\", \"read\";\n    permission java.io.FilePermission \"${catalina.base}/\", \"read\";\n    permission java.io.FilePermission \"file:${catalina.base}/-\", \"read\";\n    permission java.io.FilePermission \"${catalina.base}/-\", \"read\";\n    permission java.io.FilePermission \"file:${catalina.base}/*\", \"read\";\n    permission java.io.FilePermission \"${catalina.base}/*\", \"read\";\n    permission java.io.FilePermission \"C:/tmp/120/a/catalina\", \"read\";\n    permission java.io.FilePermission \"C:/tmp/120/a/catalina/\", \"read\";\n    permission java.io.FilePermission \"C:/tmp/120/a/catalina/-\", \"read\";\n    permission java.io.FilePermission \"C:/tmp/120/a/catalina/*\", \"read\";\n    permission java.io.FilePermission \"C:/tmp/120/a/catalina/file:/C:/tmp/120/key.jks\", \"read\";\n    permission java.io.FilePermission \"C:/tmp/120/a/catalina/file://C:/tmp/120/key.jks\", \"read\";\n    permission java.io.FilePermission \"C:/tmp/120/a/catalina/file:///C:/tmp/120/key.jks\", \"read\";\n    permission java.io.FilePermission \"C:\\\\tmp\\\\120\\\\a\\\\catalina\\\\file:\\\\C:\\\\tmp\\\\120\\\\key.jks\", \"read\";",
      "R\u00e9my, what if we added a\n\nif (\"name.startsWith(\"file:/\") {\n    ....\n}\nblock around the File and classloader case? Essentially short circuit to URI in that case for getResource() and getURI(). Does that help?",
      "That should be:\n\nif (*!*name...",
      "(In reply to Mark Thomas from comment #5)\n> R\u00e9my, what if we added a\n> \n> if (\"name.startsWith(\"file:/\") {\n>     ....\n> }\n> block around the File and classloader case? Essentially short circuit to URI\n> in that case for getResource() and getURI(). Does that help?\n\nI think that would work for the reporter but still fail for other URLs. This security check is annoying ...\nMaybe detect a URL scheme, like if there's ':' in the path and no '/' before it ?",
      "Hmm. Thinking...",
      "The best I can up with is if path starts with \"file:/\" or \"<protocol>://\" the code jumps directly to the URI handling. I'll work on a patch. I'm wondering how far to go optimizing the code. I'm thinking not far.",
      "(In reply to Mark Thomas from comment #9)\n> The best I can up with is if path starts with \"file:/\" or \"<protocol>://\"\n> the code jumps directly to the URI handling. I'll work on a patch. I'm\n> wondering how far to go optimizing the code. I'm thinking not far.\n\nOk. Yes, I don't think it needs to be super fast since this is for loading configuration resources.",
      "Fixed in:\n- 10.0.x for 10.0.2 onwards\n- 9.0.x for 9.0.43 onwards",
      "Any chance it will be fixed to 8.5?",
      "It was fixed shortly after in 8.5.63."
    ]
  },
  {
    "id": 43241,
    "summary": "ServletContext.getResourceAsStream()  does not follow API specs for Path",
    "description": "Say for example, you have a file style.css deployed in your context. The call to\nServletContext.getResourceAsStream(\"style.css\") returns an input stream. This is\nnot correct behavior.\n\nThe spec (2.3) says:\n\n> The path must be specified according to \n> the rules given in getResource. \n\ngetResource() says:\n\n> The path must begin with a \"/\" and is interpreted \n> as relative to the current context root.\n\nMy reading of these two things is that getResourceAsStream(\"style.css\") should\nreturn null, not an input stream to the file.\n\nI got bit on this because my app behavior changed (broke) when ran on the\ncurrent version of WebSphere.",
    "creation_ts": "2007-08-29T12:54:18Z",
    "fixes": [
      43241
    ],
    "comments": [
      "Created attachment 20919\ntest war\n\nAdding test war.",
      "Created attachment 20920\none way of fixing this\n\nHere's a simple patch which \"fixes\" the problem. getResourceAsStream can not\nthrow an Exception (according to the spec), so I just return null. \n\nI'm ambivalent about this patch. This may create problems for some people who\ndepend on the incorrect usage of this function. Plus, there may be a better\nsolution, such as always returning an input stream containing \"42\"",
      "Whilst I like the '42' idea, I am fairly sure not everyone else shares my sense\nof humour so null it will have to be.\n\nPatch applied to trunk and proposed for 5.5.x and 6.0.x.\n\nMany thanks for the patch.",
      "Fixed in 6.0.x",
      "Fixed in 5.5.x and will be included in 5.5.26 onwards.",
      "Fixed in 5.5.x and will be included in 5.5.26 onwards."
    ]
  },
  {
    "id": 65677,
    "summary": "InvalidMarkException in Http11InputBuffer.fill when socket read throws AsynchronousCloseException",
    "description": "When reading a CoyoteInputStream during a chunked Http/1.1\nPOST request, I've encountered a java.nio.InvalidMarkException\nunder certain conditions. Here's the stacktrace I observe:\n\njava.nio.InvalidMarkException: null\n\tat java.nio.Buffer.reset(Unknown Source)\n\tat java.nio.ByteBuffer.reset(Unknown Source)\n\tat java.nio.ByteBuffer.reset(Unknown Source)\n\tat o.a.coyote.http11.Http11InputBuffer.fill(Http11InputBuffer.java:813)\n\tat o.a.coyote.http11.Http11InputBuffer.access$400(Http11InputBuffer.java:42)\n\tat o.a.c.h.Http11InputBuffer$SocketInputBuffer.doRead(Http11InputBuffer.java:1172)\n\tat o.a.c.h.filters.ChunkedInputFilter.readBytes(ChunkedInputFilter.java:310)\n\tat o.a.c.h.filters.ChunkedInputFilter.parseChunkHeader(ChunkedInputFilter.java:338)\n\tat o.a.c.h.filters.ChunkedInputFilter.doRead(ChunkedInputFilter.java:164)\n\tat o.a.coyote.http11.Http11InputBuffer.doRead(Http11InputBuffer.java:249)\n\tat org.apache.coyote.Request.doRead(Request.java:640)\n\tat o.a.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:317)\n\tat o.a.catalina.connector.InputBuffer.checkByteBufferEof(InputBuffer.java:600)\n\tat o.a.catalina.connector.InputBuffer.read(InputBuffer.java:340)\n\tat o.a.c.connector.CoyoteInputStream.read(CoyoteInputStream.java:132)\n\nI currently assume that the thread reading the CoyoteInputStream is\ninterrupted because it's running within a Resilience4j TimeLimiter\nand the POST request takes too long. This should be ok though and\nI'd expect an InterruptedException or IOException in that case\nfrom the read call, but instead I get an InvalidMarkException.\n\nThis InvalidMarkException is thrown in the \"finally\"\nblock of this part in Http11InputBuffer.fill:\n\nbyteBuffer.mark();\ntry {\n    if (byteBuffer.position() < byteBuffer.limit()) {\n        byteBuffer.position(byteBuffer.limit());\n    }\n    byteBuffer.limit(byteBuffer.capacity());\n    SocketWrapperBase<?> socketWrapper = this.wrapper;\n    if (socketWrapper != null) {\n        nRead = socketWrapper.read(block, byteBuffer);\n    } else {\n        throw new CloseNowException(sm.getString(\"iib.eof.error\"));\n    }\n} finally {\n    // Ensure that the buffer limit and position are returned to a\n    // consistent \"ready for read\" state if an error occurs during in\n    // the above code block.\n    byteBuffer.limit(byteBuffer.position()).reset();\n}\n\nI've instrumented that part with more debug logs as follows (in\nparticular, for upcoming Tomcat versions, it might be good to add at\nleast the catch block to enhance debugging of such issues in the future):\n\nbyteBuffer.mark();\nif (log.isDebugEnabled()) {\n    log.debug(\"Set mark at position \" + byteBuffer.position());\n}\ntry {\n    if (byteBuffer.position() < byteBuffer.limit()) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"Setting position to limit \" + byteBuffer.limit());\n        }\n        byteBuffer.position(byteBuffer.limit());\n    }\n    byteBuffer.limit(byteBuffer.capacity());\n    if (log.isDebugEnabled()) {\n        log.debug(\"Position before read \" + byteBuffer.position());\n    }\n    SocketWrapperBase<?> socketWrapper = this.wrapper;\n    if (socketWrapper != null) {\n        nRead = socketWrapper.read(block, byteBuffer);\n    } else {\n        throw new CloseNowException(sm.getString(\"iib.eof.error\"));\n    }\n} catch (Throwable e) {\n    if (log.isDebugEnabled()) {\n        log.debug(\"Encountered exception in read during fill, position=\" + byteBuffer.position(), e);\n    }\n    throw e;\n} finally {\n    // Ensure that the buffer limit and position are returned to a\n    // consistent \"ready for read\" state if an error occurs during in\n    // the above code block.\n    if (log.isDebugEnabled()) {\n        log.debug(\"Calling limit on byteBuffer with position \" + byteBuffer.position());\n    }\n    byteBuffer.limit(byteBuffer.position()).reset();\n}\n\nWhen that exception occurs, I see the following logs (before\nthat, the POST request was already running for about 30 seconds\nuntil the TimeLimiter kicked in and interrupted the thread):\n\n10:03:18.899\tBefore fill(): parsingHeader: [false], parsingRequestLine: [false], parsingRequestLinePhase: [0], parsingRequestLineStart: [0], byteBuffer.position(): [3313], byteBuffer.limit(): [3313], end: [2019]\n10:03:18.899\tSet mark at position 2019\n10:03:18.899\tPosition before read 2019\n10:03:18.942\tCalling limit on byteBuffer with position 3306\n\n10:03:18.942\tBefore fill(): parsingHeader: [false], parsingRequestLine: [false], parsingRequestLinePhase: [0], parsingRequestLineStart: [0], byteBuffer.position(): [3306], byteBuffer.limit(): [3306], end: [2019]\n10:03:18.942\tSet mark at position 2019\n10:03:18.942\tPosition before read 2019\n10:03:19.007\tCalling limit on byteBuffer with position 3306\n10:03:19.007\tReceived [500 <binary output>]\n\n10:03:19.007\tBefore fill(): parsingHeader: [false], parsingRequestLine: [false], parsingRequestLinePhase: [0], parsingRequestLineStart: [0], byteBuffer.position(): [3306], byteBuffer.limit(): [3306], end: [2019]\n10:03:19.007\tSet mark at position 2019\n10:03:19.007\tPosition before read 2019\n10:03:19.062\tCalling limit on byteBuffer with position 3306\n10:03:19.062\tReceived [500 <binary output>]\n\n10:03:19.063\tBefore fill(): parsingHeader: [false], parsingRequestLine: [false], parsingRequestLinePhase: [0], parsingRequestLineStart: [0], byteBuffer.position(): [3306], byteBuffer.limit(): [3306], end: [2019]\n10:03:19.063\tSet mark at position 2019\n10:03:19.063\tPosition before read 2019\n10:03:19.131\tCalling limit on byteBuffer with position 3306\n\n10:03:19.132\tBefore fill(): parsingHeader: [false], parsingRequestLine: [false], parsingRequestLinePhase: [0], parsingRequestLineStart: [0], byteBuffer.position(): [3306], byteBuffer.limit(): [3306], end: [2019]\n10:03:19.132\tSet mark at position 2019\n10:03:19.132\tPosition before read 2019\n10:03:19.244\tCalling limit on byteBuffer with position 3306\n\n10:03:19.245\tBefore fill(): parsingHeader: [false], parsingRequestLine: [false], parsingRequestLinePhase: [0], parsingRequestLineStart: [0], byteBuffer.position(): [3306], byteBuffer.limit(): [3306], end: [2019]\n10:03:19.245\tSet mark at position 2019\n10:03:19.245\tPosition before read 2019\n10:03:19.854\tEncountered exception in read during fill, position=0\n                j.n.c.AsynchronousCloseException: null\n                    at s.n.c.UnixAsynchronousSocketChannelImpl.finishRead(Unknown Source)\n                    at s.n.c.UnixAsynchronousSocketChannelImpl.finish(Unknown Source)\n                    ... 2 frames excluded\n                    at o.apache.tomcat.util.net.Nio2Channel.close(Nio2Channel.java:81)\n                    at o.apache.tomcat.util.net.Nio2Channel.close(Nio2Channel.java:94)\n                    at o.a.t.u.n.Nio2Endpoint$Nio2SocketWrapper.doClose(Nio2Endpoint.java:935)\n                    at o.a.t.util.net.SocketWrapperBase.close(SocketWrapperBase.java:422)\n                    at o.a.t.u.n.Nio2Endpoint$SocketProcessor.doRun(Nio2Endpoint.java:1685)\n                    at o.a.t.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n                    at o.a.tomcat.util.net.AbstractEndpoint.processSocket(AbstractEndpoint.java:1171)\n                    at o.a.t.u.n.Nio2Endpoint$Nio2SocketWrapper$2.completed(Nio2Endpoint.java:613)\n                    at o.a.t.u.n.Nio2Endpoint$Nio2SocketWrapper$2.completed(Nio2Endpoint.java:591)\n                    ... 3 frames excluded\n                    at o.a.t.u.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n                    at o.a.t.u.t.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n                    at o.a.t.u.t.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n                    ... 1 frames excluded\n10:03:19.854\tCalling limit on byteBuffer with position 0\n\nSo, the java.nio.channels.AsynchronousCloseException thrown presumably from\nsocketWrapper.read leaves the byteBuffer with position=0. So the limit is\nset to 0 in the finally block, which sets the mark to -1, as its larger than\nthe limit (it was 2019 according to logs). Here's the snippet for Buffer.limit:\n\npublic Buffer limit(int newLimit) {\n    if (newLimit > capacity | newLimit < 0)\n        throw createLimitException(newLimit);\n    limit = newLimit;\n    if (position > newLimit) position = newLimit;\n    if (mark > newLimit) mark = -1;\n    return this;\n}\n\nThis in turn makes the reset() call fail\non the byte buffer as the mark is invalid.\n\nI've also observed that the above logs are sometimes missing\nthe \"Received\" log. I assume that this is swallowed by my\nlogging consumer as either the message is too large or the \"raw\nbytes\" make it choke. But I think that shouldn't worry us now!\n\nNow the question is: Is this really a bug in Tomcat? Do you agree that\nthe limit(0) call above should not happen? Is it reasonable that a thread\ninterruption could lead to the observed AsynchronousCloseException above?\n\nI've tried to reproduce it locally, but currently I can only observe\nit on a production system. I appreciate hints what could be going on or\nhow one could try to reproduce this within a more isolated environment.\n\nLet me know if you need further information.",
    "creation_ts": "2021-11-10T10:39:16Z",
    "fixes": [
      65677
    ],
    "comments": [
      "The runtime where this was observed is (it's a dockerized Spring Boot 2.5.6 application):\n\njava -version\nPicked up JAVA_TOOL_OPTIONS: -XX:MinRAMPercentage=75 -XX:MaxRAMPercentage=75 -XX:-OmitStackTraceInFastThrow -XX:+ExitOnOutOfMemoryError\nopenjdk version \"11.0.13\" 2021-10-19 LTS\nOpenJDK Runtime Environment 21.10-(Zulu-11.52+13-linux_x64)-Microsoft-Azure-restricted (build 11.0.13+8-LTS)\nOpenJDK 64-Bit Server VM 21.10-(Zulu-11.52+13-linux_x64)-Microsoft-Azure-restricted (build 11.0.13+8-LTS, mixed mode)",
      "Thanks for the report and the analysis. It is rather odd that the position gets set to zero but fixing it is relatively simple.\n\nFixed in:\n- 10.1.x for 10.1.0-M8 onwards\n- 10.0.x for 10.0.14 onwards\n- 9.0.x for 9.0.56 onwards\n- 8.5.x for 8.5.74 onwards"
    ]
  },
  {
    "id": 66084,
    "summary": "bytesWritten in writeBytes() miscalculation for OutputBuffer",
    "description": "Created attachment 38301\nleft is source code, right is test code\n\n\u5728org.apache.catalina.connector.OutputBuffer\u7c7b\u7684private void writeBytes(ByteBuffer from) \u65b9\u6cd5\u4e2d\uff0c\u4e0d\u80fd\u6b63\u786e\u7684\u5c06\u53ef\u5199\u5165\u5b57\u8282\u957f\u5ea6\u8ba1\u5165\u5199\u5165\u5b57\u8282\u6570\u636e\u603b\u91cf\u4e2d\u3002\n\nIn org. Apache. Catalina. Connector. OutputBuffer class private void writeBytes (ByteBuffer from) method, is unable to correctly write bytes will be recorded in writing bytes of data amount. -By translation software",
    "creation_ts": "2022-05-24T01:51:14Z",
    "fixes": [
      66084
    ],
    "comments": [
      "I've raised a pr based on your feedback, https://github.com/apache/tomcat/pull/516",
      "Fixed in:\n- 10.1.x for 10.1.0-M16 onwards\n- 10.0.x for 10.0.22 onwards\n- 9.0.x for 9.0.64 onwards\n- 8.5.x for 8.5.80 onwards"
    ]
  },
  {
    "id": 61086,
    "summary": "Some clients hang when HTTP responses give status 205 Reset Content",
    "description": "Created attachment 34992\nExemple standalone servlet to give out HTTP 205 response\n\nWhen a servlet running on Tomcat sends a response over HTTP with status 205 Reset Content, some clients hang with this response and just wait for it to \"complete\" after Tomcat considers it fully done.\n\nSo far I've identified two clients:\n- command line program curl, version 7.52.1,\n- Jersey client, version 1.19.1.\n\nUsing Tomcat 8.5.15 (latest release), but the issue was here for as long as I went back and it seems still here in Tomcat 9.\n\nDebugging the HTTP communication shows it has to do with the fact that the response has no body (which is correct, as mandated by RFC for status 205), and no indication of content length to explicitly say that there is no body. That last part is incorrect behavior according to RFC 7231 section 6.3.6:\n\n   \" Since the 205 status code implies that no additional content will be provided, a server MUST NOT generate a payload in a 205 response.  In other words, a server MUST do one of the following for a 205 response: a) indicate a zero-length body for the response by including a Content-Length header field with a value of 0; b) indicate a zero-length payload for the response by including a Transfer-Encoding header field with a value of chunked and a message body consisting of a single chunk of zero-length; or, c) close the connection immediately after sending the blank line terminating the header section. \"\n\nIt seems the HTTP clients I've identified, do rely on this requirement stated by RFC. Testing with servers that do add a Content-Length: 0 header or a Transfer-encoding chunked with a zero-length chunk with a status 205, these clients behave as expected. Also note, that Tomcat will typically eventually reach its keep-alive timeout and close the connection. Which is actually a valid way to end the response, and these clients do accept it when they don't reach their own timeouts. It's just the response takes by default 20 seconds to be finished, and is done with closing a perfectly re-usable connection.\n\nSteps to reproduce:\n\n (1) Have a clean Tomcat install version 8.5.15\n\n (2) Deploy on it a root webapp that responds to requests with\n     HTTP status 205.\n\n     You can use the standalone servlet class I put in attachment.\n     As can be seen, it responds to all requests with status 205,\n     and it adds a custom header just to be sure the response comes\n     from this servlet.\n\n (3) Make an HTTP request to it with curl.\n\n     Response looks like:\n\n$ curl -v http://localhost:8080\n* STATE: INIT => CONNECT handle 0x6000578f0; line 1413 (connection #-5000)\n* Rebuilt URL to: http://localhost:8080/\n* Added connection 0. The cache now contains 1 members\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* STATE: CONNECT => WAITCONNECT handle 0x6000578f0; line 1466 (connection #0)\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n* STATE: WAITCONNECT => SENDPROTOCONNECT handle 0x6000578f0; line 1583 (connection #0)\n* Marked for [keep alive]: HTTP default\n* STATE: SENDPROTOCONNECT => DO handle 0x6000578f0; line 1601 (connection #0)\n> GET / HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.52.1\n> Accept: */*\n>\n* STATE: DO => DO_DONE handle 0x6000578f0; line 1680 (connection #0)\n* STATE: DO_DONE => WAITPERFORM handle 0x6000578f0; line 1807 (connection #0)\n* STATE: WAITPERFORM => PERFORM handle 0x6000578f0; line 1817 (connection #0)\n* HTTP 1.1 or later with persistent connection, pipelining supported\n< HTTP/1.1 205\n< x-mmar-servletname: return205\n< Date: Thu, 11 May 2017 15:43:26 GMT\n* no chunk, no close, no size. Assume close to signal end\n* Marked for [closure]: HTTP: No end-of-message indicator\n<\n* STATE: PERFORM => DONE handle 0x6000578f0; line 1981 (connection #0)\n* multi_done\n* Curl_http_done: called premature == 0\n* Closing connection 0\n* The cache now contains 0 members\n\n     curl hangs for a while after \"Marked for [closure]: HTTP: No end-of-message indicator\".\n     Then after 20 seconds Tomcat reaches connection\n     keep-alive timeout, closes the connection and curl\n     accepts it as a valid way to finish the response.\n\nProposed (naive) patch:\n\nI have located the cause for this behavior, in class\norg.apache.coyote.http11.Http11Processor\nin line 1144.\nStatus 205 is treated the same way as 204 and 304,\nthat is to say no body as mandated by RFC,\nbut also no content length information.\n\nThe naive patch attached just removes 205 from those,\nwhich solves the issue with the problematic clients.\nHowever it makes it possible to add a body to a\n205 response, and it becomes the webapp's author's\nresponsibility to not do that.\n\nAnother, possibly better, approach, could be to\nhave a special case for 205 only, where it\nwould ignore any attempt to put a content,\nbut it would add the header Content-Length: 0.",
    "creation_ts": "2017-05-11T20:29:50Z",
    "fixes": [
      61086
    ],
    "comments": [
      "Created attachment 34993\nNaive patch to remove 205 from the status without content",
      "Thanks for the report.\n\nThis has been fixed by explicitly setting content length to zero for 205 responses.\n\nThis has been fixed in:\n- 9.0.x for 9.0.0.M22 onwards\n- 8.5.x for 8.5.16 onwards\n- 8.0.x for 8.0.45 onwards\n- 7.0.x for 7.0.79 onwards",
      "Still reproducable on 8.5.16-19.\n\norg.apache.coyote.http11.Http11Processor\n...\n1129 entityBody = false;\n1130 contentDelimitation = true;\n1131 if (statusCode == 205) {\n1132    // RFC 7231 requires the server to explicitly signal an empty\n1133    // response in this case\n1134    response.setContentLength(0);\n1135 }\n...\n1166 if (!entityBody) {\n1167    response.setContentLength(-1);\n1168 }\n \nExplicitly setting contentLength(0) in 1134 overrides by 1167, so response doesn't contain Content-Length header.",
      "Created attachment 35175\nPatch 0-length content for 205 status",
      "Hi,\n\n(In reply to Alexandr Saperov from comment #4)\n> Created attachment 35175 [details]\n> Patch 0-length content for 205 status\n\nWould you mind to add a test case also?\n\nThanks,\nVioleta",
      "Created attachment 35179\nstandalone application with embedded tomcat\n\nBuilding standalone application with embedded tomcat:\nmvn clean package\n\nrunning application:\njava -jar target/tomcat-61086-1.0-SNAPSHOT.jar\n\nMaking request with curl:\ncurl -v \"localhost:8080/\"\n\ncurl hangs for 1 minute (default timeout)",
      "Hi,\n\nThanks for the patch and the test - see r1803616.\n\nThis has been fixed in:\n- 9.0.x for 9.0.0.M26 onwards\n- 8.5.x for 8.5.20 onwards\n- 8.0.x for 8.0.46 onwards\n- 7.0.x for 7.0.80 onwards\n\nRegards,\nVioleta"
    ]
  },
  {
    "id": 65770,
    "summary": "Make keys reload automatically",
    "description": "Functionality like in\nhttps://github.com/schnatterer/tomcat-reloading-connector\nwould be a great help for those who use APR and Letsencrypt\n\nIt should presumably be an optional feature enabled by an attribute.",
    "creation_ts": "2021-12-28T08:21:39Z",
    "fixes": [
      65770
    ],
    "comments": [
      "I'm not sure it is a very good idea to use an automagical reload here. There is functionality to trigger a reload of the SSL host configs using JMX, this is more predictable. Is it not a good solution for you ?\n\nIf you still want this, then you can write a custom Server listener, that uses the Tomcat background process feature (this avoids having a dedicated thread) to monitor the resources you want to check, and that would call the reload hook (either normally or through JMX).",
      "Since administrating SSL certificates is a major PITA, I'm looking for a built-in solution that is compatible with ACME.\n\nFor my current use I will use: https://github.com/schnatterer/tomcat-reloading-connector.\n\nIf there are other ways to achieve this functionality without having OS-specific scripts, that would be fine as well.\n\nThe most popular solution seems to put another Web server in front of Tomcat.  Although certainly doable, this adds more complexity.",
      "I think there is an argument for providing a listener to do this as part of the Tomcat distribution. Those users that need it can then enable it.",
      "Stupid question: Why is it not possible to use the background process to detect mtime change of cert/private key and initiate a connector reload? This would be, of course, off by default.",
      "(In reply to Michael Osipov from comment #4)\n> Why is it not possible to use the background process to\n> detect mtime change of cert/private key and initiate a connector reload?\n\nIt is possible. It's best done using a Listener (or maybe a Valve?) with a background process.\n\nAnother option would be to use Romain Manni-Bucau's complete ACME component within Tomcat. It handles the whole ACME process, including reloading the connector as necessary.\n\nThe OP recommends using a package that is limited (APR only), fragile (custom non-daemon watcher thread, suspicious call behavior, and (IMHO) unnecessary.",
      "> The OP recommends using a package that is limited (APR only), fragile\n> (custom non-daemon watcher thread, suspicious call behavior, and (IMHO)\n> unnecessary.\n\nI'm merely proposing adding this kind of functionality.  I'm not an expert on Tomcat internals so I have no suggestion on how :)\n\n> Another option would be to use Romain Manni-Bucau's complete ACME component\n> within Tomcat. It handles the whole ACME process, including reloading the\n> connector as necessary.\n\nAlthough I was unaware of Romain's ACME stuff, I'm a little bit worried about scoping key reload exclusively to ACME.  In addition there are several external ACME packages like https://certbot.eff.org/ which are designed to work with arbitrary Web servers.  I'm currently using certbot and the mentioned custom APR connector.",
      "I'd also say that any form of automatic reloading (e.g. via fnotify on respectively periodic reloading of the cert/key files) is a bad idea.\nIt may e.g just happen at the time where only one of the two has already been replaced.\n\nInstead, I've asked in bug #66526 for a way to *only* reload key/certificate files - not any other configuration.\n\nSuch a feature should be easily usable with e.g. certbot and friends.",
      "I've been discussing this with the users recently and came up with the following approach.\n\n- Lifecycle listener that ships with Tomcat\n- Every X minutes (driven by background process but customisable so checks don't happen every time the background process runs)\n- Checks expiry time of each cert.\n- For each cert with less than Y days reload TLS config\n- If cert still has less than Y days remaining, log a warning\n\nThis listener would be disabled by default but available as part of the standard Tomcat distribution.",
      "(In reply to Mark Thomas from comment #8)\n> I've been discussing this with the users recently and came up with the\n> following approach.\n> \n> - Lifecycle listener that ships with Tomcat\n> - Every X minutes (driven by background process but customisable so checks\n> don't happen every time the background process runs)\n> - Checks expiry time of each cert.\n> - For each cert with less than Y days reload TLS config\n\nWhy have this \"must be less than Y days-to-expiration\" predicate? Why not just always-reload if e.g. the source timestamp has changed? There are many reasons to swap-out certificates that are not expiring.\n\nWe probably should make sure the file is at least X ms old to prevent trying to reload a file that it in the process of being re-written.\n\n> - If cert still has less than Y days remaining, log a warning\n\nI think this will fill the logs.",
      "Not every key/cert is defined by a file.\n\nAt least one cloud provider (Azure) has a JCA provider that enables Java apps to access keys in the cloud provided vault without any reference to a file on the file system. Support for certificateKeystoreFile to accept \"\" or \"NONE\" was implemented for hardware keystores. Without access to a file, a way to determine when to trigger the reload was required. Given this listener is intended for systems that have automated key updates, X days before current key expiry was a simple trigger that worked for all the scenarios. Happy to consider alternatives if someone has a better idea.\n\nThe logging was intended to be annoying. If you have a system that is meant to automatically updates your TLS keys then a noisy log message when that system fails seems reasonable to me. Thinking about it, you will want a log message when TLS reloading is triggered so there is going to be a log message anyway. There is probably some fine tuning to do once the first draft of this is implemented.",
      "(In reply to Mark Thomas from comment #8)\n> I've been discussing this with the users recently and came up with the\n> following approach.\n> \n> - Lifecycle listener that ships with Tomcat\n> - Every X minutes (driven by background process but customisable so checks\n> don't happen every time the background process runs)\n> - Checks expiry time of each cert.\n> - For each cert with less than Y days reload TLS config\n> - If cert still has less than Y days remaining, log a warning\n> \n> This listener would be disabled by default but available as part of the\n> standard Tomcat distribution.\n\nGood feature.",
      "(In reply to Mark Thomas from comment #8)\n> I've been discussing this with the users recently and came up with the\n> following approach.\n> \n> - Lifecycle listener that ships with Tomcat\n> - Every X minutes (driven by background process but customisable so checks\n> don't happen every time the background process runs)\n> - Checks expiry time of each cert.\n> - For each cert with less than Y days reload TLS config\n> - If cert still has less than Y days remaining, log a warning\n> \n> This listener would be disabled by default but available as part of the\n> standard Tomcat distribution.\n\nMaybe this listener should receive a reload interface will will decide whether the file needs to be reloaded or not? We can provide a default impl, but others can implement their logic?!",
      "(In reply to Michael Osipov from comment #12)\n> Maybe this listener should receive a reload interface will will decide\n> whether the file needs to be reloaded or not? We can provide a default impl,\n> but others can implement their logic?!\n\nThere's already a JMX command for reload though.",
      "Fixed in:\n- 11.0.x for 11.0.0-M12 onwards\n- 10.1.x for 10.1.14 onwards\n-  9.0.x for  9.0.81 onwards\n-  8.5.x for  8.5.94 onwards"
    ]
  },
  {
    "id": 42753,
    "summary": "Race condition when using available() or reading in CometProcessor.event()",
    "description": "Tomcat version: 6.0.13 (no 6.0.13 available in the version field)\n\nWhen trying to process data in CometProcessor.event() either during the BEGIN\nevent or during the READ event, it is impossible to guarantee that all data has\nbeen read before returning (since new data may arrive between the last statement\nbefore the return, and the return statement itself). However, the\nCoyoteProcessor does this check:\n\n } else if (!error && read && request.getAvailable()) {\n    // If this was a read and not all bytes have been read, or if no data\n    // was read from the connector, then it is an error\n    error = true;\n    log.error(sm.getString(\"coyoteAdapter.read\"));\n } \n\ncausing a severe error and the Comet request to break when this race condition\nmanifests itself.\n\nI am using the following code according to the aio.html description to read data\nin my comet event handler:\n\n  while (request.getInputStream().available() > 0) {\n     // read some data\n  }\n  // ***** NO MORE DATA AVAILABLE\n  return;\n\nAnd I am experiencing the error as described in certain conditions (rapid\narrival of fragmented data):\n\nSEVERE: The servlet did not read all available bytes during the processing of\nthe read event",
    "creation_ts": "2007-06-27T05:21:53Z",
    "fixes": [
      42753
    ],
    "comments": [
      "available() does not make any socket access to see if bytes have arrived, so the\nscenario you describe cannot happen (if available returns 0, it will continue\nreturning 0 until the next read event). If the message you saw is logged,\nCometAdapter.event will return false, which will lead to closing the connection,\nnot causing a loop.\n\nMy only theory is that you're doing asynchronous reads, which is not allowed,\nand you'll need to look into this further.\n\nWhat does \"(no 6.0.13 available in the version field)\" mean ?",
      "I have very explicit logging and I'm 100% certain that I'm not doing any async\nreads. In fact, from the log I sent to the user list before reporting this as a\nbug you can see that everything is happening in 1 thread, namely http-8080-exec-4:\n\n2007-06-26 14:37:08,427 DEBUG [http-8080-exec-4]\ncom.sebster.myservlet.TomcatCometServlet - BEGIN event for request\norg.apache.catalina.connector.RequestFacade@d47c99\n2007-06-26 14:37:08,427 DEBUG [http-8080-exec-4]\ncom.sebster.myservlet.TomcatCometServlet - 127.0.0.1:60578 POST /mycometservlet\n2007-06-26 14:37:08,432 DEBUG [http-8080-exec-4]\ncom.sebster.myservlet.TomcatCometServlet -\n[24224039-a37e-40d0-a076-89d1df363390] read loop in BEGIN event, input stream\ndata available: 1\n2007-06-26 14:37:08,438 DEBUG [http-8080-exec-4]\ncom.sebster.myservlet.TomcatCometServlet -\n[24224039-a37e-40d0-a076-89d1df363390] read loop done, input stream data\navailable: 0\n2007-06-26 2:37:08.MD org.apache.catalina.connector.CoyoteAdapter event\nSEVERE: The servlet did not read all available bytes during the processing of\nthe read event\n\nNote that I'm not implying that available() does a socket access; what I saw was\nthat when the loop I described in the original post ended the condition\n\"available() == 0\" was true, and when it got to CatalinaAdapter the condition\nRequest.getAvailable() was true.\n\nFuthermore, I really am seeing the loop without the connection being closed,\nboth on the windows platform and on the Linux platform. I'm happy to help debug\nthis further, but I'm not making it up: I have a breakpoint in my\nCometProcessor.event() method, I see the Poller thread spin like crazy, and when\nI set a break point in the Poller the CPU load goes away. I can step through it\nand see that the connection stays open, it sets the event type to END on the\ncomet event, but it never reaches my CometProcessor.event() method.\n\nFinally, what I mean with \"no 6.0.13 available in the version field\" is the\ndropdown box in which to mark the Tomcat version in the bugzilla bug form. It\ngoes up to and including 6.0.11.\n\nRegards,\nSebastiaan",
      "Since you're apparently not willing to write things that make sense, I will\nignore your report.",
      "(In reply to comment #3)\n> Since you're apparently not willing to write things that make sense, I will\n> ignore your report.\n\nI am getting really exasperated by your replies. You give me no hint at what it\nis you want or what you think is not making sense. I will test your theory more\nby writing a wrapper around the input stream to log the thread of every read\nthat happens just to make sure tomorrow.\n\nIn either case, after I got the error the Poller went into a busy loop. I'm not\nsmoking pot and I saw what I saw. Ok, maybe there's a bug somewhere in my code\nand I'm doing something wrong, I certainly don't want to exclude that\npossibility. But I saw the Poller go into an infinite loop (not caused by the\nNIO bug I was talking about previously (which is Linux only)). It did NOT close\nthe channel. It did NOT call my event method with a READ, ERROR or END event\n(which I know because I have a log.debug on enter, AND a break point set). This\nhappened directly AFTER I got the SEVERE log message. I got this on Windows and\nLinux. Note that I'm not theorizing now, these are the raw observations.",
      "If you follow the code logic, if the error happens, where available() returns >0\nafter a READ has been invoked, the connection is never marked as a comet, so you\nwill not get the ERROR/END events invoked. so the connection goes into the\npoller for the next request.\nCould you see if you can work up a reproducible scenario, and we can take it\nfrom there.",
      "(In reply to comment #5)\n> If you follow the code logic, if the error happens, where available() returns >0\n> after a READ has been invoked, the connection is never marked as a comet, so you\n> will not get the ERROR/END events invoked. so the connection goes into the\n> poller for the next request.\n> Could you see if you can work up a reproducible scenario, and we can take it\n> from there.\n\nWhen I look in the code I see the following:\n\n                if (response.isClosed() || !request.isComet()) {\n                    res.action(ActionCode.ACTION_COMET_END, null);\n                } else if (!error && read && request.getAvailable()) {\n                    // If this was a read and not all bytes have been read, or\nif no data\n                    // was read from the connector, then it is an error\n                    error = true;\n                    log.error(sm.getString(\"coyoteAdapter.read\"));\n                }\n                return (!error);\n\nSo when you get the error, the condition response.isClosed() ||\n!request.isComet() must evaluate to false, which means that !response.isClosed()\n&& request.isComet(). So for me to get the error it seems the request must\nalready be marked as a comet request.\n\nI am not able to give you a small test case. The problem is that I have two\ndifferent products that start an embedded tomcat using exactly the same class,\nand in one it consistently works (no errors whatsoever), and in the other it\nconsistently fails. I have not seen this issue before (and I have already done a\nlot of testing in different situations), and I have no idea what the\nprecondition is for this issue to manifest itself.\n\nHowever, I added extra debugging information, and I did find something strange.\nI do the following logging FIRST thing in my Comet processor and I wrapped the\ninput stream to log which thread does the reading:\n\n  final EventType eventType = event.getEventType();\n  if (Debug.ENABLED && logger.isDebugEnabled()) {\n    try {\n      final Field field = request.getClass().getDeclaredField(\"request\");\n//$NON-NLS-1$\n      field.setAccessible(true);\n      final Request internalRequest = (Request) field.get(request);\n      logger.debug(\"{} event for request facade {}, request {}\", new Object[] {\neventType, request, internalRequest }); //$NON-NLS-1$\n    } catch (final Exception e) {\n      logger.debug(\"{} event for request facade {}\", eventType, request);\n//$NON-NLS-1$\n      logger.debug(\"failed to get request\", e); //$NON-NLS-1$\n    }\n  }\n\nI set a breakpoint in the CoyoteAdapter where it gives the SEVERE error, looked\nat the id of the request object, and checked my log what events I got for that\nobject.\n\nMy results where as follows:\n\n2007-06-28 11:16:00,021 DEBUG [http-8080-exec-4]\ncom.sebster.myservlet.MyCometServlet - BEGIN event for request facade\norg.apache.catalina.connector.RequestFacade@1dc696e, request\norg.apache.catalina.connector.Request@18dbef1\n\nThis was the ONLY line in the log with Request@18dbef1. All the reads in this\nBEGIN event happen on the http-8080-exec-4 thread. After returning from the read\n(due to available() == 0), it immediately stops in my breakpoint in\nCoyoteAdapter to log the SEVERE error. Note that I first set the break point to\nfind the id of the Request object to look for in the log.\n\nThe strange thing is, that the breakpoint happens in the http-8080-exec-5\nthread. The comet field in the Request@1dc696e object is set to true, and\nrequest.getAvailable() also returns true.\n\nThese are my observations so far. Note that I am no expert on Tomcat internals,\nbut I am very willing to spend time on this issue to resolve it, so any tips,\nsuggestions, questions, or assignments :-) are welcome!\n\nTo summarize:\n1) I get a BEGIN event for Request@1dc696e in http-8080-exec-4\n2) I read until available() == 0 in http-8080-exec-4\n3) I return from the event() method in http-8080-exec-4\n4) Tomcat logs a SEVERE error stating that I have not read all data\n     * The request object is Request@1dc696e\n     * request.isComet() == true\n     * request.getAvailable() == true\n     * the thread is http-8080-exec-5\n     * at this point there are zero log lines for thread http-8080-exec-5\n\nRegards,\nSebastiaan",
      "I did some additional debugging on the Poller loop that occurs after the SEVERE\nerror. This is what happens:\n\n1) the CoyoteAdapter.event() method gets called.\n2) request.read() returns false\n3) the condition status == SocketStatus.STOP evaluates to true\n4) the following statements are executed\n    request.getEvent().setEventType(CometEvent.EventType.END);\n    request.getEvent().setEventSubType(CometEvent.EventSubType.SERVER_SHUTDOWN);\n5) in the following statement getFirst() returns the \"basic\" field, a\nStandardEngineValve:\n    connector.getContainer().getPipeline().getFirst().event(request, response,\nrequest.getEvent());\n6) my CometProcessor.event() method is NOT called\n7) error = false, and the event() method returns true\n\nThis loop repeats ad infinitum, and consumes 100% CPU. Note that no code of my\nown is called in this sequence.\n\nRegards,\nSebastiaan",
      "I just wrote a simple test client that doesn't read the contents and I\nexperienced no loop. END nor ERROR got called, so there is a problem here, the\ncontainer should call one of those methods.\nare you able to test your solution against the latest\ntc6.0.x branch as well as the trunk branch?",
      "(In reply to comment #8)\n> I just wrote a simple test client that doesn't read the contents and I\n> experienced no loop. END nor ERROR got called, so there is a problem here, the\n> container should call one of those methods.\n> are you able to test your solution against the latest\n> tc6.0.x branch as well as the trunk branch?\n\nA patch for the END/ERROR never being called has been submitted to both 6.0.x\nand trunk. This should at least give you a chance to cleanup, \n\nyour original problem of available()==0 but there yet being data, causing an\ninfinite loop is to me non reproducible.\n\nI'll wait for your feedback before marking this fixed.",
      "(In reply to comment #9)\n\n> A patch for the END/ERROR never being called has been submitted to both 6.0.x\n> and trunk. This should at least give you a chance to cleanup, \n\nThanks :-), I will test this ASAP.\n\n> your original problem of available()==0 but there yet being data, causing an\n> infinite loop is to me non reproducible.\n\nThe main clue (as far as I can tell) of something going wrong is the fact that\nthe BEGIN event + read loop is in 1 thread, and the error in happens another\n(see the summary of comment 6). Do you not agree that this should not happen? If\nyou agree that this is wrong (whatever the cause, Tomcat or my code), I can try\nand debug what causes this to happen.\n\nRegards,\nSebastiaan",
      "Once the socket goes back to the poller, and the poller dispatches it again,\nthen that can be on a different thread, as tomcat uses a thread pool, so there\nis no guarantee what thread the poller dispatches too",
      "(In reply to comment #11)\n> Once the socket goes back to the poller, and the poller dispatches it again,\n> then that can be on a different thread, as tomcat uses a thread pool, so there\n> is no guarantee what thread the poller dispatches too\n\nYes I understand that, but for the specific Request object instance I get only 1\ncomet event, in thread http-8080-exec-4 and the check of Request.getAvailable()\nto see if I read everything happens in http-8080-exec-5 (with no other comet\nevents in between - I ONLY get the BEGIN event for this Request instance). Is\nthis not strange? Should the check not be performed in the same thread before\nthe socket goes back to the poller?",
      "not really, getAvailable() is only called if read() returned true.\nin your case, the following might happen\n1. HTTP request comes in, no body\n2. You get BEGIN event, no additional data on the socket\n3. read() returns false, so you dont get an immediate READ event,",
      "I have found the cause of the problem.\n\nThe code place where it goes wrong is ApplicationFilterFactory line 126:\n\n            Request req = (Request) request;\n            if (Globals.IS_SECURITY_ENABLED) {\n                // Security: Do not recycle\n                filterChain = new ApplicationFilterChain();\n            } else {\n                filterChain = (ApplicationFilterChain) req.getFilterChain();\n                if (filterChain == null) {\n                    filterChain = new ApplicationFilterChain();\n                    req.setFilterChain(filterChain);\n                }\n            }\n            comet = req.isComet();\n\nWhen a security manager is installed the filter chain is not set on the request.\n\nOn subsequent Comet events, since the filter chain is null, the event is not\nhandled properly and the poller goes into a busy loop.",
      "Excellent, we will fix this!",
      "The \"issue\" in this bug report is that the user claims that the value of\n\"available()\" randomly changes. This minor glitch is unrelated.",
      "(In reply to comment #16)\n> The \"issue\" in this bug report is that the user claims that the value of\n> \"available()\" randomly changes. This minor glitch is unrelated.\n\nThe issue was that Tomcat reported that I had not read all available bytes even\nthough I did. The reason turns out to be because Tomcat was not calling the\nevent method of my comet processor, which entails that indeed bytes were not\nbeing read.\n\nMy original issue is thereby resolved and the summary of this bug turns out to\nbe wrong. It just looked to me like there was a race condition, since I had a\nbreakpoint in event() and it was not being called anymore, so I thought\n(erroneously) that it was complaining at the end of the BEGIN event.\n\nSo, as far as I'm concerned this issue can be closed. I don't care if you mark\nit INVALID if that's what you want because the summary turns out to be\nincorrect; that's fine by me.\n\nI'm happy that the issue is resolved and the bug is fixed. :-)",
      "(In reply to comment #15)\n> Excellent, we will fix this!\n\nThanks a lot. :-) Sorry for my initially incorrect analysis of the problem. I\nshould stick to reporting observed behavior instead of theorizing."
    ]
  },
  {
    "id": 69338,
    "summary": "Overhead in El processing (AST*)",
    "description": "Created attachment 39873\nSpeed test\n\nI received a report of a minor change to an EL expression causing a latency penalty and, upon investigation, discovered some ways to simplify the execution and reduce the effort required to evaluate EL.  I'm not convinced the report was accurate but these are nevertheless good changes.\n\nThe specific change was adding a branch to an if statement, along these lines:\n\n<c:if test=\"${not empty myNewAttribute\n                && existingClause1\n                && existingClause2\n                && existingClause3\n                && existingClause4}\">\n\n              \n\nFirst - the expression \"${not empty myNewAttribute}\" is turned into five Node instances: AstCompositeExpression, AstDynamicExpression, AstNot, AstEmpty, and AstIdentifier. As noted previously, each call to getValue() on each node triggers a virtual method lookup, so is more expensive than it looks.  Three of the Nodes also rely on type coercion (AstCompositeExpression, AstNot, AstEmpty).  Small EL changes such as the report I received can increase this node depth and therefore noticeably increase the EL processing time.  Suggestion: create an AstNotEmpty node to handle the frequent case of ${not empty <whatever>}.  This will eliminate one Node and only attempt one Boolean coercion rather than two.\n\nSecond - the use of multiple \"&&\" clauses results in a series of nested AstAnd.  Each instance adds its own overhead and produces its own Boolean result... and each parent AstAnd coerces that Boolean into another Boolean.  A more-than-binary AstAnd would eliminate several layers of Nodes and the associated coercion.\n\nI've attached the usual standalone perf test, demonstrating a 25% deceleration when the extra statement is added.  This is linear and therefore expected... however the test is unusually memory sensitive (I run it with -Xmx3g) so there may be some kind of effect there.\n\nI expect these changes to reduce the processing time of any EL expression with 2+ \"&&\" clauses, as well as any expression using \"not empty\".",
    "creation_ts": "2024-09-24T16:58:49Z",
    "fixes": [
      69338
    ],
    "comments": [
      "Created attachment 39874\nSupport class for the speed test",
      "The parser that produces the node structure is generated using JJTree and JavaCC. The starting point (for 9.0.x) is this file:\n\nhttps://github.com/apache/tomcat/blob/9.0.x/java/org/apache/el/parser/ELParser.jjt\n\nWhat impact the proposed changes have on expression parse time vs expression processing time is TBD since any change is likely to impact the parse time for every expression as well as the evaluation time.\n\nWe'll need to do some performance tests to confirm the benefits of each change.",
      "I've been looking at the handling for multiple && and ||. The performance numbers are clear it is worth doing. There is no noticeable change for 2 operands and obvious improvements from 3 operands upwards. The more operands, the clearer the benefit. At 10 operands the new approach is roughly twice as fast.\n\nI need to do some more testing to make sure the changes to the parser are correct. I should have something to commit for this tomorrow.",
      "I'd be interested in how you solved this particular problem, Mark.\n\nHaving written a DSL for $work using AntLR, we have this \"problem\" as well, where a string of the same binary operators end up being nested inside one another. For performance-critical uses, we have e.g. a \"sum\" function that can be used for 1+2+3+4+5 and both \"and\" and \"or\" functions for the obvious boolean combinations. That seemed easier than trying to tweak the parser to convert 1+2+3+4+5 into sum(1,2,3,4,5) instead of 1+(2+(3+(4+5))).",
      "I've tweaked the parser for AND and OR so it looks for two or more operands rather than just two.",
      "Fixed in:\n- 11.0.x for 11.0.0 onwards\n- 10.1.x for 10.1.31 onwards\n-  9.0.x for  9.0.96 onwards",
      "Thank you for the quick turnaround!  FWIW, the report I received is holding up, but there's also some internal code in the area.  I'll open a new ticket for anything else I stumble upon.",
      "These changes reached production and behaved as expected - the following Ast combinations are eliminated:\n\n- AstNot -> AstEmpty\n- AstAnd -> AstAnd\n- AstOr -> AstOr\n\nOur application's EL-related work appears to have decreased around 20%, although that number's dirty because of multiple optimizations in the same release.\n\nAt any rate, this is good.  :)"
    ]
  }
]